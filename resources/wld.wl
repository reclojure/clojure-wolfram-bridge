{{"$Aborted", "$Aborted is a special symbol that is returned as the result \
from a calculation that has been aborted."}, {"$ActivationKey", "$ActivationK\
ey is a string that gives the activation key under which the Wolfram System \
is being run."}, {"$AllowDataUpdates", "$AllowDataUpdates controls whether \
the Wolfram System is allowed to automatically update certain types of \
content."}, {"$AllowExternalChannelFunctions", "$AllowExternalChannelFunction\
s specifies whether to allow interaction with channels that contain functions \
that might be executed in your session in response to events on the channel."}\
, {"$AllowInternet", "$AllowInternet controls whether the Wolfram System is \
allowed to access the internet."}, {"$AssertFunction", 
  "$AssertFunction specifies a function to apply to assertions that fail."}, 
 {"$Assumptions", "$Assumptions is the default setting for the Assumptions \
option used in such functions as Simplify, Refine, and Integrate."}, 
 {"$AudioDecoders", "$AudioDecoders gives the list of audio decoders \
available for each video container."}, {"$AudioEncoders", "$AudioEncoders \
gives the list of audio encoders available for each video container."}, 
 {"$AudioInputDevices", 
  "$AudioInputDevices gives the list of available audio input devices."}, 
 {"$AudioOutputDevices", 
  "$AudioOutputDevices gives the list of available audio output devices."}, 
 {"$BaseDirectory", "$BaseDirectory gives the base directory in which \
systemwide files to be loaded by the Wolfram System are conventionally \
placed."}, {"$BasePacletsDirectory", "$BasePacletsDirectory gives the base \
directory that the Wolfram System uses to find paclets that can be seen by \
all users on the system."}, {"$BatchInput", "$BatchInput is True if input in \
the current session is being fed directly to the Wolfram Language kernel in \
batch mode."}, {"$BatchOutput", "$BatchOutput is True if output in the \
current session is being sent in batch mode, suitable for reading by other \
programs."}, {"$BlockchainBase", "$BlockchainBase gives the name of the \
default blockchain to be used for blockchain computations."}, 
 {"$ByteOrdering", "$ByteOrdering gives the native ordering of bytes in \
binary data on your computer system."}, {"$CacheBaseDirectory", "$CacheBaseDi\
rectory is the directory on your local file system used for storing cache \
data."}, {"$Canceled", "$Canceled is a symbol returned when notebook input is \
canceled, for example from a dialog box."}, {"$ChannelBase", "$ChannelBase \
gives the base URL of the server to use for brokering channel \
communications."}, {"$CharacterEncoding", "$CharacterEncoding specifies the \
default raw character encoding to use for input and output functions."}, 
 {"$CharacterEncodings", "$CharacterEncodings gives the list of character \
encodings that can be used."}, {"$CloudAccountName", "$CloudAccountName gives \
the name assigned to the cloud account of a currently logged-in user or the \
user who owns a cloud object containing the code used for the current \
evaluation."}, {"$CloudBase", 
  "$CloudBase gives the base URI of the server to use for cloud operations."}\
, {"$CloudConnected", "$CloudConnected gives True if an authenticated \
connection to the Wolfram Cloud has been set up, and False otherwise."}, 
 {"$CloudCreditsAvailable", "$CloudCreditsAvailable gives the total number of \
cloud credits currently available in the cloud account being used."}, 
 {"$CloudEvaluation", "$CloudEvaluation gives True if the current evaluation \
is occurring in the cloud, and False otherwise."}, 
 {"$CloudExpressionBase", "$CloudExpressionBase gives the base URI used for \
storing cloud expressions."}, {"$CloudObjectNameFormat", "$CloudObjectNameFor\
mat is the default setting used for the CloudObjectNameFormat option when \
constructing a CloudObject."}, {"$CloudObjectURLType", "$CloudObjectURLType \
is the default setting for the CloudObjectURLType option when constructing a \
CloudObject."}, {"$CloudRootDirectory", "$CloudRootDirectory is the cloud \
object corresponding to the root directory for the file structure in which \
the current user's cloud objects are stored."}, 
 {"$CloudSymbolBase", "$CloudSymbolBase gives the base for storing the values \
of CloudSymbol objects."}, {"$CloudUserID", "$CloudUserID gives the cloud \
user ID of a currently logged-in user, or the user who owns a cloud object \
containing the code used for the current evaluation."}, 
 {"$CloudUserUUID", "$CloudUserUUID gives the cloud UUID of a currently \
logged-in user, or the user who owns a cloud object containing the code used \
for the current evaluation."}, {"$CloudVersion", 
  "$CloudVersion gives the version of the currently connected cloud server."}\
, {"$CommandLine", "$CommandLine is a list of strings giving the elements of \
the original operating system command line with which the current \
instantiation of the Wolfram Language was invoked."}, 
 {"$CompilationTarget", "$CompilationTarget gives the default value for the \
option CompilationTarget of Compile."}, {"$CompilerEnvironment", "$CompilerEn\
vironment is the collection of definitions typically used by FunctionCompile \
and related functions."}, {"$Context", 
  "$Context is a global variable that gives the current context."}, 
 {"$ContextPath", "$ContextPath is a global variable that gives a list of \
contexts to search, before $Context, in trying to find a symbol that has been \
entered."}, {"$ControlActiveSetting", "$ControlActiveSetting is a symbol \
whose value is True if it is evaluated while a control is active, or in \
certain other previewing situations."}, {"$CookieStore", "$CookieStore gives \
the location at which to store information on persistent cookies to be used \
by URLRead and related functions."}, {"$Cookies", "$Cookies is a global \
variable that contains a list of cookies to be used by functions such as \
URLExecute."}, {"$CreationDate", "$CreationDate gives the date at which the \
particular release of the Wolfram Language kernel you are running was \
created."}, {"$CryptographicEllipticCurveNames", "$CryptographicEllipticCurve\
Names gives a list of the elliptic curves supported for key generation and \
digital signatures."}, {"$CurrentLink", "$CurrentLink is the LinkObject \
representing the WSTP connection for an external program currently being \
installed or being called."}, {"$CurrentTask", "$CurrentTask gives the \
TaskObject[\[Ellipsis]] corresponding to the task in which it is being \
evaluated."}, {"$CurrentWebSession", "$CurrentWebSession gives the currently \
active web session used by WebExecute."}, {"$DataStructures", "$DataStructure\
s gives a list of the currently available data structure types for the \
CreateDataStructure function."}, {"$DateStringFormat", "$DateStringFormat \
gives the default format to use for date strings generated by DateString."}, 
 {"$DefaultAudioInputDevice", "$DefaultAudioInputDevice gives the name of the \
default audio input device attached to the computer."}, 
 {"$DefaultAudioOutputDevice", "$DefaultAudioOutputDevice gives the name of \
the default audio output device attached to the computer."}, 
 {"$DefaultFrontEnd", "$DefaultFrontEnd is a global symbol that can be \
queried for the factory-default front end option values."}, 
 {"$DefaultImagingDevice", "$DefaultImagingDevice gives the name of the \
default imaging device attached to the computer."}, 
 {"$DefaultKernels", "$DefaultKernels is the list of kernels that are \
configured for parallel computing."}, {"$DefaultLocalBase", "$DefaultLocalBas\
e gives the default base directory to use for local object storage."}, 
 {"$DefaultNetworkInterface", "$DefaultNetworkInterface gives the default \
network interface used on your machine."}, {"$DefaultProxyRules", "$DefaultPr\
oxyRules gives the proxy settings used by the Wolfram System when accessing \
the network. $DefaultProxyRules[\"\\!\\(\\*prop\"] = value sets the value of \
a proxy setting."}, {"$DefaultRemoteBatchSubmissionEnvironment", "$DefaultRem\
oteBatchSubmissionEnvironment gives the default environment to which remote \
batch jobs will be submitted."}, {"$DefaultRemoteKernel", "$DefaultRemoteKern\
el gives the RemoteKernelObject corresponding to the default remote kernel to \
be used by RemoteEvaluate."}, {"$DefaultSystemCredentialStore", 
  "$DefaultSystemCredentialStore gives the default credential store \
settings."}, {"$Display", "$Display gives a list of files and pipes to be \
used with the default $DisplayFunction."}, {"$DisplayFunction", "$DisplayFunc\
tion gives the default setting for the option DisplayFunction in graphics \
functions."}, {"$DistributedContexts", "$DistributedContexts is the default \
value of the DistributedContexts option of functions such as ParallelTable \
and ParallelMap."}, {"$DynamicEvaluation", "$DynamicEvaluation is a symbol \
whose value is True if it is evaluated as part of the evaluation of a \
Dynamic."}, {"$Echo", 
  "$Echo gives a list of files and pipes to which all input is echoed."}, 
 {"$EmbedCodeEnvironments", "$EmbedCodeEnvironments gives a list of \
environments currently supported by EmbedCode in your Wolfram Language \
session."}, {"$EmbeddableServices", "$EmbeddableServices gives a list of \
external embeddable services that can be accessed through EmbeddedService."}, 
 {"$Epilog", "$Epilog is a symbol whose value, if any, is evaluated when a \
dialog or a Wolfram System session is terminated."}, 
 {"$EvaluationCloudBase", "$EvaluationCloudBase gives the base URI of the \
cloud server on which the current evaluation is being done."}, 
 {"$EvaluationCloudObject", "$EvaluationCloudObject gives the cloud object \
containing the code currently being executed."}, 
 {"$EvaluationEnvironment", "$EvaluationEnvironment gives a string indicating \
the type of local or cloud environment in which the current Wolfram Language \
evaluation is being performed."}, {"$ExportFormats", "$ExportFormats gives a \
list of export formats currently supported in your Wolfram Language session."}\
, {"$ExternalIdentifierTypes", "$ExternalIdentifierTypes gives a list of \
types available to ExternalIdentifier."}, {"$ExternalStorageBase", "$External\
StorageBase gives the name of the default external storage service to be used \
for external storage operations."}, {"$Failed", "$Failed is a special symbol \
returned by certain functions when they cannot do what they were asked to \
do."}, {"$FontFamilies", "$FontFamilies gives the list of the font families \
available to the Wolfram System."}, {"$FrontEnd", "$FrontEnd is a global \
variable that specifies to what front end object, if any, the kernel is \
currently connected."}, {"$FrontEndSession", "$FrontEndSession is a global \
symbol that represents the current session of the front end from which the \
kernel is being run."}, {"$GeneratedAssetLocation", "$GeneratedAssetLocation \
gives the default setting for GeneratedAssetLocation."}, 
 {"$GeoLocation", "$GeoLocation is a settable global variable that specifies \
the default geodetic location to use."}, {"$GeoLocationCity", "$GeoLocationCi\
ty gives the city entity for the current setting for $GeoLocation."}, 
 {"$GeoLocationCountry", "$GeoLocationCountry gives the country entity for \
the current setting for $GeoLocation."}, {"$GeoLocationSource", "$GeoLocation\
Source is a string giving the source of the current geodetic location."}, 
 {"$HistoryLength", "$HistoryLength specifies the number of previous lines of \
input and output to keep in a Wolfram System session."}, 
 {"$HomeDirectory", "$HomeDirectory gives your \"home\" directory."}, 
 {"$IgnoreEOF", "$IgnoreEOF specifies whether the Wolfram System should \
terminate when it receives an end-of-file character as input."}, 
 {"$ImageFormattingWidth", "$ImageFormattingWidth gives the default target \
width at which to wrap when formatting objects."}, 
 {"$ImageResolution", "$ImageResolution gives the default image resolution to \
use when rasterizing to create images."}, {"$ImagingDevice", 
  "$ImagingDevice gives the name of the imaging device used to capture \
images."}, {"$ImagingDevices", 
  "$ImagingDevices gives a list of available imaging devices."}, 
 {"$ImportFormats", "$ImportFormats gives a list of import formats currently \
supported in your Wolfram Language session."}, 
 {"$IncomingMailSettings", "$IncomingMailSettings gives the default settings \
used by MailServerConnect to connect to an incoming mail server."}, 
 {"$InitialDirectory", "$InitialDirectory gives the initial directory when \
the current Wolfram System session was started."}, 
 {"$Initialization", "$Initialization is a symbol whose value, if any, is \
evaluated with ReleaseHold[$Initialization] at the start of a Wolfram \
Language session."}, {"$InitializationContexts", "$InitializationContexts is \
a symbol whose value, if any, specifies a list of packages to read with Needs \
at the start of a Wolfram Language session."}, 
 {"$Input", "$Input is a global variable whose value is the name of the \
stream from which input to the Wolfram Language is currently being sought."}, 
 {"$InputFileName", "$InputFileName is a global variable whose value is the \
absolute file name of the input file from which input to the Wolfram Language \
is currently being sought."}, {"$InputStreamMethods", "$InputStreamMethods \
gives the list of input stream methods that can be used."}, 
 {"$Inspector", "$Inspector is a global variable which gives a function to \
apply when the inspector is invoked from an interrupt menu."}, 
 {"$InstallationDirectory", "$InstallationDirectory gives the top-level \
directory in which your Wolfram System installation resides."}, 
 {"$InterpreterTypes", "$InterpreterTypes gives a list of the currently \
available types for the Interpreter function."}, 
 {"$IterationLimit", "$IterationLimit gives the maximum length of evaluation \
chain used in trying to evaluate any expression."}, 
 {"$KernelCount", "$KernelCount gives the number of subkernels available for \
parallel computations."}, {"$KernelID", 
  "$KernelID is a unique ID number assigned to each running parallel kernel."}\
, {"$Language", "$Language is a settable global variable that specifies the \
default language used by the Wolfram System."}, 
 {"$LibraryPath", "$LibraryPath gives the default list of directories to \
search in attempting to find a library."}, {"$LicenseExpirationDate", "$Licen\
seExpirationDate gives the expiration date for the license under which the \
Wolfram System is being run."}, {"$LicenseID", "$LicenseID is a string that \
gives the license ID under which the Wolfram System is being run."}, 
 {"$LicenseServer", "$LicenseServer is a string that gives the name of the \
license server that is currently authorizing the Wolfram System to be run."}, 
 {"$Line", "$Line is a global variable that specifies the number of the \
current input line."}, {"$Linked", 
  "$Linked is True if the Wolfram Language kernel is being run through WSTP."}\
, {"$LocalBase", 
  "$LocalBase gives the base directory to use for local object storage."}, 
 {"$LocalSymbolBase", "$LocalSymbolBase gives the base directory for storing \
values of LocalSymbol objects."}, {"$MachineAddresses", "$MachineAddresses \
gives a list of strings specifying the current IP addresses associated with \
the computer on which the Wolfram System is being run."}, 
 {"$MachineDomains", "$MachineDomains is a list of strings giving the names \
of the current network domains associated with the computer on which the \
Wolfram System is being run."}, {"$MachineEpsilon", "$MachineEpsilon gives \
the difference between 1.0 and the next-nearest number representable as a \
machine-precision number."}, {"$MachineID", "$MachineID is a string that \
gives, if possible, a unique identification code for the computer on which \
the Wolfram System is being run."}, {"$MachineName", "$MachineName is a \
string that gives the assigned name of the computer on which the Wolfram \
System is being run, if such a name is defined."}, 
 {"$MachinePrecision", "$MachinePrecision gives the number of decimal digits \
of precision used for machine-precision numbers."}, 
 {"$MachineType", "$MachineType is a string giving the general type of \
computer on which the Wolfram System is being run."}, 
 {"$MaxExtraPrecision", "$MaxExtraPrecision gives the maximum number of extra \
digits of precision to be used in functions such as N."}, 
 {"$MaxMachineNumber", "$MaxMachineNumber is the largest machine-precision \
number that can be used on a particular computer system."}, 
 {"$MaxNumber", "$MaxNumber gives the maximum arbitrary-precision number that \
can be represented on a particular computer system."}, 
 {"$MaxPiecewiseCases", "$MaxPiecewiseCases gives the maximum number of cases \
to allow in explicit Piecewise objects generated by expanding any single \
piecewise function."}, {"$MaxPrecision", "$MaxPrecision gives the maximum \
number of digits of precision to be allowed in arbitrary-precision numbers."}\
, {"$MaxRootDegree", "$MaxRootDegree specifies the maximum degree of \
polynomial to allow in Root objects."}, {"$MessageGroups", "$MessageGroups is \
the list of rules that gives named message groups used in functions like On \
and Quiet."}, {"$MessageList", "$MessageList is a global variable that gives \
a list of the names of messages generated during the evaluation of the \
current input line."}, {"$MessagePrePrint", "$MessagePrePrint is a global \
variable whose value, if set, is applied to expressions before they are \
included in the text of messages."}, {"$Messages", "$Messages gives the list \
of files and pipes to which message output is sent."}, 
 {"$MinMachineNumber", "$MinMachineNumber is the smallest positive \
machine-precision number that can be represented in normalized form on your \
computer system."}, {"$MinNumber", "$MinNumber gives the minimum positive \
arbitrary-precision number that can be represented on a particular computer \
system."}, {"$MinPrecision", "$MinPrecision gives the minimum number of \
digits of precision to be allowed in arbitrary-precision numbers."}, 
 {"$MobilePhone", "$MobilePhone gives the verified mobile phone number \
associated with the current user account."}, {"$ModuleNumber", "$ModuleNumber \
gives the current serial number to be used for local variables that are \
created."}, {"$NetworkConnected", "$NetworkConnected gives True if your \
computer has a network interface that is active and capable of sending and \
receiving IP traffic, and False otherwise."}, {"$NetworkInterfaces", "$Networ\
kInterfaces gives the list of network interfaces available on your machine."}\
, {"$NewMessage", "$NewMessage is a global variable that, if set, is applied \
to the symbol name and tag of messages that are requested but have not yet \
been defined."}, {"$NewSymbol", "$NewSymbol is a global variable which, if \
set, is applied to the name and context of each new symbol that the Wolfram \
Language creates."}, {"$NoValue", "$NoValue is a special value that can be \
assigned to an InitializationValue[\[Ellipsis]] object to indicate that the \
symbol referenced by the initialization value should be initialized with no \
value."}, {"$NotebookInlineStorageLimit", "$NotebookInlineStorageLimit \
specifies the maximum size in bytes of expressions that will be stored in \
displayed summary boxes, datasets and other compact outputs."}, 
 {"$Notebooks", "$Notebooks is True if the Wolfram System is being used with \
a notebook-based front end."}, {"$NumberMarks", "$NumberMarks gives the \
default value for the option NumberMarks, which specifies whether ` marks \
should be included in the input form representations of approximate numbers."}\
, {"$OperatingSystem", "$OperatingSystem is a string giving the type of \
operating system under which the Wolfram System is being run."}, 
 {"$Output", "$Output gives the list of files and pipes to which standard \
output from the Wolfram Language is sent."}, {"$OutputSizeLimit", "$OutputSiz\
eLimit specifies the maximum size in bytes of expressions that will \
automatically be output in their entirety in a Wolfram System notebook."}, 
 {"$OutputStreamMethods", "$OutputStreamMethods gives the list of output \
stream methods that can be used."}, {"$Packages", "$Packages gives a list of \
the contexts corresponding to all packages which have been loaded in your \
current Wolfram System session."}, {"$ParentLink", "$ParentLink is the WSTP \
LinkObject currently used for input and output by the Wolfram Language kernel \
in a particular session."}, {"$ParentProcessID", "$ParentProcessID gives the \
ID assigned to the process which invokes the Wolfram Language kernel by the \
operating system under which it is run."}, {"$PasswordFile", "$PasswordFile \
is a string giving the password file used when the kernel was started."}, 
 {"$Path", "$Path gives the default list of directories to search in \
attempting to find an external file."}, {"$PathnameSeparator", "$PathnameSepa\
rator is a string used as a separator when full file and directory names are \
constructed."}, {"$PerformanceGoal", "$PerformanceGoal gives the default \
setting for the option PerformanceGoal for graphics and other algorithmic \
functions."}, {"$Permissions", "$Permissions is the default setting used for \
the Permissions option when cloud objects are created."}, 
 {"$PersistenceBase", "$PersistenceBase gives the default persistence \
location at which to store new values assigned to PersistentSymbol objects."}\
, {"$PersistencePath", "$PersistencePath gives the default list of \
persistence locations at which to look for values assigned to \
PersistentSymbol objects."}, {"$PlotTheme", "$PlotTheme gives the default \
setting for the option PlotTheme for graphics functions."}, 
 {"$Post", "$Post is a global variable whose value, if set, is applied to \
every output expression."}, {"$Pre", "$Pre is a global variable whose value, \
if set, is applied to every input expression."}, 
 {"$PreInitialization", "$PreInitialization is a symbol whose value, if any, \
is evaluated with ReleaseHold[$PreInitialization] before any other \
initializations in a Wolfram Language session."}, 
 {"$PrePrint", "$PrePrint is a global variable whose value, if set, is \
applied to every expression before it is printed."}, 
 {"$PreRead", "$PreRead is a global variable whose value, if set, is applied \
to the text or box form of every input expression before it is fed to the \
Wolfram Language."}, {"$Printout3DPreviewer", "$Printout3DPreviewer gives the \
default setting for the option Printout3DPreviewer in 3D printing functions."}\
, {"$ProcessID", "$ProcessID gives the ID assigned to the Wolfram Language \
kernel process by the operating system under which it is run."}, 
 {"$ProcessorCount", "$ProcessorCount gives the number of processor cores \
available on the computer system on which the Wolfram System is being run."}, 
 {"$ProcessorType", "$ProcessorType is a string giving the architecture of \
the processor on which the Wolfram System is being run."}, 
 {"$ProgressReporting", "$ProgressReporting is a settable global variable \
that specifies the default progress reporting method."}, 
 {"$PublisherID", "$PublisherID gives the default ID used to submit resources \
for publication in the resource system."}, {"$RandomGeneratorState", "$Random\
GeneratorState gives a representation of the internal state of the default \
pseudorandom generator."}, {"$RecursionLimit", "$RecursionLimit gives the \
current limit on the number of levels of recursion that the Wolfram Language \
can use."}, {"$ReleaseNumber", "$ReleaseNumber is an integer which gives the \
current Wolfram Language kernel release number, and increases in successive \
releases."}, {"$RequesterAddress", "$RequesterAddress gives the IP address \
originating an HTTP request that initiated the current evaluation."}, 
 {"$RequesterWolframID", "$RequesterWolframID gives the Wolfram ID of an \
authenticated user requesting the current evaluation."}, 
 {"$RequesterWolframUUID", "$RequesterWolframUUID gives the Wolfram UUID of \
an authenticated user requesting the current evaluation."}, 
 {"$ResourceSystemBase", 
  "$ResourceSystemBase gives the base URI for the resource system."}, 
 {"$ResourceSystemPath", "$ResourceSystemPath gives the default list of \
locations at which to look for resource objects."}, 
 {"$RootDirectory", 
  "$RootDirectory gives the root directory of your file system."}, 
 {"$SSHAuthentication", "$SSHAuthentication specifies the default \
authentication options to use for SSH-related functions."}, 
 {"$ScriptCommandLine", "$ScriptCommandLine is a list of strings giving the \
elements of the command line with which the standalone Wolfram System script \
was invoked."}, {"$ScriptInputString", "$ScriptInputString represents input \
given on the standard input channel to the original operating system command \
with which the current instantiation of the Wolfram Language was invoked."}, 
 {"$ServiceCreditsAvailable", "$ServiceCreditsAvailable gives the available \
Service Credits in the user's account."}, {"$Services", "$Services gives a \
list of external services available through ServiceConnect."}, 
 {"$SessionID", "$SessionID is a number set up to be unique to a particular \
Wolfram System session."}, {"$SharedFunctions", "$SharedFunctions is the list \
of functions currently being shared among parallel kernels."}, 
 {"$SharedVariables", "$SharedVariables is the list of variables currently \
being shared among parallel kernels."}, {"$SoundDisplayFunction", "$SoundDisp\
layFunction gives the default setting for the option DisplayFunction in sound \
functions."}, {"$SourceLink", "$SourceLink specifies the default source to be \
used for deployed cloud objects."}, {"$SubtitleDecoders", "$SubtitleDecoders \
gives the list of subtitle decoders available for each video container."}, 
 {"$SubtitleEncoders", "$SubtitleEncoders gives the list of subtitle encoders \
available for each video container."}, {"$SynchronousEvaluation", "$Synchrono\
usEvaluation is a symbol whose value is True if it is evaluated as part of a \
synchronous evaluation."}, {"$SyntaxHandler", "$SyntaxHandler is a global \
variable that, if set, is applied to any input string that is found to \
contain a syntax error."}, {"$System", "$System is a string describing the \
type of computer system on which the Wolfram System is being run."}, 
 {"$SystemCharacterEncoding", "$SystemCharacterEncoding gives the default raw \
character encoding for the computer system on which the Wolfram System is \
being run."}, {"$SystemCredentialStore", 
  "$SystemCredentialStore gives the current credential store."}, 
 {"$SystemID", "$SystemID is a short string that identifies the type of \
computer system on which the Wolfram System is being run."}, 
 {"$SystemShell", "$SystemShell is a symbol that specifies the system shell \
for the OS that is currently being used."}, {"$SystemTimeZone", "$SystemTimeZ\
one gives the current time zone for the computer system on which the Wolfram \
System is being run."}, {"$SystemWordLength", "$SystemWordLength gives the \
effective number of bits in raw machine words on the computer system where \
the Wolfram System is running."}, {"$TargetSystems", "$TargetSystems gives \
the list of possible machine architectures for code generation."}, 
 {"$TemplatePath", "$TemplatePath gives the default list of directories to \
search in attempting to find a template file."}, 
 {"$TemporaryDirectory", "$TemporaryDirectory gives the main system directory \
for temporary files on your computer system."}, 
 {"$TestFileName", "$TestFileName gives the absolute file name of the \
currently executing test file."}, {"$TimeUnit", "$TimeUnit gives the minimum \
time interval in seconds recorded on your computer system."}, 
 {"$TimeZone", 
  "$TimeZone gives the current time zone to assume for dates and times."}, 
 {"$TimeZoneEntity", "$TimeZoneEntity gives the time zone Entity \
corresponding to the locale setting for your computer operating system."}, 
 {"$TimedOut", "$TimedOut is a special symbol returned by certain functions \
when an operation times out."}, {"$UnitSystem", 
  "$UnitSystem gives the unit system to assume for returned quantities."}, 
 {"$Urgent", "$Urgent gives the list of files and pipes to which urgent \
output from the Wolfram Language is sent."}, {"$UserAgentString", "$UserAgent\
String gives the user agent string from an HTTP request that initiated the \
current evaluation."}, {"$UserBaseDirectory", "$UserBaseDirectory gives the \
base directory in which user-specific files to be loaded by the Wolfram \
System are conventionally placed."}, {"$UserBasePacletsDirectory", "$UserBase\
PacletsDirectory gives the base directory that the Wolfram System uses to \
store user-specific installed paclets and paclet configuration data."}, 
 {"$UserDocumentsDirectory", 
  "$UserDocumentsDirectory gives your default \"documents\" directory."}, 
 {"$UserURLBase", "$UserURLBase gives the user identification element to be \
inserted in the URLs of cloud objects."}, {"$Username", "$Username gives the \
login name of the user who invoked the Wolfram Language kernel, as recorded \
by the operating system."}, {"$Version", "$Version is a string that gives the \
version of the Wolfram Language kernel you are running."}, 
 {"$VersionNumber", "$VersionNumber is a real number which gives the current \
Wolfram Language kernel version number, and increases in successive \
versions."}, {"$VideoDecoders", "$VideoDecoders gives the list of video \
decoders available for each video container."}, 
 {"$VideoEncoders", "$VideoEncoders gives the list of available video \
encoders available for each video container."}, 
 {"$VoiceStyles", 
  "$VoiceStyles gives the list of available voices for speech synthesis."}, 
 {"$WolframDocumentsDirectory", "$WolframDocumentsDirectory gives the Wolfram \
subdirectory of the user's \"documents\" directory."}, 
 {"$WolframID", "$WolframID gives the Wolfram ID of a currently logged-in \
user, or the user who owns a cloud object containing the code used for the \
current evaluation."}, {"$WolframUUID", "$WolframUUID gives the Wolfram UUID \
of a currently logged-in user, or the user who owns a cloud object containing \
the code used for the current evaluation."}, {"AASTriangle", "AASTriangle[\
\[Alpha], \[Beta], a] returns a filled triangle with angles \[Alpha] and \
\[Beta] and side length a, where a is adjacent to one angle only."}, 
 {"APIFunction", "APIFunction[{\"\\!\\(\\*name_1\"->type1, \
\"\\!\\(\\*name_2\"->type2, \[Ellipsis]}, fun] represents an API with \
parameters namei that evaluates the function fun whenever it is called. The \
function fun is applied to \[LeftAssociation]\"\\!\\(\\*name_1\"->val1, \
\"\\!\\(\\*name_2\"->val2, \[Ellipsis]\[RightAssociation], where the vali are \
the settings for the parameters, interpreted as being of types typei. \
APIFunction[{\"\\!\\(\\*name_1\"->type1->default1, \[Ellipsis]}, fun] takes \
the value of the parameter namei to be defaulti if it is not specified when \
the API is called. APIFunction[params, fun, fmt] specifies that the result \
from applying fun should be returned in format fmt. APIFunction[params, fun, \
{fmt, rform}] specifies that the result should be returned as a response of \
the form rform. APIFunction[params, fun, {fmt, rform, failfmt}] specifies \
that in the event of failure, the result should be returned in format \
failfmt."}, {"ARCHProcess", "ARCHProcess[\[Kappa], {\[Alpha]1, \[Ellipsis], \
\[Alpha]q}] represents an autoregressive conditionally heteroscedastic \
process of order q, driven by a standard white noise. ARCHProcess[\[Kappa], \
{\[Alpha]1, \[Ellipsis], \[Alpha]q}, init] represents an ARCH process with \
initial data init."}, {"ARIMAProcess", "ARIMAProcess[{a1, \[Ellipsis], ap}, \
d, {b1, \[Ellipsis], bq}, v] represents an autoregressive integrated \
moving-average process y(t) such that its d^th difference is a weakly \
stationary ARMAProcess[{a1, \[Ellipsis], ap}, {b1, \[Ellipsis], bq}, v]. \
ARIMAProcess[{a1, \[Ellipsis], ap}, d, {b1, \[Ellipsis], bq}, \
\[CapitalSigma]] represents a vector ARIMA process (y1(t), \[Ellipsis], \
yn(t)) such that its (d, \[Ellipsis], d)^th difference is a vector weakly \
stationary ARMAProcess. ARIMAProcess[{a1, \[Ellipsis], ap}, {d1, \[Ellipsis], \
dn}, {b1, \[Ellipsis], bq}, \[CapitalSigma]] represents a vector ARIMA \
process (y1(t), \[Ellipsis], yn(t)) such that its (d1, \[Ellipsis], dn)^th \
difference is a vector weakly stationary ARMAProcess. ARIMAProcess[{a1, \
\[Ellipsis], ap}, d, {b1, \[Ellipsis], bq}, v, init] represents an ARIMA \
process with initial data init. ARIMAProcess[c, \[Ellipsis]] represents an \
ARIMA process with a constant c."}, {"ARMAProcess", "ARMAProcess[{a1, \
\[Ellipsis], ap}, {b1, \[Ellipsis], bq}, v] represents a weakly stationary \
autoregressive moving-average process with AR coefficients ai, MA \
coefficients bj, and normal white noise variance v. ARMAProcess[{a1, \
\[Ellipsis], ap}, {b1, \[Ellipsis], bq}, \[CapitalSigma]] represents a weakly \
stationary vector ARMA process with coefficient matrices ai and bj and \
covariance matrix \[CapitalSigma]. ARMAProcess[{a1, \[Ellipsis], ap}, {b1, \
\[Ellipsis], bq}, v, init] represents an ARMA process with initial data init. \
ARMAProcess[c, \[Ellipsis]] represents an ARMA process with a constant c."}, 
 {"ARProcess", "ARProcess[{a1, \[Ellipsis], ap}, v] represents a weakly \
stationary autoregressive process of order p with normal white noise variance \
v. ARProcess[{a1, \[Ellipsis], ap}, \[CapitalSigma]] represents a weakly \
stationary vector AR process with multinormal white noise covariance matrix \
\[CapitalSigma]. ARProcess[{a1, \[Ellipsis], ap}, v, init] represents an AR \
process with initial data init. ARProcess[c, \[Ellipsis]] represents an AR \
process with a constant c."}, {"ASATriangle", "ASATriangle[\[Alpha], c, \
\[Beta]] returns a filled triangle with angles \[Alpha] and \[Beta] and side \
length c, and c is adjacent to both angles."}, 
 {"AbelianGroup", "AbelianGroup[{n1, n2, \[Ellipsis]}] represents the direct \
product of the cyclic groups of degrees n1, n2, \[Ellipsis]."}, 
 {"Abort", "Abort[] generates an interrupt to abort a computation."}, 
 {"AbortKernels", 
  "AbortKernels[] aborts evaluations running in all parallel subkernels."}, 
 {"AbortProtect", "AbortProtect[expr] evaluates expr, saving any aborts until \
the evaluation is complete."}, {"Above", "Above is a symbol that represents \
the region above an object for purposes of placement."}, 
 {"Abs", "Abs[z] gives the absolute value of the real or complex number z."}, 
 {"AbsArg", "AbsArg[z] gives the list {Abs[z], Arg[z]} of the number z."}, 
 {"AbsArgPlot", "AbsArgPlot[f, {x, xmin, xmax}] generates a plot of Abs[f] \
colored by Arg[f] as a function of x\[Element]\[DoubleStruckCapitalR] from \
xmin to xmax. AbsArgPlot[{f1, f2, \[Ellipsis]}, {x, xmin, xmax}] plots \
several functions. AbsArgPlot[{\[Ellipsis], w[fi], \[Ellipsis]}, \[Ellipsis]] \
plots fi with features defined by the symbolic wrapper w. \
AbsArgPlot[\[Ellipsis], {x}\[Element]reg] takes the variable x to be in the \
geometric region reg."}, {"AbsoluteCorrelation", "AbsoluteCorrelation[v1, v2] \
gives the absolute correlation between the vectors v1 and v2. \
AbsoluteCorrelation[m] gives the absolute correlation matrix for the matrix \
m. AbsoluteCorrelation[m1, m2] gives the absolute correlation matrix for the \
matrices m1 and m2. AbsoluteCorrelation[dist] gives the absolute correlation \
matrix for the multivariate symbolic distribution dist. \
AbsoluteCorrelation[dist, i, j] gives the (i, j)^th absolute correlation for \
the multivariate symbolic distribution dist."}, 
 {"AbsoluteCorrelationFunction", "AbsoluteCorrelationFunction[data, hspec] \
estimates the absolute correlation function at lags hspec from data. \
AbsoluteCorrelationFunction[proc, hspec] represents the absolute correlation \
function at lags hspec for the random process proc. \
AbsoluteCorrelationFunction[proc, s, t] represents the absolute correlation \
function at times s and t for the random process proc."}, 
 {"AbsoluteCurrentValue", "AbsoluteCurrentValue[item] gives the absolute \
current value of item at a location in the Wolfram System and interface. \
AbsoluteCurrentValue[{item, spec}] gives the absolute current value for the \
feature of item specified by spec. AbsoluteCurrentValue[obj, item] gives the \
absolute current value of item associated with the object obj."}, 
 {"AbsoluteDashing", "AbsoluteDashing[{d1, d2, \[Ellipsis]}] is a graphics \
directive which specifies that lines which follow are to be drawn dashed, \
with successive segments having absolute lengths d1, d2, \[Ellipsis] \
(repeated cyclically). AbsoluteDashing[d] is equivalent to \
AbsoluteDashing[{d, d}]. AbsoluteDashing[{d1, d2, \[Ellipsis]},offset] \
offsets the dashes by offset. AbsoluteDashing[{d1, d2, \
\[Ellipsis]},offset,capform] sets the CapForm for individual dashes to \
capform."}, {"AbsoluteFileName", "AbsoluteFileName[\"\\!\\(\\*name\"] gives \
the full absolute version of the name for a file in your filesystem."}, 
 {"AbsoluteOptions", "AbsoluteOptions[expr] gives the absolute settings of \
options specified in an expression such as a graphics object. \
AbsoluteOptions[expr, name] gives the absolute setting for the option name. \
AbsoluteOptions[expr, {name1, name2, \[Ellipsis]}] gives a list of the \
absolute settings for the options namei. AbsoluteOptions[object] gives the \
absolute settings for options associated with an external object such as a \
NotebookObject."}, {"AbsolutePointSize", "AbsolutePointSize[d] is a graphics \
directive which specifies that points which follow are to be shown if \
possible as circular regions with absolute diameter d."}, 
 {"AbsoluteThickness", "AbsoluteThickness[d] is a graphics directive which \
specifies that lines which follow are to be drawn with absolute thickness d."}\
, {"AbsoluteTime", "AbsoluteTime[] gives the total number of seconds since \
the beginning of January 1, 1900, in your time zone. AbsoluteTime[date] gives \
the absolute time specification corresponding to the given date \
specification."}, {"AbsoluteTiming", "AbsoluteTiming[expr] evaluates expr, \
returning a list of the absolute number of seconds in real time that have \
elapsed, together with the result obtained."}, 
 {"AcceptanceThreshold", "AcceptanceThreshold is an option that specifies the \
minimum threshold at which a result is considered acceptable."}, 
 {"AccountingForm", "AccountingForm[expr] prints with all numbers in expr \
given in standard accounting notation. AccountingForm[expr, n] prints with \
numbers given to n -digit precision."}, {"Accumulate", "Accumulate[list] \
gives a list of the successive accumulated totals of elements in list."}, 
 {"Accuracy", "Accuracy[x] gives the effective number of digits to the right \
of the decimal point in the number x."}, {"AccuracyGoal", "AccuracyGoal is an \
option for various numerical operations which specifies how many effective \
digits of accuracy should be sought in the final result."}, 
 {"AcousticAbsorbingValue", "AcousticAbsorbingValue[pred, vars, pars] \
represents a time or frequency domain absorbing boundary condition for PDEs \
with predicate pred indicating where it applies, with model variables vars \
and global parameters pars. AcousticAbsorbingValue[pred, vars, pars, lkeys] \
represents a time or frequency domain boundary condition with local \
parameters specified in pars[lkey]."}, {"AcousticImpedanceValue", "AcousticIm\
pedanceValue[pred, vars, pars] represents a time or frequency domain \
impedance boundary condition for PDEs with predicate pred indicating where it \
applies, with model variables vars and global parameters pars. \
AcousticImpedanceValue[pred, vars, pars, lkey] represents a time or frequency \
domain boundary condition with local parameters specified in pars[lkey]."}, 
 {"AcousticNormalVelocityValue", "AcousticNormalVelocityValue[pred, vars, \
pars] represents a time or frequency domain normal velocity boundary \
condition for PDEs with predicate pred indicating where it applies, with \
model variables vars and global parameters pars. \
AcousticNormalVelocityValue[pred, vars, pars, lkey] represents a time or \
frequency domain boundary condition with local parameters specified in \
pars[lkey]."}, {"AcousticPDEComponent", "AcousticPDEComponent[vars, pars] \
yields an acoustic PDE term component with variables vars and parameters \
pars."}, {"AcousticPressureCondition", "AcousticPressureCondition[pred, vars, \
pars] represents a time or frequency domain pressure boundary condition for \
PDEs with predicate pred indicating where it applies, with model variables \
vars and global parameters pars. AcousticPressureCondition[pred, vars, pars, \
lkey] represents a time or frequency domain boundary condition with local \
parameters specified in pars[lkey]."}, {"AcousticRadiationValue", "AcousticRa\
diationValue[pred, vars, pars] represents a time or frequency radiation \
boundary condition for PDEs with predicate pred indicating where it applies, \
with model variables vars and global parameters pars. \
AcousticRadiationValue[pred, vars, pars, lkey] represents a time or frequency \
domain boundary condition with local parameters specified in pars[lkey]."}, 
 {"AcousticSoundHardValue", "AcousticSoundHardValue[pred, vars, pars] \
represents a time or frequency domain sound hard boundary condition for PDEs \
with predicate pred indicating where it applies, with model variables vars \
and global parameters pars. AcousticSoundHardValue[pred, vars, pars, lkey] \
represents a time or frequency domain boundary condition with local \
parameters specified in pars[lkey]."}, {"AcousticSoundSoftCondition", "Acoust\
icSoundSoftCondition[pred, vars, pars] represents a time or frequency domain \
sound soft boundary condition for PDEs with predicate pred indicating where \
it applies, with model variables vars and global parameters pars. \
AcousticSoundSoftCondition[pred, vars, pars, lkey] represents a time or \
frequency domain boundary condition with local parameters specified in \
pars[lkey]."}, {"ActionMenu", "ActionMenu[name, {lbl1:>act1, lbl2:>act2, \
\[Ellipsis]}] represents an action menu with label name and with items \
labeled lbli that evaluates the expression acti if the corresponding item is \
chosen."}, {"Activate", "Activate[expr] replaces all instances of Inactive[f] \
in expr with f. Activate[expr, patt] replaces only instances of Inactive[f] \
for which f matches the pattern patt."}, {"ActiveClassification", "ActiveClas\
sification[f, {conf1, conf2, \[Ellipsis]}] gives an object representing the \
result of active classification obtained by using the function f to determine \
classes for the example configurations confi. ActiveClassification[f, reg] \
generates configurations within the region specified by reg. \
ActiveClassification[f, sampler] generates configurations by applying the \
function sampler. ActiveClassification[f, {conf1, conf2, \
\[Ellipsis]}->nsampler] applies the function nsampler to successively \
generate configurations starting from one of the confi."}, 
 {"ActiveClassificationObject", "ActiveClassificationObject[\[Ellipsis]] \
represents the result of an ActiveClassification process."}, 
 {"ActivePrediction", "ActivePrediction[f, {conf1, conf2, \[Ellipsis]}] gives \
an object representing the result of active prediction obtained by using the \
function f to determine values for the example configurations confi. \
ActivePrediction[f, reg] generates configurations within the region specified \
by reg. ActivePrediction[f, sampler] generates configurations by applying the \
function sampler. ActivePrediction[f, {conf1, conf2, \[Ellipsis]}->nsampler] \
applies the function nsampler to successively generate configurations \
starting from one of the confi."}, {"ActivePredictionObject", "ActivePredicti\
onObject[\[Ellipsis]] represents the result of an ActivePrediction process."}\
, {"ActiveStyle", "ActiveStyle is an option for Hyperlink and related \
constructs that specifies styles to add when the constructs are active, \
typically as a result of the mouse being over them."}, 
 {"AcyclicGraphQ", "AcyclicGraphQ[g] yields True if the graph g is an acyclic \
graph and False otherwise."}, {"AddSides", "AddSides[rel, x] adds x to each \
side of the equation or inequality rel. AddSides[rel1, rel2] adds the \
corresponding sides of two equations or inequalities."}, 
 {"AddTo", "x+=dx adds dx to x and returns the new value of x."}, 
 {"AddToSearchIndex", "AddToSearchIndex[obj, content] adds the specified \
content to the existing search index object obj. AddToSearchIndex[obj, \
{content1, \[Ellipsis]}] adds all the contenti to obj."}, 
 {"AddUsers", "AddUsers[group, {user1, \[Ellipsis]}] adds the users useri to \
the permissions group group."}, {"AdjacencyGraph", "AdjacencyGraph[amat] \
gives the graph with adjacency matrix amat. AdjacencyGraph[{v1, v2, \
\[Ellipsis]}, amat] gives the graph with vertices vi and adjacency matrix \
amat."}, {"AdjacencyList", "AdjacencyList[g, v] gives a list of vertices \
adjacent to vertex v. AdjacencyList[g, patt] gives a list of vertices \
adjacent to vertices that match the pattern patt. AdjacencyList[g, patt, d] \
gives a list of vertices that are at distance at most d. AdjacencyList[{v->w, \
\[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify the graph g."}, 
 {"AdjacencyMatrix", "AdjacencyMatrix[g] gives the vertex-vertex adjacency \
matrix of the graph g. AdjacencyMatrix[{v->w, \[Ellipsis]}] uses rules v->w \
to specify the graph g."}, {"AdjacentMeshCells", "AdjacentMeshCells[mr, \
cellspec, d] gives cells of dimension d adjacent to the cell specified by \
cellspec in the mesh mr."}, {"AdjustTimeSeriesForecast", "AdjustTimeSeriesFor\
ecast[tproc, forecast, newdata] adjusts forecast using new observations \
newdata according to the time series model tproc."}, 
 {"AdjustmentBox", "AdjustmentBox[box, opts] is a low-level box construct \
which displays with the placement of box adjusted using the options given."}, 
 {"AdjustmentBoxOptions", "AdjustmentBoxOptions is an option that specifies \
settings for AdjustmentBox objects."}, {"AdministrativeDivisionData", "Admini\
strativeDivisionData[entity, property] gives the value of the specified \
property for the administrative division entity. \
AdministrativeDivisionData[{entity1, entity2, \[Ellipsis]}, property] gives a \
list of property values for the specified administrative division names. \
AdministrativeDivisionData[entity, property, annotation] gives the specified \
annotation associated with the given property."}, 
 {"AffineHalfSpace", "AffineHalfSpace[{p1, \[Ellipsis], pk+1}, w] represents \
AffineSpace[{p1, \[Ellipsis], pk+1}] extended in the direction w. \
AffineHalfSpace[p, {v1, \[Ellipsis], vk}, w] represents AffineSpace[p, {v1, \
\[Ellipsis], vk}] extended in the direction w."}, 
 {"AffineSpace", "AffineSpace[{p1, \[Ellipsis], pk+1}] represents the affine \
space passing through the points pi. AffineSpace[p, {v1, \[Ellipsis], vk}] \
represents the affine space passing through p in the directions vi."}, 
 {"AffineStateSpaceModel", "AffineStateSpaceModel[{a, b, c, d}, x] represents \
the affine state-space model x'(t)==a(x(t)) + b(x(t)).u(t), y(t) = c(x(t)) + \
d(x(t)).u(t). AffineStateSpaceModel[sys] gives an affine state-space model \
corresponding to the system model sys. AffineStateSpaceModel[eqns, {{x1, \
x10}, \[Ellipsis]}, {{u1, u10}, \[Ellipsis]}, {g1, \[Ellipsis]}, t] gives the \
affine state-space model obtained by Taylor input linearization about the \
dependent variable xi at xi0 and input uj at uj0 of the differential \
equations eqns with outputs gi and independent variable t."}, 
 {"AffineTransform", "AffineTransform[m] gives a TransformationFunction that \
represents an affine transform that maps r to m.r. AffineTransform[{m, v}] \
gives an affine transform that maps r to m.r + v."}, 
 {"After", "After is a symbol that represents the region after an object for \
purposes of placement."}, {"AggregatedEntityClass", "AggregatedEntityClass[cl\
ass, \"\\!\\(\\*prop\"->f] represents an entity class containing a single \
entity with the property prop whose value is the result of applying the \
function f to the whole specified entity class. AggregatedEntityClass[class, \
{\"\\!\\(\\*prop_1\"->f1, \"\\!\\(\\*prop_2\"->f2, \[Ellipsis]}] constructs \
multiple properties propi obtained by applying fi to class. \
AggregatedEntityClass[class, propspec, gprop] forms groups of elements of \
class according to their values of the property gprop, then generates an \
entity class with an entity for each of these groups. \
AggregatedEntityClass[class, propspec, \"\\!\\(\\*pname\"->f] forms groups \
according to the values obtained by applying the entity function f, with the \
resulting property named pname. AggregatedEntityClass[class, propspec, \
{gspec1, gspec2, \[Ellipsis]}] forms groups for which the set of values \
defined by the gspeci is distinct."}, {"AggregationLayer", "AggregationLayer[\
f] represents a layer that aggregates an array of arbitrary rank into a \
vector, using the function f. AggregationLayer[f, n] aggregates an array at \
level n. AggregationLayer[f, n1;;n2] aggregates an array at levels n1 through \
n2. AggregationLayer[f, {n1, n2, \[Ellipsis]}] aggregates an array at levels \
n1, n2, \[Ellipsis]."}, {"AirPressureData", "AirPressureData[] gives the most \
recent measurement for air pressure near the current location. \
AirPressureData[datespec] gives the air pressure value for the specified time \
near the current location. AirPressureData[locationspec] gives the most \
recent measurement for air pressure near the specified locations. \
AirPressureData[locationspec, datespec] gives the value or values for the \
specified date and location. AirPressureData[{{location1, date1}, {location2, \
date2}, \[Ellipsis]}] gives values for all specified locations on the \
specified dates."}, {"AirSoundAttenuation", "AirSoundAttenuation[spec, \
frequency] returns the sound attenuation coefficient in moist air for the \
specified parameters spec for frequency. AirSoundAttenuation[spec, frequency, \
distance] returns the sound attenuation factor for the specified parameters \
at distance. AirSoundAttenuation[spec, frequency, distance, sl] returns the \
sound level at distance given the source sound level sl. \
AirSoundAttenuation[spec, audio, distance] transforms audio based on the \
distance from the source."}, {"AirTemperatureData", "AirTemperatureData[] \
gives the most recent measurement for air temperature near the current \
location. AirTemperatureData[datespec] gives the air temperature value for \
the specified time near the current location. \
AirTemperatureData[locationspec] gives the most recent measurement for air \
temperature near the specified location. AirTemperatureData[locationspec, \
datespec] gives the value or values for the specified date and location. \
AirTemperatureData[{{location1, date1}, {location2, date2}, \[Ellipsis]}] \
gives values for all specified locations on the specified dates."}, 
 {"AircraftData", "AircraftData[entity, property] gives the value of the \
specified property for the aircraft entity. AircraftData[{entity1, entity2, \
\[Ellipsis]}, property] gives a list of property values for the specified \
aircraft entities. AircraftData[entity, property, annotation] gives the \
specified annotation associated with the given property."}, 
 {"AirportData", "AirportData[entity, property] gives the value of the \
specified property for the airport entity. AirportData[{entity1, entity2, \
\[Ellipsis]}, property] gives a list of property values for the specified \
airport entities. AirportData[entity, property, annotation] gives the \
specified annotation associated with the given property."}, 
 {"AiryAi", "AiryAi[z] gives the Airy function Ai(z)."}, 
 {"AiryAiPrime", 
  "AiryAiPrime[z] gives the derivative of the Airy function Ai^\[Prime](z)."}\
, {"AiryAiZero", "AiryAiZero[k] represents the k^th zero of the Airy function \
x. AiryAiZero[k, x0] represents the k^th zero less than x0."}, 
 {"AiryBi", "AiryBi[z] gives the Airy function Bi(z)."}, 
 {"AiryBiPrime", 
  "AiryBiPrime[z] gives the derivative of the Airy function Bi^\[Prime](z)."}\
, {"AiryBiZero", "AiryBiZero[k] represents the k^th zero of the Airy function \
x. AiryBiZero[k, x0] represents the k^th zero less than x0."}, 
 {"AlgebraicIntegerQ", "AlgebraicIntegerQ[a] yields True if a is an algebraic \
integer, and yields False otherwise."}, {"AlgebraicNumber", "AlgebraicNumber[\
\[Theta], {c0, c1, \[Ellipsis], cn}] represents the algebraic number in the \
field \[DoubleStruckCapitalQ][\[Theta]] given by c0 + c1\[Theta] + \
\[Ellipsis] + cn \[Theta]^n."}, {"AlgebraicNumberDenominator", "AlgebraicNumb\
erDenominator[a] gives the smallest positive integer n such that n a is an \
algebraic integer."}, {"AlgebraicNumberNorm", 
  "AlgebraicNumberNorm[a] gives the norm of the algebraic number a."}, 
 {"AlgebraicNumberPolynomial", "AlgebraicNumberPolynomial[a, x] gives the \
polynomial in x corresponding to the AlgebraicNumber object a."}, 
 {"AlgebraicNumberTrace", 
  "AlgebraicNumberTrace[a] gives the trace of the algebraic number a."}, 
 {"AlgebraicUnitQ", "AlgebraicUnitQ[a] yields True if a is an algebraic unit, \
and yields False otherwise."}, {"Algebraics", "Algebraics represents the \
domain of algebraic numbers, as in x\[Element]Algebraics."}, 
 {"Alignment", "Alignment is an option which specifies how the contents of a \
displayed object should be aligned within the available area in the object."}\
, {"AlignmentPoint", "AlignmentPoint is an option which specifies how objects \
should by default be aligned when they appear in Inset."}, 
 {"All", "All is a setting used for certain options. In Part and related \
functions, All specifies all parts at a particular level."}, 
 {"AllTrue", "AllTrue[{e1, e2, \[Ellipsis]}, test] yields True if test[ei] is \
True for all of the ei. AllTrue[expr, test, level] tests parts of expr at \
level level. AllTrue[test] represents an operator form of AllTrue that can be \
applied to an expression."}, {"AllowGroupClose", "AllowGroupClose is an \
option for Cell that specifies whether a cell group can be closed normally."}\
, {"AllowInlineCells", "AllowInlineCells is an option for SelectedCells, \
Cell, and related constructs that specifies whether inline cells are \
permitted."}, {"AllowLooseGrammar", "AllowLooseGrammar is an option for \
GrammarRules and related functions that specifies whether grammatical \
\"fluff\" should automatically be ignored in applying grammar rules."}, 
 {"AllowReverseGroupClose", "AllowReverseGroupClose is an option for Cell \
that specifies whether a cell group can be reverse closed."}, 
 {"AllowVersionUpdate", "AllowVersionUpdate is an option for PacletInstall \
and PacletInstallSubmit that specifies whether a newer paclet version should \
be installed if an older version is already installed."}, 
 {"AllowedCloudExtraParameters", "AllowedCloudExtraParameters is an option \
for APIFunction and related functions that specifies whether parameters that \
affect overall cloud execution should be accepted."}, 
 {"AllowedCloudParameterExtensions", "AllowedCloudParameterExtensions is an \
option for APIFunction and related functions that specifies what extensions \
to allow for API or other input parameters."}, 
 {"AllowedDimensions", "AllowedDimensions is an option for Grid and related \
functions that specifies the allowed minimum and maximum dimensions of the \
Grid under interactive editing."}, {"AllowedFrequencyRange", "AllowedFrequenc\
yRange is an option for audio and signal processing functions that specifies \
the range of frequencies of interest."}, {"AllowedHeads", "AllowedHeads is an \
option that specifies the heads of subexpressions into which a function may \
descend."}, {"AlphaChannel", 
  "AlphaChannel[image] returns the alpha channel of image."}, 
 {"Alphabet", "Alphabet[] gives a list of the lowercase letters a through z \
in the English alphabet. Alphabet[type] gives the alphabet for the language \
or class type. Alphabet[type, prop] gives the alphabet defined by prop for \
the language or class type."}, {"AlphabeticOrder", "AlphabeticOrder[\"\\!\\(\
\\*string_1\", \"\\!\\(\\*string_2\"] gives 1 if \"\\!\\(\\*string_1\" \
appears before \"\\!\\(\\*string_2\" in alphabetical order, -1 if it is \
after, and 0 if it is identical. AlphabeticOrder[\"\\!\\(\\*string_1\", \
\"\\!\\(\\*string_2\", lang] uses an ordering suitable for the language lang. \
AlphabeticOrder[lang] represents an operator form that compares strings when \
applied to \"\\!\\(\\*string_1\", \"\\!\\(\\*string_2\"."}, 
 {"AlphabeticSort", "AlphabeticSort[list] sorts the elements of list into \
alphabetical order. AlphabeticSort[list, lang] sorts using an ordering \
suitable for the language lang."}, {"AlternatingFactorial", 
  "AlternatingFactorial[n] gives the alternating factorial a(n)."}, 
 {"AlternatingGroup", 
  "AlternatingGroup[n] represents the alternating group of degree n."}, 
 {"AlternativeHypothesis", "AlternativeHypothesis is an option for hypothesis \
testing functions like LocationTest that specifies the alternative \
hypothesis."}, {"Alternatives", "p1|p2|\[Ellipsis] is a pattern object that \
represents any of the patterns pi."}, {"AltitudeMethod", "AltitudeMethod is \
an option for SunPosition, MoonPosition, and related functions that \
determines whether to take atmospheric refraction into account when computing \
altitude."}, {"AmbiguityFunction", "AmbiguityFunction is an option for \
SemanticInterpretation, Interpreter, and related functions that specifies how \
to resolve ambiguities generated during semantic interpretation."}, 
 {"AmbiguityList", "AmbiguityList[{expr1, expr2, \[Ellipsis]}] represents \
possible results derived from an ambiguous semantic interpretation. \
AmbiguityList[{expr1, expr2, \[Ellipsis]}, \"\\!\\(\\*string\"] represents \
possible results from semantic interpretation of an input string. \
AmbiguityList[{expr1, expr2, \[Ellipsis]}, \"\\!\\(\\*string\", {assoc1, \
assoc2, \[Ellipsis]}] includes a sequence of associations giving details of \
the interpretations used to obtain the expri."}, 
 {"AnatomyData", "AnatomyData[entity, property] gives the value of the \
specified property for the anatomical structure entity. AnatomyData[{entity1, \
entity2, \[Ellipsis]}, property] gives a list of property values for the \
specified anatomical structure entities. AnatomyData[entity, property, \
annotation] gives the specified annotation associated with the given \
property."}, {"AnatomyPlot3D", "AnatomyPlot3D[primitives, options] represents \
a three-dimensional graphical image that works with anatomical entities as \
well as standard 3D graphics primitives and directives."}, 
 {"AnatomySkinStyle", "AnatomySkinStyle is an option of AnatomyPlot3D that \
specifies what style to use for automatically included skin subparts."}, 
 {"AnatomyStyling", "AnatomyStyling[g] is a graphics directive used in \
AnatomyPlot3D that specifies how anatomy entity-based graphics objects are to \
be drawn using the graphics directive or association of directives g."}, 
 {"AnchoredSearch", "AnchoredSearch is an option for Find and FindList that \
specifies whether the text searched for must be at the beginning of a \
record."}, {"And", "e1&&e2&&\[Ellipsis] is the logical AND function. It \
evaluates its arguments in order, giving False immediately if any of them are \
False, and True if they are all True."}, {"AndersonDarlingTest", "AndersonDar\
lingTest[data] tests whether data is normally distributed using the \
Anderson-Darling test. AndersonDarlingTest[data, dist] tests whether data is \
distributed according to dist using the Anderson-Darling test. \
AndersonDarlingTest[data, dist, \"\\!\\(\\*property\"] returns the value of \
\"\\!\\(\\*property\"."}, {"AngerJ", "AngerJ[\[Nu], z] gives the Anger \
function Jv (z). AngerJ[\[Nu], \[Mu], z] gives the associated Anger function \
J\[Nu]\[Mu](z)."}, {"AngleBisector", "AngleBisector[{q1, p, q2}] gives the \
bisector of the interior angle at p formed by the triangle with vertex points \
p, q1 and q2. AngleBisector[{q1, p, q2}, \"\\!\\(\\*type\"] gives the angle \
bisector of the specified type."}, {"AngleBracket", "AngleBracket[x, y, \
\[Ellipsis]] displays as \[LeftAngleBracket]x, y, \
\[Ellipsis]\[RightAngleBracket]."}, {"AnglePath", "AnglePath[{\[Theta]1, \
\[Theta]2, \[Theta]3, \[Ellipsis]}] gives the list of 2D coordinates \
corresponding to a path that starts at {0, 0}, then takes a series of steps \
of unit length at successive relative angles \[Theta]i. AnglePath[{{r1, \
\[Theta]1}, {r2, \[Theta]2}, {r3, \[Theta]3}, \[Ellipsis]}] takes successive \
steps of lengths ri. AnglePath[\[Theta]0, {step1, step2, \[Ellipsis]}] starts \
at angle \[Theta]0 with respect to the x axis. AnglePath[{x, y}, {step1, \
step2, \[Ellipsis]}] starts at the point {x, y} with initial angle 0 with \
respect to the x axis. AnglePath[{{x, y}, \[Theta]0}, {step1, step2, \
\[Ellipsis]}] starts at {x, y} with initial angle \[Theta]0 with respect to \
the x axis. AnglePath[{{x, y}, {dx, dy}}, {step1, step2, \[Ellipsis]}] takes \
the first step to go from {x, y} to {x + dx, y + dy}. AnglePath[init, steps, \
form] returns at each step the data of the form specified by form."}, 
 {"AnglePath3D", "AnglePath3D[{{\[Alpha]1, \[Beta]1, \[Gamma]1}, {\[Alpha]2, \
\[Beta]2, \[Gamma]2}, \[Ellipsis]}] gives the list of 3D coordinates of a \
path of an object that starts at {0, 0, 0}, then takes a series of steps of \
unit length, each in the direction of the x axis obtained after successive \
rotation of the object by the Euler angles \[Alpha]i, \[Beta]i, \[Gamma]i. \
AnglePath3D[{{\[Alpha]1, \[Beta]1}, {\[Alpha]2, \[Beta]2}, \[Ellipsis]}] \
assumes the Euler angles \[Gamma]i to be 0. AnglePath3D[{mat1, mat2, \
\[Ellipsis]}] takes the successive rotations to be specified by the 3D \
rotation matrices mati. AnglePath3D[{{r1, rot1}, {r2, rot2}, \[Ellipsis]}] \
takes successive steps of length ri with Euler angles or rotation matrices \
specified by roti. AnglePath3D[{x0, y0, z0}, steps] starts at the point {x0, \
y0, z0}. AnglePath3D[{rot0}, steps] starts in the x axis direction specified \
by rotating the object according to Euler angles or rotation matrix rot0. \
AnglePath3D[{{x0, y0, z0}, rot0}, steps] starts at point {x0, y0, z0} with \
the x axis direction specified by rot0. AnglePath3D[init, steps, form] \
returns at each step the data of the form specified by form."}, 
 {"AngleVector", "AngleVector[\[Theta]] gives the list representing the 2D \
unit vector at angle \[Theta] relative to the x axis. AngleVector[{r, \
\[Theta]}] gives the list representing the 2D vector of length r at angle \
\[Theta]. AngleVector[{x, y}, \[Theta]] gives the result of starting from the \
point {x, y}, then going a unit distance at angle \[Theta]. AngleVector[{x, \
y}, {r, \[Theta]}] gives the result of starting from the point {x, y}, then \
going distance r at angle \[Theta]."}, {"AngularGauge", "AngularGauge[value] \
draws a gauge showing value in the range 0 to 1. AngularGauge[value, {min, \
max}] draws a gauge showing value in a range of min to max. \
AngularGauge[Dynamic[value], \[Ellipsis]] allows value to be set \
interactively using the gauge. AngularGauge[{value1, value2, \[Ellipsis]}, \
\[Ellipsis]] draws a gauge showing multiple values."}, 
 {"Animate", "Animate[expr, {u, umin, umax}] generates an animation of expr \
in which u varies continuously from umin to umax. Animate[expr, {u, umin, \
umax, du}] takes u to vary in steps du. Animate[expr, {u, {u1, u2, \
\[Ellipsis]}}] makes u take on discrete values u1, u2, \[Ellipsis]. \
Animate[expr, {u, \[Ellipsis]}, {v, \[Ellipsis]}, \[Ellipsis]] varies all the \
variables u, v, \[Ellipsis]."}, {"AnimatedImage", "AnimatedImage[{image1, \
image2, \[Ellipsis]}] generates an animation whose frames are the successive \
imagei. AnimatedImage[file] represents an animated image from file."}, 
 {"AnimationDirection", "AnimationDirection is an option which specifies the \
direction to run an animation."}, {"AnimationRate", "AnimationRate is an \
option for Animate and Animator that specifies at what rate an animation \
should run, in units per second."}, {"AnimationRepetitions", "AnimationRepeti\
tions is an option to Animate and related functions that specifies how many \
times the animation they create runs before stopping."}, 
 {"AnimationRunTime", "AnimationRunTime is an option to Animator and related \
functions that indicates how long the animation has been continuously \
running."}, {"AnimationRunning", "AnimationRunning is an option to Animate \
and related functions that specifies whether the animation they create is \
running."}, {"AnimationTimeIndex", "AnimationTimeIndex is an option to \
Animator and related functions that specifies the current time index for the \
animator."}, {"AnimationVideo", "AnimationVideo[fexpr, {u, umin, umax}] \
generates a video of fexpr in which u varies from umin to umax. \
AnimationVideo[fexpr, {u, umin, umax, du}] takes u to vary in steps du. \
AnimationVideo[fexpr, {u, {u1, u2, \[Ellipsis]}}] makes u take on values u1, \
u2, \[Ellipsis]."}, {"Animator", "Animator[u] represents an object that \
displays with the value of u being continually increased from 0 to 1 with \
time. Animator[u, {umin, umax}] makes u vary from umin to umax. Animator[u, \
{umin, umax, du}] makes u vary in steps du. Animator[u, {umin, umax}, ups] \
makes the value of u increase at a rate of ups units per second."}, 
 {"Annotate", "Annotate[obj, key->value] sets the annotation key->value for \
the object obj. Annotate[{obj, itemspec}, key->value] sets the annotation for \
the items in obj specified by itemspec."}, {"Annotation", "Annotation[expr, \
data] represents an expression expr, with annotation data. Annotation[expr, \
data, \"\\!\\(\\*type\"] specifies the type of annotation being given. \
Annotation[items, key->value] associates key->value pairs with items in \
objects such as Graph, MeshRegion etc."}, {"AnnotationDelete", "AnnotationDel\
ete[obj] deletes all annotations of the object obj. AnnotationDelete[{obj, \
itemspec}] deletes all annotations of the items of obj specified by itemspec. \
AnnotationDelete[spec, key] deletes the annotation key specified by spec."}, 
 {"AnnotationKeys", "AnnotationKeys[obj] lists all annotation keys available \
for the object obj. AnnotationKeys[{obj, itemspec}] lists all annotation keys \
available for the items specified by itemspec in obj."}, 
 {"AnnotationRules", "AnnotationRules is an option that allows specification \
of annotations to objects and items in objects."}, 
 {"AnnotationValue", "AnnotationValue[obj, key] gives the annotation value \
associated with key for the object obj. AnnotationValue[{obj, itemspec}, key] \
gives the annotation value associated with key for items specified by \
itemspec in obj."}, {"Annuity", "Annuity[p, t] represents an annuity of fixed \
payments p made over t periods. Annuity[p, t, q] represents a series of \
payments occurring at time intervals q. Annuity[{p, {pinitial, pfinal}}, t, \
q] represents an annuity with the specified initial and final payments."}, 
 {"AnnuityDue", "AnnuityDue[p, t] represents an annuity due of fixed payments \
p made over t periods. AnnuityDue[p, t, q] represents a series of payments \
occurring at time intervals q. AnnuityDue[{p, {pinitial, pfinal}}, t, q] \
represents an annuity due with the specified initial and final payments."}, 
 {"Annulus", "Annulus[{x, y}, {rinner, router}] represents an annulus \
centered at {x, y} with inner radius rinner and outer radius router. \
Annulus[{x, y}, {rinner, router}, {\[Theta]1, \[Theta]2}] represents an \
annulus from angle \[Theta]1 to \[Theta]2."}, {"AnomalyDetection", "AnomalyDe\
tection[{example1, example2, \[Ellipsis]}] generates an \
AnomalyDetectorFunction[\[Ellipsis]] based on the examples given. \
AnomalyDetection[LearnedDistribution[\[Ellipsis]]] generates an anomaly \
detector based on the given distribution. \
AnomalyDetection[\[LeftAssociation]True->{example11, example12, \[Ellipsis]}, \
False->{example21, \[Ellipsis]}\[RightAssociation]] can be used to indicate \
which examples should be considered anomalous."}, 
 {"AnomalyDetector", "AnomalyDetector is an option for functions such as \
Classify that specifies an anomaly detector for them to include."}, 
 {"AnomalyDetectorFunction", "AnomalyDetectorFunction[\[Ellipsis]] represents \
a function generated by AnomalyDetection for detecting whether data is \
anomalous or not."}, {"Anonymous", "Anonymous represents an option or other \
value that indicates the absence of a name."}, 
 {"Antialiasing", "Antialiasing is an option that specifies whether \
antialiasing should be done."}, {"Antihermitian", 
  "Antihermitian[{1, 2}] represents the symmetry of an antihermitian matrix."}\
, {"AntihermitianMatrixQ", "AntihermitianMatrixQ[m] gives True if m is \
explicitly antihermitian, and False otherwise."}, 
 {"Antisymmetric", "Antisymmetric[{s1, \[Ellipsis], sn}] represents the \
symmetry of a tensor that is antisymmetric in the slots si."}, 
 {"AntisymmetricMatrixQ", "AntisymmetricMatrixQ[m] gives True if m is \
explicitly antisymmetric, and False otherwise."}, 
 {"Antonyms", "Antonyms[\"\\!\\(\\*word\"] returns the antonyms associated \
with the specified word."}, {"AnyOrder", "AnyOrder[p1, p2, \[Ellipsis]] is a \
grammar rules pattern object that represents a sequence of elements matching \
p1, p2, \[Ellipsis] in any order."}, {"AnySubset", "AnySubset[{c1, c2, \
\[Ellipsis]}] represents an element in an interpreter or form that accepts \
any subset of the choices ci. AnySubset[{lab1->c1, lab2->c2, \[Ellipsis]}] \
accepts any subset of the labi, yielding the corresponding ci as results. \
AnySubset[EntityClass[\"\\!\\(\\*type\", \"\\!\\(\\*class\"]] accepts any \
subset of the entities in the specified entity class. AnySubset[choices, max] \
allows at most max choices to be selected. AnySubset[choices, {min, max}] \
allows at least min and at most max choices to be selected."}, 
 {"AnyTrue", "AnyTrue[{e1, e2, \[Ellipsis]}, test] yields True if test[ei] is \
True for any of the ei. AnyTrue[expr, test, level] tests parts of expr at \
level level. AnyTrue[test] represents an operator form of AnyTrue that can be \
applied to an expression."}, {"Apart", "Apart[expr] rewrites a rational \
expression as a sum of terms with minimal denominators. Apart[expr, var] \
treats all variables other than var as constants."}, 
 {"ApartSquareFree", "ApartSquareFree[expr] rewrites a rational expression as \
a sum of terms whose denominators are powers of square-free polynomials. \
ApartSquareFree[expr, var] treats all variables other than var as constants."}\
, {"Appearance", "Appearance is an option for displayed objects such as \
Button and Slider that specifies the general type of appearance they should \
have."}, {"AppearanceElements", "AppearanceElements is an option for \
functions like Manipulate that specifies what elements should be included in \
the displayed form of the object generated."}, 
 {"AppearanceRules", "AppearanceRules is an option for form and page \
generation functions that specifies the overall appearance of the generated \
object."}, {"AppellF1", "AppellF1[a, b1, b2, c, x, y] is the Appell \
hypergeometric function of two variables F1(a;b1, b2;c;x, y)."}, 
 {"Append", "Append[expr, elem] gives expr with elem appended. Append[elem] \
represents an operator form of Append that can be applied to an expression."}\
, {"AppendLayer", "AppendLayer[] represents a net layer that takes an input \
array and appends another array to it."}, {"AppendTo", "AppendTo[x, elem] \
appends elem to the value of x, and resets x to the result."}, 
 {"Application", "f\[Backslash][Application]g or Application[f, g] represents \
the formal application of f to g."}, {"Apply", "f@@expr or Apply[f, expr] \
replaces the head of expr by f. f@@@expr or Apply[f, expr, {1}] replaces \
heads at level 1 of expr by f. Apply[f, expr, levelspec] replaces heads in \
parts of expr specified by levelspec. Apply[f] represents an operator form of \
Apply that can be applied to an expression."}, 
 {"ApplySides", "ApplySides[f, rel] applies f to each side of the equation or \
inequality rel."}, {"ApplyTo", 
  "ApplyTo[x, f] or x// = f computes f[x] and resets x to the result."}, 
 {"ArcCos", 
  "ArcCos[z] gives the arc cosine cos^ - 1(z) of the complex number z."}, 
 {"ArcCosh", "ArcCosh[z] gives the inverse hyperbolic cosine cosh^ - 1(z) of \
the complex number z."}, {"ArcCot", 
  "ArcCot[z] gives the arc cotangent cot^ - 1(z) of the complex number z."}, 
 {"ArcCoth", "ArcCoth[z] gives the inverse hyperbolic cotangent coth^ - 1(z) \
of the complex number z."}, 
 {"ArcCsc", 
  "ArcCsc[z] gives the arc cosecant csc^ - 1(z) of the complex number z."}, 
 {"ArcCsch", "ArcCsch[z] gives the inverse hyperbolic cosecant csch^ - 1(z) \
of the complex number z."}, {"ArcCurvature", "ArcCurvature[{x1, \[Ellipsis], \
xn}, t] gives the curvature of the parametrized curve whose Cartesian \
coordinates xi are functions of t. ArcCurvature[{x1, \[Ellipsis], xn}, t, \
chart] interprets the xi as coordinates in the specified coordinate chart."}, 
 {"ArcLength", "ArcLength[reg] gives the length of the one-dimensional region \
reg. ArcLength[{x1, \[Ellipsis], xn}, {t, tmin, tmax}] gives the length of \
the parametrized curve whose Cartesian coordinates xi are functions of t. \
ArcLength[{x1, \[Ellipsis], xn}, {t, tmin, tmax}, chart] interprets the xi as \
coordinates in the specified coordinate chart."}, 
 {"ArcSec", 
  "ArcSec[z] gives the arc secant sec^ - 1(z) of the complex number z."}, 
 {"ArcSech", "ArcSech[z] gives the inverse hyperbolic secant sech^ - 1(z) of \
the complex number z."}, {"ArcSin", 
  "ArcSin[z] gives the arc sine sin^ - 1(z) of the complex number z."}, 
 {"ArcSinDistribution", "ArcSinDistribution[{xmin, xmax}] represents the arc \
sine distribution supported between xmin and xmax. ArcSinDistribution[] \
represents the arc sine distribution supported between zero and one."}, 
 {"ArcSinh", "ArcSinh[z] gives the inverse hyperbolic sine sinh^ - 1(z) of \
the complex number z."}, {"ArcTan", "ArcTan[z] gives the arc tangent tan^ - \
1(z) of the complex number z. ArcTan[x, y] gives the arc tangent of y/x, \
taking into account which quadrant the point (x, y) is in."}, 
 {"ArcTanh", "ArcTanh[z] gives the inverse hyperbolic tangent tanh^ - 1(z) of \
the complex number z."}, {"Area", "Area[reg] gives the area of the \
two-dimensional region reg. Area[{x1, \[Ellipsis], xn}, {s, smin, smax}, {t, \
tmin, tmax}] gives the area of the parametrized surface whose Cartesian \
coordinates xi are functions of s and t. Area[{x1, \[Ellipsis], xn}, {s, \
smin, smax}, {t, tmin, tmax}, chart] interprets the xi as coordinates in the \
specified coordinate chart."}, 
 {"Arg", "Arg[z] gives the argument of the complex number z."}, 
 {"ArgMax", "ArgMax[f, x] gives a position xmax at which f is maximized. \
ArgMax[f, {x, y, \[Ellipsis]}] gives a position {xmax, ymax, \[Ellipsis]} at \
which f is maximized. ArgMax[{f, cons}, {x, y, \[Ellipsis]}] gives a position \
at which f is maximized subject to the constraints cons. ArgMax[\[Ellipsis], \
x\[Element]rdom] constrains x to be in the region or domain rdom. \
ArgMax[\[Ellipsis], \[Ellipsis], dom] constrains variables to the domain dom, \
typically Reals or Integers."}, {"ArgMin", "ArgMin[f, x] gives a position \
xmin at which f is minimized. ArgMin[f, {x, y, \[Ellipsis]}] gives a position \
{xmin, ymin, \[Ellipsis]} at which f is minimized. ArgMin[{f, cons}, {x, y, \
\[Ellipsis]}] gives a position at which f is minimized subject to the \
constraints cons. ArgMin[\[Ellipsis], x\[Element]rdom] constrains x to be in \
the region or domain rdom. ArgMin[\[Ellipsis], \[Ellipsis], dom] constrains \
variables to the domain dom, typically Reals or Integers."}, 
 {"ArgumentsOptions", "ArgumentsOptions[f[args], n] tries to separate args \
into a list of n positional arguments followed by a list of valid options for \
f. ArgumentsOptions[f[args], {min, max}] requires the number of positional \
arguments to be between min and max. ArgumentsOptions[f[args], spec, assoc] \
modifies the behavior based on the information in the association assoc."}, 
 {"ArithmeticGeometricMean", "ArithmeticGeometricMean[a, b] gives the \
arithmetic-geometric mean of a and b."}, {"Around", "Around[x, \[Delta]] \
represents an approximate number or quantity with a value around x and an \
uncertainty \[Delta]. Around[x, {\[Delta]-, \[Delta]+}] represents a number \
or quantity with a value around x and asymmetric uncertainties \[Delta]-, \
\[Delta]+. Around[dist] gives an approximate number or quantity around the \
mean of the distribution dist, with an uncertainty corresponding to the \
standard deviation of the distribution. Around[list] gives an approximate \
object around the mean of the elements of list and with an uncertainty \
corresponding to their standard deviation. Around[s] gives an approximate \
object derived from the number, interval or string specification s."}, 
 {"AroundReplace", "AroundReplace[expr, {s1->Around[x1, \[Delta]1], \
s2->Around[x2, \[Delta]2], \[Ellipsis]}] propagates uncertainty in expr by \
replacing all occurrences of si by Around[xi, \[Delta]i]. AroundReplace[expr, \
rules, n] propagates uncertainty in expr using a series expansion to order \
n."}, {"Array", "Array[f, n] generates a list of length n, with elements \
f[i]. Array[f, n, r] generates a list using the index origin r. Array[f, n, \
{a, b}] generates a list using n values from a to b. Array[f, {n1, n2, \
\[Ellipsis]}] generates an n1 \[Times]n2 \[Times]\[Ellipsis] array of nested \
lists, with elements f[i1, i2, \[Ellipsis]]. Array[f, {n1, n2, \[Ellipsis]}, \
{r1, r2, \[Ellipsis]}] generates a list using the index origins ri (default 1 \
). Array[f, {n1, n2, \[Ellipsis]}, {{a1, b1}, {a2, b2}, \[Ellipsis]}] \
generates a list using ni values from ai to bi. Array[f, dims, origin, h] \
uses head h, rather than List, for each level of the array."}, 
 {"ArrayComponents", "ArrayComponents[array] gives an array in which all \
identical elements of array are replaced by an integer index representing the \
component in which the element lies. ArrayComponents[array, level] finds the \
identical elements at the specified level in array ArrayComponents[array, \
level, rules] uses a rule or a list of rules for specifying the labels."}, 
 {"ArrayDepth", "ArrayDepth[expr] gives the depth to which expr is a full \
array, with all the parts at a particular level having the same length."}, 
 {"ArrayFilter", "ArrayFilter[f, array, r] applies f to all range-r blocks in \
the specified array. ArrayFilter[f, array, {r1, r2, \[Ellipsis]}] applies f \
to blocks with ranges r1, r2, \[Ellipsis] in successive dimensions. \
ArrayFilter[f, array, template] applies f over blocks specified by the \
position of 1s in the array template."}, {"ArrayFlatten", "ArrayFlatten[{{m11\
, m12, \[Ellipsis]}, {m21, m22, \[Ellipsis]}, \[Ellipsis]}] creates a single \
flattened matrix from a matrix of matrices mij. ArrayFlatten[a, r] flattens \
out r pairs of levels in the array a."}, {"ArrayMesh", "ArrayMesh[array] \
generates a mesh region from an array of rank d in which each cell has a \
geometric dimension d and represents a nonzero value of the array."}, 
 {"ArrayPad", "ArrayPad[array, m] gives an array with m zeros of padding on \
every side. ArrayPad[array, m, padding] uses the specified padding. \
ArrayPad[array, {m, n}, \[Ellipsis]] pads with m elements at the beginning \
and n elements at the end. ArrayPad[array, {{m1, n1}, {m2, n2}, \[Ellipsis]}, \
\[Ellipsis]] pads with mi, ni elements at level i in array."}, 
 {"ArrayPlot", "ArrayPlot[array] generates a plot in which the values in an \
array are shown in a discrete array of squares."}, 
 {"ArrayPlot3D", "ArrayPlot3D[array] generates a plot in which the values in \
an array are shown in a discrete array of cubes."}, 
 {"ArrayQ", "ArrayQ[expr] gives True if expr is a full array or a SparseArray \
object, and gives False otherwise. ArrayQ[expr, patt] requires expr to be a \
full array with a depth that matches the pattern patt. ArrayQ[expr, patt, \
test] requires also that test yield True when applied to each of the array \
elements in expr."}, {"ArrayReduce", "ArrayReduce[f, array, n] reduces \
dimension n of array by applying f. ArrayReduce[f, array, n1;;n2] reduces \
dimensions n1 through n2. ArrayReduce[f, array, {n1, n2, \[Ellipsis]}] \
reduces dimensions n1, n2, etc. ArrayReduce[f, array, {{n11, n12, \
\[Ellipsis]}, {n21, n22, \[Ellipsis]}, \[Ellipsis]}] applies f to arrays \
formed by combining all dimensions nij to make each dimension i."}, 
 {"ArrayResample", "ArrayResample[array, {n1, n2, \[Ellipsis]}] resamples \
array to have dimensions {n1, n2, \[Ellipsis]}. ArrayResample[array, dspec] \
resamples array according to the dimension specification dspec. \
ArrayResample[array, dspec, scheme] specifies resampling scheme, either point \
or bin based. ArrayResample[array, dspec, scheme, {{xmin, xmax}, \
\[Ellipsis]}] resamples only the data in the specified subrange {{xmin, \
xmax}, \[Ellipsis]}."}, {"ArrayReshape", "ArrayReshape[list, dims] arranges \
the elements of list into a rectangular array with dimensions dims. \
ArrayReshape[list, dims, padding] uses the specified padding if list does not \
contain enough elements."}, {"ArrayRules", "ArrayRules[SparseArray[\
\[Ellipsis]]] gives the rules {pos1->val1, pos2->val2, \[Ellipsis]} \
specifying elements in a sparse array. ArrayRules[list] gives rules for \
SparseArray[list]."}, {"Arrays", "Arrays[{d1, \[Ellipsis], dr}] represents \
the domain of arrays of rank r and dimensions di. Arrays[{d1, \[Ellipsis], \
dr}, dom] represents the domain of arrays of dimensions di, with components \
in the domain dom. Arrays[{d1, \[Ellipsis], dr}, dom, sym] represents the \
subdomain of arrays with dimensions di and symmetry sym."}, 
 {"Arrow", "Arrow[{pt1, pt2}] is a graphics primitive that represents an \
arrow from pt1 to pt2. Arrow[{pt1, pt2}, s] represents an arrow with its ends \
set back from pt1 and pt2 by a distance s. Arrow[{pt1, pt2}, {s1, s2}] sets \
back by s1 from pt1 and s2 from pt2. Arrow[curve, \[Ellipsis]] represents an \
arrow following the specified curve."}, {"Arrowheads", "Arrowheads[spec] is a \
graphics directive specifying that arrows that follow should have arrowheads \
with sizes, positions, and forms specified by spec."}, 
 {"Ask", "Ask[\"\\!\\(\\*key\"] is a construct for use inside AskFunction \
that gives the value associated with key, or interactively asks for it if it \
is not already known. Ask[\"\\!\\(\\*key\"->formspec] uses formspec to define \
how input should be requested and interpreted. Ask[{\"\\!\\(\\*key_1\", \
\"\\!\\(\\*key_2\", \[Ellipsis]}] gives the values associated with all the \
keyi, interactively asking for any that are needed. \
Ask[{\"\\!\\(\\*key_1\"->formspec1, \"\\!\\(\\*key_2\"->formspec2, \
\[Ellipsis]}] uses the formspeci to define how input for the keyi should be \
requested and interpreted."}, {"AskAppend", "AskAppend[\"\\!\\(\\*key\"] is a \
construct for use inside AskFunction that asks for a new value, appends it to \
the current value associated with \"\\!\\(\\*key\", and returns the resulting \
list. AskAppend[\"\\!\\(\\*key\"->formspec] uses formspec to define how input \
should be requested and interpreted."}, {"AskConfirm", "AskConfirm[\"\\!\\(\\\
*key\"] is a construct for use inside AskFunction that asks for confirmation \
of the current value associated with \"\\!\\(\\*key\" and allows this to be \
either confirmed or changed. AskConfirm[\"\\!\\(\\*key\", fun] applies the \
function fun to determine how to ask for confirmation. \
AskConfirm[\"\\!\\(\\*key\", \"\\!\\(\\*str\"] applies the string \
\"\\!\\(\\*str\" as a string template to ask for confirmation."}, 
 {"AskDisplay", "AskDisplay[expr] is a construct for use inside AskFunction \
that displays the result of evaluating expr in the context of the \
AskFunction."}, {"AskFunction", "AskFunction[body] evaluates body, \
interactively asking for values specified by Ask[\[Ellipsis]] and related \
constructs. AskFunction[{\"\\!\\(\\*key_1\"->spec1, \
\"\\!\\(\\*key_2\"->spec2, \[Ellipsis]}, body] specifies how values \
associated with the keyi should be asked for."}, 
 {"AskState", "AskState[] is a construct for use inside AskFunction that \
returns an association of all values in the current state of the \
AskFunction."}, {"AskTemplateDisplay", "AskTemplateDisplay[fun] is a \
construct for use inside AskFunction that displays the result of applying fun \
to the association of the values of all keys encountered so far in the \
evaluation of the AskFunction. \
AskTemplateDisplay[\"\\!\\(\\*str\\!\\(\\*\\\"] applies \"\\!\\(\\*str\" as a \
string template to the association of values."}, 
 {"AskedQ", "AskedQ[\"\\!\\(\\*key\"] is a construct for use inside \
AskFunction that gives True if a value is currently associated with key, and \
False otherwise."}, {"AskedValue", "AskedValue[\"\\!\\(\\*key\"] is a \
construct for use inside AskFunction that gives the value associated with \
key, or Missing[\[Ellipsis]] if none has been provided."}, 
 {"AspectRatio", "AspectRatio is an option for Graphics and related functions \
that specifies the ratio of height to width for a plot."}, 
 {"Assert", "Assert[test] represents the assertion that test is True. If \
assertions have been enabled, test is evaluated when the assertion is \
encountered. If test is not True, then an assertion failure is generated. \
Assert[test, tag] specifies a tag that will be used to identify the assertion \
if it fails."}, {"AssessmentFunction", "AssessmentFunction[key] represents a \
tool for assessing whether answers are correct according to the key. \
AssessmentFunction[key, method] uses the specified answer comparison method. \
AssessmentFunction[key, f] uses the function f to compare answers with the \
key. AssessmentFunction[key, comp] performs assessment using the custom \
assessment defined in the Association comp. AssessmentFunction[obj] \
represents an assessment function that performs assessment using the \
CloudObject obj. AssessmentFunction[\[Ellipsis]] [answer] gives an \
AssessmentResultObject representing the correctness of answer."}, 
 {"AssessmentResultObject", "AssessmentResultObject[assoc] represents the \
results of an assessment. AssessmentResultObject[{aro1, aro2, \[Ellipsis]}] \
represents a collection of many assessments."}, 
 {"AssociateTo", "AssociateTo[a, key->val] changes the association a by \
adding the key-value pair key->val. AssociateTo[a, {key1->val1, key2->val2, \
\[Ellipsis]}] adds all key-value pairs keyi->vali."}, 
 {"Association", "Association[key1->val1, key2->val2, \[Ellipsis]] or \
\[LeftAssociation]key1->val1, key2->val2, \[Ellipsis]\[RightAssociation] \
represents an association between keys and values."}, 
 {"AssociationFormat", "AssociationFormat is an option to TextString and \
related functions that determines how associations are formatted."}, 
 {"AssociationMap", "AssociationMap[f, {key1, key2, \[Ellipsis]}] creates the \
association \[LeftAssociation]key1->f[key1], key2->f[key2], \
\[Ellipsis]\[RightAssociation]. AssociationMap[f, \
\[LeftAssociation]key1->val1, key2->val2, \[Ellipsis]\[RightAssociation]] \
creates the association \[LeftAssociation]f[key1->val1], f[key2->val2], \
\[Ellipsis]\[RightAssociation]. AssociationMap[f] represents an operator form \
of AssociationMap that can be applied to an expression."}, 
 {"AssociationQ", "AssociationQ[expr] gives True if expr is a valid \
Association object, and False otherwise."}, {"AssociationThread", "Associatio\
nThread[{key1, key2, \[Ellipsis]}->{val1, val2, \[Ellipsis]}] gives the \
association \[LeftAssociation]key1->val1, key2->val2, \
\[Ellipsis]\[RightAssociation]. AssociationThread[{key1, key2, \[Ellipsis]}, \
{val1, val2, \[Ellipsis]}] also gives the association \
\[LeftAssociation]key1->val1, key2->val2, \[Ellipsis]\[RightAssociation]."}, 
 {"AssumeDeterministic", "AssumeDeterministic is an option for functions such \
as BayesianMinimization that specifies whether or not the function being \
considered should be assumed to be deterministic."}, 
 {"Assuming", "Assuming[assum, expr] evaluates expr with assum appended to \
$Assumptions, so that assum is included in the default assumptions used by \
functions such as Refine, Simplify, and Integrate."}, 
 {"Assumptions", "Assumptions is an option for functions such as Simplify, \
Refine, and Integrate that specifies default assumptions to be made about \
symbolic quantities."}, {"Asymptotic", "Asymptotic[expr, x->x0] gives an \
asymptotic approximation for expr near x0. Asymptotic[expr, {x, x0, n}] gives \
an asymptotic approximation for expr near x0 to order n."}, 
 {"AsymptoticDSolveValue", "AsymptoticDSolveValue[eqn, f, x->x0] computes an \
asymptotic approximation to the differential equation eqn for f[x] centered \
at x0. AsymptoticDSolveValue[{eqn1, eqn2, \[Ellipsis]}, {f1, f2, \
\[Ellipsis]}, x->x0] computes an asymptotic approximation to a system of \
differential equations. AsymptoticDSolveValue[eqn, f, x, \
\[Epsilon]->\[Epsilon]0] computes an asymptotic approximation of f[x, \
\[Epsilon]] for the parameter \[Epsilon] centered at \[Epsilon]0. \
AsymptoticDSolveValue[eqn, f, \[Ellipsis], {\[Xi], \[Xi]0, n}] computes the \
asymptotic approximation to order n."}, {"AsymptoticEqual", "AsymptoticEqual[\
f, g, x->x^*] gives conditions for f(x)\[CupCap]g(x) or \
f(x)\[Element]\[CapitalTheta](g(x)) as x->x^*. AsymptoticEqual[f, g, {x1, \
\[Ellipsis], xn}->{x1*, \[Ellipsis], xn*}] gives conditions for f(x1, \
\[Ellipsis], xn)\[CupCap]g(x1, \[Ellipsis], xn) or f(x1, \[Ellipsis], \
xn)\[Element]\[CapitalTheta](g(x1, \[Ellipsis], xn)) as {x1, \[Ellipsis], \
xn}->{x1*, \[Ellipsis], xn*}."}, {"AsymptoticEquivalent", "AsymptoticEquivale\
nt[f, g, x->x^*] gives conditions for f(x)\[Tilde]g(x) as x->x^*. \
AsymptoticEquivalent[f, g, {x1, \[Ellipsis], xn}->{x1*, \[Ellipsis], xn*}] \
gives conditions for f(x1, \[Ellipsis], xn) ~g(x1, \[Ellipsis], xn) as {x1, \
\[Ellipsis], xn}->{x1*, \[Ellipsis], xn*}."}, {"AsymptoticExpectation", "Asym\
ptoticExpectation[expr, x\[Distributed]dist, a->a0] computes an asymptotic \
approximation for the expectation of expr centered at a0, under the \
assumption that x follows the probability distribution dist. \
AsymptoticExpectation[expr, {x1, x2, \[Ellipsis]}\[Distributed]dist,a->a0] \
computes an asymptotic approximation for the expectation of expr centered at \
a0, under the assumption that {x1, x2, \[Ellipsis]} follows the multivariate \
distribution dist. AsymptoticExpectation[expr, vars, {a, a0, n}] computes the \
asymptotic expectation to order n."}, {"AsymptoticGreater", "AsymptoticGreate\
r[f, g, x->x^*] gives conditions for f(x)\[Succeeds]g(x) or \
f(x)\[Element]\[Omega](g(x)) as x->x^*. AsymptoticGreater[f, g, {x1, \
\[Ellipsis], xn}->{x1*, \[Ellipsis], xn*}] gives conditions for f(x1, \
\[Ellipsis], xn)\[Succeeds]g(x1, \[Ellipsis], xn) or f(x1, \[Ellipsis], \
xn)\[Element]\[Omega](g(x1, \[Ellipsis], xn)) as {x1, \[Ellipsis], xn}->{x1*, \
\[Ellipsis], xn*}."}, {"AsymptoticGreaterEqual", "AsymptoticGreaterEqual[f, \
g, x->x^*] gives conditions for f(x)\[SucceedsEqual]g(x) or \
f(x)\[Element]\[CapitalOmega](g(x)) as x->x^*. AsymptoticGreaterEqual[f, g, \
{x1, \[Ellipsis], xn}->{x1*, \[Ellipsis], xn*}] gives conditions for f(x1, \
\[Ellipsis], xn)\[SucceedsEqual]g(x1, \[Ellipsis], xn) or f(x1, \[Ellipsis], \
xn)\[Element]\[CapitalOmega](g(x1, \[Ellipsis], xn)) as {x1, \[Ellipsis], \
xn}->{x1*, \[Ellipsis], xn*}."}, {"AsymptoticIntegrate", "AsymptoticIntegrate\
[f, x, x->x0] computes an asymptotic approximation of the indefinite integral \
\[Integral]f(x)dx for x centered at x0. AsymptoticIntegrate[f, {x, a, b}, \
\[Alpha]->\[Alpha]0] computes an asymptotic approximation of the definite \
integral \[Integral]a(\[Alpha])b(\[Alpha])f(x, \[Alpha])dx for \[Alpha] \
centered at \[Alpha]0. AsymptoticIntegrate[f, \[Ellipsis], {\[Xi], \[Xi]0, \
n}] computes the asymptotic approximation to order n."}, 
 {"AsymptoticLess", "AsymptoticLess[f, g, x->x^*] gives conditions for \
f(x)\[Precedes]g(x) or f(x)\[Element]o(g(x)) as x->x^*. AsymptoticLess[f, g, \
{x1, \[Ellipsis], xn}->{x1*, \[Ellipsis], xn*}] gives conditions for f(x1, \
\[Ellipsis], xn)\[Precedes]g(x1, \[Ellipsis], xn) or f(x1, \[Ellipsis], \
xn)\[Element]o(g(x1, \[Ellipsis], xn)) as {x1, \[Ellipsis], xn}->{x1*, \
\[Ellipsis], xn*}."}, {"AsymptoticLessEqual", "AsymptoticLessEqual[f, g, \
x->x^*] gives conditions for f(x)\[PrecedesEqual]g(x) or \
f(x)\[Element]O(g(x)) as x->x^*. AsymptoticLessEqual[f, g, {x1, \[Ellipsis], \
xn}->{x1*, \[Ellipsis], xn*}] gives conditions for f(x1, \[Ellipsis], \
xn)\[PrecedesEqual]g(x1, \[Ellipsis], xn) or f(x1, \[Ellipsis], \
xn)\[Element]O(g(x1, \[Ellipsis], xn)) as {x1, \[Ellipsis], xn}->{x1*, \
\[Ellipsis], xn*}."}, {"AsymptoticOutputTracker", "AsymptoticOutputTracker[sy\
s, {f1, \[Ellipsis]}, {p1, \[Ellipsis]}] gives the state feedback control law \
that causes the outputs of the affine system sys to track the reference \
signals fi with decay rates pj. AsymptoticOutputTracker[{sys, {out1, \
\[Ellipsis]}, {in1, \[Ellipsis]}}, \[Ellipsis]] specifies outputs outi and \
control inputs inj to use."}, {"AsymptoticProbability", "AsymptoticProbabilit\
y[pred, x\[Distributed]dist, a->a0] computes an asymptotic approximation for \
the probability of pred centered at a0, under the assumption that x follows \
the probability distribution dist. AsymptoticProbability[pred, {x1, x2, \
\[Ellipsis]}\[Distributed]dist, a->a0] computes an asymptotic approximation \
for the probability of pred centered at a0, under the assumption that {x1, \
x2, \[Ellipsis]} follows the multivariate distribution dist. \
AsymptoticProbability[pred,vars, {a, a0, n}] computes the asymptotic \
probability to order n."}, {"AsymptoticProduct", "AsymptoticProduct[f, x, \
x->x0] computes an asymptotic approximation of the indefinite product \
\[Product]xf(x) for x near x0. AsymptoticProduct[f, {x, a, b}, \
\[Alpha]->\[Alpha]0] computes an asymptotic approximation of the definite \
product \[Product]a(\[Alpha])b(\[Alpha])f(x, \[Alpha]) for \[Alpha] near \
\[Alpha]0. AsymptoticProduct[f, \[Ellipsis], {\[Xi],\[Xi]0,n}] computes the \
asymptotic approximation to order n."}, {"AsymptoticRSolveValue", "Asymptotic\
RSolveValue[eqn, f, x->\[Infinity]] computes an asymptotic approximation to \
the difference equation eqn for f[x] near \[Infinity]. \
AsymptoticRSolveValue[{eqn1, eqn2, \[Ellipsis]}, {f1, f2, \[Ellipsis]}, x-> \
\[Infinity]] computes an asymptotic approximation to a system of difference \
equations. AsymptoticRSolveValue[eqn, f, x, \[Epsilon]->\[Epsilon]0] computes \
an asymptotic approximation of f[x, \[Epsilon]] for the parameter \[Epsilon] \
centered at \[Epsilon]0. AsymptoticRSolveValue[eqn, f, \[Ellipsis], {\[Xi], \
\[Xi]0, n}] computes the asymptotic approximation to order n."}, 
 {"AsymptoticSolve", "AsymptoticSolve[eqn, y->b, x->a] computes asymptotic \
approximations of solutions y[x] of the equation eqn passing through {a, b}. \
AsymptoticSolve[eqn, {y}, x->a] computes asymptotic approximations of \
solutions y[x] of the equation eqn for x near a. AsymptoticSolve[eqns, {y1, \
y2, \[Ellipsis]}->{b1, b2, \[Ellipsis]}, {x1, x2, \[Ellipsis]}->{a1, a2, \
\[Ellipsis]}] computes asymptotic approximations of solutions {y1[x1, x2, \
\[Ellipsis]], y2[x1, x2, \[Ellipsis]], \[Ellipsis]} of the system of \
equations eqns. AsymptoticSolve[eqns, \[Ellipsis], {{x1, x2, \[Ellipsis]}, \
{a1, a2, \[Ellipsis]}, n}] computes the asymptotic approximation to order n. \
AsymptoticSolve[\[Ellipsis], Reals] computes only solutions that are real \
valued for real argument values."}, {"AsymptoticSum", "AsymptoticSum[f, x, \
x->x0] computes an asymptotic approximation of the indefinite sum \[Sum]f(x) \
for x centered at x0. AsymptoticSum[f, {x, a, b}, \[Alpha]->\[Alpha]0] \
computes an asymptotic approximation of the definite sum \
\[Sum]a(\[Alpha])b(\[Alpha])f(x, \[Alpha]) for \[Alpha] centered at \
\[Alpha]0. AsymptoticSum[f, \[Ellipsis], {\[Xi], \[Xi]0, n}] computes the \
asymptotic approximation to order n."}, {"Asynchronous", "Asynchronous is an \
option for WolframAlpha that determines whether to use the asynchronous \
features of the Wolfram|Alpha API."}, {"Atom", "Atom[\"\\!\\(\\*sym\"] \
represents an atom with atomic symbol \"\\!\\(\\*sym\". \
Atom[\"\\!\\(\\*sym\", name->value,\[Ellipsis]] represents an atom with \
atomic symbol \"\\!\\(\\*sym\" and specified properties."}, 
 {"AtomCoordinates", "AtomCoordinates is an option for Molecule and related \
functions that specifies the three-dimensional coordinates of the atoms."}, 
 {"AtomCount", "AtomCount[mol] gives the number of atoms in the molecule \
represented by mol. AtomCount[mol, patt] gives the number of atoms in the \
molecule mol matching the atom pattern patt."}, 
 {"AtomDiagramCoordinates", "AtomDiagramCoordinates is an option for Molecule \
and related functions that specifies the two-dimensional coordinates of the \
atoms."}, {"AtomList", "AtomList[mol] gives the list of atoms in the molecule \
represented by mol. AtomList[mol, patt] gives the list of atoms in the \
molecule mol matching the atom pattern patt. AtomList[mol, patt, \
\"\\!\\(\\*prop\"] gives the value for the specified property of the atoms \
matching patt."}, {"AtomQ", "AtomQ[expr] yields True if expr is an expression \
which cannot be divided into subexpressions, and yields False otherwise."}, 
 {"AttachCell", "AttachCell[expr] makes expr a cell attached to the current \
cell being evaluated. AttachCell[obj, expr] makes expr a cell attached to the \
notebook, cell or box object obj. AttachCell[obj, expr, pos] specifies that \
the attached cell should be at position pos relative to obj. AttachCell[obj, \
expr, pos, dist] specifies that the attached cell should be at a distance \
dist from pos. AttachCell[obj, expr, pos, dist, opos] aligns the attached \
cell so that position opos in expr lies at distance dist from location pos. \
AttachCell[cellobj, expr, \"Inline\"] specifies that the attached cell should \
be positioned between the bottom of cellobj and its bottom margin."}, 
 {"AttentionLayer", "AttentionLayer[] represents a trainable net layer that \
learns to pay attention to certain portions of its input. AttentionLayer[net] \
specifies a particular net to give scores for portions of the input. \
AttentionLayer[net, opts] includes options for weight normalization, masking \
and other parameters."}, {"Attributes", "Attributes[symbol] gives the list of \
attributes for a symbol. Attributes[\"\\!\\(\\*symbol\"] gives the attributes \
for the symbol named \"\\!\\(\\*symbol\" if it exists. Attributes[{s1, s2, \
\[Ellipsis]}] gives a list of the attributes for each of the si."}, 
 {"Audio", "Audio[file] represents audio stored in the given file. Audio[url] \
represents audio stored in the given URL. Audio[data] represents audio with \
samples given by the array data."}, {"AudioAmplify", 
  "AudioAmplify[audio, s] multiplies all samples of audio by a factor s."}, 
 {"AudioAnnotate", "AudioAnnotate[audio, prop] computes the property prop and \
adds it as an annotation to audio. AudioAnnotate[audio, name->spec] adds an \
annotation with the specified name and values spec to audio."}, 
 {"AudioAnnotationLookup", "AudioAnnotationLookup[audio] gives all \
annotations associated to audio. AudioAnnotationLookup[audio, tags] gives the \
annotations specified by tags. AudioAnnotationLookup[audio, tags->selector] \
gives a selection of annotations using selector. AudioAnnotationLookup[audio, \
tags->selector, format] formats each annotation element according to format."}\
, {"AudioBlockMap", "AudioBlockMap[f, audio, dur] applies f to \
non-overlapping partitions of length dur in audio. AudioBlockMap[f, audio, \
{dur, offset}] applies f to partitions with offset offset in audio. \
AudioBlockMap[f, audio, {dur, offset, wfun}] applies f after applying wfun to \
partitions in audio."}, {"AudioCapture", "AudioCapture[] creates a temporary \
interactive interface for capturing an audio signal. AudioCapture[file] \
captures an audio signal into file."}, {"AudioChannelAssignment", "AudioChann\
elAssignment is an option for Audio and related functions that specifies a \
mapping from audio channels to available speakers of the output audio \
device."}, {"AudioChannelCombine", "AudioChannelCombine[{audio1, audio2, \
\[Ellipsis]}] creates a multichannel audio object by combining the sequence \
of channels in audioi."}, {"AudioChannelMix", "AudioChannelMix[audio] mixes \
channels of audio by averaging and returns a center-panned stereo audio \
object. AudioChannelMix[audio, desttype] mixes audio channels into the \
specified desttype."}, {"AudioChannelSeparate", "AudioChannelSeparate[audio] \
gives a list of Audio objects, each of which represents one channel of audio. \
AudioChannelSeparate[audio, channel] returns the specified channel from \
audio."}, {"AudioChannels", "AudioChannels[audio] returns the number of \
channels in the Audio object audio."}, {"AudioData", "AudioData[audio] gives \
an array of audio samples. AudioData[audio, \"\\!\\(\\*type\"] gives an array \
of audio samples converted to the specified \"\\!\\(\\*type\"."}, 
 {"AudioDelay", "AudioDelay[audio, delay] creates audio by adding repeated \
decaying echos to audio spaced by the specified delay. AudioDelay[audio, \
delay, feedback] uses the specified feedback as the amount of signal to \
preserve during each repetition. AudioDelay[audio, delay, feedback, mix] uses \
mix to control the ratio between original and delayed audio."}, 
 {"AudioDelete", "AudioDelete[audio, t] deletes the first t seconds of audio. \
AudioDelete[audio, - t] deletes the last t seconds of audio. \
AudioDelete[audio, {t1, t2}] deletes from time t1 to time t2, returning the \
remaining audio as a single Audio object. AudioDelete[audio, {{t11, t12}, \
\[Ellipsis]}] deletes multiple time intervals."}, 
 {"AudioDistance", "AudioDistance[audio1, audio2] returns a distance measure \
between audio1 and audio2."}, {"AudioEncoding", "AudioEncoding is an option \
for Export and other functions that specifies the audio encoding to use when \
creating an audio or a video file."}, {"AudioFade", "AudioFade[audio] returns \
audio in which the beginning and end of audio are faded. AudioFade[audio, t] \
fades the first and last t seconds of audio. AudioFade[audio, {t1, t2}] fades \
t1 seconds at the beginning and t2 seconds at the end."}, 
 {"AudioFrequencyShift", "AudioFrequencyShift[audio, freq] gives audio by \
shifting the spectrum of audio by freq. AudioFrequencyShift[audio, freq, mix] \
uses mix to control the ratio between the original and shifted audio."}, 
 {"AudioGenerator", "AudioGenerator[model] generates one second of audio of a \
given model. AudioGenerator[model, t] generates t seconds of audio. \
AudioGenerator[model, t, \"\\!\\(\\*type\"] generates audio samples of the \
specified \"\\!\\(\\*type\"."}, {"AudioIdentify", "AudioIdentify[audio] \
yields the result of attempting to identify what audio is a recording of. \
AudioIdentify[audio, category] restricts the identification to the specified \
category. AudioIdentify[audio, category, n] gives a list of up to n possible \
identifications. AudioIdentify[audio, category, n, \"\\!\\(\\*prop\"] gives \
the specified property for each identification."}, 
 {"AudioInputDevice", "AudioInputDevice is an option for AudioCapture that \
specifies the device to use for audio recording."}, 
 {"AudioInsert", "AudioInsert[audio, t->new] inserts the audio signal new at \
time t. AudioInsert[audio, {t1, t2, \[Ellipsis]}->new] inserts the same audio \
at multiple positions. AudioInsert[audio, {t1->new1, \[Ellipsis]}] inserts \
multiple audio signals at different positions."}, 
 {"AudioInstanceQ", "AudioInstanceQ[audio, obj] gives True if audio sounds to \
be an instance of the object obj, and gives False otherwise. \
AudioInstanceQ[audio, obj, cat] assumes that audio is the sound of something \
in the category cat."}, {"AudioIntervals", "AudioIntervals[audio] returns \
audible intervals of audio. AudioIntervals[audio, crit] returns intervals of \
audio for which the criterion crit is satisfied. AudioIntervals[audio, crit, \
mindur] returns only intervals larger than the given duration mindur."}, 
 {"AudioJoin", "AudioJoin[audio1, audio2, \[Ellipsis]] or AudioJoin[{audio1, \
audio2, \[Ellipsis]}] concatenates all audioi and returns an audio object. \
AudioJoin[{audio1, t1}, {audio2, t2}, \[Ellipsis]] inserts ti seconds of \
silence after each audioi."}, {"AudioLabel", "AudioLabel is an option for an \
Audio object that specifies the label to show on the object."}, 
 {"AudioLength", "AudioLength[audio] returns the number of samples in the \
Audio object audio."}, {"AudioLocalMeasurements", "AudioLocalMeasurements[aud\
io, \"\\!\\(\\*prop\"] computes the property \"\\!\\(\\*prop\" locally for \
partitions of audio. AudioLocalMeasurements[audio, {\"\\!\\(\\*prop_1\", \
\"\\!\\(\\*prop_2\", \[Ellipsis]}] computes several properties \
\"\\!\\(\\*prop_i\". AudioLocalMeasurements[audio, \"\\!\\(\\*prop\", format] \
returns the measurements in the specified output format."}, 
 {"AudioLoudness", "AudioLoudness[audio] computes the loudness of audio \
according to the EBU momentary definition. AudioLoudness[audio, def] computes \
the loudness according to the definition def."}, 
 {"AudioMeasurements", "AudioMeasurements[audio, \"\\!\\(\\*prop\"] computes \
the property \"\\!\\(\\*prop\" for the entire audio. AudioMeasurements[audio, \
{\"\\!\\(\\*prop_1\", \"\\!\\(\\*prop_2\", \[Ellipsis]}] computes several \
properties \"\\!\\(\\*prop_i\". AudioMeasurements[audio, \"\\!\\(\\*prop\", \
format] returns the values in the specified output format. \
AudioMeasurements[{audio1, audio2, \[Ellipsis]}, \[Ellipsis]] returns \
measurements for all audioi."}, {"AudioNormalize", "AudioNormalize[audio] \
normalizes audio so that the maximum absolute value of its samples is 1. \
AudioNormalize[audio, model] normalizes the audio signal based on the \
specified model."}, {"AudioOutputDevice", "AudioOutputDevice is an option for \
Audio and related functions that specifies the device to use for playback."}, 
 {"AudioOverlay", "AudioOverlay[{audio1, audio2, \[Ellipsis]}] returns an \
audio object by overlaying all audioi."}, {"AudioPad", "AudioPad[audio, t] \
adds t seconds of silence to the end of audio. AudioPad[audio, {t1, t2}] adds \
t1 seconds of silence to the beginning and t2 seconds to the end of audio. \
AudioPad[audio, tspec, padding] pads using the value or method specified by \
padding."}, {"AudioPan", "AudioPan[audio] returns a center-panned stereo \
audio object from a mono audio. AudioPan[audio, pan] returns a stereo audio \
object after panning left and right channels using the specified pan."}, 
 {"AudioPartition", "AudioPartition[audio, dur] partitions an audio object \
into non-overlapping segments of duration dur. AudioPartition[audio, dur, \
offset] generates segments with specified offset."}, 
 {"AudioPause", "AudioPause[] pauses the playback of all AudioStream objects. \
AudioPause[astream] pauses the playback of the AudioStream object astream. \
AudioPause[audio] pauses the playback for all streams originated by audio."}, 
 {"AudioPitchShift", "AudioPitchShift[audio, r] applies pitch shifting to \
audio by the ratio r, shifting every frequency f to r f."}, 
 {"AudioPlay", "AudioPlay[audio] returns a new AudioStream object from audio \
and starts the playback. AudioPlay[astream] starts playing an AudioStream \
object astream."}, {"AudioPlot", "AudioPlot[audio] plots the waveform of \
audio. AudioPlot[{audio1, audio2, \[Ellipsis]}] plots waveforms of all \
audioi."}, {"AudioQ", "AudioQ[audio] yields True if audio has the form of a \
valid Audio object, and False otherwise."}, {"AudioRecord", "AudioRecord[] \
returns a new AudioStream object and starts to record from the default input \
audio device. AudioRecord[inputdev] records from the input audio device \
inputdev. AudioRecord[astream] starts recording an AudioStream object astream \
that is connected to an input device."}, {"AudioReplace", "AudioReplace[audio\
, {t1, t2}->new] replaces the audio signal between t1 and t2 with the new \
signal new. AudioReplace[audio, {{t11, t12}, \[Ellipsis]}->new] replaces \
multiple intervals with the same audio new. AudioReplace[audio, {{t11, \
t12}->new1, \[Ellipsis]}] replaces multiple intervals. AudioReplace[audio, \
{t1, t2}->new, fitting] uses the specified fitting method."}, 
 {"AudioResample", 
  "AudioResample[audio, sr] resamples audio to have the sample rate of sr."}, 
 {"AudioReverb", "AudioReverb[audio] adds reverberation to audio. \
AudioReverb[audio, model] adds reverberation following the room model. \
AudioReverb[audio, model, mix] controls the mix ratio between original and \
reverberated audio."}, {"AudioReverse", 
  "AudioReverse[audio] reverses audio so that the signal is played backward."}\
, {"AudioSampleRate", 
  "AudioSampleRate[audio] returns the sample rate of the Audio object audio."}\
, {"AudioSpectralMap", "AudioSpectralMap[f, audio] transforms audio by \
applying the function f to its short-time Fourier transform. \
AudioSpectralMap[f, {audio1, \[Ellipsis]}] applies the function f to the list \
of short-time Fourier transforms of all audioi."}, 
 {"AudioSpectralTransformation", "AudioSpectralTransformation[f, audio] \
returns a modified version of audio by applying a time-frequency \
transformation f to its short-time Fourier transform."}, 
 {"AudioSplit", "AudioSplit[audio, t] splits audio at time t. \
AudioSplit[audio, {t1, t2, \[Ellipsis]}] splits audio at times ti."}, 
 {"AudioStop", "AudioStop[] stops the playback of all AudioStream objects. \
AudioStop[astream] stops the playback of the AudioStream object astream. \
AudioStop[audio] stops the playback for all streams originated by audio."}, 
 {"AudioStream", "AudioStream[source] creates a new AudioStream object from \
source. AudioStream[id] is an object that represents a unique audio stream."}\
, {"AudioStreams", "AudioStreams[] returns all existing streams. \
AudioStreams[audio] returns all existing streams that originated from audio. \
AudioStreams[audio, \"\\!\\(\\*prop\"] returns \"\\!\\(\\*prop\" for all \
streams that originated from audio."}, {"AudioTimeStretch", "AudioTimeStretch\
[audio, r] applies time stretching to audio by the specified factor r."}, 
 {"AudioTrackApply", "AudioTrackApply[f, video] applies the function f to the \
first audio track of the Video object video."}, 
 {"AudioTrackSelection", "AudioTrackSelection is an option that specifies the \
audio tracks of interest."}, {"AudioTrim", "AudioTrim[audio] trims silence \
from the beginning and end of audio. AudioTrim[audio, t] returns the first t \
seconds of audio. AudioTrim[audio, - t] returns the last t seconds of audio. \
AudioTrim[audio, {t1, t2}] returns audio starting at time t1 and ending at \
time t2 of audio. AudioTrim[audio, {{t11, t12}, \[Ellipsis]}] returns a list \
of audio for all given intervals {ti1, ti2}."}, 
 {"AudioType", "AudioType[audio] returns the data type used to represent \
samples in the Audio object audio."}, {"AugmentedPolyhedron", "AugmentedPolyh\
edron[poly] gives the augmented polyhedron poly by replacing each face by a \
pyramid. AugmentedPolyhedron[poly, h] gives the augmented polyhedron with a \
pyramid of height h."}, {"AugmentedSymmetricPolynomial", "AugmentedSymmetricP\
olynomial[{r1, r2, \[Ellipsis]}] represents a formal augmented symmetric \
polynomial with exponents r1, r2, \[Ellipsis]. \
AugmentedSymmetricPolynomial[{{r11, \[Ellipsis], r1n}, {r21, \[Ellipsis], \
r2n}, \[Ellipsis]}] represents a multivariate formal augmented symmetric \
polynomial with exponent vectors {r11, \[Ellipsis], r1n}, {r21, \[Ellipsis], \
r2n}, \[Ellipsis]. AugmentedSymmetricPolynomial[rspec, data] gives the \
augmented symmetric polynomial in data."}, {"Authentication", "Authentication \
is an option for cloud, web and SSH access functions that allows \
authentication parameters to be given."}, {"AuthenticationDialog", "Authentic\
ationDialog[] initiates a standard dialog for entering username/password \
authentication information. AuthenticationDialog[\"\\!\\(\\*type\"] initiates \
an authentication dialog of the specified standard type. \
AuthenticationDialog[{\"\\!\\(\\*key_1\", \"\\!\\(\\*key_2\", \[Ellipsis]}] \
initiates an authentication dialog that requests values for the specified \
keys. AuthenticationDialog[arg, func] applies the function func to the \
dialog's return value."}, {"AutoAction", "AutoAction is an option for objects \
such as Slider, Locator, and Button that specifies whether they should \
automatically take action whenever the mouse pointer is over them, even if \
they are not clicked."}, {"AutoCopy", "AutoCopy is an option for notebooks \
and cloud objects that specifies whether to automatically make a copy when \
the object is opened."}, {"AutoDelete", "AutoDelete is an option for boxes \
that specifies whether a box is automatically deleted when its contents are \
edited."}, {"AutoIndent", "AutoIndent is an option for Style and Cell that \
specifies what automatic indentation should be done at the beginning of a new \
line after an explicit return character has been entered."}, 
 {"AutoItalicWords", "AutoItalicWords is an option for Cell that gives a list \
of words that should automatically be put in italics when they are entered."}\
, {"AutoMultiplicationSymbol", "AutoMultiplicationSymbol is an option for \
objects such as Cell and Notebook that specifies when to automatically \
display a multiplication symbol between elements separated by whitespace that \
implies multiplication."}, {"AutoOperatorRenderings", "AutoOperatorRenderings \
is an option for cells and notebooks that specifies automatic renderings to \
be used for strings representing operators."}, 
 {"AutoRefreshed", "AutoRefreshed[expr] represents an expression to be \
reevaluated every hour and made available in the cloud. AutoRefreshed[expr, \
dt] reevaluates at time interval dt. AutoRefreshed[expr, timespec] \
reevaluates on the schedule specified by timespec. AutoRefreshed[expr, \
timespec, fmt] specifies that the result from evaluating expr should be given \
in format fmt. AutoRefreshed[expr, timespec, {fmt, rform}] specifies that the \
result should be given as a response of the form rform."}, 
 {"AutoRemove", "AutoRemove is an option specifying whether tasks, \
generators, cloud objects and related constructs should be removed after they \
are executed."}, {"AutoScroll", "AutoScroll is an option to SelectionMove and \
related functions that specifies whether a notebook should automatically be \
scrolled to display the current selection."}, {"AutoSpacing", "AutoSpacing is \
an option for Style and Cell that specifies whether spaces between successive \
characters should be adjusted automatically."}, 
 {"AutoSubmitting", "AutoSubmitting[spec] represents an element of a form \
that automatically submits the whole form if it is entered."}, 
 {"Autocomplete", "Autocomplete[{\"\\!\\(\\*string_1\", \
\"\\!\\(\\*string_2\", \[Ellipsis]}, \"\\!\\(\\*string\"] gives a list of the \
stringi that can complete string. \
Autocomplete[\[LeftAssociation]\"\\!\\(\\*s_1\"->w1, \"\\!\\(\\*s_2\"->w2, \
\[Ellipsis]\[RightAssociation], \"\\!\\(\\*string\"] puts the completions in \
order of decreasing weights wi. Autocomplete[{assoc1, assoc2, \[Ellipsis]}, \
\"\\!\\(\\*string\"] uses completions specified by the associations associ. \
Autocomplete[comps, \"\\!\\(\\*string\", n] gives the first at most n \
completions. Autocomplete[comps] gives an AutocompletionFunction[\[Ellipsis]] \
that can be applied to a string."}, {"AutocompletionFunction", "Autocompletio\
nFunction[\[Ellipsis]] represents a function to be applied to a string to \
generate possible completions."}, {"AutocorrelationTest", "AutocorrelationTes\
t[data] tests whether the data is autocorrelated. AutocorrelationTest[data, \
k] tests whether the data is autocorrelated up to lag k. \
AutocorrelationTest[data, k, \"\\!\\(\\*property\"] returns the value of \
\"\\!\\(\\*property\\!\\(\\*\\\" for a given model."}, 
 {"Automatic", "Automatic represents an option or other value that is to be \
chosen automatically by a built-in function."}, 
 {"AutorunSequencing", "AutorunSequencing is an option for Manipulate that \
specifies how autorun should use the controls provided."}, 
 {"Axes", "Axes is an option for graphics functions that specifies whether \
axes should be drawn."}, {"AxesEdge", "AxesEdge is an option for \
three-dimensional graphics functions that specifies on which edges of the \
bounding box axes should be drawn."}, {"AxesLabel", "AxesLabel is an option \
for graphics functions that specifies labels for axes."}, 
 {"AxesOrigin", "AxesOrigin is an option for graphics functions that \
specifies where any axes drawn should cross."}, 
 {"AxesStyle", "AxesStyle is an option for graphics functions that specifies \
how axes should be rendered."}, {"AxiomaticTheory", "AxiomaticTheory[\"\\!\\(\
\\*theory\"] gives an axiomatic representation of the specified axiomatic \
theory. AxiomaticTheory[{\"\\!\\(\\*theory\", \
\[LeftAssociation]\"\\!\\(\\*op_1\"->s1, \"\\!\\(\\*op_2\"->s2, \
\[Ellipsis]\[RightAssociation]}] uses si to represent the operator opi in the \
theory. AxiomaticTheory[theory, \"\\!\\(\\*property\"] gives the specified \
property of an axiomatic theory."}, {"Axis", "Axis is a symbol that \
represents the axis for purposes of alignment and positioning."}, 
 {"AxisLabel", 
  "AxisLabel is an option for AxisObject that specifies a label for the \
axis."}, {"AxisObject", "AxisObject[path] is a Graphics primitive that \
represents an axis with a quantitative scale along the path path. \
AxisObject[path, scale] uses the scale specified by scale."}, 
 {"AxisStyle", "AxisStyle is an option for AxisObject that specifies how to \
style the path of an axis."}, {"BSplineBasis", "BSplineBasis[d, x] gives the \
zeroth uniform B-spline basis function of degree d at x. BSplineBasis[d, n, \
x] gives the n^th uniform B-spline basis function of degree d. \
BSplineBasis[{d, {u1, u2, \[Ellipsis]}}, n, x] gives the n^th non-uniform \
B-spline basis function of degree d with knots at positions ui."}, 
 {"BSplineCurve", "BSplineCurve[{pt1, pt2, \[Ellipsis]}] is a graphics \
primitive that represents a nonuniform rational B-spline curve with control \
points pti."}, {"BSplineFunction", "BSplineFunction[{pt1, pt2, \[Ellipsis]}] \
represents a B-spline function for a curve defined by the control points pti. \
BSplineFunction[array] represents a B-spline function for a surface or \
high-dimensional manifold."}, {"BSplineSurface", "BSplineSurface[array] is a \
graphics primitive that represents a nonuniform rational B-spline surface \
defined by an array of x, y, z control points."}, 
 {"BabyMonsterGroupB", 
  "BabyMonsterGroupB[] represents the sporadic simple baby monster group B."}\
, {"Back", "Back is a symbol that represents the back of a graphic for \
purposes of placement and alignment."}, 
 {"Background", 
  "Background is an option that specifies what background color to use."}, 
 {"Backslash", "Backslash[x, y, \[Ellipsis]] displays as \
x\[Backslash]y\[Backslash]\[Ellipsis]."}, {"Backward", "Backward is a symbol \
that represents the backward direction for purposes of motion and animation."}\
, {"Ball", "Ball[p] represents the unit ball centered at the point p. Ball[p, \
r] represents the ball of radius r centered at the point p. Ball[{p1, p2, \
\[Ellipsis]}, r] represents a collection of balls of radius r."}, 
 {"Band", "Band[{i, j}] represents the sequence of positions on the diagonal \
band that starts with {i, j} in a sparse array. Band[{imin, jmin, \
\[Ellipsis]}, {imax, jmax, \[Ellipsis]}] represents the positions between \
{imin, jmin, \[Ellipsis]} and {imax, jmax, \[Ellipsis]}. Band[{imin, jmin, \
\[Ellipsis]}, {imax, jmax, \[Ellipsis]}, {di, dj, \[Ellipsis]}] represents \
positions starting with {imin, jmin, \[Ellipsis]} and then moving with step \
{di, dj, \[Ellipsis]}."}, {"BandpassFilter", "BandpassFilter[data, \
{\[Omega]1, \[Omega]2}] applies a bandpass filter with cutoff frequencies \
\[Omega]1 and \[Omega]2 to an array of data. BandpassFilter[data, {{\[Omega], \
q}}] uses center frequency \[Omega] and quality factor q. \
BandpassFilter[data, spec, n] uses a filter kernel of length n. \
BandpassFilter[data, spec, n, wfun] applies a smoothing window wfun to the \
filter kernel."}, {"BandstopFilter", "BandstopFilter[data, {\[Omega]1, \
\[Omega]2}] applies a bandstop filter with cutoff frequencies \[Omega]1 and \
\[Omega]2 to an array of data. BandstopFilter[data, {{\[Omega], q}}] uses \
center frequency \[Omega] and quality factor q. BandstopFilter[data, spec, n] \
uses a filter kernel of length n. BandstopFilter[data, spec, n, wfun] applies \
a smoothing window wfun to the filter kernel."}, 
 {"BarChart", "BarChart[{y1, y2, \[Ellipsis], yn}] makes a bar chart with bar \
lengths y1, y2, \[Ellipsis]. BarChart[{\[Ellipsis], wi[yi, \[Ellipsis]], \
\[Ellipsis], wj[yj, \[Ellipsis]], \[Ellipsis]}] makes a bar chart with bar \
features defined by the symbolic wrappers wk. BarChart[{data1, data2, \
\[Ellipsis]}] makes a bar chart from multiple datasets datai."}, 
 {"BarChart3D", "BarChart3D[{y1, y2, \[Ellipsis]}] makes a 3D bar chart with \
bar lengths y1, y2, \[Ellipsis]. BarChart3D[{\[Ellipsis], wi[yi, \
\[Ellipsis]], \[Ellipsis], wj[yj, \[Ellipsis]], \[Ellipsis]}] makes a 3D bar \
chart with bar features defined by the symbolic wrappers wk. \
BarChart3D[{data1, data2, \[Ellipsis]}] makes a 3D bar chart from multiple \
datasets datai."}, {"BarLegend", "BarLegend[cf] generates a legend that \
identifies colors from the color function cf with an automatic range of \
values. BarLegend[{cf, {min, max}}] generates a legend that identifies colors \
from the color function cf with the range of values between min and max. \
BarLegend[cf, contours] generates a legend that identifies color ranges from \
the color function cf based on the set of contours contours."}, 
 {"BarOrigin", "BarOrigin is an option to BarChart and related functions that \
specifies the origin placement for bars."}, {"BarSpacing", "BarSpacing is an \
option to BarChart and related functions that controls the spacing between \
bars and groups of bars."}, {"BarabasiAlbertGraphDistribution", "BarabasiAlbe\
rtGraphDistribution[n, k] represents a Barabasi-Albert graph distribution for \
n -vertex graphs where a new vertex with k edges is added at each step."}, 
 {"BarcodeImage", "BarcodeImage[\"\\!\\(\\*string\", format] generates a \
barcode image of \"\\!\\(\\*string\" in the specified format. \
BarcodeImage[\"\\!\\(\\*string\", format, size] attempts to generate a \
barcode image of the specified size."}, {"BarcodeRecognize", "BarcodeRecogniz\
e[image] recognizes a barcode in image and returns it as a string. \
BarcodeRecognize[image, \"\\!\\(\\*prop\"] returns the specified property of \
the barcode. BarcodeRecognize[image, \"\\!\\(\\*prop\", format] recognizes \
barcodes of the specified format only."}, {"BaringhausHenzeTest", "Baringhaus\
HenzeTest[data] tests whether data follows a MultinormalDistribution using \
the Baringhaus-Henze test. BaringhausHenzeTest[data, \
MultinormalDistribution[\[Mu], \[CapitalSigma]]] tests whether data follows \
the distribution with mean vector \[Mu] and covariance matrix \
\[CapitalSigma]. BaringhausHenzeTest[data, \"\\!\\(\\*property\"] returns the \
value of \"\\!\\(\\*property\"."}, {"BarlowProschanImportance", "BarlowProsch\
anImportance[rdist] gives the Barlow-Proschan importances for all components \
in the ReliabilityDistribution rdist. BarlowProschanImportance[fdist] gives \
the Barlow-Proschan importances for all components in the FailureDistribution \
fdist."}, {"BarnesG", "BarnesG[z] gives the Barnes G-function G(z)."}, 
 {"BartlettHannWindow", 
  "BartlettHannWindow[x] represents a Bartlett-Hann window function of x."}, 
 {"BartlettWindow", 
  "BartlettWindow[x] represents a Bartlett window function of x."}, 
 {"BaseDecode", "BaseDecode[\"\\!\\(\\*string\"] decodes the Base64 data \
contained in a string and returns the result as a byte array. \
BaseDecode[\"\\!\\(\\*string\", \"\\!\\(\\*encoding\"] decodes using the \
string using the specified encoding."}, {"BaseEncode", "BaseEncode[ba] \
encodes the byte array ba as a Base64 string. BaseEncode[ba, \
\"\\!\\(\\*encoding\"] encodes using the specified encoding."}, 
 {"BaseForm", 
  "BaseForm[expr, n] prints with the numbers in expr given in base n."}, 
 {"BaseStyle", "BaseStyle is an option for formatting and related constructs \
that specifies the base style to use for them."}, 
 {"Baseline", "Baseline is a symbol that represents the baseline for purposes \
of alignment and positioning."}, {"BaselinePosition", "BaselinePosition is an \
option that specifies where the baseline of an object is considered to be for \
purposes of alignment with surrounding text or other expressions."}, 
 {"BasicRecurrentLayer", "BasicRecurrentLayer[n] represents a trainable \
recurrent layer that takes a sequence of vectors and produces a sequence of \
vectors each of size n. BasicRecurrentLayer[n, opts] includes options for \
initial weights and other parameters."}, {"BatchNormalizationLayer", "BatchNo\
rmalizationLayer[] represents a trainable net layer that normalizes its input \
data by learning the data mean and variance."}, 
 {"BatchSize", "BatchSize is an option for NetTrain and related functions \
that specifies the size of a batch of examples to process together."}, 
 {"BatesDistribution", "BatesDistribution[n] represents the distribution of a \
mean of n random variables uniformly distributed from 0 to 1. \
BatesDistribution[n, {min, max}] represents the distribution of a mean of n \
random variables uniformly distributed from min to max."}, 
 {"BattleLemarieWavelet", "BattleLemarieWavelet[] represents the \
Battle-Lemari\[EAcute] wavelet of order 3. BattleLemarieWavelet[n] represents \
the Battle-Lemari\[EAcute] wavelet of order n evaluated on equally spaced \
interval { - 10, 10}. BattleLemarieWavelet[n, lim] represents the \
Battle-Lemari\[EAcute] wavelet of order n evaluated on equally spaced \
interval { - lim,lim}."}, {"BayesianMaximization", "BayesianMaximization[f, \
{conf1, conf2, \[Ellipsis]}] gives an object representing the result of \
Bayesian maximization over the function f over the configurations confi. \
BayesianMaximization[f, reg] maximizes over the region represented by the \
region specification reg. BayesianMaximization[f, sampler] maximizes over \
configurations obtained by applying the function sampler. \
BayesianMaximization[f, {conf1, conf2, \[Ellipsis]}->nsampler] applies the \
function nsampler to successively generate configurations starting from the \
confi."}, {"BayesianMaximizationObject", "BayesianMaximizationObject[\
\[Ellipsis]] represents the result of a Bayesian maximization process."}, 
 {"BayesianMinimization", "BayesianMinimization [f, {conf1, conf2, \
\[Ellipsis]}] gives an object representing the result of Bayesian \
minimization of the function f over the configurations confi. \
BayesianMinimization[f, reg] minimizes over the region represented by the \
region specification reg. BayesianMinimization[f, sampler] minimizes over \
configurations obtained by applying the function sampler. \
BayesianMinimization [f, {conf1, conf2, \[Ellipsis]}->nsampler] applies the \
function nsampler to successively generate configurations starting from the \
confi."}, {"BayesianMinimizationObject", "BayesianMinimizationObject[\
\[Ellipsis]] represents the result of a Bayesian minimization process."}, 
 {"Because", "Because[x, y] displays as x\[Because]y."}, 
 {"BeckmannDistribution", "BeckmannDistribution[\[Mu]1, \[Mu]2, \[Sigma]1, \
\[Sigma]2] represents the Beckmann distribution with means \[Mu]1 and \[Mu]2 \
and standard deviations \[Sigma]1 and \[Sigma]2. BeckmannDistribution[\[Mu]1, \
\[Mu]2, \[Sigma]1, \[Sigma]2, \[Rho]] represents the Beckmann distribution \
with means \[Mu]1 and \[Mu]2, standard deviations \[Sigma]1 and \[Sigma]2, \
and correlation \[Rho]."}, 
 {"Beep", "Beep[] generates an audible beep when evaluated."}, 
 {"Before", "Before is a symbol that represents the region before an object \
for purposes of placement."}, 
 {"Begin", 
  "Begin[\"\\!\\(\\*StyleBox[\\(\\*context`]\"] resets the current context."}\
, {"BeginDialogPacket", "BeginDialogPacket[integer] is a WSTP packet that \
indicates the start of the Dialog subsession referenced by integer."}, 
 {"BeginPackage", "BeginPackage[\"\\!\\(\\*StyleBox[\\(\\*context`]\"] makes \
context` and System` the only active contexts. \
BeginPackage[\"\\!\\(\\*StyleBox[\\(\\*context`]\", {\"\\!\\(\\*need_1`\", \
\"\\!\\(\\*need_2`\", \[Ellipsis]}] calls Needs on the needi."}, 
 {"BellB", "BellB[n] gives the Bell number Bn. BellB[n, x] gives the Bell \
polynomial Bn(x)."}, {"BellY", "BellY[n, k, {x1, \[Ellipsis], xn - k + 1}] \
gives the partial Bell polynomial Yn, k(x1, \[Ellipsis], xn - k + 1). \
BellY[n, k, m] gives the generalized partial Bell polynomial of a matrix m. \
BellY[m] gives the generalized Bell polynomial of a matrix m."}, 
 {"Below", "Below is a symbol that represents the region below an object for \
purposes of placement."}, {"BenfordDistribution", "BenfordDistribution[b] \
represents a Benford distribution with base parameter b."}, 
 {"BeniniDistribution", "BeniniDistribution[\[Alpha], \[Beta], \[Sigma]] \
represents a Benini distribution with shape parameters \[Alpha] and \[Beta] \
and scale parameter \[Sigma]."}, {"BenktanderGibratDistribution", "Benktander\
GibratDistribution[a, b] represents a Benktander distribution of type I with \
parameters a and b."}, {"BenktanderWeibullDistribution", "BenktanderWeibullDi\
stribution[a, b] represents a Benktander distribution of type II with \
parameters a and b."}, {"BernoulliB", "BernoulliB[n] gives the Bernoulli \
number Bn. BernoulliB[n, x] gives the Bernoulli polynomial Bn(x)."}, 
 {"BernoulliDistribution", "BernoulliDistribution[p] represents a Bernoulli \
distribution with probability parameter p."}, {"BernoulliGraphDistribution", 
  "BernoulliGraphDistribution[n, p] represents a Bernoulli graph distribution \
for n -vertex graphs with edge probability p."}, 
 {"BernoulliProcess", "BernoulliProcess[p] represents a Bernoulli process \
with event probability p."}, {"BernsteinBasis", "BernsteinBasis[d, n, x] \
represents the n^th Bernstein basis function of degree d at x."}, 
 {"BesagL", "BesagL[pdata, r] estimates Besag's L function L(r) for point \
data pdata at radius r. BesagL[pproc, r] computes L(r) for the point process \
pproc. BesagL[bdata, r] computes L(r) for binned data bdata. BesagL[pspec] \
generates the function L that can be applied repeatedly to different radii \
r."}, {"BesselFilterModel", "BesselFilterModel[n] designs a lowpass Bessel \
filter of order n and cutoff frequency 1. BesselFilterModel[{n, \[Omega]c}] \
uses the cutoff frequency \[Omega]c. BesselFilterModel[{n, \[Omega]c}, var] \
expresses the model in terms of the variable var."}, 
 {"BesselI", 
  "BesselI[n, z] gives the modified Bessel function of the first kind In(z)."}\
, {"BesselJ", 
  "BesselJ[n, z] gives the Bessel function of the first kind Jn(z)."}, 
 {"BesselJZero", "BesselJZero[n, k] represents the k^th zero of the Bessel \
function Jn(x). BesselJZero[n, k, x0] represents the k^th zero greater than \
x0."}, {"BesselK", 
  "BesselK[n, z] gives the modified Bessel function of the second kind \
Kn(z)."}, {"BesselY", 
  "BesselY[n, z] gives the Bessel function of the second kind Yn(z)."}, 
 {"BesselYZero", "BesselYZero[n, k] represents the k^th zero of the Bessel \
function of the second kind Yn(x). BesselYZero[n, k, x0] represents the k^th \
zero greater than x0."}, {"Beta", "Beta[a, b] gives the Euler beta function \
\[CapitalBeta](a, b). Beta[z, a, b] gives the incomplete beta function \
\[CapitalBeta]z(a, b)."}, {"BetaBinomialDistribution", "BetaBinomialDistribut\
ion[\[Alpha], \[Beta], n] represents a beta binomial mixture distribution \
with beta distribution parameters \[Alpha] and \[Beta], and n binomial \
trials."}, {"BetaDistribution", "BetaDistribution[\[Alpha], \[Beta]] \
represents a continuous beta distribution with shape parameters \[Alpha] and \
\[Beta]."}, {"BetaNegativeBinomialDistribution", "BetaNegativeBinomialDistrib\
ution[\[Alpha], \[Beta], n] represents a beta negative binomial mixture \
distribution with beta distribution parameters \[Alpha] and \[Beta] and n \
successful trials."}, {"BetaPrimeDistribution", "BetaPrimeDistribution[p, q] \
represents a beta prime distribution with shape parameters p and q. \
BetaPrimeDistribution[p, q, \[Beta]] represents a generalized beta prime \
distribution with scale parameter \[Beta]. BetaPrimeDistribution[p, q, \
\[Alpha], \[Beta]] represents a generalized beta distribution of the second \
kind with shape parameter \[Alpha]."}, {"BetaRegularized", "BetaRegularized[z\
, a, b] gives the regularized incomplete beta function Iz(a, b)."}, 
 {"Between", "Between[x, {min, max}] is equivalent to min<=x<=max. Between[x, \
{{min1, max1}, {min2, max2}, \[Ellipsis]}] is equivalent to \
min1<=x<=max1||min2<=x<=max2||\[Ellipsis]. Between[range] is an operator form \
that yields Between[x, range] when applied to an expression x."}, 
 {"BetweennessCentrality", "BetweennessCentrality[g] gives a list of \
betweenness centralities for the vertices in the graph g. \
BetweennessCentrality[{v->w, \[Ellipsis]}] uses rules v->w to specify the \
graph g."}, {"BeveledPolyhedron", "BeveledPolyhedron[poly] gives the beveled \
polyhedron of poly, by beveling each edge. BeveledPolyhedron[poly, l] bevels \
the polyhedron poly by a length ratio l at its edges."}, 
 {"BezierCurve", "BezierCurve[{pt1, pt2, \[Ellipsis]}] is a graphics \
primitive that represents a B\[EAcute]zier curve with control points pti."}, 
 {"BezierFunction", "BezierFunction[{pt1, pt2, \[Ellipsis]}] represents a \
B\[EAcute]zier function for a curve defined by the control points pti. \
BezierFunction[array] represents a B\[EAcute]zier function for a surface or \
high-dimensional manifold."}, {"BilateralFilter", "BilateralFilter[data, \
\[Sigma], \[Mu]] applies a bilateral filter of spatial spread \[Sigma] and \
pixel value spread \[Mu] to data."}, {"BilateralLaplaceTransform", "Bilateral\
LaplaceTransform[expr, t, s] gives the bilateral Laplace transform of expr. \
BilateralLaplaceTransform[expr, {t1, t2, \[Ellipsis], tn}, {s1, s2, \
\[Ellipsis], sn}] gives the multidimensional bilateral Laplace transform of \
expr."}, {"BinCounts", "BinCounts[{x1, x2, \[Ellipsis]}] counts the number of \
elements xi whose values lie in successive integer bins. BinCounts[{x1, x2, \
\[Ellipsis]}, dx] counts the number of elements xi whose values lie in \
successive bins of width dx. BinCounts[{x1, x2, \[Ellipsis]}, {xmin, xmax, \
dx}] counts the number of xi in successive bins of width dx from xmin to \
xmax. BinCounts[{x1, x2, \[Ellipsis]}, {{b1, b2, \[Ellipsis]}}] counts the \
number of xi in the intervals [b1, b2), [b2, b3), \[Ellipsis]. \
BinCounts[{{x1, y1, \[Ellipsis]}, {x2, y2, \[Ellipsis]}, \[Ellipsis]}, xbins, \
ybins, \[Ellipsis]] gives an array of counts where the first index \
corresponds to x bins, the second to y, and so on."}, 
 {"BinLists", "BinLists[{x1, x2, \[Ellipsis]}] gives lists of the elements xi \
whose values lie in successive integer bins. BinLists[{x1, x2, \[Ellipsis]}, \
dx] gives lists of the elements xi whose values lie in successive bins of \
width dx. BinLists[{x1, x2, \[Ellipsis]}, {xmin, xmax, dx}] gives lists of \
the xi that lie in successive bins of width dx from xmin to xmax. \
BinLists[{x1, x2, \[Ellipsis]}, {{b1, b2, \[Ellipsis]}}] gives lists of the \
xi that lie in the intervals [b1, b2), [b2, b3), \[Ellipsis]. BinLists[{{x1, \
y1, \[Ellipsis]}, {x2, y2, \[Ellipsis]}, \[Ellipsis]}, xbins, ybins, \
\[Ellipsis]] gives an array of lists where the first index corresponds to x \
bins, the second to y, and so on."}, {"Binarize", "Binarize[image] creates a \
binary image from image by replacing all values above a globally determined \
threshold with 1 and others with 0. Binarize[image, t] creates a binary image \
by replacing all values above t with 1 and others with 0. Binarize[image, \
{t1, t2}] creates a binary image by replacing all values in the range t1 \
through t2 with 1 and others with 0. Binarize[image, f] creates a binary \
image by replacing all channel value lists for which f[v] yields True with 1 \
and others with 0."}, {"BinaryDeserialize", "BinaryDeserialize[ByteArray[\
\[Ellipsis]]] recovers an expression from a binary representation generated \
by BinarySerialize. BinaryDeserialize[ByteArray[\[Ellipsis]], h] wraps h \
around the expression produced before returning it."}, 
 {"BinaryDistance", "BinaryDistance[u, v] gives the binary distance between \
vectors u and v, equal to 0 if they are identical and 1 otherwise."}, 
 {"BinaryFormat", "BinaryFormat is an option for OpenRead and related \
functions that specifies that a stream should be opened in binary format, so \
that no textual interpretation of newlines or other data is done."}, 
 {"BinaryImageQ", "BinaryImageQ[image] yields True if image has the form of a \
binary Image or Image3D object, and False otherwise."}, 
 {"BinaryRead", "BinaryRead[stream] reads one byte of raw binary data from an \
input stream, and returns an integer from 0 to 255. BinaryRead[stream, type] \
reads an object of the specified type. BinaryRead[stream, {type1, type2, \
\[Ellipsis]}] reads a sequence of objects of the specified types."}, 
 {"BinaryReadList", "BinaryReadList[\"\\!\\(\\*file\"] reads all remaining \
bytes from a file, and returns them as a list of integers from 0 to 255. \
BinaryReadList[\"\\!\\(\\*file\", type] reads objects of the specified type \
from a file, until the end of the file is reached. The list of objects read \
is returned. BinaryReadList[\"\\!\\(\\*file\", {type1, type2, \[Ellipsis]}] \
reads objects with a sequence of types, until the end of the file is reached. \
BinaryReadList[\"\\!\\(\\*file\", types, n] reads only the first n objects of \
the specified types."}, {"BinarySerialize", "BinarySerialize[expr] gives a \
binary representation of any expression expr as a ByteArray object."}, 
 {"BinaryWrite", "BinaryWrite[channel, b] writes a byte of data, specified as \
an integer from 0 to 255. BinaryWrite[channel, {b1, b2, \[Ellipsis]}] writes \
a sequence of bytes. BinaryWrite[channel, \"\\!\\(\\*string\"] writes the raw \
sequence of characters in a string. BinaryWrite[channel, \
ByteArray[\[Ellipsis]]] writes the contents of a ByteArray object. \
BinaryWrite[channel, x, type] writes an object of the specified type. \
BinaryWrite[channel, {x1, x2, \[Ellipsis]}, type] writes a sequence of \
objects of the specified type. BinaryWrite[channel, {x1, x2, \[Ellipsis]}, \
{type1, type2, \[Ellipsis]}] writes a sequence of objects with a sequence of \
types."}, {"Binomial", 
  "Binomial[n, m] gives the binomial coefficient (n m )."}, 
 {"BinomialDistribution", "BinomialDistribution[n, p] represents a binomial \
distribution with n trials and success probability p."}, 
 {"BinomialPointProcess", "BinomialPointProcess[n, reg] represents a binomial \
point process with n points in the region reg."}, 
 {"BinomialProcess", 
  "BinomialProcess[p] represents a binomial process with event probability \
p."}, {"BinormalDistribution", "BinormalDistribution[{\[Mu]1, \[Mu]2}, \
{\[Sigma]1, \[Sigma]2}, \[Rho]] represents a bivariate normal distribution \
with mean {\[Mu]1, \[Mu]2} and covariance matrix {{\[Sigma]1^2, \[Rho] \
\[Sigma]1 \[Sigma]2}, {\[Rho] \[Sigma]1 \[Sigma]2, \[Sigma]2^2}}. \
BinormalDistribution[{\[Sigma]1, \[Sigma]2}, \[Rho]] represents a bivariate \
normal distribution with zero mean. BinormalDistribution[\[Rho]] represents a \
bivariate normal distribution with zero mean and covariance matrix {{1, \
\[Rho] }, {\[Rho], 1}}."}, {"BioSequence", "BioSequence[type, \
\"\\!\\(\\*seq\"] represents the biomolecular sequence of the given type \
corresponding to a string \"\\!\\(\\*seq\". BioSequence[\"seq\"] infers the \
type (DNA, protein, etc.) from the sequence. BioSequence[ent] gives the \
biomolecular sequence associated with the gene or protein entity ent. \
BioSequence[type, {chem1, chem2, \[Ellipsis]}] gives the biomolecular \
sequence with type corresponding to the given list of chemicals. \
BioSequence[type, n] gives a biomolecular sequence of the given type and \
length n with arbitrary letters."}, {"BioSequenceBackTranslateList", "BioSequ\
enceBackTranslateList[bioseq] gives the generalized back translations of a \
peptide sequence bioseq. BioSequenceBackTranslateList[bioseq, gtt] uses the \
genetic translation table gtt. BioSequenceBackTranslateList[bioseq, gtt, \
startspec] treats the starting amino acid in bioseq according to the \
specification startspec."}, {"BioSequenceComplement", "BioSequenceComplement[\
bioseq] gives the biological complement of the sequence bioseq."}, 
 {"BioSequenceInstances", "BioSequenceInstances[bioseq] expands the possibly \
degenerate sequence bioseq into all fully specified corresponding sequences. \
BioSequenceInstances[bioseq, n] expands the sequence bioseq into at most n \
fully specified corresponding sequences."}, {"BioSequenceModify", "BioSequenc\
eModify[seq, \"\\!\\(\\*mod\"] gives the result of applying the modification \
\"\\!\\(\\*mod\" to the sequence seq. BioSequenceModify[seq, \
{\"\\!\\(\\*mod\", params}] specifies the parameters params for \
\"\\!\\(\\*mod\". BioSequenceModify[modspec] represents an operator form of \
BioSequenceModify that can be applied to a biomolecular sequence."}, 
 {"BioSequenceQ", "BioSequenceQ[bioseq] returns True if bioseq is a valid \
BioSequence expression, and False otherwise. BioSequenceQ[bioseq, spec] \
returns True if bioseq is a valid BioSequence expression matching a \
specification spec, and False otherwise."}, {"BioSequenceReverseComplement", 
  "BioSequenceReverseComplement[bioseq] biologically complements and reverses \
the sequence bioseq."}, {"BioSequenceTranscribe", "BioSequenceTranscribe[bios\
eq] transcribes DNA into RNA or inverts the transcription of RNA back to DNA \
for the sequence bioseq."}, {"BioSequenceTranslate", "BioSequenceTranslate[bi\
oseq] translates a DNA or RNA sequence bioseq to a peptide sequence. \
BioSequenceTranslate[bioseq, gtt] uses the genetic translation table gtt. \
BioSequenceTranslate[bioseq, gtt, startspec] treats start codons in bioseq \
according to the specification startspec."}, {"BiorthogonalSplineWavelet", "B\
iorthogonalSplineWavelet[] represents a biorthogonal spline wavelet of order \
4 and dual order 2. BiorthogonalSplineWavelet[n, m] represents a biorthogonal \
spline wavelet of order n and dual order m."}, 
 {"BipartiteGraphQ", "BipartiteGraphQ[g] yields True if the graph g is a \
bipartite graph and False otherwise."}, {"BiquadraticFilterModel", "Biquadrat\
icFilterModel[{\[Omega], q}] creates a lowpass biquadratic filter using the \
characteristic frequency \[Omega] and the quality factor q. \
BiquadraticFilterModel[{\"\\!\\(\\*type\", spec}] creates a filter of a given \
{\"\\!\\(\\*type\", spec}. BiquadraticFilterModel[{\"\\!\\(\\*type\", spec}, \
var] expresses the model in terms of the variable var."}, 
 {"BirnbaumImportance", "BirnbaumImportance[rdist, t] gives the Birnbaum \
importances for all components in the ReliabilityDistribution rdist at time \
t. BirnbaumImportance[fdist, t] gives the Birnbaum importances for all \
components in the FailureDistribution fdist at time t."}, 
 {"BirnbaumSaundersDistribution", "BirnbaumSaundersDistribution[\[Alpha], \
\[Lambda]] represents the Birnbaum-Saunders distribution with shape parameter \
\[Alpha] and scale parameter \[Lambda]."}, 
 {"BitAnd", 
  "BitAnd[n1, n2, \[Ellipsis]] gives the bitwise AND of the integers ni."}, 
 {"BitClear", "BitClear[n, k] sets to 0 the bit corresponding to the \
coefficient of 2^k in the integer n."}, {"BitGet", "BitGet[n, k] gets the bit \
corresponding to the coefficient of 2^k in the integer n."}, 
 {"BitLength", "BitLength[n] gives the number of binary bits necessary to \
represent the integer n."}, 
 {"BitNot", "BitNot[n] gives the bitwise NOT of the integer n."}, 
 {"BitOr", 
  "BitOr[n1, n2, \[Ellipsis]] gives the bitwise OR of the integers ni."}, 
 {"BitRate", "BitRate is an option that specifies an approximate number of \
bits per second when creating video and audio files."}, 
 {"BitSet", "BitSet[n, k] sets to 1 the bit corresponding to the coefficient \
of 2^k in the integer n."}, {"BitShiftLeft", "BitShiftLeft[n, k] shifts the \
binary bits in the integer n to the left by k places, padding with zeros on \
the right. BitShiftLeft[n] shifts one bit to the left."}, 
 {"BitShiftRight", "BitShiftRight[n, k] shifts the binary bits in the integer \
n to the right by k places, dropping bits that are shifted past the unit's \
position on the right. BitShiftRight[n] shifts one bit to the right."}, 
 {"BitXor", 
  "BitXor[n1, n2, \[Ellipsis]] gives the bitwise XOR of the integers ni."}, 
 {"BiweightLocation", "BiweightLocation[list] gives the value of the biweight \
location estimator of the elements in list. BiweightLocation[list, c] gives \
the value of the biweight location estimator with scaling parameter c."}, 
 {"BiweightMidvariance", "BiweightMidvariance[list] gives the value of the \
biweight midvariance of the elements in list. BiweightMidvariance[list, c] \
gives the value of the biweight midvariance with scaling parameter c."}, 
 {"Black", 
  "Black represents the color black in graphics or style specifications."}, 
 {"BlackmanHarrisWindow", 
  "BlackmanHarrisWindow[x] represents a Blackman-Harris window function of \
x."}, {"BlackmanNuttallWindow", "BlackmanNuttallWindow[x] represents a \
Blackman-Nuttall window function of x."}, {"BlackmanWindow", 
  "BlackmanWindow[x] represents a Blackman window function of x."}, 
 {"Blank", "_ or Blank[] is a pattern object that can stand for any Wolfram \
Language expression. _h or Blank[h] can stand for any expression with head \
h."}, {"BlankNullSequence", "___ (three _ characters) or BlankNullSequence[] \
is a pattern object that can stand for any sequence of zero or more Wolfram \
Language expressions. ___h or BlankNullSequence[h] can stand for any sequence \
of expressions, all of which have head h."}, {"BlankSequence", "__ (two _ \
characters) or BlankSequence[] is a pattern object that can stand for any \
sequence of one or more Wolfram Language expressions. __h or BlankSequence[h] \
can stand for any sequence of one or more expressions, all of which have head \
h."}, {"Blend", "Blend[{col1, col2}, x] gives a color obtained by blending a \
fraction 1 - x of color col1 and x of color col2. Blend[{col1, col2, col3, \
\[Ellipsis]}, x] linearly interpolates between colors coli as x varies from 0 \
to 1. Blend[{{x1, col1}, {x2, col2}, \[Ellipsis]}, x] interpolates to give \
coli when x = xi. Blend[{col1, col2, \[Ellipsis]}, {u1, u2, \[Ellipsis]}] \
blends all the coli, using fraction ui of color coli. Blend[{image1, image2, \
\[Ellipsis]}, \[Ellipsis]] blends pixel values of 2D or 3D images imagei."}, 
 {"Block", "Block[{x, y, \[Ellipsis]}, expr] specifies that expr is to be \
evaluated with local values for the symbols x, y, \[Ellipsis]. Block[{x = x0, \
\[Ellipsis]}, expr] defines initial local values for x, \[Ellipsis]."}, 
 {"BlockMap", "BlockMap[f, list, n] applies f to non-overlapping sublists of \
length n in list. BlockMap[f, list, n, d] applies f to sublists with offset d \
in list. BlockMap[f, list, {n1, n2, \[Ellipsis]}, \[Ellipsis]] applies f to \
blocks of size n1\[Times]n2\[Times]\[Ellipsis]."}, 
 {"BlockRandom", "BlockRandom[expr] evaluates expr with all pseudorandom \
generators localized, so that uses of SeedRandom, RandomInteger, and related \
functions within the evaluation of expr do not affect subsequent pseudorandom \
sequences."}, {"BlockchainAddressData", "BlockchainAddressData[\"address\"] \
gives available information connected with the specified address on the \
default blockchain. BlockchainAddressData[assoc] gives available information \
connected with properties matching the specification in assoc. \
BlockchainAddressData[addressSpec, prop] gives the specified property of the \
blockchain address."}, {"BlockchainBase", "BlockchainBase is an option for \
various blockchain functions that specifies which blockchain to use."}, 
 {"BlockchainBlockData", "BlockchainBlockData[\"\\!\\(\\*hash\"] gives \
information about the block with the specified hash on the blockchain \
specified by $BlockchainBase. BlockchainBlockData[n] gives information about \
block n on the blockchain. BlockchainBlockData[ - n] gives information about \
the block n elements from the end of the blockchain. \
BlockchainBlockData[bspec, prop] gives the specified property of the block."}\
, {"BlockchainContractValue", "BlockchainContractValue[caddr] gets the result \
obtained from a Wolfram expression contract at blockchain address caddr. \
BlockchainContractValue[caddr, prop] gets the property prop of the result \
obtained from a Wolfram expression contract with address caddr. \
BlockchainContractValue[caddr, func] calls the function func of a contract \
with address caddr. BlockchainContractValue[caddr, assoc] calls a contract \
with address caddr with the properties defined in Association assoc."}, 
 {"BlockchainData", "BlockchainData[] gives information about the blockchain \
specified by $BlockchainBase. BlockchainData[property] gives the value of the \
specified property of the blockchain."}, {"BlockchainGet", "BlockchainGet[id] \
retrieves data from the Wolfram blockchain for the transaction with the \
specified ID."}, {"BlockchainKeyEncode", "BlockchainKeyEncode[key, form] \
encodes a private or public key in the specified blockchain format."}, 
 {"BlockchainPut", 
  "BlockchainPut[expr] adds expr to the Wolfram blockchain."}, 
 {"BlockchainTokenData", "BlockchainTokenData[\"\\!\\(\\*name\"] gives \
information about the use of tokens with the specified name on a blockchain. \
BlockchainTokenData[\"\\!\\(\\*sym\"] gives information about tokens with \
symbol sym. BlockchainTokenData[\"\\!\\(\\*address\"] gives information about \
tokens associated with the specified address. BlockchainTokenData[assoc] \
gives information about tokens with properties matching the specification in \
assoc. BlockchainTokenData[tokenspec, prop] gives the specified property of \
token usage."}, {"BlockchainTransaction", "BlockchainTransaction[assoc] \
represents a blockchain transaction built from the components in the \
association assoc."}, {"BlockchainTransactionData", "BlockchainTransactionDat\
a[txid] gives information about the blockchain transaction with ID txid on \
the blockchain specified by $BlockchainBase. BlockchainTransactionData[txid, \
prop] gives the specified property of the transaction."}, 
 {"BlockchainTransactionSign", "BlockchainTransactionSign[obj, key] digitally \
signs a blockchain transaction using the specified private key. \
BlockchainTransactionSign[obj, {key1, key2, \[Ellipsis]}] digitally signs a \
transaction using all the keys keyi."}, {"BlockchainTransactionSubmit", "Bloc\
kchainTransactionSubmit[obj] submits the transaction specified in the \
BlockchainTransaction object obj to a blockchain."}, 
 {"BlomqvistBeta", "BlomqvistBeta[v1, v2] gives Blomqvist's medial \
correlation coefficient \[Beta] for the vectors v1 and v2. BlomqvistBeta[m] \
gives Blomqvist's medial correlation coefficient \[Beta] for the matrix m. \
BlomqvistBeta[m1, m2] gives Blomqvist's medial correlation coefficient \
\[Beta] for the matrices m1 and m2. BlomqvistBeta[dist] gives the medial \
correlation coefficient matrix for the multivariate symbolic distribution \
dist. BlomqvistBeta[dist, i, j] gives the (i, j)^th medial correlation \
coefficient for the multivariate symbolic distribution dist."}, 
 {"BlomqvistBetaTest", "BlomqvistBetaTest[v1, v2] tests whether the vectors \
v1 and v2 are independent. BlomqvistBetaTest[m1, m2] tests whether the \
matrices m1 and m2 are independent. BlomqvistBetaTest[\[Ellipsis], \
\"\\!\\(\\*property\"] returns the value of \"\\!\\(\\*property\"."}, 
 {"Blue", 
  "Blue represents the color blue in graphics or style specifications."}, 
 {"Blur", "Blur[image] gives a blurred version of image. Blur[image, r] gives \
a version of image blurred over pixel radius r."}, 
 {"BodePlot", "BodePlot[lsys] generates a Bode plot of a linear \
time-invariant system lsys. BodePlot[lsys, {\[Omega]min, \[Omega]max}] plots \
for the frequency range \[Omega]min to \[Omega]max. BodePlot[expr, {\[Omega], \
\[Omega]min, \[Omega]max}] plots expr using the variable \[Omega]."}, 
 {"BohmanWindow", 
  "BohmanWindow[x] represents a Bohman window function of x."}, 
 {"Bold", "Bold represents a bold font weight."}, 
 {"Bond", "Bond[{idi, idj}] represents a single chemical bond between atoms \
with indices idi and idj. Bond[{idi, idj}, type] represents a chemical bond \
of the specified type."}, {"BondCount", "BondCount[mol] gives the number of \
bonds in the molecule mol. BondCount[mol, patt] gives the number of bonds in \
the molecule mol matching the bond pattern patt."}, 
 {"BondList", "BondList[mol] gives the list of bonds in the molecule mol. \
BondList[mol, patt] gives the list of bonds in the molecule mol matching the \
atom pattern patt. BondList[mol, patt, \"\\!\\(\\*prop\"] gives the value for \
the specified property of the bonds matching patt."}, 
 {"BondQ", "BondQ[m, bond] gives True if bond is a bond in the molecule m, \
and False otherwise."}, {"Bookmarks", "Bookmarks is an option for Manipulate \
and related functions that gives a list of bookmark settings."}, 
 {"Boole", "Boole[expr] yields 1 if expr is True and 0 if it is False."}, 
 {"BooleanConsecutiveFunction", "BooleanConsecutiveFunction[k, n] represents \
a Boolean function of n variables that gives True if k consecutive variables \
are True. BooleanConsecutiveFunction[{k,True}, n] treats the variable list as \
cyclic. BooleanConsecutiveFunction[{k1, k2, \[Ellipsis], kd}, {n1, n2, \
\[Ellipsis], nd}] represents a Boolean function of n1 n2 \[CenterEllipsis] nd \
variables that gives True if all variables in a k1xk2x\[Ellipsis]xkd block of \
the n1xn2x\[Ellipsis]xnd variable array are True. \
BooleanConsecutiveFunction[{{k1, k2, \[Ellipsis], kd}, {c1, c2, \[Ellipsis], \
cd}}, {n1, n2, \[Ellipsis], nd}] treats the i^th level of the variable array \
as cyclic if ci is True. BooleanConsecutiveFunction[spec, {a1, a2, \
\[Ellipsis]}] gives the Boolean expression in variables ai corresponding to \
the Boolean consecutive function specified by spec. \
BooleanConsecutiveFunction[spec, {a1, a2, \[Ellipsis]}, form] gives the \
Boolean expression in the form specified by form."}, 
 {"BooleanConvert", "BooleanConvert[expr] converts the Boolean expression \
expr to disjunctive normal form. BooleanConvert[expr, form] converts the \
Boolean expression expr to the specified form. BooleanConvert[expr, form, \
cond] finds an expression in the specified form that is equivalent to expr \
when cond is true."}, {"BooleanCountingFunction", "BooleanCountingFunction[km\
ax, n] represents a Boolean function of n variables that gives True if at \
most kmax variables are True. BooleanCountingFunction[{k}, n] represents a \
function of n variables that gives True if exactly k variables are True. \
BooleanCountingFunction[{kmin, kmax}, n] represents a function that gives \
True if between kmin and kmax variables are True. \
BooleanCountingFunction[{{k1, k2, \[Ellipsis]}}, n] represents a function \
that gives True if exactly ki variables are True. \
BooleanCountingFunction[spec, {a1, a2, \[Ellipsis]}] gives the Boolean \
expression in variables ai corresponding to the Boolean counting function \
specified by spec. BooleanCountingFunction[spec, {a1, a2, \[Ellipsis]}, form] \
gives the Boolean expression in the form specified by form."}, 
 {"BooleanFunction", "BooleanFunction[k, n] represents the k^th Boolean \
function in n variables. BooleanFunction[values] represents the Boolean \
function corresponding to the specified vector of truth values. \
BooleanFunction[{{i11, i12, \[Ellipsis]}->o1, \[Ellipsis]}] represents the \
Boolean function defined by the specified mapping from inputs to outputs. \
BooleanFunction[spec, {a1, a2, \[Ellipsis]}] gives the Boolean expression in \
variables ai corresponding to the Boolean function specified by spec. \
BooleanFunction[spec, {a1, a2, \[Ellipsis]}, form] gives the Boolean \
expression in the form specified by form."}, {"BooleanGraph", "BooleanGraph[b\
func, g1, \[Ellipsis], gn] gives the Boolean graph defined by the Boolean \
function bfunc on the graphs g1, \[Ellipsis], gn."}, 
 {"BooleanMaxterms", "BooleanMaxterms[k, n] represents the k^th maxterm in n \
variables. BooleanMaxterms[{k1, k2, \[Ellipsis]}, n] represents the \
conjunction of the maxterms ki. BooleanMaxterms[{{u1, \[Ellipsis], un}, {v1, \
\[Ellipsis]}, \[Ellipsis]}] represents the conjunction of maxterms given by \
the exponent vectors ui, vi, \[Ellipsis]. BooleanMaxterms[spec, {a1, a2, \
\[Ellipsis]}] gives the Boolean expression in variables ai corresponding to \
the maxterms function specified by spec. BooleanMaxterms[spec, {a, a2, \
\[Ellipsis]}, form] gives the Boolean expression in the form specified by \
form."}, {"BooleanMinimize", "BooleanMinimize[expr] finds a minimal-length \
disjunctive normal form representation of expr. BooleanMinimize[expr, form] \
finds a minimal-length representation for expr in the specified form. \
BooleanMinimize[expr, form, cond] finds a minimal-length expression in the \
specified form that is equivalent to expr when cond is true."}, 
 {"BooleanMinterms", "BooleanMinterms[k, n] represents the k^th minterm in n \
variables. BooleanMinterms[{k1, k2, \[Ellipsis]}, n] represents the \
disjunction of the minterms ki. BooleanMinterms[{{u1, \[Ellipsis], un}, {v1, \
\[Ellipsis]}, \[Ellipsis]}] represents the disjunction of minterms given by \
the exponent vectors ui, vi, \[Ellipsis]. BooleanMinterms[spec, {a1, a2, \
\[Ellipsis]}] gives the Boolean expression in variables ai corresponding to \
the minterms function specified by spec. BooleanMinterms[spec, {a, a2, \
\[Ellipsis]}, form] gives the Boolean expression in the form specified by \
form."}, {"BooleanQ", 
  "BooleanQ[expr] returns True if expr is either True or False."}, 
 {"BooleanRegion", "BooleanRegion[bfunc, {reg1, reg2, \[Ellipsis]}] \
represents the Boolean combination bfunc of regions reg1, reg2, \[Ellipsis]."}\
, {"BooleanStrings", "BooleanStrings is an option to TextString and related \
functions that determines what strings correspond to the Wolfram Language \
symbols True and False."}, {"BooleanTable", "BooleanTable[bf] gives a list of \
truth values for all possible combinations of variable values supplied to the \
Boolean function bf. BooleanTable[expr, {a1, a2, \[Ellipsis]}] gives a list \
of the truth values of the Boolean expression expr for all possible \
combinations of values of the ai. BooleanTable[expr, {a1, a2, \[Ellipsis]}, \
{b1, \[Ellipsis]}, \[Ellipsis]] gives a nested table of truth values of expr \
with the outermost level giving possible combinations of the ai."}, 
 {"BooleanVariables", "BooleanVariables[expr] gives a list of the Boolean \
variables in the Boolean expression expr. BooleanVariables[bf] gives the \
number of Boolean variables in the BooleanFunction object bf."}, 
 {"Booleans", 
  "Booleans represents the domain of Booleans, as in x\[Element]Booleans."}, 
 {"BorderDimensions", "BorderDimensions[image] gives the pixel width of \
uniform borders of image in the form {{left, right}, {bottom, top}}. \
BorderDimensions[image, t] finds borders whose pixels vary by an amount less \
than t."}, {"BorelTannerDistribution", "BorelTannerDistribution[\[Alpha], n] \
represents a Borel-Tanner distribution with shape parameters \[Alpha] and n."}\
, {"Bottom", "Bottom is a symbol that represents the bottom for purposes of \
alignment and positioning."}, {"BottomHatTransform", "BottomHatTransform[imag\
e, ker] gives the morphological bottom-hat transform of image with respect to \
structuring element ker. BottomHatTransform[image, r] gives the bottom-hat \
transform with respect to a range-r square. BottomHatTransform[data, \
\[Ellipsis]] applies a bottom-hat transform to an array of data."}, 
 {"BoundaryDiscretizeGraphics", "BoundaryDiscretizeGraphics[g] discretizes a \
2D or 3D graphic g into a BoundaryMeshRegion. BoundaryDiscretizeGraphics[g, \
patt] discretizes only the elements in g that match the pattern patt."}, 
 {"BoundaryDiscretizeRegion", "BoundaryDiscretizeRegion[reg] discretizes the \
region reg into a BoundaryMeshRegion. BoundaryDiscretizeRegion[reg, {{xmin, \
xmax}, \[Ellipsis]}] restricts to the bounds [xmin, \
xmax]\[Times]\[CenterEllipsis]."}, {"BoundaryMesh", 
  "BoundaryMesh[mreg] gives a BoundaryMeshRegion from a MeshRegion mreg."}, 
 {"BoundaryMeshRegion", "BoundaryMeshRegion[{p1, p2, \[Ellipsis]}, \
{bcell1[{i1, \[Ellipsis]}], bcell2[{j1, \[Ellipsis]}], \[Ellipsis]}] yields a \
mesh with boundary cells bcellj, where coordinates given as integer i are \
taken to be pi, where the cells together represent a closed curve, surface, \
etc. BoundaryMeshRegion[\[Ellipsis], {\[Ellipsis], wi[bcelli[\[Ellipsis]]], \
\[Ellipsis]}] yields a mesh with cell properties defined by the symbolic \
wrapper wi. BoundaryMeshRegion[\[Ellipsis], boundary1, boundary2, \
\[Ellipsis]] yields a mesh from multiple boundaries boundaryi."}, 
 {"BoundaryMeshRegionQ", "BoundaryMeshRegionQ[reg] yields True if the region \
reg is a valid BoundaryMeshRegion object and False otherwise."}, 
 {"BoundaryStyle", "BoundaryStyle is an option for plotting functions that \
specifies the style in which boundaries of regions should be drawn."}, 
 {"BoundedRegionQ", "BoundedRegionQ[reg] gives True if reg is a bounded \
region and False otherwise."}, {"BoundingRegion", "BoundingRegion[{pt1, pt2, \
\[Ellipsis]}] gives the minimal axis-aligned bounding box for the points pt1, \
pt2, \[Ellipsis]. BoundingRegion[{pt1, pt2, \[Ellipsis]}, form] gives a \
bounding region of type form. BoundingRegion[reg, form] gives a bounding \
region for the region reg."}, {"BoxData", "BoxData[boxes] is a low-level \
representation of the contents of a typesetting cell."}, 
 {"BoxMatrix", "BoxMatrix[r] gives a (2 r + 1)\[Times](2r + 1) matrix of 1 s. \
BoxMatrix[r, w] gives a (2 r + 1)\[Times](2r + 1) block of 1 s centered in a \
w\[Times]w matrix of 0 s. BoxMatrix[{r1, r2, \[Ellipsis]}, \[Ellipsis]] gives \
a (2 r1 + 1)\[Times] (2 r2 + 1) \[Times]\[Ellipsis] array of 1 s."}, 
 {"BoxObject", "BoxObject[id] is an object that represents a box structure in \
an open notebook in the front end."}, {"BoxRatios", "BoxRatios is an option \
for Graphics3D that gives the ratios of side lengths for the bounding box of \
the three-dimensional picture."}, {"BoxStyle", "BoxStyle is an option for \
three-dimensional graphics functions that specifies how the bounding box \
should be rendered."}, {"BoxWhiskerChart", "BoxWhiskerChart[{x1, x2, \
\[Ellipsis]}] makes a box-and-whisker chart for the values xi. \
BoxWhiskerChart[{x1, x2, \[Ellipsis]}, bwspec] makes a chart with \
box-and-whisker symbol specification bwspec. BoxWhiskerChart[{data1, data2, \
\[Ellipsis]}, \[Ellipsis]] makes a chart with box-and-whisker symbol for each \
datai. BoxWhiskerChart[{{data1, data2, \[Ellipsis]}, \[Ellipsis]}, \
\[Ellipsis]] makes a box-and-whisker chart from multiple groups of datasets \
{data1, data2, \[Ellipsis]}."}, {"Boxed", "Boxed is an option for Graphics3D \
that specifies whether to draw the edges of the bounding box in a \
three-dimensional picture."}, {"Boxes", "Boxes is a symbol that represents \
typeset boxes in InputField and related functions."}, 
 {"BracketingBar", "BracketingBar[x, y, \[Ellipsis]] displays as \
\[LeftBracketingBar]x, y, \[Ellipsis]\[RightBracketingBar]."}, 
 {"BrayCurtisDistance", "BrayCurtisDistance[u, v] gives the Bray-Curtis \
distance between vectors u and v."}, {"BreadthFirstScan", "BreadthFirstScan[g\
, s, {\"\\!\\(\\*event_1\"->f1, \"\\!\\(\\*event_2\"->f2, \[Ellipsis]}] \
performs a breadth-first scan (bfs) of the graph g starting at the vertex s \
and evaluates fi whenever \"\\!\\(\\*event_i\" occurs. BreadthFirstScan[g, \
{\"\\!\\(\\*event_1\"->f1, \"\\!\\(\\*event_2\"->f2, \[Ellipsis]}] performs a \
breadth-first scan of the whole graph g. BreadthFirstScan[{v->w, \
\[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify the graph g."}, 
 {"Break", "Break[] exits the nearest enclosing Do, For, or While."}, 
 {"BridgeData", "BridgeData[entity, property] gives the value of the \
specified property for the bridge entity. BridgeData[{entity1, entity2, \
\[Ellipsis]}, property] gives a list of property values for the specified \
bridge entities. BridgeData[entity, property, annotation] gives the specified \
annotation associated with the given property."}, 
 {"BrightnessEqualize", "BrightnessEqualize[image] adjusts the brightness \
across image, correcting uneven illumination. BrightnessEqualize[image, \
flatfield] uses the correction model given by flatfield, which models the \
variation in brightness across image. BrightnessEqualize[image, flatfield, \
darkfield] uses the dark environment model given by darkfield."}, 
 {"BroadcastStationData", "BroadcastStationData[entity, property] gives the \
value of the specified property for the broadcast station entity. \
BroadcastStationData[{entity1, entity2, \[Ellipsis]}, property] gives a list \
of property values for the specified broadcast station entities. \
BroadcastStationData[entity, property, annotation] gives the specified \
annotation associated with the given property."}, 
 {"Brown", 
  "Brown represents the color brown in graphics or style specifications."}, 
 {"BrownForsytheTest", "BrownForsytheTest[data] tests whether the variance of \
data is 1. BrownForsytheTest[{data1, data2, \[Ellipsis]}] tests whether the \
variances of data1, data2, \[Ellipsis] are equal. BrownForsytheTest[dspec, \
\[Sigma]02] tests a dispersion measure against \[Sigma]02. \
BrownForsytheTest[dspec, \[Sigma]02, \"\\!\\(\\*property\"] returns the value \
of \"\\!\\(\\*property\"."}, {"BrownianBridgeProcess", "BrownianBridgeProcess\
[\[Sigma], {t1, a}, {t2, b}] represents the Brownian bridge process from \
value a at time t1 to value b at time t2 with volatility \[Sigma]. \
BrownianBridgeProcess[{t1, a}, {t2, b}] represents the standard Brownian \
bridge process from value a at time t1 to value b at time t2. \
BrownianBridgeProcess[t1, t2] represents the standard Brownian bridge process \
pinned at 0 at times t1 and t2. BrownianBridgeProcess[] represents the \
standard Brownian bridge process pinned at 0 at time 0 and at time 1."}, 
 {"BubbleChart", "BubbleChart[{{x1, y1, z1}, {x2, y2, z2}, \[Ellipsis]}] \
makes a bubble chart with bubbles at positions {xi, yi} with sizes zi. \
BubbleChart[{\[Ellipsis], wi[{xi, yi, zi}, \[Ellipsis]], \[Ellipsis], wj[{xj, \
yj, zj}, \[Ellipsis]], \[Ellipsis]}] makes a bubble chart with bubble \
features defined by the symbolic wrappers wk. BubbleChart[{data1, data2, \
\[Ellipsis]}] makes a bubble chart from multiple datasets datai."}, 
 {"BubbleChart3D", "BubbleChart3D[{{x1, y1, z1, u1}, {x2, y2, z2, u2}, \
\[Ellipsis]}] makes a 3D bubble chart with bubbles at positions {xi, yi, zi} \
with sizes ui. BubbleChart3D[{\[Ellipsis], wi[{xi, yi, zi, ui}, \[Ellipsis]], \
\[Ellipsis], wj[{xj, yj, zj, uj}, \[Ellipsis]], \[Ellipsis]}] makes a 3D \
bubble chart with bubble features defined by the symbolic wrappers wk. \
BubbleChart3D[{data1, data2, \[Ellipsis]}] makes a 3D bubble chart from \
multiple datasets datai."}, {"BubbleScale", "BubbleScale is an option to \
BubbleChart and related functions that specifies how the scale of each bubble \
should be determined from the value of each data element."}, 
 {"BubbleSizes", "BubbleSizes is an option to BubbleChart and related \
functions that specifies the range of sizes used for bubbles."}, 
 {"BuildingData", "BuildingData[entity, property] gives the value of the \
specified property for the building entity. BuildingData[{entity1, entity2, \
\[Ellipsis]}, property] gives a list of property values for the specified \
building entities. BuildingData[entity, property, annotation] gives the \
specified annotation associated with the given property."}, 
 {"BulletGauge", "BulletGauge[value, reference, {min, max}] draws a bullet \
gauge showing value and reference in a range of min to max. \
BulletGauge[value, reference, {min, m1, m2, \[Ellipsis], max}] draws a bullet \
gauge with performance regions split at the mi. BulletGauge[{v1, v2, \
\[Ellipsis]}, \[Ellipsis]] draws a bullet gauge with multiple values v1, v2, \
\[Ellipsis]. BulletGauge[values, {r1, r2, \[Ellipsis]}, \[Ellipsis]] draws a \
bullet gauge with multiple references r1, r2, \[Ellipsis]."}, 
 {"BusinessDayQ", "BusinessDayQ[date] returns True if the date is a business \
day and returns False otherwise."}, {"ButterflyGraph", "ButterflyGraph[n] \
gives the order-n butterfly graph. ButterflyGraph[n, b] gives the base-b \
order-n butterfly graph."}, {"ButterworthFilterModel", "ButterworthFilterMode\
l[n] creates a lowpass Butterworth filter of order n and cutoff frequency of \
1. ButterworthFilterModel[{n, \[Omega]c}] uses the cutoff frequency \
\[Omega]c. ButterworthFilterModel[{\"\\!\\(\\*type\", spec}] creates a filter \
of a given \"\\!\\(\\*type\" using the specified parameters spec. \
ButterworthFilterModel[{\"\\!\\(\\*type\", spec}, var] expresses the model in \
terms of the variable var."}, {"Button", "Button[label, action] represents a \
button that is labeled with label, and evaluates action whenever it is \
clicked."}, {"ButtonBar", "ButtonBar[{lbl1:>act1, lbl2:>act2, \[Ellipsis]}] \
represents a bar of buttons with labels lbli that perform actions acti when \
pressed."}, {"ButtonBox", "ButtonBox[boxes] is a low-level box construct that \
represents a button in a notebook expression."}, 
 {"ButtonBoxOptions", 
  "ButtonBoxOptions is an option that specifies settings for ButtonBox."}, 
 {"ButtonData", "ButtonData is an option for the low-level function ButtonBox \
that specifies the second argument to give to the ButtonFunction for the \
button when the button is active and is clicked."}, 
 {"ButtonFunction", "ButtonFunction is an option for the low-level function \
ButtonBox that specifies the function to execute when the button is active \
and is clicked."}, {"ButtonMinHeight", "ButtonMinHeight is an option for the \
low-level function ButtonBox that specifies the minimum total height in units \
of font size that should be allowed for the button."}, 
 {"ButtonNotebook", "ButtonNotebook[] gives the notebook, if any, that \
contains the button which initiated the current evaluation."}, 
 {"ButtonSource", "ButtonSource is an option for the low-level function \
ButtonBox that specifies the first argument to give to the ButtonFunction for \
the button when the button is active and is clicked."}, 
 {"Byte", "Byte represents a single byte of data in Read."}, 
 {"ByteArray", "ByteArray[{b1, b2, \[Ellipsis]}] constructs a ByteArray \
object containing the byte values bi. ByteArray[\"\\!\\(\\*string\"] \
constructs a ByteArray object by extracting byte values from a Base64-encoded \
string."}, {"ByteArrayFormat", "ByteArrayFormat[ba] attempts to determine \
what ImportByteArray format could be used to import the ByteArray object ba."}\
, {"ByteArrayFormatQ", "ByteArrayFormatQ[ba, \"\\!\\(\\*fmt\"] gives True if \
the ByteArray object ba might be imported as format \"\\!\\(\\*fmt\" and \
gives False otherwise. ByteArrayFormatQ[ba, {\"\\!\\(\\*fmt_1\", \
\"\\!\\(\\*fmt_2\", \[Ellipsis]}] gives True if ba might be imported as one \
of \"\\!\\(\\*fmt_i\"."}, {"ByteArrayQ", "ByteArrayQ[expr] gives True if expr \
is a valid ByteArray object, and False otherwise."}, 
 {"ByteArrayToString", "ByteArrayToString[ba] returns a string by decoding \
the data in the byte array ba, assuming UTF-8 encoding. ByteArrayToString[ba, \
\"\\!\\(\\*encoding\"] interprets the data in the specified character \
encoding."}, {"ByteCount", "ByteCount[expr] gives the number of bytes used \
internally by the Wolfram System to store expr."}, 
 {"ByteOrdering", "ByteOrdering is an option for BinaryRead, BinaryWrite, and \
related functions that specifies what ordering of bytes should be assumed for \
your computer system."}, {"C", "C[i] is the default form for the i^th \
parameter or constant generated in representing the results of various \
symbolic computations."}, {"CDF", "CDF[dist, x] gives the cumulative \
distribution function for the distribution dist evaluated at x. CDF[dist, \
{x1, x2, \[Ellipsis]}] gives the multivariate cumulative distribution \
function for the distribution dist evaluated at {x1, x2, \[Ellipsis]}. \
CDF[dist] gives the CDF as a pure function."}, 
 {"CDFDeploy", "CDFDeploy[\"\\!\\(\\*file.cdf\", expr] deploys expr in a form \
that can be played by Wolfram Player. CDFDeploy[\"\\!\\(\\*file.cdf\", \
notebook] deploys a notebook. CDFDeploy[\"\\!\\(\\*file.cdf\", \
NotebookSelection[notebook]] deploys the current selection in notebook. \
CDFDeploy[\"\\!\\(\\*outfile.cdf\", \"\\!\\(\\*infile.nb\"] deploys the \
notebook \"\\!\\(\\*infile.nb\"."}, {"CDFWavelet", "CDFWavelet[] represents a \
Cohen-Daubechies-Feauveau wavelet of type \"9/7\". \
CDFWavelet[\"\\!\\(\\*type\"] represents a Cohen-Daubechies-Feauveau wavelet \
of type \"\\!\\(\\*type\"."}, 
 {"CForm", "CForm[expr] prints as a C language version of expr."}, 
 {"CMYKColor", "CMYKColor[c, m, y, k] represents a color in the CMYK color \
space with cyan, magenta, yellow and black components. CMYKColor[c, m, y, k, \
a] specifies opacity a. CMYKColor[\"\\!\\(\\*string\"] returns a color from \
an HTML color name etc. CMYKColor[color] returns the CMYK representation of \
color."}, {"CTCLossLayer", "CTCLossLayer[] represents a net layer that \
computes the connectionist temporal classification loss by comparing a \
sequence of class probability vectors with a sequence of indices representing \
the target classes."}, {"CachePersistence", "CachePersistence is an option to \
Delayed and related constructs that specifies how long to keep server-side \
cached versions of computations that are done."}, 
 {"CalendarConvert", "CalendarConvert[date, calendar] converts the date \
object date to the specified calendar type calendar. CalendarConvert[date] \
converts to the default calendar type. CalendarConvert[{date1, \[Ellipsis], \
daten}, calendar] converts date1 through daten to the specified calendar."}, 
 {"CalendarData", "CalendarData[cal] gives the default parameters associated \
with the date calendar cal. CalendarData[country] gives available holiday \
calendars for the stock exchanges in the country entity. CalendarData[cal, \
param] gives the value of the specified parameter param for calendar cal."}, 
 {"CalendarType", "CalendarType is an option that determines the calendar \
system in which all dates are to be interpreted and output."}, 
 {"CallPacket", "CallPacket[integer, list] is a WSTP packet encapsulating a \
request to invoke the external function numbered integer with the arguments \
contained in list."}, {"Callout", "Callout[data, expr] displays expr in a \
plot as a callout pointing to data. Callout[data, expr, pos] displays a \
callout with expr at a position specified by pos. Callout[data, expr, pos, \
apos] displays a callout anchored at a position specified by apos."}, 
 {"CalloutMarker", "CalloutMarker is an option for Callout that specifies \
what marker to draw at the end of the leader in a callout."}, 
 {"CalloutStyle", "CalloutStyle is an option for Callout that specifies what \
style to use for callouts."}, {"CanberraDistance", 
  "CanberraDistance[u, v] gives the Canberra distance between vectors u and \
v."}, {"Cancel", "Cancel[expr] cancels out common factors in the numerator \
and denominator of expr."}, {"CancelButton", "CancelButton[] represents a \
Cancel button in a dialog that closes the dialog window when clicked. \
CancelButton[action] represents a button labeled Cancel that evaluates action \
when clicked. CancelButton[label, action] uses label as the label for the \
button."}, {"CandlestickChart", "CandlestickChart[{{date1, {open1, high1, \
low1, close1}}, \[Ellipsis]}] makes a chart with candles representing open, \
high, low, and close prices for each date. \
CandlestickChart[{\"\\!\\(\\*name\", daterange}] makes a candlestick chart \
for the financial entity \"\\!\\(\\*name\" over the date range daterange."}, 
 {"CanonicalGraph", "CanonicalGraph[g] gives a canonical form of the graph g. \
CanonicalGraph[{v->w, \[Ellipsis]}] uses rules v->w to specify the graph."}, 
 {"CanonicalName", "CanonicalName[entity] gives the canonical name for the \
entity specified by entity. CanonicalName[{entity1, \[Ellipsis], entityn}] \
gives the canonical name for entity1 through entityn."}, 
 {"CanonicalWarpingCorrespondence", "CanonicalWarpingCorrespondence[s1, s2] \
gives the canonical time warping (CTW) correspondence between sequences s1 \
and s2. CanonicalWarpingCorrespondence[s1, s2, warp] uses warp as initial \
warping correspondence. CanonicalWarpingCorrespondence[s1, s2, warp, win] \
uses a window win for local search."}, {"CanonicalWarpingDistance", "Canonica\
lWarpingDistance[s1, s2] gives the canonical time warping (CTW) distance \
between sequences s1 and s2. CanonicalWarpingDistance[s1, s2, init] uses init \
as the initial correspondence between the two sequences. \
CanonicalWarpingDistance[s1, s2, init, win] uses a window win for local \
search."}, {"CanonicalizePolygon", "CanonicalizePolygon[poly] gives a \
canonical representation of the polygon poly with shared coordinates and with \
inner and outer boundaries. CanonicalizePolygon[poly, \"\\!\\(\\*filter\"] \
gives a canonical representation of poly with the specified filter."}, 
 {"CanonicalizePolyhedron", "CanonicalizePolyhedron[poly] gives a canonical \
representation of the polyhedron poly with shared coordinates and with inner \
and outer boundaries."}, {"CanonicalizeRegion", 
  "CanonicalizeRegion[reg] gives a canonical representation of the region \
reg."}, {"CantorMesh", "CantorMesh[n] gives a mesh region representing the \
n^th -step Cantor set. CantorMesh[n, d] gives the n^th -step Cantor set in \
dimension d."}, {"CantorStaircase", 
  "CantorStaircase[x] gives the Cantor staircase function FC(x)."}, 
 {"Canvas", "Canvas[] represents an empty canvas in the current notebook in \
which you can do free-form drawing. Canvas[graphic] represents a canvas that \
initially contains the specified 2D graphic."}, 
 {"Cap", "Cap[x, y, \[Ellipsis]] displays as x\[Cap]y\[Cap]\[Ellipsis]."}, 
 {"CapForm", "CapForm[type] is a graphics primitive that specifies what type \
of caps should be used at the ends of lines, tubes, and related primitives."}\
, {"CapitalDifferentialD", "CapitalDifferentialD[x] displays as Dx."}, 
 {"Capitalize", "Capitalize[string] yields a string in which the first \
character has been made uppercase. Capitalize[string, scheme] gives a string \
capitalized using the specified capitalization scheme."}, 
 {"CapsuleShape", "CapsuleShape[{{x1, y1, z1}, {x2, y2, z2}}, r] represents \
the filled capsule between points {xi, yi, zi} and radius r."}, 
 {"CaptureRunning", "CaptureRunning is an option for signal acquisition \
functions that specifies whether to immediately start the capture."}, 
 {"CarlemanLinearize", "CarlemanLinearize[sys, spec] Carleman linearizes the \
nonlinear state-space model sys according to spec."}, 
 {"CarlsonRC", 
  "CarlsonRC[x, y] gives the Carlson's elliptic integral RC(x, y)."}, 
 {"CarlsonRD", 
  "CarlsonRD[x, y, z] gives the Carlson's elliptic integral RD(x, y, z)."}, 
 {"CarlsonRE", 
  "CarlsonRE[x, y] gives the Carlson's elliptic integral RE(x, y)."}, 
 {"CarlsonRF", 
  "CarlsonRF[x, y, z] gives the Carlson's elliptic integral RF(x, y, z)."}, 
 {"CarlsonRG", 
  "CarlsonRG[x, y, z] gives the Carlson's elliptic integral RG(x, y, z)."}, 
 {"CarlsonRJ", "CarlsonRJ[x, y, z, \[Rho]] gives Carlson's elliptic integral \
RJ(x, y, z, \[Rho])."}, {"CarlsonRK", 
  "CarlsonRK[x, y] gives the Carlson's elliptic integral RK(x, y)."}, 
 {"CarlsonRM", "CarlsonRM[x, y, \[Rho]] gives Carlson's elliptic integral \
RM(x, y, \[Rho])."}, {"CarmichaelLambda", 
  "CarmichaelLambda[n] gives the Carmichael function \[Lambda](n)."}, 
 {"CaseOrdering", "CaseOrdering is an option for AlphabeticSort and related \
functions that specifies how upper versus lower case should be sorted."}, 
 {"CaseSensitive", "CaseSensitive[patt] represents a string pattern that \
requires matching typographical case, even with the overall option setting \
IgnoreCase->True."}, {"Cases", "Cases[{e1, e2, \[Ellipsis]}, pattern] gives a \
list of the ei that match the pattern. Cases[{e1, \[Ellipsis]}, pattern->rhs] \
gives a list of the values of rhs corresponding to the ei that match the \
pattern. Cases[expr, pattern, levelspec] gives a list of all parts of expr on \
levels specified by levelspec that match the pattern. Cases[expr, \
pattern->rhs, levelspec] gives the values of rhs that match the pattern. \
Cases[expr, pattern, levelspec, n] gives the first n parts in expr that match \
the pattern. Cases[pattern] represents an operator form of Cases that can be \
applied to an expression."}, {"Cashflow", "Cashflow[{c0, c1, \[Ellipsis], \
cn}] represents a series of cash flows occurring at unit time intervals. \
Cashflow[{c0, c1, \[Ellipsis], cn}, q] represents cash flows occurring at \
time intervals q. Cashflow[{{time1, c1}, {time2, c2}, \[Ellipsis]}] \
represents cash flows occurring at the specified times."}, 
 {"Casoratian", "Casoratian[{y1, y2, \[Ellipsis]}, n] gives the Casoratian \
determinant for the sequences y1, y2, \[Ellipsis] depending on n. \
Casoratian[eqn, y, n] gives the Casoratian determinant for the basis of the \
solutions of the linear difference equation eqn involving y[n + m]. \
Casoratian[eqns, {y1, y2, \[Ellipsis]}, n] gives the Casoratian determinant \
for the system of linear difference equations eqns."}, 
 {"Catalan", 
  "Catalan is Catalan's constant, with numerical value \
\[TildeEqual]0.915966."}, {"CatalanNumber", 
  "CatalanNumber[n] gives the n^th Catalan number Cn."}, 
 {"Catch", "Catch[expr] returns the argument of the first Throw generated in \
the evaluation of expr. Catch[expr, form] returns value from the first \
Throw[value, tag] for which form matches tag. Catch[expr, form, f] returns \
f[value, tag]."}, {"CategoricalDistribution", "CategoricalDistribution[{c1, \
c2, \[Ellipsis]}] generates a uniform categorical distribution over classes \
c1, c2, etc. CategoricalDistribution[{c1, c2, \[Ellipsis]}, {w1, w2, \
\[Ellipsis]}] generates a categorical distribution over classes ci with \
weights wi. CategoricalDistribution[{{a1, a2, \[Ellipsis]}, {b1, b2, \
\[Ellipsis]}, \[Ellipsis]}] generates a uniform multivariate categorical \
distribution over domain {a1, a2, \[Ellipsis]}\[Times]{b1, b2, \
\[Ellipsis]}\[Times]\[Ellipsis]. CategoricalDistribution[domain, weights] \
uses the array weights to define probabilities over each element of the \
domain."}, {"Catenate", "Catenate[{list1, list2, \[Ellipsis]}] yields a \
single list with all elements from the listi in order. Catenate[{assoc1, \
assoc2, \[Ellipsis]}] yields a list of all values in order appearing in the \
associations associ."}, {"CatenateLayer", "CatenateLayer[] represents a net \
layer that takes a list of input arrays and catenates them. CatenateLayer[n] \
represents a net layer that takes a list of input arrays and catenates them \
at level n."}, {"CauchyDistribution", "CauchyDistribution[a, b] represents a \
Cauchy distribution with location parameter a and scale parameter b. \
CauchyDistribution[] represents a Cauchy distribution with location parameter \
0 and scale parameter 1."}, {"CauchyPointProcess", "CauchyPointProcess[\[Mu], \
\[Lambda], b, d] represents a Cauchy cluster point process with density \
\[Mu], cluster mean \[Lambda], and scale parameter b in \
\[DoubleStruckCapitalR]^d."}, {"CauchyWindow", "CauchyWindow[x] represents a \
Cauchy window function of x. CauchyWindow[x, \[Alpha]] uses the parameter \
\[Alpha]."}, {"CayleyGraph", 
  "CayleyGraph[group] returns a Cayley graph representation of group."}, 
 {"Ceiling", "Ceiling[x] gives the smallest integer greater than or equal to \
x. Ceiling[x, a] gives the smallest multiple of a greater than or equal to \
x."}, {"CelestialSystem", "CelestialSystem is an option for SunPosition, \
MoonPosition, and related functions that specifies the coordinate system to \
use for the results."}, {"Cell", "Cell[contents] is the low-level \
representation of a cell inside a Wolfram System notebook. Cell[contents, \
\"\\!\\(\\*style\"] represents a cell in the specified style. Cell[contents, \
\"\\!\\(\\*style_1\", \"\\!\\(\\*style_2\", \[Ellipsis]] represents a cell \
with multiple styles applied to it."}, {"CellAutoOverwrite", "CellAutoOverwri\
te is an option for Cell which specifies whether an output cell should be \
overwritten by new output when the preceding input cell is evaluated."}, 
 {"CellBaseline", "CellBaseline is an option for Cell which specifies where \
the baseline of the cell should be assumed to be when it appears inside \
another cell."}, {"CellBracketOptions", "CellBracketOptions is an option for \
cells that specifies settings for cell brackets."}, 
 {"CellChangeTimes", "CellChangeTimes is an option to Cell that specifies \
when changes were made to the cell."}, {"CellContext", "CellContext is an \
option for Cell which specifies the context to use for the evaluation of the \
contents of the cell."}, {"CellDingbat", "CellDingbat is an option for Cell \
which specifies what dingbat to use to emphasize a cell."}, 
 {"CellDynamicExpression", "CellDynamicExpression is an option for cells that \
specifies an expression to be dynamically updated whenever the cell is \
visible on screen."}, {"CellEditDuplicate", "CellEditDuplicate is an option \
for Cell which specifies whether the front end should make a copy of the cell \
before actually applying any changes in its contents that you request."}, 
 {"CellEpilog", "CellEpilog is an option for Cell which gives an expression \
to evaluate after each ordinary evaluation of the contents of the cell."}, 
 {"CellEvaluationDuplicate", "CellEvaluationDuplicate is an option for Cell \
which specifies whether the front end should make a copy of the cell before \
performing any evaluation of its contents that you request."}, 
 {"CellEvaluationFunction", "CellEvaluationFunction is an option for Cell \
that gives a function to be applied to every expression from the cell that is \
sent to the kernel for ordinary evaluation."}, 
 {"CellEventActions", "CellEventActions is an option for Cell that gives a \
list of actions to perform when specified events occur in connection with a \
cell in a notebook."}, {"CellFrame", "CellFrame is an option for Cell that \
specifies whether a frame should be drawn around a cell."}, 
 {"CellFrameColor", "CellFrameColor is an option that specifies the color of \
the frame around a cell."}, {"CellFrameLabelMargins", "CellFrameLabelMargins \
is an option for cells that specifies the absolute margins in printer's \
points between a cell's frame and the labels around the frame."}, 
 {"CellFrameLabels", "CellFrameLabels is an option that specifies the labels \
associated with the frame around a cell."}, {"CellFrameMargins", "CellFrameMa\
rgins is an option for Cell that specifies the absolute margins in \
printer\[CloseCurlyQuote]s points to leave inside a frame that is drawn \
around a cell."}, {"CellGroup", "CellGroup[{cell1, cell2, \[Ellipsis]}] gives \
an open group of cells that can appear in a Wolfram System notebook. \
CellGroup[{cell1, cell2, \[Ellipsis]}, 1] gives a cell group in which only \
the first cell is open. CellGroup[{cell1, cell2, \[Ellipsis]}, - 1] gives a \
cell group in which only the last cell is open. CellGroup[{cell1, cell2, \
\[Ellipsis]}, {i1, i2, \[Ellipsis]}] gives a cell group in which cells i1, \
i2, \[Ellipsis] are open."}, {"CellGroupData", "CellGroupData[{cell1, cell2, \
\[Ellipsis]}] is a low-level construct that represents an open group of cells \
in a notebook. CellGroupData[{cell1, cell2, \[Ellipsis]}, status] represents \
a cell group that is open or closed according to the value of status. \
CellGroupData[{cell1, cell2, \[Ellipsis]}, {i1, i2, \[Ellipsis]}] represents \
a cell group with cells at positions i1, i2, \[Ellipsis] open."}, 
 {"CellGrouping", "CellGrouping is a notebook option that specifies how cells \
in the notebook should be assembled into groups."}, 
 {"CellID", 
  "CellID is an option for Cell that specifies a unique ID number for a \
cell."}, {"CellLabel", "CellLabel is an option for Cell which gives the label \
to use for a particular cell."}, {"CellLabelAutoDelete", "CellLabelAutoDelete \
is an option for Cell which specifies whether a label for the cell should be \
automatically deleted if the contents of the cell are modified or the \
notebook containing the cell is saved in a file."}, 
 {"CellLabelStyle", "CellLabelStyle is an option for Cell that specifies the \
style to use in displaying cell labels marking inputs and outputs."}, 
 {"CellMargins", "CellMargins is an option for Cell that specifies the \
absolute margins in printer's points to leave around a cell."}, 
 {"CellObject", "CellObject[id] is an object that represents a cell in an \
open notebook in the front end."}, {"CellOpen", "CellOpen is an option for \
Cell that specifies whether the contents of a cell should be explicitly \
displayed."}, {"CellPrint", "CellPrint[expr] inserts expr as a complete cell \
in the current notebook just below the cell being evaluated. \
CellPrint[{expr1, expr2, \[Ellipsis]}] inserts a sequence of cells."}, 
 {"CellProlog", "CellProlog is an option to Cell that gives an expression to \
evaluate before each ordinary evaluation of the contents of the cell."}, 
 {"CellStyle", "CellStyle is a setting for functions such as NotebookFind and \
Cells that specifies the name of a cell style to search for in a notebook."}, 
 {"CellTags", "CellTags is an option for Cell that gives a list of tags to \
associate with a cell."}, {"Cells", "Cells[] returns a list of CellObject \
expressions corresponding to cells in the current notebook. Cells[obj] \
returns the list of CellObject expressions in obj. \
Cells[NotebookSelection[notebook]] returns the list of CellObject expressions \
for currently selected cells."}, {"CellularAutomaton", "CellularAutomaton[rul\
e, init, t] generates a list representing the evolution of the cellular \
automaton with the specified rule from initial condition init for t steps. \
CellularAutomaton[rule, init] gives the result of evolving init for one step. \
CellularAutomaton[rule, init, {tspec, xspec, \[Ellipsis]}] gives only those \
parts of the evolution specified by tspec, xspec, etc. \
CellularAutomaton[rule, init, {t, All, \[Ellipsis]}] includes at each step \
all cells that could be affected over the course of t steps. \
CellularAutomaton[rule] is an operator form of CellularAutomaton that \
represents one step of evolution."}, {"CensoredDistribution", "CensoredDistri\
bution[{xmin, xmax}, dist] represents the distribution of values that come \
from dist and are censored to be between xmin and xmax. \
CensoredDistribution[{{xmin, xmax}, {ymin, ymax}, \[Ellipsis]}, dist] \
represents the distribution of values that come from the multivariate \
distribution dist and are censored to be between xmin and xmax, ymin and \
ymax, etc."}, {"Censoring", "Censoring[t, c] represents a censored event time \
t with censoring c. Censoring[{t1, t2, \[Ellipsis]}, c] represents a vector \
of censored event times ti with censoring c. Censoring[{t1, t2, \[Ellipsis]}, \
{c1, c2, \[Ellipsis]}] represents a vector of event times ti with \
corresponding censoring ci."}, {"Center", "Center is a symbol that represents \
the center for purposes of alignment and positioning."}, 
 {"CenterArray", "CenterArray[a, n] creates a list of length n with the \
elements of a at the center and zeros elsewhere. CenterArray[a, {n1, n2, \
\[Ellipsis]}] creates an n1\[Times]n2\[Times]\[Ellipsis] array with the array \
a at the center and zeros elsewhere. CenterArray[a, nspec, pad] uses pad \
instead of zero for the background. CenterArray[nspec] creates an array with \
a single 1 at the center and zeros elsewhere."}, 
 {"CenterDot", "CenterDot[x, y, \[Ellipsis]] displays as \
x\[CenterDot]y\[CenterDot]\[Ellipsis]."}, {"CentralFeature", "CentralFeature[\
{x1, x2, \[Ellipsis]}] gives the central feature of the elements xi. \
CentralFeature[{x1->v1, x2->v2, \[Ellipsis]}] gives the vi corresponding to \
the central feature xi. CentralFeature[data] gives the central feature for \
several different forms of data."}, {"CentralMoment", "CentralMoment[list, r] \
gives the r^th central moment of the elements in list with respect to their \
mean. CentralMoment[dist, r] gives the r^th central moment of the \
distribution dist. CentralMoment[r] represents the r^th formal central \
moment."}, {"CentralMomentGeneratingFunction", "CentralMomentGeneratingFuncti\
on[dist, t] gives the central moment-generating function for the distribution \
dist as a function of the variable t. CentralMomentGeneratingFunction[dist, \
{t1, t2, \[Ellipsis]}] gives the central moment-generating function for the \
multivariate distribution dist as a function of the variables t1, t2, \
\[Ellipsis]."}, {"Cepstrogram", "Cepstrogram[data] plots the array of power \
cepstra computed on each partition of data. Cepstrogram[data, n] uses \
partitions of length n. Cepstrogram[data, n, d] uses partitions with offset \
d. Cepstrogram[data, n, d, wfun] applies a smoothing window wfun to each \
partition. Cepstrogram[data, n, d, wfun, m] pads partitions with zeros to \
length m prior to the computation of the transform."}, 
 {"CepstrogramArray", "CepstrogramArray[data] computes an array of cepstra on \
data. CepstrogramArray[data, n] uses partitions of length n. \
CepstrogramArray[data, n, d] uses partitions with offset d. \
CepstrogramArray[data, n, d, wfun] applies a smoothing window wfun to each \
partition. CepstrogramArray[data, n, d, wfun, m] pads partitions with zeros \
to length m prior to the computation of the transform."}, 
 {"CepstrumArray", "CepstrumArray[data] computes the power cepstrum of data. \
CepstrumArray[data, type] computes the specified type of cepstrum of data."}, 
 {"ChampernowneNumber", "ChampernowneNumber[b] gives the base-b Champernowne \
number Cb. ChampernowneNumber[] gives the base-10 Champernowne number."}, 
 {"ChanVeseBinarize", "ChanVeseBinarize[image] finds a two-level segmentation \
of image by computing optimal contours around regions of consistent intensity \
in image. ChanVeseBinarize[image, marker] uses marker to create an initial \
contour. ChanVeseBinarize[image, marker, {\[Mu], \[Nu], \[Lambda]1, \
\[Lambda]2}] specify the Chan-Vese weights \[Mu], \[Nu], \[Lambda]1, and \
\[Lambda]2."}, {"ChannelBase", "ChannelBase is an option specifying the base \
URL of the server to use for brokering channel communications."}, 
 {"ChannelBrokerAction", "ChannelBrokerAction is an option specifying the \
action to execute on the channel broker server in addition to routing a \
message."}, {"ChannelHistoryLength", "ChannelHistoryLength is an option to \
ChannelListen that specifies the maximum number of messages to cache in the \
channel listener object."}, {"ChannelListen", "ChannelListen[channel] starts \
listening on the specified channel. ChannelListen[channel, func] applies func \
to the association corresponding to each message received on the channel. \
ChannelListen[channel, None] stores each message received on the channel, \
without applying any function. ChannelListen[url] listens on the specified \
URL, storing messages received, without requiring an explicit channel to \
exist on the channel broker."}, {"ChannelListener", "ChannelListener[\
\[Ellipsis]] represents a channel listener created by ChannelListen."}, 
 {"ChannelListeners", 
  "ChannelListeners[] gives a list of currently active channel listeners."}, 
 {"ChannelObject", "ChannelObject[] gives a new anonymous channel \
specification. \
ChannelObject[\"\\!\\(\\*mqtts\",AutoSpacing->False]\\!\\(\\*StyleBox[\":\",A\
utoSpacing->False]\\!\\(\\*StyleBox[\"//\",AutoSpacing->False]\\!\\(\\*StyleB\
ox[\"\[Ellipsis]\"] represents a channel specified by a given URL. \
ChannelObject[\"\\!\\(\\*relpath\"] represents a channel for the currently \
authenticated user at a relative path. \
ChannelObject[\"\\!\\(\\*id:\\!\\(\\*path\"] represents a channel for the \
user with the specified Wolfram ID at the given path. \
ChannelObject[\"/\\!\\(\\*abspath\"] represents a channel at an absolute path \
on the channel broker."}, {"ChannelReceiverFunction", "ChannelReceiverFunctio\
n[fun] represents a channel receiver function that applies fun to any channel \
message it receives."}, {"ChannelSend", "ChannelSend[channel, msg] sends the \
specified message msg to the specified channel."}, 
 {"ChannelSubscribers", "ChannelSubscribers[channel] gives a list of users \
currently subscribed to the specified channel. ChannelSubscribers[{channel1, \
channel2, \[Ellipsis]}] gives a list of subscribed users for each of the \
channels channeli."}, {"Character", 
  "Character represents a single character in Read."}, 
 {"CharacterCounts", "CharacterCounts[\"\\!\\(\\*string\"] gives an \
association whose keys are the distinct characters in string, and whose \
values give the number of times those characters appear in string. \
CharacterCounts[\"\\!\\(\\*string\", n] gives counts of the distinct n -grams \
consisting of runs of n characters in string."}, 
 {"CharacterEncoding", "CharacterEncoding is an option for input and output \
functions which specifies what raw character encoding should be used."}, 
 {"CharacterName", "CharacterName[\"\\!\\(\\*c\"] gives the name of the \
character c. CharacterName[n] gives the name of the character with character \
code n. CharacterName[c, \"\\!\\(\\*type\"] gives a name of the specified \
type."}, {"CharacterNormalize", "CharacterNormalize[\"\\!\\(\\*text\", form] \
converts the characters in text to the specified normalization form."}, 
 {"CharacterRange", "CharacterRange[\"\\!\\(\\*c_1\", \"\\!\\(\\*c_2\"] \
yields a list of the characters in the range from \"\\!\\(\\*c_1\" to \
\"\\!\\(\\*c_2\". CharacterRange[n1, n2] yields a list of the characters with \
character codes in the range n1 to n2."}, {"CharacteristicFunction", "Charact\
eristicFunction[dist, t] gives the characteristic function for the \
distribution dist as a function of the variable t. \
CharacteristicFunction[dist, {t1, t2, \[Ellipsis]}] gives the characteristic \
function for the multivariate distribution dist as a function of the \
variables t1, t2, \[Ellipsis]."}, {"CharacteristicPolynomial", "Characteristi\
cPolynomial[m, x] gives the characteristic polynomial for the matrix m. \
CharacteristicPolynomial[{m, a}, x] gives the generalized characteristic \
polynomial with respect to a."}, {"Characters", 
  "Characters[\"\\!\\(\\*string\"] gives a list of the characters in a \
string."}, {"ChartBaseStyle", "ChartBaseStyle is an option for charting \
functions that specifies the base style for all chart elements."}, 
 {"ChartElementFunction", "ChartElementFunction is an option for charting \
functions such as BarChart that gives a function to use to generate the \
primitives for rendering each chart element."}, 
 {"ChartElements", "ChartElements is an option to charting functions such as \
BarChart that specifies the graphics to use as the basis for bars or other \
chart elements."}, {"ChartLabels", "ChartLabels is an option for charting \
functions that specifies what labels should be used for chart elements."}, 
 {"ChartLayout", "ChartLayout is an option to charting functions that \
specifies the overall layout to use."}, {"ChartLegends", "ChartLegends is an \
option for charting functions that specifies what legends should be used for \
chart elements."}, {"ChartStyle", "ChartStyle is an option for charting \
functions that specifies styles in which chart elements should be drawn."}, 
 {"Chebyshev1FilterModel", "Chebyshev1FilterModel[n] creates a lowpass \
Chebyshev type 1 filter of order n. Chebyshev1FilterModel[{n, \[Omega]c}] \
uses the cutoff frequency \[Omega]c. \
Chebyshev1FilterModel[{\"\\!\\(\\*type\", spec}] creates a filter of a given \
\"\\!\\(\\*type\" using the specified parameters spec. \
Chebyshev1FilterModel[{\"\\!\\(\\*type\", spec}, var] expresses the model in \
terms of the variable var."}, {"Chebyshev2FilterModel", "Chebyshev2FilterMode\
l[n] creates a lowpass Chebyshev type 2 filter of order n. \
Chebyshev2FilterModel[{n, \[Omega]c}] uses the cutoff frequency \[Omega]c. \
Chebyshev2FilterModel[{\"\\!\\(\\*type\", spec}] uses the full filter \
specification {\"\\!\\(\\*type\", spec}. \
Chebyshev2FilterModel[{\"\\!\\(\\*type\", spec}, var] expresses the model in \
terms of the variable var."}, {"ChebyshevT", 
  "ChebyshevT[n, x] gives the Chebyshev polynomial of the first kind Tn(x)."}\
, {"ChebyshevU", 
  "ChebyshevU[n, x] gives the Chebyshev polynomial of the second kind Un(x)."}\
, {"Check", "Check[expr, failexpr] evaluates expr, and returns the result, \
unless messages were generated, in which case it evaluates and returns \
failexpr. Check[expr, failexpr, {s1::t1, s2::t2, \[Ellipsis]}] checks only \
for the specified messages. Check[expr, failexpr, \"\\!\\(\\*name\"] checks \
only for messages in the named message group."}, 
 {"CheckAbort", "CheckAbort[expr, failexpr] evaluates expr, returning \
failexpr if an abort occurs."}, {"CheckArguments", "CheckArguments[f[args], \
n] gives True if args consists of exactly n positional arguments followed by \
valid options for f, and False otherwise. CheckArguments[f[args], {min, max}] \
requires the number of positional arguments to be between min and max. \
CheckArguments[f[args], spec, assoc] modifies the behavior based on the \
information in the association assoc."}, {"Checkbox", "Checkbox[x] represents \
a checkbox with setting x, displayed as [X] when x is True and [ ] when x is \
False. Checkbox[Dynamic[x]] takes the setting to be the dynamically updated \
current value of x, with the value of x being toggled if the checkbox is \
clicked. Checkbox[x, {val1, val2}] represents a checkbox that toggles between \
values val1 and val2 and displays as [ ] and [X], respectively. Checkbox[x, \
{val1, val2, val3, \[Ellipsis]}] represents a checkbox that cycles through \
values vali and displays as [-] for all vali with i>2."}, 
 {"CheckboxBar", "CheckboxBar[x, {val1, val2, \[Ellipsis]}] represents a \
checkbox bar with setting x and with checkboxes for values vali to include in \
the list x. CheckboxBar[Dynamic[x], {val1, val2, \[Ellipsis]}] takes the \
setting to be the dynamically updated current value of x, with the values in \
the list x being reset every time a checkbox is clicked. CheckboxBar[x, \
{val1->lbl1, val2->lbl2, \[Ellipsis]}] represents a checkbox bar in which the \
checkbox associated with value vali has label lbli."}, 
 {"ChemicalData", "ChemicalData[\"\\!\\(\\*name\", \"\\!\\(\\*property\"] \
gives the value of the specified property for the chemical \"\\!\\(\\*name\". \
ChemicalData[\"\\!\\(\\*name\"] gives a structure diagram for the chemical \
with the specified name. ChemicalData[\"\\!\\(\\*class\"] gives a list of \
available chemicals in the specified class."}, 
 {"ChessboardDistance", "ChessboardDistance[u, v] gives the chessboard, \
Chebyshev, or sup norm distance between vectors u and v."}, 
 {"ChiDistribution", "ChiDistribution[\[Nu]] represents a \[Chi] distribution \
with \[Nu] degrees of freedom."}, {"ChiSquareDistribution", "ChiSquareDistrib\
ution[\[Nu]] represents a \[Chi]^2 distribution with \[Nu] degrees of \
freedom."}, {"ChineseRemainder", "ChineseRemainder[{r1, r2, \[Ellipsis]}, \
{m1, m2, \[Ellipsis]}] gives the smallest x with x>=0 that satisfies all the \
integer congruences x mod mi==rimod mi. ChineseRemainder[{r1, r2, \
\[Ellipsis]}, {m1, m2, \[Ellipsis]}, d] gives the smallest x with x>=d that \
satisfies all the integer congruences x mod mi==rimod mi."}, 
 {"ChoiceButtons", "ChoiceButtons[] represents a pair of OK and Cancel \
buttons that close a dialog. ChoiceButtons[{actok, actcancel}] represents OK \
and Cancel buttons that evaluate the corresponding acti when clicked. \
ChoiceButtons[{lblok, lblcancel}, {actok, actcancel}] uses the lbli to label \
the buttons."}, {"ChoiceDialog", "ChoiceDialog[expr] puts up a standard \
choice dialog that displays expr together with OK and Cancel buttons, and \
returns True if OK is clicked and False if Cancel is clicked. \
ChoiceDialog[expr, {lbl1->val1, lbl2->val2, \[Ellipsis]}] includes buttons \
with labels lbli, and returns the corresponding vali for the button clicked."}\
, {"CholeskyDecomposition", 
  "CholeskyDecomposition[m] gives the Cholesky decomposition of a matrix m."}\
, {"Chop", "Chop[expr] replaces approximate real numbers in expr that are \
close to zero by the exact integer 0."}, {"ChromaticPolynomial", "ChromaticPo\
lynomial[g, k] gives the chromatic polynomial of the graph g. \
ChromaticPolynomial[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to \
specify the graph g."}, {"ChromaticityPlot", "ChromaticityPlot[colspace] \
plots a 2D slice of the color space colspace. ChromaticityPlot[color] plots \
the specific color. ChromaticityPlot[{col1, col2, \[Ellipsis]}] plots \
multiple colors and color spaces. ChromaticityPlot[image] plots the pixels of \
image as individual colors. ChromaticityPlot[\[Ellipsis], refcolspace] uses \
the reference color space refcolspace."}, {"ChromaticityPlot3D", "Chromaticit\
yPlot3D[colspace] returns a 3D gamut of the color space colspace. \
ChromaticityPlot3D[color] plots the specific color. ChromaticityPlot3D[image] \
plots the pixels of image as individual colors. ChromaticityPlot3D[{input1, \
input2, \[Ellipsis]}] plots multiple colors, color spaces and images. \
ChromaticityPlot3D[\[Ellipsis], refcolspace] uses the reference color space \
refcolspace."}, {"Circle", "Circle[{x, y}, r] represents a circle of radius r \
centered at {x, y}. Circle[{x, y}] gives a circle of radius 1. Circle[{x, y}, \
{rx, ry}] gives an axis-aligned ellipse with semiaxes lengths rx and ry. \
Circle[{x, y}, \[Ellipsis], {\[Theta]1, \[Theta]2}] gives a circular or \
ellipse arc from angle \[Theta]1 to \[Theta]2."}, 
 {"CircleDot", "CircleDot[x, y, \[Ellipsis]] displays as \
x\[CircleDot]y\[CircleDot]\[Ellipsis]."}, 
 {"CircleMinus", "CircleMinus[x, y] displays as x\[CircleMinus]y."}, 
 {"CirclePlus", "CirclePlus[x, y, \[Ellipsis]] displays as \
x\[CirclePlus]y\[CirclePlus]\[Ellipsis]."}, {"CirclePoints", "CirclePoints[n] \
gives the positions of n points equally spaced around the unit circle. \
CirclePoints[r, n] gives the positions of n points equally spaced around a \
circle of radius r. CirclePoints[{r, \[Theta]1}, n] starts at angle \[Theta]1 \
with respect to the x axis. CirclePoints[{x, y}, rspec, n] centers the circle \
at {x, y}."}, {"CircleThrough", "CircleThrough[{p1, p2, \[Ellipsis]}] \
represents a circle passing through the points pi. CircleThrough[{p1, p2, \
\[Ellipsis]}, q] represents a circle with center q. CircleThrough[{p1, p2, \
\[Ellipsis]}, q, r] represents a circle with radius r."}, 
 {"CircleTimes", "CircleTimes[x] displays as \[CircleTimes]x. CircleTimes[x, \
y, \[Ellipsis]] displays as x\[CircleTimes]y\[CircleTimes]\[Ellipsis]."}, 
 {"CirculantGraph", "CirculantGraph[n, j] gives the circulant graph Cn(j) \
with n vertices and jump j. CirculantGraph[n, {j1, j2, \[Ellipsis]}] gives \
the circulant graph Cn(j1, j2, \[Ellipsis]) with n vertices and jumps j1, j2, \
\[Ellipsis]."}, {"CircularOrthogonalMatrixDistribution", "CircularOrthogonalM\
atrixDistribution[n] represents a circular orthogonal matrix distribution \
with matrix dimensions {n, n}."}, {"CircularQuaternionMatrixDistribution", "C\
ircularQuaternionMatrixDistribution[n] represents a circular quaternion \
matrix distribution with matrix dimensions {2 n, 2 n} over the field of \
complex numbers."}, {"CircularRealMatrixDistribution", "CircularRealMatrixDis\
tribution[n] represents a circular real matrix distribution with matrix \
dimensions {n, n}."}, {"CircularSymplecticMatrixDistribution", "CircularSympl\
ecticMatrixDistribution[n] represents a circular symplectic matrix \
distribution with matrix dimensions {2 n, 2 n} over the field of complex \
numbers."}, {"CircularUnitaryMatrixDistribution", "CircularUnitaryMatrixDistr\
ibution[n] represents a circular unitary matrix distribution with matrix \
dimensions {n, n}."}, {"Circumsphere", "Circumsphere[{p1, \[Ellipsis], pn+1}] \
gives the sphere that circumscribes the points pi in \
\[DoubleStruckCapitalR]^n. Circumsphere[poly] gives the circumsphere of a \
polyhedron or polygon poly."}, {"CityData", "CityData[name, \
\"\\!\\(\\*property\"] gives the value of the specified property for the city \
with the specified name. CityData[name] gives a list of the full \
specifications of cities whose names are consistent with name."}, 
 {"ClassPriors", "ClassPriors is an option for Classify and related functions \
that specifies explicit prior probabilities to assume for output classes, \
independent of anything deduced from the training set."}, 
 {"ClassifierFunction", "ClassifierFunction[\[Ellipsis]] represents a \
function generated by Classify that classifies data into classes."}, 
 {"ClassifierMeasurements", "ClassifierMeasurements[classifier, testset, \
prop] gives measurements associated with property prop when classifier is \
evaluated on testset. ClassifierMeasurements[classifier, testset] yields a \
measurement report that can be applied to any property. \
ClassifierMeasurements[data, \[Ellipsis]] uses classifications data instead \
of a classifier. ClassifierMeasurements[\[Ellipsis], {prop1, prop2, \
\[Ellipsis]}] gives properties prop1, prop2, etc."}, 
 {"ClassifierMeasurementsObject", "ClassifierMeasurementsObject[\[Ellipsis]] \
represents an object generated by ClassifierMeasurements that can be applied \
to properties."}, {"Classify", "Classify[{example1->class1, example2->class2, \
\[Ellipsis]}] generates a ClassifierFunction[\[Ellipsis]] based on the \
examples and classes given. Classify[{example1, example2, \
\[Ellipsis]}->{class1, class2, \[Ellipsis]}] also generates a \
ClassifierFunction[\[Ellipsis]] based on the examples and classes given. \
Classify[\[LeftAssociation]class1->{example11, example12, \[Ellipsis]}, \
class2->{example21, \[Ellipsis]}, \[Ellipsis]\[RightAssociation]] generates a \
ClassifierFunction[\[Ellipsis]] based on an association of classes with their \
examples. Classify[training, data] attempts to classify data using a \
classifier function deduced from the training set given. \
Classify[\"\\!\\(\\*name\", data] attempts to classify data using the \
built-in classifier function represented by \"\\!\\(\\*name\". \
Classify[\[Ellipsis], data, prop] gives the specified property of the \
classification associated with data. Classify[classifier, opts] takes an \
existing classifier function and modifies it with the new options given."}, 
 {"Clear", "Clear[symbol1, symbol2, \[Ellipsis]] clears values and \
definitions for the symboli. Clear[\"\\!\\(\\*form_1\", \"\\!\\(\\*form_2\", \
\[Ellipsis]] clears values and definitions for all symbols whose names match \
any of the string patterns formi."}, {"ClearAll", "ClearAll[symb1, symb2, \
\[Ellipsis]] clears all values, definitions, attributes, messages, and \
defaults associated with symbols. ClearAll[\"\\!\\(\\*form_1\", \
\"\\!\\(\\*form_2\", \[Ellipsis]] clears all symbols whose names textually \
match any of the formi."}, {"ClearAttributes", "ClearAttributes[symbol, attr] \
removes attr from the list of attributes of the symbol symbol. \
ClearAttributes[\"\\!\\(\\*symbol\", attr] removes attr from the attributes \
of the symbol named \"\\!\\(\\*symbol\" if it exists. ClearAttributes[s, \
{attr1, attr2, \[Ellipsis]}] removes several attributes at a time. \
ClearAttributes[{s1, s2, \[Ellipsis]}, attrs] removes attributes from several \
symbols at a time."}, {"ClearCookies", "ClearCookies[domain] clears all \
persistent and session cookies associated with the specified domain. \
ClearCookies[assoc] clears all cookies whose attributes match the \
specification in the association assoc. ClearCookies[All] clears all \
persistent and session cookies for all domains."}, 
 {"ClearPermissions", "ClearPermissions[obj, class] clears permissions for \
the specified class of users for the cloud object obj. \
ClearPermissions[class] clears permissions for the cloud object corresponding \
to the current document."}, {"ClearSystemCache", "ClearSystemCache[] clears \
internal system caches of stored results. ClearSystemCache[type] clears only \
caches of the specified type."}, {"ClebschGordan", "ClebschGordan[{j1, m1}, \
{j2, m2}, {j, m}] gives the Clebsch-Gordan coefficient for the decomposition \
of |j, m\[RightAngleBracket] in terms of |j1, m1\[RightAngleBracket]|j2, \
m2\[RightAngleBracket]."}, {"ClickPane", "ClickPane[image, func] represents a \
clickable pane that displays as image and applies func to the x, y \
coordinates of each click within the pane. ClickPane[image, {{xmin, ymin}, \
{xmax, ymax}}, func] specifies the range of coordinates to use."}, 
 {"ClickToCopy", "ClickToCopy[expr] represents a button that copies expr \
whenever it is clicked. ClickToCopy[label, expr] displays with label on the \
button."}, {"ClickToCopyEnabled", "ClickToCopyEnabled is an option for Cell \
that specifies whether to show a click-to-copy overlay when hovering over a \
cell."}, {"Clip", "Clip[x] gives x clipped to be between - 1 and + 1. Clip[x, \
{min, max}] gives x for min<=x<=max, min for x<min and max for x>max. Clip[x, \
{min, max}, {vmin, vmax}] gives vmin for x<min and vmax for x>max."}, 
 {"ClipPlanes", "ClipPlanes is an option to Graphics3D that specifies a list \
of clipping planes that can cut away portions of a 3D scene from the \
resulting view."}, {"ClipPlanesStyle", "ClipPlanesStyle is an option to \
Graphics3D that specifies how clipping planes defined with the ClipPlanes \
option should be rendered."}, {"ClipRange", "ClipRange is an option to \
Raster3D that specifies a rectangular region that is cut away from the \
resulting view."}, {"ClippingStyle", "ClippingStyle is an option for plotting \
functions that specifies the style of what should be drawn when curves or \
surfaces would extend beyond the plot range."}, 
 {"Clock", "Clock[] represents a clock variable whose value cycles \
continuously from 0 to 1 once per second when it appears inside a dynamically \
updated object such as a Dynamic. Clock[t] cycles from 0 to t every t \
seconds. Clock[vmax, t] cycles from 0 to vmax every t seconds. Clock[{vmin, \
vmax}, t] cycles through the range vmin to vmax every t seconds. Clock[{vmin, \
vmax}] cycles through the range vmin to vmax over the course of vmax - vmin \
seconds. Clock[{vmin, vmax, dv}] cycles from vmin to vmax in steps of dv, \
spending dv seconds at each value. Clock[{vmin, vmax, dv}, t] cycles from \
vmin to vmax in steps dv every t seconds. Clock[vals, t, n] goes through the \
cycle only n times, then always yields only the maximum value."}, 
 {"ClockGauge", "ClockGauge[] draws an analog clock face showing the local \
time with hours, minutes, and seconds. ClockGauge[time] draws an analog clock \
face showing the time corresponding to an AbsoluteTime, DateObject, or \
TimeObject specification. ClockGauge[{h, m, s}] draws an analog clock face \
showing hour h, minute m, and seconds s. ClockGauge[{y, m, d, h, m, s}] draws \
an analog clock face showing the time corresponding to the date list in a \
DateList specification. ClockGauge[\"\\!\\(\\*string\"] draws an analog clock \
face showing the time DateList[\"\\!\\(\\*string\"]."}, 
 {"Close", "Close[obj] closes a stream or socket."}, 
 {"CloseKernels", "CloseKernels[] terminates all parallel kernels from the \
list Kernels[]. CloseKernels[k] terminates the kernel k. CloseKernels[{k1, \
k2, \[Ellipsis]}] terminates the kernels k1, k2, \[Ellipsis]."}, 
 {"ClosenessCentrality", "ClosenessCentrality[g] gives a list of closeness \
centralities for the vertices in the graph g. ClosenessCentrality[{v->w, \
\[Ellipsis]}] uses rules v->w to specify the graph g."}, 
 {"Closing", "Closing[image, ker] gives the morphological closing of image \
with respect to the structuring element ker. Closing[image, r] gives the \
closing with respect to a range-r square. Closing[data, \[Ellipsis]] applies \
closing to an array of data."}, {"CloudAccountData", "CloudAccountData[] \
gives data associated with the cloud account currently being used. \
CloudAccountData[\"\\!\\(\\*prop\"] gives the property prop associated with \
the cloud account being used."}, {"CloudBase", "CloudBase is an option \
specifying the base URI of the server to use for cloud operations."}, 
 {"CloudConnect", "CloudConnect[userid, password] authenticates to the \
Wolfram Cloud using the specified cloud user ID and password. \
CloudConnect[userid] shows a dialog to input the password. CloudConnect[] \
shows a dialog to input both the cloud user ID and the password."}, 
 {"CloudDeploy", "CloudDeploy[expr] deploys expr to a new anonymous cloud \
object. CloudDeploy[expr, location] deploys expr to a cloud object at the \
specified location relative to the user's current cloud directory. \
CloudDeploy[expr, CloudObject[\[Ellipsis]]] deploys expr to the specified \
cloud object."}, {"CloudDirectory", "CloudDirectory[] gives a CloudObject \
representing the current working directory used for cloud objects."}, 
 {"CloudDisconnect", "CloudDisconnect[] disconnects a non-cloud instance of \
the Wolfram Language from the Wolfram Cloud."}, 
 {"CloudEvaluate", "CloudEvaluate[expr] evaluates expr in the cloud and \
returns the result. CloudEvaluate[expr, h] wraps the head h around the result \
before returning it."}, {"CloudExport", "CloudExport[expr, \
\"\\!\\(\\*format\"] exports expr to a new anonymous cloud object in the \
specified format. CloudExport[expr, \"\\!\\(\\*format\", \"\\!\\(\\*uri\"] \
exports to a cloud object at a given URI. CloudExport[expr, \
\"\\!\\(\\*format\", CloudObject[\"\\!\\(\\*uri\"]] exports to a given cloud \
object."}, {"CloudExpression", "CloudExpression[\"\\!\\(\\*name\"] represents \
an expression whose value is persistently stored in the cloud. \
CloudExpression[\"\\!\\(\\*http\",AutoSpacing->False]\\!\\(\\*StyleBox[\":\",\
AutoSpacing->False]\\!\\(\\*StyleBox[\"//\",AutoSpacing->False]\\!\\(\\*Style\
Box[\"\[Ellipsis]\"], \
CloudExpression[\"\\!\\(\\*https\",AutoSpacing->False]\\!\\(\\*StyleBox[\":\"\
,AutoSpacing->False]\\!\\(\\*StyleBox[\"//\",AutoSpacing->False]\\!\\(\\*Styl\
eBox[\"\[Ellipsis]\"] represents a cloud expression with a given URI. \
CloudExpression[base, part1, part2, \[Ellipsis]] represents the part of a \
cloud expression specified by the parti."}, {"CloudExpressions", "CloudExpres\
sions[] gives a list of named cloud expressions owned by you. \
CloudExpressions[None] gives a list of anonymous cloud expressions owned by \
you. CloudExpressions[All] gives a list of all cloud expressions owned by \
you."}, {"CloudFunction", "CloudFunction[fun] represents a pure function that \
evaluates fun[args] in the cloud. CloudFunction[CloudObject[\[Ellipsis]]] \
represents a function that applies the contents of the specified cloud \
object. CloudFunction[f, h] wraps the head h around the result of the \
function before returning it."}, {"CloudGet", "CloudGet[\"\\!\\(\\*uri\"] \
reads in a cloud object at a given URI, evaluating each expression in it and \
returning the last one. CloudGet[CloudObject[\"\\!\\(\\*uri\"]] reads in a \
given cloud object."}, {"CloudImport", "CloudImport[\"\\!\\(\\*uri\"] imports \
from a cloud object at a given URI. CloudImport[\"\\!\\(\\*uri\", elements] \
imports the specified elements of a cloud object. \
CloudImport[CloudObject[\"\\!\\(\\*uri\"]] imports from a given cloud \
object."}, {"CloudLoggingData", "CloudLoggingData[] gives summary logging \
data for all your cloud objects. CloudLoggingData[category] gives summary \
logging data for all your cloud objects of a particular category. \
CloudLoggingData[obj] gives summary logging data for the cloud object obj. \
CloudLoggingData[{obj1, \[Ellipsis]}] gives aggregated summary logging data \
for all the objects obji. CloudLoggingData[objs, period] gives summary \
logging data for the specified period. CloudLoggingData[objs, period, elems] \
gives logging data elements specified by elems."}, 
 {"CloudObject", "CloudObject[] represents a new anonymous cloud object. \
CloudObject[\"\\!\\(\\*http\",AutoSpacing->False]\\!\\(\\*StyleBox[\":\",Auto\
Spacing->False]\\!\\(\\*StyleBox[\"//\",AutoSpacing->False]\\!\\(\\*StyleBox[\
\"\[Ellipsis]\"], \
CloudObject[\"\\!\\(\\*https\",AutoSpacing->False]\\!\\(\\*StyleBox[\":\",Aut\
oSpacing->False]\\!\\(\\*StyleBox[\"//\",AutoSpacing->False]\\!\\(\\*StyleBox\
[\"\[Ellipsis]\"] represents a cloud object with a given URI. \
CloudObject[\"\\!\\(\\*StyleBox[RowBox[{\"user\", \":\", user, \"/\", \
path}],AutoSpacing->False]\"] represents a cloud object of a given user with \
a given path. \
CloudObject[\"\\!\\(\\*uuid\",AutoSpacing->False]\\!\\(\\*StyleBox[\":\",Auto\
Spacing->False]\\!\\(\\*StyleBox[StyleBox[\"uuid,AutoSpacing->False]\"] \
represents a cloud object identified by a given UUID. \
CloudObject[\"\\!\\(\\*StyleBox[RowBox[{\"/\", \
abspath}],AutoSpacing->False]\"] represents a cloud object of the currently \
authenticated user at an absolute path. CloudObject[\"\\!\\(\\*relpath\"] \
represents a cloud object of the currently authenticated user at a relative \
path. CloudObject[\"\\!\\(\\*relpath\", base] represents a cloud object with \
a path relative to the base path base."}, {"CloudObjectNameFormat", "CloudObj\
ectNameFormat is an option for CloudObject and related objects that \
determines how the name portion of the URL for the object should be \
formatted."}, {"CloudObjectURLType", "CloudObjectURLType is an option for \
CloudObject and related objects that specifies the base type of URL to \
generate for the object."}, {"CloudObjects", "CloudObjects[] gives a list of \
cloud objects in your current cloud directory. CloudObjects[dir] gives a list \
of cloud objects in the cloud directory dir. CloudObjects[None] gives a list \
of all unnamed cloud objects owned by you. CloudObjects[dir, type] gives a \
list of cloud objects of the specified type in the cloud directory dir. \
CloudObjects[assoc] gives a list of cloud objects matching the filters \
defined by the association assoc."}, {"CloudPublish", "CloudPublish[] makes a \
public copy in the cloud of the current document. CloudPublish[obj] makes a \
public copy of the cloud object obj. CloudPublish[expr] deploys an expression \
to the cloud and makes it public. CloudPublish[content, location] publishes \
to the specified location relative to the user's current cloud directory. \
CloudPublish[content, CloudObject[\[Ellipsis]]] publishes to the specified \
cloud object."}, {"CloudPut", "CloudPut[expr] writes expr to a new anonymous \
cloud object. CloudPut[expr, \"\\!\\(\\*uri\"] writes expr to a cloud object \
at a given URI. CloudPut[expr, CloudObject[\"\\!\\(\\*uri\"]] writes expr to \
a given cloud object."}, {"CloudRenderingMethod", "CloudRenderingMethod is an \
option for Cell and Notebook that specifies how to render cells in the \
cloud."}, {"CloudSave", "CloudSave[symbol] saves definitions associated with \
the specified symbol to a new anonymous cloud object. \
CloudSave[\"\\!\\(\\*form\"] saves definitions associated with all symbols \
whose names match the string pattern \"\\!\\(\\*form\". \
CloudSave[\"\\!\\(\\*context\"] saves definitions associated with all symbols \
in the specified context. CloudSave[{object1, object2, \[Ellipsis]}] saves \
definitions associated with several objects. CloudSave[symspec, \
\"\\!\\(\\*uri\"] appends definitions associated with symspec to the cloud \
object at the given URI. CloudSave[symspec, CloudObject[\"\\!\\(\\*uri\"]] \
appends definitions to the given cloud object."}, 
 {"CloudShare", "CloudShare[user] shares the current cloud document with the \
specified user. CloudShare[{user1, user2, \[Ellipsis]}] shares the current \
document with all the users useri. CloudShare[obj, users] shares the cloud \
object obj with the specified users."}, {"CloudSubmit", "CloudSubmit[expr] \
submits expr for immediate asynchronous cloud evaluation. \
CloudSubmit[ScheduledTask[expr, spec]] submits a task to evaluate expr in the \
cloud on the schedule defined by spec."}, {"CloudSymbol", "CloudSymbol[\"\\!\
\\(\\*name\"] represents a symbol whose value is persistently stored in the \
cloud. CloudSymbol[obj] represents a persistent symbol corresponding to the \
cloud object obj. CloudSymbol[\"\\!\\(\\*uri\"] represents a cloud symbol \
located at a given URI."}, {"CloudUnshare", "CloudUnshare[obj] cancels \
sharing of the cloud object obj with everyone. CloudUnshare[obj, users] \
cancels sharing with the specified list of users."}, 
 {"ClusterClassify", "ClusterClassify[data] generates a \
ClassifierFunction[\[Ellipsis]] by partitioning data into clusters of similar \
elements. ClusterClassify[data, n] generates a \
ClassifierFunction[\[Ellipsis]] with at most n clusters."}, 
 {"ClusterDissimilarityFunction", "ClusterDissimilarityFunction is an option \
for ClusteringTree and Dendrogram that specifies the intercluster \
dissimilarity."}, {"ClusteringComponents", "ClusteringComponents[array] gives \
an array in which each element at the lowest level of array is replaced by an \
integer index representing the cluster in which the element lies. \
ClusteringComponents[array, n] finds at most n clusters. \
ClusteringComponents[array, n, level] finds clusters at the specified level \
in array. ClusteringComponents[image] finds clusters of pixels with similar \
values in image. ClusteringComponents[image, n] finds at most n clusters in \
image."}, {"ClusteringTree", "ClusteringTree[{e1, e2, \[Ellipsis]}] \
constructs a weighted tree from the hierarchical clustering of the elements \
e1, e2, \[Ellipsis]. ClusteringTree[{e1->v1, e2->v2, \[Ellipsis]}] represents \
ei with vi in the constructed graph. ClusteringTree[{e1, e2, \
\[Ellipsis]}->{v1, v2, \[Ellipsis]}] represents ei with vi in the constructed \
graph. ClusteringTree[\[LeftAssociation]label1->e1, \
label2->e2\[Ellipsis]\[RightAssociation]] represents ei using labels labeli \
in the constructed graph. ClusteringTree[data, h] constructs a weighted tree \
from the hierarchical clustering of data by joining subclusters at distance \
less than h."}, {"CodeAssistOptions", "CodeAssistOptions is an option for \
cells that specifies settings for controlling code input assistance features, \
including autocompletion, function template insertion, and mouseover \
behaviors for code."}, {"Coefficient", "Coefficient[expr, form] gives the \
coefficient of form in the polynomial expr. Coefficient[expr, form, n] gives \
the coefficient of form^n in expr."}, {"CoefficientArrays", "CoefficientArray\
s[polys, vars] gives the arrays of coefficients of the variables vars in the \
polynomials polys."}, {"CoefficientList", "CoefficientList[poly, var] gives a \
list of coefficients of powers of var in poly, starting with power 0. \
CoefficientList[poly, {var1, var2, \[Ellipsis]}] gives an array of \
coefficients of the vari. CoefficientList[poly, {var1, var2, \[Ellipsis]}, \
{dim1, dim2, \[Ellipsis]}] gives an array of dimensions {dim1, dim2, \
\[Ellipsis]}, truncating or padding with zeros as needed."}, 
 {"CoefficientRules", "CoefficientRules[poly, {x1, x2, \[Ellipsis]}] gives \
the list {{e11, e12, \[Ellipsis]}->c1, {e21, \[Ellipsis]}->c2, \[Ellipsis]} \
of exponent vectors and coefficients for the monomials in poly with respect \
to the xi. CoefficientRules[poly, {x1, x2, \[Ellipsis]}, order] gives the \
result with the monomial ordering specified by order."}, 
 {"CoifletWavelet", "CoifletWavelet[] represents a Coiflet wavelet of order \
2. CoifletWavelet[n] represents a Coiflet wavelet of order n."}, 
 {"Collect", "Collect[expr, x] collects together terms involving the same \
powers of objects matching x. Collect[expr, {x1, x2, \[Ellipsis]}] collects \
together terms that involve the same powers of objects matching x1, x2, \
\[Ellipsis]. Collect[expr, var, h] applies h to the expression that forms the \
coefficient of each term obtained."}, {"CollinearPoints", "CollinearPoints[{p\
1, p2, p3, \[Ellipsis], pn}] tests whether the points p1, p2, p3, \
\[Ellipsis], pn are collinear."}, 
 {"Colon", 
  "Colon[x, y, \[Ellipsis]] displays as x\[Colon]y\[Colon]\[Ellipsis]."}, 
 {"ColorBalance", "ColorBalance[image] adjusts the colors in image to achieve \
a balance that simulates the effect of neutral lighting. ColorBalance[image, \
ref] adjusts colors in image so that the reference color specified by ref is \
mapped to white. ColorBalance[image, ref->target] maps the reference color \
ref to target."}, {"ColorCombine", "ColorCombine[{image1, image2, \
\[Ellipsis]}] creates a multichannel image by combining the sequence of \
channels in the imagei. ColorCombine[{image1, image2, \[Ellipsis]}, \
colorspace] combines images that represent the color components specified by \
colorspace."}, {"ColorConvert", "ColorConvert[color, colspace] converts color \
space of a color to the specified color space colspace. ColorConvert[image, \
colspace] converts the color space of image. ColorConvert[{expr1, \
\[Ellipsis]}, colspace] converts the color space of a list of colors and \
images."}, {"ColorCoverage", "ColorCoverage is an option for DominantColors \
that specifies the minimum image coverage that each color cluster should \
have."}, {"ColorData", "ColorData[\"\\!\\(\\*scheme\"] gives a function that \
generates colors in the named color scheme when applied to parameter values. \
ColorData[\"\\!\\(\\*scheme\", \"\\!\\(\\*property\"] gives the specified \
property of a color scheme. ColorData[\"\\!\\(\\*collection\"] gives a list \
of color schemes in a named collection. ColorData[] gives a list of named \
collections of color schemes."}, {"ColorDataFunction", "ColorDataFunction[ran\
ge, \[Ellipsis]] is a function that represents a color scheme."}, 
 {"ColorDetect", "ColorDetect[image, cspec] returns a mask image representing \
regions in image with colors within the specified color region."}, 
 {"ColorDistance", "ColorDistance[c1, c2] gives the approximate perceptual \
distance between color directives c1 and c2. ColorDistance[list, c] gives \
color distances between elements of list and c. ColorDistance[list1, list2] \
gives color distances between corresponding elements of list1 and list2. \
ColorDistance[image, c] gives an image whose pixel values are color distance \
between pixels in image and the color c. ColorDistance[image1, image2] yields \
an image giving the pixelwise color distance between image1 and image2."}, 
 {"ColorFunction", "ColorFunction is an option for graphics functions that \
specifies a function to apply to determine colors of elements."}, 
 {"ColorFunctionBinning", "ColorFunctionBinning is an option for plotting \
functions that divides values into a limited set of bins for styling."}, 
 {"ColorFunctionScaling", "ColorFunctionScaling is an option for graphics \
functions that specifies whether arguments supplied to a color function \
should be scaled to lie between 0 and 1."}, {"ColorNegate", "ColorNegate[colo\
r] gives the negative of a color. ColorNegate[image] gives the negative of \
image, in which all colors have been negated. ColorNegate[{expr1, \
\[Ellipsis]}] gives a list of negative images or colors."}, 
 {"ColorProfileData", "ColorProfileData[<>, \
\"Description\"->\"\\!\\(\\*desc\", \
\"DeviceColorSpace\"->\"\\!\\(\\*device\", \
\"IndependentColorSpace\"->\"\\!\\(\\*ics\"] represents an ICC color profile \
that can convert between the independent color space \"\\!\\(\\*ics\" and the \
device-dependent color space \"\\!\\(\\*device\"."}, 
 {"ColorQ", "ColorQ[color] yields True if color is a valid color directive \
and False otherwise."}, {"ColorQuantize", "ColorQuantize[image] gives an \
approximation to image by quantizing to distinct colors. ColorQuantize[image, \
n] uses at most n distinct colors. ColorQuantize[image, {col1, \[Ellipsis], \
coln}] represents an image using only the n specified colors coli."}, 
 {"ColorReplace", "ColorReplace[image, color] finds regions in image whose \
pixel values are similar to color and replaces them with transparent pixels. \
ColorReplace[image, color->replacement] replaces all pixels with the \
specified replacement color. ColorReplace[image, color->replacement, d] \
replaces all pixels whose values are within a distance d from color. \
ColorReplace[image, {color1->replacement1, \[Ellipsis]}, {d1, \[Ellipsis]}] \
does multiple color replacements."}, {"ColorRules", "ColorRules is an option \
that specifies how colors of cells should be determined from values."}, 
 {"ColorSeparate", "ColorSeparate[image] gives a list of single-channel \
images corresponding to each of the color channels in image. \
ColorSeparate[image, colorspace] gives a list of images corresponding to the \
components of colorspace. ColorSeparate[image, channel] returns a \
single-channel image containing the specified channel."}, 
 {"ColorSetter", "ColorSetter[color] represents a color setter which displays \
as a swatch of the specified color and when clicked brings up a system color \
picker dialog. ColorSetter[Dynamic[color]] uses the dynamically updated \
current value of color, with the value of color being reset if the color is \
modified. ColorSetter[] gives a color setter with initial color gray."}, 
 {"ColorSlider", "ColorSlider[color] represents a color slider currently set \
to the color corresponding to color. ColorSlider[Dynamic[color]] uses the \
dynamically updated current value of color, with the value of color being \
reset if the color is modified. ColorSlider[] represents a color slider with \
an initial gray color."}, {"ColorSpace", "ColorSpace is an option for Image \
and related functions that specifies the color space to which color values \
refer."}, {"ColorToneMapping", "ColorToneMapping[image] applies a tone \
mapping to color values in image so as to make variations of luminance \
visible even in small intervals of the dynamic range. ColorToneMapping[image, \
c] maps colors by compressing the overall range of luminance values by a \
factor c. ColorToneMapping[image, range] applies a mapping only to colors \
whose initial luminance lies in the specified range. ColorToneMapping[image, \
{range, c}] takes the specified range of colors and compresses their overall \
luminance values by a factor c. ColorToneMapping[image, {{range1, c1}, \
{range2, c2}, \[Ellipsis]}] uses different compression factors ci for \
different ranges rangei. ColorToneMapping[image, spec, s] uses the color \
compensation factor s to correct for saturation distortion introduced during \
tone mapping."}, {"Colorize", "Colorize[m] generates an image from an integer \
matrix m, using colors for positive integers and black for non-positive \
integers. Colorize[image] replaces intensity values in image with pseudocolor \
values."}, {"ColorsNear", "ColorsNear[color] represents a region around \
color. ColorsNear[color, d] represents a region with maximum distance d \
around color. ColorsNear[color, d, dfun] uses the specified color distance \
function dfun."}, {"Column", "Column[{expr1, expr2, \[Ellipsis]}] is an \
object that formats with the expri arranged in a column, with expr1 above \
expr2, etc. Column[list, alignment] aligns each element horizontally in the \
specified way. Column[list, alignment, spacing] leaves the specified number \
of x -heights of spacing between successive elements."}, 
 {"ColumnAlignments", "ColumnAlignments is an option for the low-level \
function GridBox that specifies how entries in each column should be \
aligned."}, {"ColumnLines", "ColumnLines is an option for the low-level \
function GridBox which specifies whether lines should be drawn between \
adjacent columns."}, {"ColumnSpacings", "ColumnSpacings is an option for the \
low-level function GridBox which specifies the spaces in ems that should be \
inserted between adjacent columns."}, {"ColumnWidths", "ColumnWidths is an \
option for the low-level function GridBox which specifies the widths to use \
for columns."}, {"ColumnsEqual", "ColumnsEqual is an option for the low-level \
function GridBox which specifies whether all columns in the grid should be \
assigned equal width."}, {"CombinatorB", 
  "CombinatorB represents the combinator."}, 
 {"CombinatorC", "CombinatorC represents the combinator."}, 
 {"CombinatorI", "CombinatorI represents the combinator."}, 
 {"CombinatorK", "CombinatorK represents the combinator."}, 
 {"CombinatorS", "CombinatorS represents the combinator."}, 
 {"CombinatorW", "CombinatorW represents the combinator."}, 
 {"CombinatorY", "CombinatorY represents the combinator."}, 
 {"CombinedEntityClass", "CombinedEntityClass[class1, class2, prop] \
represents a class of entities obtained by combining the properties of those \
pairs of entities from class1 and class2 for which the value of the property \
prop is the same for the two entities in the pair. \
CombinedEntityClass[class1, class2, prop1->prop2] combines pairs of entities \
from class1 and class2 for which the value of prop1 of the entity from class1 \
is the same as the value of prop2 for the entity from class2. \
CombinedEntityClass[class1, class2, {pspeca, pspecb, \[Ellipsis]}] combines \
pairs of entities for which all the property specifications pspeck agree. \
CombinedEntityClass[class1, class2, f] combines pairs of entities for which \
the application of the entity function f yields True. \
CombinedEntityClass[class1, class2, spec, \"\\!\\(\\*jspec\"] uses \
\"\\!\\(\\*jspec\" to determine when to allow entities with missing \
properties to be included."}, {"CombinerFunction", "CombinerFunction is an \
option for template functions that specifies how fragments should be \
assembled to give the result of applying a template."}, 
 {"CometData", "CometData[entity, property] gives the value of the specified \
property for the comet entity. CometData[{entity1, entity2, \[Ellipsis]}, \
property] gives a list of property values for the specified comet entities. \
CometData[entity, property, annotation] gives the specified annotation \
associated with the given property."}, {"CommonName", "CommonName[entity] \
gives the common name for the entity specified by entity. \
CommonName[{entity1, \[Ellipsis], entityn}] gives the common name for entity1 \
through entityn."}, {"CommonUnits", "CommonUnits[{quantity1, quantity2, \
\[Ellipsis], quantityn}] converts quantity1 through quantityn to common units \
across compatible dimensions."}, {"Commonest", "Commonest[list] gives a list \
of the elements that are the most common in list. Commonest[list, n] gives a \
list of the n most common elements in list."}, 
 {"CommonestFilter", "CommonestFilter[data, r] filters data by replacing \
every value with the most common value in its range-r neighborhood. \
CommonestFilter[data, {r1, r2, \[Ellipsis]}] uses ri for filtering the i^th \
dimension in data."}, {"CommunityBoundaryStyle", "CommunityBoundaryStyle is \
an option to CommunityGraphPlot that specifies how to style community \
boundaries."}, {"CommunityGraphPlot", "CommunityGraphPlot[g] generates a plot \
showing the community structure of the graph g. CommunityGraphPlot[g, {{vi1, \
vi2, \[Ellipsis]}, \[Ellipsis]}] generates a plot for the graph g with \
communities {vi1, vi2, \[Ellipsis]}, \[Ellipsis]. CommunityGraphPlot[g, \
{\[Ellipsis], wj[{vi1, \[Ellipsis]}], \[Ellipsis]}] generates a plot with \
highlighting features defined by the symbol wrappers wj. \
CommunityGraphPlot[{vi1->vj1, vi2->vj2, \[Ellipsis]}, \[Ellipsis]] generates \
a plot for a graph in which vertex vik is connected to vertex vjk. \
CommunityGraphPlot[m, \[Ellipsis]] generates a plot for a graph represented \
by the adjacency matrix m."}, {"CommunityLabels", "CommunityLabels is an \
option to CommunityGraphPlot that controls what labels and placement to use \
for communities."}, {"CommunityRegionStyle", "CommunityRegionStyle is an \
option to CommunityGraphPlot that specifies how to style community regions."}\
, {"CompanyData", "CompanyData[entity, property] gives the value of the \
specified property for the company entity. CompanyData[{entity1, entity2, \
\[Ellipsis]}, property] gives a list of property values for the specified \
company entities. CompanyData[entity, property, annotation] gives the \
specified annotation associated with the given property."}, 
 {"CompatibleUnitQ", "CompatibleUnitQ[quantity1, quantity2] returns True if \
quantity1 and quantity2 have compatible units, and False otherwise."}, 
 {"CompilationOptions", "CompilationOptions is an option for Compile that \
specifies settings for the compilation process."}, 
 {"CompilationTarget", "CompilationTarget is an option for Compile that \
specifies the target runtime for the compiled function."}, 
 {"Compile", "Compile[{x1, x2, \[Ellipsis]}, expr] creates a compiled \
function that evaluates expr assuming numerical values of the xi. \
Compile[{{x1, t1}, \[Ellipsis]}, expr] assumes that xi is of a type that \
matches ti. Compile[{{x1, t1, n1}, \[Ellipsis]}, expr] assumes that xi is a \
rank ni array of objects, each of a type that matches ti. Compile[vars, expr, \
{{p1, pt1}, \[Ellipsis]}] assumes that subexpressions in expr that match pi \
are of types that match pti."}, {"Compiled", "Compiled is an option for \
various numerical and plotting functions which specifies whether the \
expressions they work with should automatically be compiled."}, 
 {"CompiledCodeFunction", "CompiledCodeFunction[\[Ellipsis]] is a function \
created by FunctionCompile that contains compiled code that is run when the \
CompiledCodeFunction is applied to suitable arguments."}, 
 {"CompiledFunction", "CompiledFunction[args\[Ellipsis]] represents compiled \
code for evaluating a compiled function."}, {"CompiledLayer", "CompiledLayer[\
func] represents a net layer whose computation is defined by the compilable \
function func. CompiledLayer[func, gradientfunc] specifies a gradient \
propagating function allowing the layer to be used in NetTrain."}, 
 {"CompilerEnvironment", "CompilerEnvironment is an option for \
FunctionCompile and related functions that allows definitions to be included \
in the compilation."}, {"CompilerEnvironmentAppendTo", "CompilerEnvironmentAp\
pendTo[{def1, def2, \[Ellipsis]}] appends declarations to \
$CompilerEnvironment. CompilerEnvironmentAppendTo[env, {def1, def2, \
\[Ellipsis]}] appends declarations to CompilerEnvironmentObject env."}, 
 {"CompilerEnvironmentObject", "CompilerEnvironmentObject represents a \
collection of definitions that can be included in compilations by \
FunctionCompile and related functions."}, {"CompilerOptions", "CompilerOption\
s is an option for FunctionCompile and related functions that allows options \
for the compilation pipeline to be specified."}, 
 {"Complement", "Complement[eall, e1, e2, \[Ellipsis]] gives the elements in \
eall that are not in any of the ei."}, {"ComplementedEntityClass", "Complemen\
tedEntityClass[classall, class1, \[Ellipsis]] represents an entity class \
containing all the entities in classall that are not in any of the classi."}, 
 {"CompleteGraph", "CompleteGraph[n] gives the complete graph with n vertices \
Kn. CompleteGraph[{n1, n2, \[Ellipsis], nk}] gives the complete k -partite \
graph with n1 + n2 + \[CenterEllipsis] + nk vertices Kn1, n2, \[Ellipsis], \
nk."}, {"CompleteGraphQ", "CompleteGraphQ[g] yields True if the graph g is a \
complete graph, and False otherwise. CompleteGraphQ[g, vlist] yields True if \
the subgraph induced by vlist is a complete graph, and False otherwise."}, 
 {"CompleteKaryTree", "CompleteKaryTree[n] gives the complete binary tree \
with n levels. CompleteKaryTree[n, k] gives the complete k -ary tree with n \
levels."}, {"Complex", "Complex is the head used for complex numbers."}, 
 {"ComplexArrayPlot", "ComplexArrayPlot[array] generates a plot in which \
complex values zij in an array array are shown in a discrete array of squares \
with Arg[zij] indicated by color and Abs[zij] by shading."}, 
 {"ComplexContourPlot", "ComplexContourPlot[f, {z, zmin, zmax}] generates a \
filled contour plot of f as a function of z. ComplexContourPlot[{f1, f2, \
\[Ellipsis]}, {z, zmin, zmax}] generates contour lines for f1, f2, \
\[Ellipsis]. ComplexContourPlot[f == g, {z, zmin, zmax}] plots contour lines \
for which f = g. ComplexContourPlot[{f1 == g1, f2 == g2, \[Ellipsis]}, {z, \
zmin, zmax}] plots contour lines for each of f1==g1, f2 = g2, \[Ellipsis]."}, 
 {"ComplexExpand", "ComplexExpand[expr] expands expr assuming that all \
variables are real. ComplexExpand[expr, {x1, x2, \[Ellipsis]}] expands expr \
assuming that variables matching any of the xi are complex."}, 
 {"ComplexInfinity", "ComplexInfinity represents a quantity with infinite \
magnitude, but undetermined complex phase."}, {"ComplexListPlot", "ComplexLis\
tPlot[{z1, z2, \[Ellipsis]}] plots complex numbers z1, z2, \[Ellipsis] as \
points in the complex plane. ComplexListPlot[{data1, data2, \[Ellipsis]}] \
plots data from all datai. ComplexListPlot[{\[Ellipsis], w[datai, \
\[Ellipsis]], \[Ellipsis]}] plots datai with features defined by the symbolic \
wrapper w."}, {"ComplexPlot", "ComplexPlot[f, {z, zmin, zmax}] generates a \
plot of Arg[f] over the complex rectangle with corners zmin and zmax."}, 
 {"ComplexPlot3D", "ComplexPlot3D[f, {z, zmin, zmax}] generates a 3D plot of \
Abs[f] colored by Arg[f] over the complex rectangle with corners zmin and \
zmax."}, {"ComplexRegionPlot", "ComplexRegionPlot[pred, {z, zmin, zmax}] \
makes a plot showing the region in the complex plane for which pred is True. \
ComplexRegionPlot[{pred1, pred2, \[Ellipsis]}, {z, zmin, zmax}] plots regions \
given by the multiple predicates predi."}, {"ComplexStreamPlot", "ComplexStre\
amPlot[f, {z, zmin, zmax}] generates a streamline plot of the vector field \
{Re[f], Im[f]} over the complex rectangle with corners zmin and zmax."}, 
 {"ComplexVectorPlot", "ComplexVectorPlot[f, {z, zmin, zmax}] generates a \
vector plot of the vector field {Re[f], Im[f]} over the complex rectangle \
with corners zmin and zmax. ComplexVectorPlot[{f1, f2, \[Ellipsis]}, {z, \
zmin, zmax}] plots several vector fields."}, {"Complexes", "Complexes \
represents the domain of complex numbers, as in x\[Element]Complexes."}, 
 {"ComplexityFunction", "ComplexityFunction is an option for Simplify and \
other functions which gives a function to rank the complexity of different \
forms of an expression."}, {"ComponentMeasurements", "ComponentMeasurements[{\
image, lmat}, \"\\!\\(\\*prop\"] computes the property \"\\!\\(\\*prop\" for \
components of image indicated by the label matrix lmat. \
ComponentMeasurements[image, \"\\!\\(\\*prop\"] computes the property \
\"\\!\\(\\*prop\" for connected components of image. \
ComponentMeasurements[\[Ellipsis], \"\\!\\(\\*prop\", crit] only returns \
measurements for components that satisfy the criterion crit. \
ComponentMeasurements[\[Ellipsis], \"\\!\\(\\*prop\", crit, format] formats \
the result according to the output specification format."}, 
 {"ComposeList", "ComposeList[{f1, f2, \[Ellipsis]}, x] generates a list of \
the form {x, f1[x], f2[f1[x]], \[Ellipsis]}."}, 
 {"ComposeSeries", "ComposeSeries[series1, series2, \[Ellipsis]] composes \
several power series."}, {"CompositeQ", "CompositeQ[n] yields True if n is a \
composite number, and yields False otherwise."}, 
 {"Composition", "Composition[f1, f2, f3, \[Ellipsis]] represents a \
composition of the functions f1, f2, f3, \[Ellipsis]."}, 
 {"CompoundElement", "CompoundElement[{spec1, spec2, \[Ellipsis]}] represents \
a form or interpreter specification for a list of fields or inputs that gives \
a list of results. CompoundElement[\[LeftAssociation]key1->spec1, \
key2->spec2, \[Ellipsis]\[RightAssociation]] represents a form or interpreter \
specification that gives an association of results."}, 
 {"CompoundExpression", "expr1;expr2;\[Ellipsis] evaluates the expri in turn, \
giving the last one as the result."}, {"CompoundPoissonDistribution", "Compou\
ndPoissonDistribution[\[Lambda], dist] represents a compound Poisson \
distribution with rate parameter \[Lambda] and jump size distribution dist."}\
, {"CompoundPoissonProcess", "CompoundPoissonProcess[\[Lambda], jdist] \
represents a compound Poisson process with rate parameter \[Lambda] and jump \
size distribution jdist."}, {"CompoundRenewalProcess", "CompoundRenewalProces\
s[rdist, jdist] represents a compound renewal process with renewal-time \
distribution rdist and jump size distribution jdist."}, 
 {"Compress", 
  "Compress[expr] gives a compressed representation of expr as a string."}, 
 {"CompressionLevel", "CompressionLevel is an option for Export and \
CreateArchive that specifies the amount of compression to use when \
compressing data."}, {"ComputeUncertainty", "ComputeUncertainty is an option \
for ClassifierMeasurements, LearnedDistribution and other functions to \
specify if numeric results should be returned along with their uncertainty."}\
, {"Condition", "patt/;test is a pattern which matches only if the evaluation \
of test yields True. lhs:>rhs/;test represents a rule which applies only if \
the evaluation of test yields True. lhs:=rhs/;test is a definition to be used \
only if test yields True."}, {"ConditionalExpression", "ConditionalExpression\
[expr, cond] is a symbolic construct that represents the expression expr when \
the condition cond is True."}, {"Conditioned", "Conditioned[expr, cond] or \
expr\[Conditioned]cond represents expr conditioned by the predicate cond."}, 
 {"Cone", "Cone[{{x1, y1, z1}, {x2, y2, z2}}, r] represents a cone with a \
base of radius r centered at (x1, y1, z1) and a tip at (x2, y2, z2). \
Cone[{{x1, y1, z1}, {x2, y2, z2}}] represents a cone with a base of radius \
1."}, {"ConfidenceLevel", "ConfidenceLevel is an option for LinearModelFit \
and other fitting functions that specifies the level to use in various \
confidence and prediction intervals and bands."}, 
 {"ConfidenceRange", "ConfidenceRange is an option for SurvivalModelFit and \
other functions that specifies the range over which simultaneous confidence \
intervals and bands are computed."}, {"ConfidenceTransform", "ConfidenceTrans\
form is an option for functions such as SurvivalModelFit that specifies the \
transformation used for confidence intervals and bands."}, 
 {"Confirm", "Confirm[expr] confirms that expr is not considered a failure, \
otherwise throwing an error to the nearest surrounding Enclose. Confirm[expr, \
info] if expr is not confirmed, evaluates info and includes its value in the \
thrown error. Confirm[expr, info, tag] uses the specified tag for any thrown \
errors."}, {"ConfirmAssert", "ConfirmAssert[test] confirms that test is True, \
otherwise throwing an error to the nearest surrounding Enclose. \
ConfirmAssert[test, info] if test is not True, evaluates info and includes \
its value in the thrown error. ConfirmAssert[test, info, tag] uses the \
specified tag for any thrown errors."}, {"ConfirmBy", "ConfirmBy[expr, f] \
confirms that f[expr] returns True, otherwise throwing an error to the \
nearest surrounding Enclose. ConfirmBy[expr, f, info] if expr is not \
confirmed, evaluates info and includes its value in the thrown error. \
ConfirmBy[expr, f, info, tag] uses the specified tag for any thrown errors."}\
, {"ConfirmMatch", "ConfirmMatch[expr, form] confirms that expr matches the \
pattern form, otherwise throwing an error to the nearest surrounding Enclose. \
ConfirmMatch[expr, form, info] if expr is not confirmed, evaluates info and \
includes its value in the thrown error. ConfirmMatch[expr, form, info, tag] \
uses the specified tag for any thrown errors."}, 
 {"ConfirmQuiet", "ConfirmQuiet[expr] confirms that no messages are generated \
during the evaluation of expr, otherwise quieting them and throwing an error \
to the nearest surrounding Enclose. ConfirmQuiet[expr, s::t] tests only for \
the specified message. ConfirmQuiet[expr, {s1::t1, s2::t2, \[Ellipsis]}] \
tests only for the specified list of messages. ConfirmQuiet[expr, \
\"\\!\\(\\*group\"] tests only for messages in the named message group. \
ConfirmQuiet[expr, mspec, info] if expr is not confirmed, evaluates info and \
includes its value in the thrown error. ConfirmQuiet[expr, mspec, info, tag] \
uses the specified tag for any thrown errors."}, 
 {"ConformAudio", "ConformAudio[{audio1, audio2, \[Ellipsis]}] returns a list \
of audio objects where all audioi are made to have conforming properties, \
including duration, data type, and number of channels. ConformAudio[{audio1, \
audio2, \[Ellipsis]}, spec] returns all audio objects of the specified spec."}\
, {"ConformImages", "ConformImages[{image1, image2, \[Ellipsis]}] returns a \
list of images where all imagei are made to have conforming properties, \
including dimensions, data type, color space, and interleaving. \
ConformImages[{image1, image2, \[Ellipsis]}, spec] returns all images of the \
specified spec. ConformImages[{image1, image2, \[Ellipsis]}, spec, fitting] \
resizes images using the specified fitting method."}, 
 {"Congruent", "Congruent[x, y, \[Ellipsis]] displays as \
x\[Congruent]y\[Congruent]\[Ellipsis]."}, {"ConicGradientFilling", "ConicGrad\
ientFilling[{col1, col2, \[Ellipsis], coln}] is a two-dimensional graphics \
directive specifying that faces of polygons and other filled graphics objects \
are to be drawn using a progressive transition between colors coli along a \
circle. ConicGradientFilling[{\[Theta]1, \[Theta]2, \[Ellipsis], \
\[Theta]n}->{col1, col2, \[Ellipsis], coln}] uses the colors coli at angles \
\[Theta]i. ConicGradientFilling[{\[Theta]1, \[Theta]2, \[Ellipsis], \
\[Theta]n}->{col1, col2, \[Ellipsis], coln}, {x, y}] rotates from the center \
point {x, y}."}, {"ConicHullRegion", "ConicHullRegion[{p1, \[Ellipsis], \
pm+1}] represents the m -dimensional affine hull region passing through \
points pi. ConicHullRegion[p, {v1, \[Ellipsis], vm}] represents the m \
-dimensional affine hull region passing through the point p and parallel to \
vi. ConicHullRegion[{p1, \[Ellipsis], pm+1}, {w1, \[Ellipsis], wn}] \
represents the m -dimensional affine hull plus the conic hull generated by \
the vectors wj. ConicHullRegion[p, {v1, \[Ellipsis], vm}, {w1, \[Ellipsis], \
wn}] represents the m -dimensional affine hull plus the conic hull generated \
by the vectors wj."}, {"ConicOptimization", "ConicOptimization[f, cons, vars] \
finds values of variables vars that minimize the linear objective f subject \
to conic constraints cons. ConicOptimization[\[Ellipsis], \"\\!\\(\\*prop\"] \
specifies what solution property \"\\!\\(\\*prop\" should be returned."}, 
 {"Conjugate", "Conjugate[z] or z\[Conjugate] gives the complex conjugate of \
the complex number z."}, {"ConjugateTranspose", "ConjugateTranspose[m] or \
m^\[ConjugateTranspose] gives the conjugate transpose of m."}, 
 {"Conjunction", "Conjunction[expr, {a1, a2, \[Ellipsis]}] gives the \
conjunction of expr over all choices of the Boolean variables ai."}, 
 {"ConnectLibraryCallbackFunction", "ConnectLibraryCallbackFunction[mname, \
cf] connects a CompiledFunction cf with the library callback manager with \
name mname."}, {"ConnectSystemModelComponents", "ConnectSystemModelComponents\
[{\"\\!\\(\\*c_1\"\[Element]comp1, \[Ellipsis]}, \
{\"\\!\\(\\*c_1.\\!\\(\\*a\"->\"\\!\\(\\*c_2.\\!\\(\\*b\", \[Ellipsis]}] \
creates a system model by connecting connector \"\\!\\(\\*a\" of component \
\"\\!\\(\\*c_1\" with connector \"\\!\\(\\*b\" of component \"\\!\\(\\*c_2\" \
etc."}, {"ConnectSystemModelController", "ConnectSystemModelController[model, \
controller] connects the system model model with a controller according to \
the controller data controller."}, {"ConnectedComponents", "ConnectedComponen\
ts[g] gives the connected components of the graph g. ConnectedComponents[g, \
{v1, v2, \[Ellipsis]}] gives the connected components that include at least \
one of the vertices v1, v2, \[Ellipsis]. ConnectedComponents[g, patt] gives \
the connected components that include a vertex that matches the pattern patt. \
ConnectedComponents[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to \
specify the graph g."}, {"ConnectedGraphComponents", "ConnectedGraphComponent\
s[g] gives the connected components of the graph g. \
ConnectedGraphComponents[g, {v1, v2, \[Ellipsis]}] gives the connected \
components that include at least one of the vertices v1, v2, \[Ellipsis]. \
ConnectedGraphComponents[g, patt] gives the connected components that include \
a vertex that matches the pattern patt. ConnectedGraphComponents[{v->w, \
\[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify the graph g."}, 
 {"ConnectedGraphQ", "ConnectedGraphQ[g] yields True if the graph g is \
connected, and False otherwise."}, {"ConnectedMeshComponents", "ConnectedMesh\
Components[mr] gives a list {c1, c2, \[Ellipsis]} of disjoint path connected \
meshed regions."}, {"ConnectedMoleculeComponents", "ConnectedMoleculeComponen\
ts[mol] gives the connected components of the molecule mol."}, 
 {"ConnectedMoleculeQ", "ConnectedMoleculeQ[mol] returns True if the atoms in \
mol form are connected by bonds, and False otherwise."}, 
 {"ConnectionSettings", "ConnectionSettings is an option for URLRead and \
related functions to specify advanced connection settings."}, 
 {"ConnesWindow", "ConnesWindow[x] represents a Connes window function of x. \
ConnesWindow[x, \[Alpha]] uses the parameter \[Alpha]."}, 
 {"ConoverTest", "ConoverTest[{data1, data2, \[Ellipsis]}] tests whether the \
variances of data1, data2, \[Ellipsis] are equal. ConoverTest[dspec, \
\[Sigma]02] tests a dispersion measure against \[Sigma]02. ConoverTest[dspec, \
\[Sigma]02, \"\\!\\(\\*property\"] returns the value of \
\"\\!\\(\\*property\"."}, {"ConservativeConvectionPDETerm", "ConservativeConv\
ectionPDETerm[vars, \[Alpha]] represents a conservative convection term \
\[Del]{x1, \[Ellipsis], xn}\[CenterDot]( - \[Alpha] u) with conservative \
convection coefficient \[Alpha] and model variables vars. \
ConservativeConvectionPDETerm[vars, \[Alpha], pars] uses model parameters \
pars."}, {"Constant", "Constant is an attribute that indicates zero \
derivative of a symbol with respect to all parameters."}, 
 {"ConstantArray", "ConstantArray[c, n] generates a list of n copies of the \
element c. ConstantArray[c, {n1, n2, \[Ellipsis]}] generates an \
n1xn2x\[Ellipsis] array of nested lists containing copies of the element c."}\
, {"ConstantImage", "ConstantImage[val, size] gives an image of the specified \
size with constant pixel values of val. ConstantImage[val, size, \
\"\\!\\(\\*type\"] gives an image converted to the specified type."}, 
 {"ConstantRegionQ", "ConstantRegionQ[reg] gives True if the reg is a \
constant region and False otherwise."}, {"Constants", "Constants is an option \
for Dt which gives a list of objects to be taken as constants."}, 
 {"ConstellationData", "ConstellationData[entity, property] gives the value \
of the specified property for the constellation entity. \
ConstellationData[{entity1, entity2, \[Ellipsis]}, property] gives a list of \
property values for the specified constellation entities. \
ConstellationData[entity, property, annotation] gives the specified \
annotation associated with the given property."}, 
 {"Construct", "Construct[f, x] gives f[x]. Construct[f, x1, \[Ellipsis], xn] \
gives f[x1, \[Ellipsis], xn]."}, {"Containing", "Containing[\"\\!\\(\\*outer\
\", \"\\!\\(\\*inner\"] represents an object of type outer containing objects \
of type inner."}, {"ContainsAll", "ContainsAll[e1, e2] yields True if e1 \
contains all of the elements of e2. ContainsAll[e2] is an operator form that \
yields True when the object to which it is applied contains all of the \
elements of e2."}, {"ContainsAny", "ContainsAny[e1, e2] yields True if e1 \
contains any of the elements of e2. ContainsAny[e2] is an operator form that \
yields True when the object to which it is applied contains any of the \
elements in e2."}, {"ContainsExactly", "ContainsExactly[e1, e2] yields True \
if e1 contains exactly the same elements as e2. ContainsExactly[e2] is an \
operator form that yields True when the object to which it is applied \
contains exactly the same elements as e2."}, {"ContainsNone", "ContainsNone[e\
1, e2] yields True if e1 contains none of the elements in e2. \
ContainsNone[e2] is an operator form that yields True when the object to \
which it is applied contains none of the elements of e2."}, 
 {"ContainsOnly", "ContainsOnly[e1, e2] yields True if e1 contains only \
elements that appear in e2. ContainsOnly[e2] is an operator form that yields \
True when the object to which it is applied contains only elements that \
appear in e2."}, {"ContentFieldOptions", "ContentFieldOptions is an option \
for CreateSearchIndex and related functions that allows options to be \
specified for handling different fields in content that is being indexed."}, 
 {"ContentLocationFunction", "ContentLocationFunction is an option to \
CreateSearchIndex and related functions that specifies how to determine \
locations to be used for hyperlinks and related constructs in the resulting \
index."}, {"ContentObject", "ContentObject[\"\\!\\(\\*string\"] gives a \
content object whose content is string. ContentObject[File[\[Ellipsis]]] \
gives a content object whose content is stored in the specified file. \
ContentObject[\[LeftAssociation]\"\\!\\(\\*name_1\"->val1, \
\"\\!\\(\\*name_2\"->val2, \[Ellipsis]\[RightAssociation]] gives a content \
object with a sequence of fields with names namei and values vali."}, 
 {"ContentPadding", "ContentPadding is an option for objects that can be \
displayed with frames that specifies whether the vertical margins should \
shrink wrap tightly around the contents."}, {"ContentSelectable", "ContentSel\
ectable is an option to constructs such as Inset, Graphics, and GraphicsGroup \
that specifies whether and how content within them should be selectable."}, 
 {"ContentSize", "ContentSize is an option for Manipulate and other functions \
that specifies the size of the content area to use."}, 
 {"Context", "Context[] gives the current context. Context[symbol] gives the \
context in which a symbol appears."}, {"ContextToFileName", "ContextToFileNam\
e[\"\\!\\(\\*context\"] gives the string specifying the file name that is by \
convention associated with a particular context."}, 
 {"Contexts", "Contexts[] gives a list of all contexts. \
Contexts[\"\\!\\(\\*string\"] gives a list of the contexts that match the \
string."}, {"Continue", "Continue[] exits to the nearest enclosing Do, For, \
or While in a procedural program."}, {"ContinuedFraction", "ContinuedFraction\
[x, n] generates a list of the first n terms in the continued fraction \
representation of x. ContinuedFraction[x] generates a list of all terms that \
can be obtained given the precision of x."}, {"ContinuedFractionK", "Continue\
dFractionK[f, g, {i, imin, imax}] represents the continued fraction \
\[CapitalKappa]i = iminimaxf / g. ContinuedFractionK[g, {i, imin, imax}] \
represents the continued fraction \[CapitalKappa]i = iminimax1 / g."}, 
 {"ContinuousAction", "ContinuousAction is an option for Manipulate, Slider, \
and related functions that specifies whether action should be taken \
continuously while controls are being moved."}, 
 {"ContinuousMarkovProcess", "ContinuousMarkovProcess[i0, q] represents a \
continuous-time finite-state Markov process with transition rate matrix q and \
initial state i0. ContinuousMarkovProcess[p0, q] represents a Markov process \
with initial state probability vector p0. \
ContinuousMarkovProcess[\[Ellipsis], m, \[Mu]] represents a Markov process \
with transition matrix m and transition rates \[Mu]. \
ContinuousMarkovProcess[\[Ellipsis], g] represents a Markov process \
transition rate matrix from the graph g."}, {"ContinuousTask", "ContinuousTas\
k[expr] represents a task in which expr is continuously reevaluated. \
ContinuousTask[expr, end] represents a task in which expr is continuously \
reevaluated until the time specified by end. ContinuousTask[expr, tspan] \
represents a task in which expr is continuously reevaluated over the time \
span tspan."}, {"ContinuousTimeModelQ", "ContinuousTimeModelQ[lsys] gives \
True if lsys is a continuous-time systems model, and False otherwise."}, 
 {"ContinuousWaveletData", "ContinuousWaveletData[{{oct1, voc1}->coef1, \
\[Ellipsis]}, wave] yields a continuous wavelet data object with wavelet \
coefficients coefi corresponding to octave and voice {octi, voci} and wavelet \
wave."}, {"ContinuousWaveletTransform", "ContinuousWaveletTransform[{x1, x2, \
\[Ellipsis]}] gives the continuous wavelet transform of a list of values xi. \
ContinuousWaveletTransform[data, wave] gives the continuous wavelet transform \
using the wavelet wave. ContinuousWaveletTransform[data, wave,{noct, nvoc}] \
gives the continuous wavelet transform using noct octaves with nvoc voices \
per octave. ContinuousWaveletTransform[sound, \[Ellipsis]] gives the \
continuous wavelet transform of sampled sound."}, 
 {"ContourDetect", "ContourDetect[image] gives a binary image in which white \
pixels correspond to the zeros and zero crossings in image. \
ContourDetect[image, delta] treats values in image that are smaller in \
absolute value than delta as zero. ContourDetect[array, \[Ellipsis]] gives a \
binary sparse array in which 1 corresponds to zeros and zero crossings in \
array."}, {"ContourLabels", "ContourLabels is an option for contour plots \
that specifies how to label contours."}, {"ContourPlot", "ContourPlot[f, {x, \
xmin, xmax}, {y, ymin, ymax}] generates a contour plot of f as a function of \
x and y. ContourPlot[f == g, {x, xmin, xmax}, {y, ymin, ymax}] plots contour \
lines for which f = g. ContourPlot[{f1 == g1, f2 == g2, \[Ellipsis]}, {x, \
xmin, xmax}, {y, ymin, ymax}] plots several contour lines. \
ContourPlot[\[Ellipsis], {x, y}\[Element]reg] takes the variables {x, y} to \
be in the geometric region reg."}, {"ContourPlot3D", "ContourPlot3D[f, {x, \
xmin, xmax}, {y, ymin, ymax}, {z, zmin, zmax}] produces a three-dimensional \
contour plot of f as a function of x, y, and z. ContourPlot3D[f == g, {x, \
xmin, xmax}, {y, ymin, ymax}, {z, zmin, zmax}] plots the contour surface for \
which f = g. ContourPlot3D[\[Ellipsis], {x, y, z}\[Element]reg] takes the \
variables {x, y, z} to be in the geometric region reg."}, 
 {"ContourShading", "ContourShading is an option for contour plots that \
specifies how the regions between contour lines should be shaded."}, 
 {"ContourStyle", "ContourStyle is an option for contour plots that specifies \
the style in which contour lines or surfaces should be drawn."}, 
 {"Contours", "Contours is an option for contour plots that specifies the \
contours to draw."}, {"ContraharmonicMean", "ContraharmonicMean[list] gives \
the contraharmonic mean of the values in list. ContraharmonicMean[list, p] \
gives the order p Lehmer contraharmonic mean."}, 
 {"ContrastiveLossLayer", "ContrastiveLossLayer[] represents a loss layer \
that computes a loss based on a distance metric and a target that specifies \
whether the distance should be minimized or maximized. \
ContrastiveLossLayer[margin] specifies a distance above which the loss is \
zero for True targets."}, {"Control", "Control[{u, dom}] represents an \
interactive control for the variable u in the domain dom, with the type of \
control chosen to be appropriate for the domain specified. Control[{{u, \
uinit}, dom}] represents a control with initial value uinit."}, 
 {"ControlActive", "ControlActive[act, norm] evaluates to act if a control \
that affects act is actively being used, and to norm otherwise."}, 
 {"ControlPlacement", "ControlPlacement is an option for Manipulate, TabView, \
and other control objects that specifies where controls should be placed."}, 
 {"ControlType", "ControlType is an option for Manipulate and related \
functions that specifies what type of controls should be displayed."}, 
 {"ControllabilityGramian", "ControllabilityGramian[ssm] gives the \
controllability Gramian of the state-space model ssm."}, 
 {"ControllabilityMatrix", "ControllabilityMatrix[ssm] gives the \
controllability matrix of the state-space model ssm."}, 
 {"ControllableDecomposition", "ControllableDecomposition[sys] yields the \
controllable subsystem of the state-space model sys. \
ControllableDecomposition[sys, {z1, \[Ellipsis]}] specifies the new state \
variables zi."}, {"ControllableModelQ", "ControllableModelQ[sys] yields True \
if the state-space model sys is controllable, and False otherwise. \
ControllableModelQ[{sys, sub}] yields True if the subsystem sub is \
controllable."}, {"ControllerInformation", "ControllerInformation[] gives \
dynamically updated information on currently connected controller devices."}, 
 {"ControllerLinking", "ControllerLinking is an option for Manipulate, \
Graphics3D, Plot3D, and related functions that specifies whether to allow \
interactive control by external controllers."}, 
 {"ControllerManipulate", "ControllerManipulate[expr, {u, umin, umax}] \
generates a version of expr set up to allow interactive manipulation of the \
value of u using an external controller device. ControllerManipulate[expr, \
{u, umin, umax, du}] allows the value of u to vary between umin and umax in \
steps du. ControllerManipulate[expr, {{u, uinit}, umin, umax, \[Ellipsis]}] \
takes the initial value of u to be uinit. ControllerManipulate[expr, {u, {u1, \
u2, \[Ellipsis]}}] allows u to take on discrete values u1, u2, \[Ellipsis]. \
ControllerManipulate[expr, {u, \[Ellipsis]}, {v, \[Ellipsis]}, \[Ellipsis]] \
allows each of the u, v, \[Ellipsis] to be manipulated by the external \
controller device. ControllerManipulate[expr, \"\\!\\(\\*c_u\"->{u, \
\[Ellipsis]}, \"\\!\\(\\*c_v\"->{v, \[Ellipsis]}, \[Ellipsis]] links the \
parameters to the specified controllers on the external controller device."}, 
 {"ControllerMethod", "ControllerMethod is an option for Manipulate, \
Graphics3D, Plot3D, and related functions that specifies the default way that \
controls on an external controller device should apply."}, 
 {"ControllerPath", "ControllerPath is an option that gives a list of \
external controllers or classes of controllers to try for functions such as \
ControllerState, Manipulate, and Graphics3D."}, 
 {"ControllerState", "ControllerState[\"\\!\\(\\*c\"] gives the state of the \
control c for the first connected controller device on which it is supported. \
ControllerState[{\"\\!\\(\\*c_1\", \"\\!\\(\\*c_2\", \[Ellipsis]}] gives the \
states of several controls. ControllerState[id, \"\\!\\(\\*c\"] gives the \
state of control c for controller devices with the specified identifier. \
ControllerState[id, {\"\\!\\(\\*c_1\", \"\\!\\(\\*c_2\", \[Ellipsis]}] gives \
the states of several controls for several controller devices."}, 
 {"ControlsRendering", "ControlsRendering is a Style option that specifies \
how controls should be rendered."}, {"ConvectionPDETerm", "ConvectionPDETerm[\
vars, \[Beta]] represents a convection term \[Beta]\[CenterDot]\[Del]{x1, \
\[Ellipsis], xn}u with convection coefficient \[Beta] and model variables \
vars. ConvectionPDETerm[vars, \[Beta], pars] uses model parameters pars."}, 
 {"Convergents", "Convergents[list] gives a list of the convergents \
corresponding to the continued fraction terms list. Convergents[x, n] gives \
the first n convergents for a number x. Convergents[x] gives if possible all \
convergents leading to the number x."}, {"ConversionRules", "ConversionRules \
is an option for Cell that can be set to a list of rules specifying how the \
contents of the cell are to be converted to external formats."}, 
 {"ConvexHullMesh", "ConvexHullMesh[{p1, p2, \[Ellipsis]}] gives a \
BoundaryMeshRegion representing the convex hull from the points p1, p2, \
\[Ellipsis]."}, {"ConvexHullRegion", "ConvexHullRegion[{p1, p2, \[Ellipsis]}] \
gives the convex hull from the points p1, p2, \[Ellipsis]. \
ConvexHullRegion[reg] gives the convex hull of the region reg."}, 
 {"ConvexOptimization", "ConvexOptimization[f, cons, vars] finds values of \
variables vars that minimize the convex objective function f subject to \
convex constraints cons. ConvexOptimization[\[Ellipsis], \"\\!\\(\\*prop\"] \
specifies what solution property \"\\!\\(\\*prop\" should be returned."}, 
 {"ConvexPolygonQ", "ConvexPolygonQ[poly] gives True if the polygon poly is \
convex, and False otherwise."}, {"ConvexPolyhedronQ", "ConvexPolyhedronQ[poly\
] gives True if the polyhedron poly is convex, and False otherwise."}, 
 {"ConvexRegionQ", "ConvexRegionQ[reg] gives True if reg is a convex region \
and False otherwise."}, {"ConvolutionLayer", "ConvolutionLayer[n, s] \
represents a trainable convolutional net layer having n output channels and \
using kernels of size s to compute the convolution. ConvolutionLayer[n, {s}] \
represents a layer performing one-dimensional convolutions with kernels of \
size s. ConvolutionLayer[n, {h, w}] represents a layer performing \
two-dimensional convolutions with kernels of size h\[Times]w. \
ConvolutionLayer[n, {h, w, d}] represents a three-dimensional convolutions \
with kernels of size h\[Times]w\[Times]d. ConvolutionLayer[n, kernel, opts] \
includes options for padding and other parameters."}, 
 {"Convolve", "Convolve[f, g, x, y] gives the convolution with respect to x \
of the expressions f and g. Convolve[f, g, {x1, x2, \[Ellipsis]}, {y1, y2, \
\[Ellipsis]}] gives the multidimensional convolution."}, 
 {"ConwayGroupCo1", 
  "ConwayGroupCo1[] represents the sporadic simple Conway group Co1."}, 
 {"ConwayGroupCo2", 
  "ConwayGroupCo2[] represents the sporadic simple Conway group Co2."}, 
 {"ConwayGroupCo3", 
  "ConwayGroupCo3[] represents the sporadic simple Conway group Co3."}, 
 {"CookieFunction", "CookieFunction is an option for URLRead, HTTPRequest, \
and related functions that gives a function to apply to each cookie received \
when an HTTP response is received."}, {"CoordinateBoundingBox", "CoordinateBo\
undingBox[coords] gives the corners {{xmin, ymin, \[Ellipsis]}, {xmax, ymax, \
\[Ellipsis]}} of the bounding box of the region defined by coords. \
CoordinateBoundingBox[coords, \[Delta]] pads the region by \[Delta] in each \
direction. CoordinateBoundingBox[coords, Scaled[s]] pads by the scaled amount \
s in each direction. CoordinateBoundingBox[coords, {p1, p2, \[Ellipsis]}] \
pads by p1, p2, \[Ellipsis] in successive dimensions. \
CoordinateBoundingBox[coords, {{p1min, p1max}, {p2min, p2max}, \[Ellipsis]}] \
gives {{xmin - p1min, ymin - p2min, \[Ellipsis]}, {xmax + p1max, ymax + \
p2max, \[Ellipsis]}, \[Ellipsis]} "}, {"CoordinateBoundingBoxArray", "Coordin\
ateBoundingBoxArray[{{xmin, ymin, \[Ellipsis]}, {xmax, ymax, \[Ellipsis]}}] \
generates an array of {x, y, \[Ellipsis]} coordinates with integer steps in \
each dimension. CoordinateBoundingBoxArray[{min, max}, d] uses step d in each \
dimension. CoordinateBoundingBoxArray[{min, max}, {dx, dy, \[Ellipsis]}] uses \
steps dx, dy, \[Ellipsis] in successive dimensions. \
CoordinateBoundingBoxArray[{min, max}, Into[n]] divides into n equal steps in \
each dimension. CoordinateBoundingBoxArray[{min, max}, steps, offsets] \
specifies offsets to use for each coordinate point. \
CoordinateBoundingBoxArray[{min, max}, steps, offsets, k] expands the array \
by k elements in every direction."}, {"CoordinateBounds", "CoordinateBounds[c\
oords] gives a list {{xmin, xmax}, {ymin, ymax}, \[Ellipsis]} of the bounds \
in each dimension of the region defined by coords. CoordinateBounds[coords, \
\[Delta]] pads the ranges of coordinates by \[PlusMinus]\[Delta] in each \
dimension. CoordinateBounds[coords, Scaled[s]] pads by the scaled amount s in \
each dimension. CoordinateBounds[coords, {p1, p2, \[Ellipsis]}] pads by p1, \
p2, \[Ellipsis] in successive dimensions. CoordinateBounds[coords, {{p1min, \
p1max}, {p2min, p2max}, \[Ellipsis]] gives {{xmin - p1min, xmax + p1max}, \
{ymin - p2min, ymax + p2max}, \[Ellipsis]} "}, 
 {"CoordinateBoundsArray", "CoordinateBoundsArray[{{xmin, xmax}, {ymin, \
ymax}, \[Ellipsis]}] generates an array of {x, y, \[Ellipsis]} coordinates \
with integer steps in each dimension. CoordinateBoundsArray[{xrange, yrange, \
\[Ellipsis]}, d] uses step d in each dimension. \
CoordinateBoundsArray[{xrange, yrange, \[Ellipsis]}, {dx, dy, \[Ellipsis]}] \
uses steps dx, dy, \[Ellipsis] in successive dimensions. \
CoordinateBoundsArray[{xrange, yrange, \[Ellipsis]}, Into[n]] divides into n \
equal steps in each dimension. CoordinateBoundsArray[{xrange, yrange, \
\[Ellipsis]}, steps, offsets] specifies offsets to use for each coordinate \
point. CoordinateBoundsArray[{xrange, yrange, \[Ellipsis]}, steps, offsets, \
k] expands the array by k elements in every direction."}, 
 {"CoordinateChartData", "CoordinateChartData[chart, property] gives the \
value of the specified property for chart. CoordinateChartData[chart, \
property, {x1, x2, \[Ellipsis], xn}] gives the value of the specified \
property for chart evaluated at the point {x1, x2, \[Ellipsis], xn}."}, 
 {"CoordinateTransform", "CoordinateTransform[t, pt] performs the coordinate \
transformation t on the point pt. CoordinateTransform[t, {pt1, pt2, \
\[Ellipsis]}] transforms several points."}, {"CoordinateTransformData", "Coor\
dinateTransformData[t, property] gives the value of the specified property \
for the coordinate transformation t. CoordinateTransformData[t, property, \
{x1, x2, \[Ellipsis], xn}] gives the value of the property evaluated at the \
point {x1, x2, \[Ellipsis], xn}."}, {"CoordinatesToolOptions", "CoordinatesTo\
olOptions is an option for Graphics that gives values of options associated \
with the Get Coordinates tool."}, {"CoplanarPoints", "CoplanarPoints[{p1, p2, \
p3, p4, \[Ellipsis], pn}] tests whether the points p1, p2, p3, p4, \
\[Ellipsis], pn are coplanar."}, {"CoprimeQ", "CoprimeQ[n1, n2] yields True \
if n1 and n2 are relatively prime, and yields False otherwise. CoprimeQ[n1, \
n2, \[Ellipsis]] yields True if all pairs of the ni are relatively prime, and \
yields False otherwise."}, {"Coproduct", "Coproduct[x, y, \[Ellipsis]] \
displays as x\[Coproduct]y\[Coproduct]\[Ellipsis]."}, 
 {"CopulaDistribution", "CopulaDistribution[ker, {dist1, dist2, \[Ellipsis]}] \
represents a copula distribution with kernel distribution ker and marginal \
distributions dist1, dist2, \[Ellipsis]."}, {"CopyDatabin", "CopyDatabin[bin] \
creates a copy of a databin. CopyDatabin[bin, options] creates a copy with \
the specified options."}, {"CopyDirectory", "CopyDirectory[\"\\!\\(\\*dir_1\"\
, \"\\!\\(\\*dir_2\"] copies the directory dir1 to dir2."}, 
 {"CopyFile", "CopyFile[file1, file2] copies from the local, remote or cloud \
file file1 to the local, remote or cloud file file2."}, 
 {"CopyFunction", "CopyFunction is an option for TemplateBox that specifies \
how the box is to be copied."}, {"CopyToClipboard", 
  "CopyToClipboard[expr] replaces the contents of the clipboard with expr."}, 
 {"Copyable", "Copyable is an option for Cell that specifies whether a cell \
can be copied interactively using the front end."}, 
 {"CornerFilter", "CornerFilter[image] computes a measure for the presence of \
a corner for each pixel in image and returns the result as an intensity \
image. CornerFilter[image, r] detects corners at a pixel range r."}, 
 {"CornerNeighbors", "CornerNeighbors is an option for various array and \
image processing functions that specifies whether diagonally adjacent corners \
should be considered neighbors of particular elements."}, 
 {"Correlation", "Correlation[v1, v2] gives the correlation between the \
vectors v1 and v2. Correlation[m] gives the sample correlation matrix for \
observations in matrix m. Correlation[m1, m2] gives the correlation matrix \
for the matrices m1 and m2. Correlation[dist] gives the correlation matrix \
for the multivariate symbolic distribution dist. Correlation[dist, i, j] \
gives the (i, j)^th correlation for the multivariate symbolic distribution \
dist."}, {"CorrelationDistance", "CorrelationDistance[u, v] gives the \
correlation coefficient distance between vectors u and v."}, 
 {"CorrelationFunction", "CorrelationFunction[data, hspec] estimates the \
correlation function at lags hspec from data. CorrelationFunction[proc, \
hspec] represents the correlation function at lags hspec for the random \
process proc. CorrelationFunction[proc, s, t] represents the correlation \
function at times s and t for the random process proc."}, 
 {"CorrelationTest", "CorrelationTest[{{x1, y1}, {x2, y2}, \[Ellipsis]}] \
tests whether the correlation coefficient for a bivariate population is zero. \
CorrelationTest[{{x1, y1}, {x2, y2}, \[Ellipsis]}, \[Rho]0] tests whether the \
correlation coefficient is \[Rho]0. CorrelationTest[{{x1, y1}, {x2, y2}, \
\[Ellipsis]}, {{u1, v1}, {u2, v2}, \[Ellipsis]}] tests whether the \
correlation coefficients for two populations are equal. \
CorrelationTest[\[Ellipsis], \"\\!\\(\\*property\"] returns the value of \
\"\\!\\(\\*property\"."}, {"Cos", "Cos[z] gives the cosine of z."}, 
 {"CosIntegral", "CosIntegral[z] gives the cosine integral function Ci(z)."}, 
 {"Cosh", "Cosh[z] gives the hyperbolic cosine of z."}, 
 {"CoshIntegral", 
  "CoshIntegral[z] gives the hyperbolic cosine integral Chi(z)."}, 
 {"CosineDistance", "CosineDistance[u, v] gives the angular cosine distance \
between vectors u and v."}, {"CosineWindow", "CosineWindow[x] represents a \
cosine window function of x. CosineWindow[x, \[Alpha]] uses the exponent \
\[Alpha]."}, {"Cot", "Cot[z] gives the cotangent of z."}, 
 {"Coth", "Coth[z] gives the hyperbolic cotangent of z."}, 
 {"Count", "Count[list, pattern] gives the number of elements in list that \
match pattern. Count[expr, pattern, levelspec] gives the total number of \
subexpressions matching pattern that appear at the levels in expr specified \
by levelspec. Count[pattern] represents an operator form of Count that can be \
applied to an expression."}, {"CountDistinct", "CountDistinct[list] gives the \
number of distinct elements that appear in list."}, 
 {"CountDistinctBy", "CountDistinctBy[{e1, e2, \[Ellipsis]}, f] gives the \
number of distinct values of f[ei] that occur. CountDistinctBy[f] represents \
an operator form of CountDistinctBy that can be applied to an expression."}, 
 {"CountRoots", "CountRoots[f, x] gives the number of real roots of the \
univariate function f in x. CountRoots[f, {x, a, b}] gives the number of \
roots between a and b."}, {"CountryData", "CountryData[\"\\!\\(\\*tag\", \
property] gives the value of the specified property for the country, \
country-like entity, or group of countries specified by \"\\!\\(\\*tag\". \
CountryData[\"\\!\\(\\*tag\", {property, \[Ellipsis], dates}] gives time \
series for certain economic and other properties."}, 
 {"Counts", "Counts[list] gives an association whose keys are the distinct \
elements of list, and whose values give the number of times those elements \
appear in list."}, {"CountsBy", "CountsBy[{e1, e2, \[Ellipsis]}, f] gives an \
association whose keys are the distinct values of the f[ei], and whose values \
give the number of times these f[ei] values appear. CountsBy[f] represents an \
operator form of CountsBy that can be applied to an expression."}, 
 {"Covariance", "Covariance[v1, v2] gives the covariance between the vectors \
v1 and v2. Covariance[m] gives the sample covariance matrix for observations \
in matrix m. Covariance[m1, m2] gives the covariance matrix for the matrices \
m1 and m2. Covariance[dist] gives the covariance matrix for the multivariate \
symbolic distribution dist. Covariance[dist, i, j] gives the (i, j)^th \
covariance for the multivariate symbolic distribution dist."}, 
 {"CovarianceEstimatorFunction", "CovarianceEstimatorFunction is an option \
for generalized linear model fitting functions that specifies the estimator \
for the parameter covariance matrix."}, {"CovarianceFunction", "CovarianceFun\
ction[data, hspec] estimates the covariance function at lags hspec from data. \
CovarianceFunction[proc, hspec] represents the covariance function at lags \
hspec for the random process proc. CovarianceFunction[proc, s, t] represents \
the covariance function at times s and t for the random process proc."}, 
 {"CoxIngersollRossProcess", "CoxIngersollRossProcess[\[Mu], \[Sigma], \
\[Theta], x0] represents a Cox-Ingersoll-Ross process with long-term mean \
\[Mu], volatility \[Sigma], speed of adjustment \[Theta], and initial \
condition x0."}, {"CoxModel", "CoxModel[\[Ellipsis]] represents the symbolic \
proportional hazards model obtained from CoxModelFit."}, 
 {"CoxModelFit", "CoxModelFit[{e1, \[Ellipsis], en}] constructs a model of \
the baseline hazard h0(t) for events times ei. CoxModelFit[{{{\[Xi]11, \
\[Ellipsis], \[Xi]1p}, \[Ellipsis], {\[Xi]n 1, \[Ellipsis], \[Xi]np}}, {e1, \
\[Ellipsis], en}}, {f1, \[Ellipsis], fm}, {x1, \[Ellipsis], xp}] constructs a \
Cox model of the form h0(t) exp(\[Beta]1 f1 + \[Ellipsis] + \[Beta]m fm), \
where the fi depend on the xk."}, {"CoxianDistribution", "CoxianDistribution[\
{\[Alpha]1, \[Ellipsis], \[Alpha]m-1}, {\[Lambda]1, \[Ellipsis], \[Lambda]m}] \
represent an m -phase Coxian distribution with phase probabilities \[Alpha]i \
and rates \[Lambda]i."}, {"CramerVonMisesTest", "CramerVonMisesTest[data] \
tests whether data is normally distributed using the Cram\[EAcute]r-von Mises \
test. CramerVonMisesTest[data, dist] tests whether data is distributed \
according to dist using the Cram\[EAcute]r-von Mises test. \
CramerVonMisesTest[data, dist, \"\\!\\(\\*property\"] returns the value of \
\"\\!\\(\\*property\"."}, {"CreateArchive", "CreateArchive[source] creates a \
compressed archive in the current directory from source. \
CreateArchive[source, path] creates a compressed archive in the directory or \
file specified by path."}, {"CreateCellID", "CreateCellID is an option for \
Notebook that specifies whether to assign a CellID to cells created in the \
notebook."}, {"CreateChannel", "CreateChannel[] creates a new channel for \
channel communication, with a generated name. \
CreateChannel[\"\\!\\(\\*path\"] creates a channel with the specified path \
relative to the home area of the currently authenticated user. \
CreateChannel[object] creates a channel based on the given ChannelObject \
specification."}, {"CreateCloudExpression", "CreateCloudExpression[value] \
creates a new anonymous cloud expression that stores the specified initial \
value. CreateCloudExpression[value, \"\\!\\(\\*name\"] creates a new cloud \
expression with the specified name."}, {"CreateCompilerEnvironment", "CreateC\
ompilerEnvironment[] creates a compiler environment that can be used in \
FunctionCompile and related functions."}, {"CreateDataStructure", "CreateData\
Structure[\"\\!\\(\\*type\", arg1, arg2, \[Ellipsis]] creates a data \
structure with the specified type."}, {"CreateDataSystemModel", "CreateDataSy\
stemModel[{v1, v2, \[Ellipsis]}] creates a SystemModel generating a signal of \
values vi. CreateDataSystemModel[{{t1, v1}, \[Ellipsis]}] creates a model for \
the time-value pairs {ti, vi}. CreateDataSystemModel[obj] creates a model for \
the TimeSeries or InterpolatingFunction obj. CreateDataSystemModel[fun, tmin, \
tmax] creates a model with samples from the function fun between tmin and \
tmax. CreateDataSystemModel[data, \"dspec\"] creates a model with data \
specification \"dspec\"."}, {"CreateDatabin", "CreateDatabin[] creates a \
databin in the Wolfram Data Drop and returns the corresponding Databin \
object. CreateDatabin[options] creates a databin with the specified options."}\
, {"CreateDialog", "CreateDialog[expr] creates a dialog notebook containing \
expr and opens it in the front end. CreateDialog[expr, obj] replaces the \
notebook represented by the notebook object obj with the one obtained from \
expr."}, {"CreateDirectory", "CreateDirectory[\"\\!\\(\\*dir\"] creates a \
directory with name dir. CreateDirectory[] creates a directory in the default \
area for temporary directories on your computer system."}, 
 {"CreateDocument", "CreateDocument[] creates an empty document notebook and \
opens it in the front end. CreateDocument[expr] creates and opens a document \
notebook containing the expression expr. CreateDocument[{expr1, expr2, \
\[Ellipsis]}] creates and opens a document notebook consisting of a sequence \
of cells containing the expri. CreateDocument[expr, obj] replaces the \
notebook represented by the notebook object obj with the one obtained from \
expr."}, {"CreateFile", "CreateFile[\"\\!\\(\\*file\"] creates a file with \
name file. CreateFile[] creates a file in the default area for temporary \
files on your computer system."}, {"CreateIntermediateDirectories", "CreateIn\
termediateDirectories is an option for CreateDirectory and related functions \
that specifies whether to create intermediate directories in a directory path \
specified."}, {"CreateLicenseEntitlement", "CreateLicenseEntitlement[settings\
] creates an on-demand license entitlement using settings. \
CreateLicenseEntitlement[] creates an on-demand license entitlement using the \
default settings."}, {"CreateManagedLibraryExpression", "CreateManagedLibrary\
Expression[mname, f] creates a managed library expression by applying f to a \
positive integer ID associated with a registered manager with name mname."}, 
 {"CreateNotebook", "CreateNotebook[] creates a generic empty notebook and \
opens it in the front end. CreateNotebook[\"\\!\\(\\*type\"] creates an empty \
notebook of the specified type and opens it in the front end. \
CreateNotebook[\"\\!\\(\\*type\", obj] replaces the notebook represented by \
the notebook object obj by a version converted to be of the specified type."}\
, {"CreatePacletArchive", "CreatePacletArchive[source] creates a paclet \
archive file from source. CreatePacletArchive[source, destdir] creates a \
paclet archive file from source and places it in destdir."}, 
 {"CreatePalette", "CreatePalette[expr] creates a palette notebook containing \
expr, and opens it in the front end. CreatePalette[{expr1, expr2, \
\[Ellipsis]}] creates and opens a palette notebook consisting of a sequence \
of cells containing the expri. CreatePalette[expr, obj] replaces the notebook \
represented by the notebook object obj with the one obtained from expr."}, 
 {"CreatePermissionsGroup", "CreatePermissionsGroup[\"\\!\\(\\*name\"] \
creates a permissions group with the specified name. \
CreatePermissionsGroup[\"\\!\\(\\*name\", {user1, user2, \[Ellipsis]}] \
creates a permissions group consisting of the specified initial users."}, 
 {"CreateSearchIndex", "CreateSearchIndex[dir] creates a search index from \
all files in the directory dir and its subdirectories. \
CreateSearchIndex[{source1, source2, \[Ellipsis]}] creates a search index \
from all sources sourcei. CreateSearchIndex[sources, \"\\!\\(\\*name\"] gives \
the search index the specified name. CreateSearchIndex[] creates an empty \
search index, which can be added to with AddToSearchIndex."}, 
 {"CreateSystemModel", "CreateSystemModel[sys] creates a Modelica SystemModel \
from the systems model sys. CreateSystemModel[eqns, t] creates a model for \
the system equations eqns with independent variable t. \
CreateSystemModel[\[Ellipsis], tspec] creates a model with type specification \
tspec for variables and parameters. CreateSystemModel[\[Ellipsis], spec] \
creates a model with spec for parameter values, initial values and model \
relations."}, {"CreateUUID", "CreateUUID[] creates a random, universally \
unique UUID string. CreateUUID[\"\\!\\(\\*base\"] appends a UUID string to \
the specified base string."}, {"CreateWindow", "CreateWindow[] creates an \
empty window in the front end. CreateWindow[expr] creates a window displaying \
the notebook expression expr, and opens it in the front end. \
CreateWindow[expr, obj] replaces the notebook represented by the notebook \
object obj with the one obtained from expr."}, 
 {"CriterionFunction", "CriterionFunction is an option in functions such as \
ClusterClassify that specifies the criterion to use to select a method."}, 
 {"CriticalSection", "CriticalSection[var, expr] locks the variable var with \
respect to parallel computation, evaluates expr, then releases var. \
CriticalSection[{var1, var2, \[Ellipsis]}, expr] locks all variables vari \
simultaneously."}, {"CriticalityFailureImportance", "CriticalityFailureImport\
ance[rdist, t] gives the criticality failure importances for all components \
in the ReliabilityDistribution rdist at time t. \
CriticalityFailureImportance[fdist, t] gives the criticality failure \
importances for all components in the FailureDistribution fdist at time t."}, 
 {"CriticalitySuccessImportance", "CriticalitySuccessImportance[rdist, t] \
gives the criticality success importances for all components in the \
ReliabilityDistribution rdist at time t. CriticalitySuccessImportance[fdist, \
t] gives the criticality success importances for all components in the \
FailureDistribution fdist at time t."}, 
 {"Cross", "Cross[a, b] gives the vector cross product of a and b."}, 
 {"CrossEntropyLossLayer", "CrossEntropyLossLayer[\"Index\"] represents a net \
layer that computes the cross-entropy loss by comparing input class \
probability vectors with indices representing the target class. \
CrossEntropyLossLayer[\"Probabilities\"] represents a net layer that computes \
the cross-entropy loss by comparing input class probability vectors with \
target class probability vectors. CrossEntropyLossLayer[\"Binary\"] \
represents a net layer that computes the binary cross-entropy loss by \
comparing input probability scalars with target probability scalars, where \
each probability represents a binary choice."}, 
 {"CrossMatrix", "CrossMatrix[r] gives a matrix whose elements are 1 in a \
centered cross-shaped region that extends r positions along each index \
direction, and are 0 otherwise. CrossMatrix[r, w] gives a w\[Times]w matrix \
containing a cross-shaped region of 1 s. CrossMatrix[{r1, r2, \[Ellipsis]}, \
\[Ellipsis]] yields an array whose elements are 1 in a centered cross-shaped \
region that extends ri positions in the i^th index direction."}, 
 {"CrossingCount", "CrossingCount[contour, p] gives a count of the number of \
times a ray starting from the point p crosses the closed curve contour."}, 
 {"CrossingDetect", "CrossingDetect[image] gives a binary image in which \
white pixels correspond to the zero crossings in image. CrossingDetect[image, \
delta] treats values in image that are smaller in absolute value than delta \
as zero. CrossingDetect[array, \[Ellipsis]] gives a binary sparse array in \
which 1 corresponds to zero crossings in array."}, 
 {"CrossingPolygon", "CrossingPolygon[{p1, p2, \[Ellipsis], pn}] gives a \
Polygon representing all points for which a ray from the point in any \
direction in the plane crosses the line segments {p1, p2}, \[Ellipsis], {pn - \
1, pn}, {pn, p1} an odd number of times. CrossingPolygon[{{p11, p12, \
\[Ellipsis]}, {p21, p22, \[Ellipsis]}, \[Ellipsis]}] gives a Polygon from the \
line segments {p11, p12}, \[Ellipsis], {p21, p22}, \[Ellipsis]."}, 
 {"Csc", "Csc[z] gives the cosecant of z."}, 
 {"Csch", "Csch[z] gives the hyperbolic cosecant of z."}, 
 {"Cube", "Cube[] represents a regular cube centered at the origin with unit \
edge length. Cube[l] represents a cube with edge length l. Cube[{\[Theta], \
\[Phi]}, \[Ellipsis]] represents a cube rotated by an angle \[Theta] with \
respect to the z axis and angle \[Phi] with respect to the y axis. Cube[{x, \
y, z}, \[Ellipsis]] represents a cube centered at {x, y, z}."}, 
 {"CubeRoot", "CubeRoot[x] gives the real-valued cube root of x."}, 
 {"Cubics", "Cubics is an option for functions that involve solving algebraic \
equations, that specifies whether explicit forms for solutions to cubic \
equations should be given."}, {"Cuboid", "Cuboid[pmin] represents a unit \
hypercube with its lower corner at pmin. Cuboid[pmin, pmax] represents an \
axis-aligned filled cuboid with lower corner pmin and upper corner pmax."}, 
 {"Cumulant", "Cumulant[dist, r] gives the r^th cumulant of the distribution \
dist. Cumulant[list, r] gives the r^th cumulant of the elements in the list. \
Cumulant[r] represents the r^th formal cumulant."}, 
 {"CumulantGeneratingFunction", "CumulantGeneratingFunction[dist, t] gives \
the cumulant-generating function for the distribution dist as a function of \
the variable t. CumulantGeneratingFunction[dist, {t1, t2, \[Ellipsis]}] gives \
the cumulant-generating function for the multivariate distribution dist as a \
function of the variables t1, t2, \[Ellipsis]."}, 
 {"Cup", "Cup[x, y, \[Ellipsis]] displays as x\[Cup]y\[Cup]\[Ellipsis]."}, 
 {"CupCap", 
  "CupCap[x, y, \[Ellipsis]] displays as x\[CupCap]y\[CupCap]\[Ellipsis]."}, 
 {"Curl", "Curl[{f1, f2}, {x1, x2}] gives the curl \[PartialD]f2 / \
\[PartialD]x1 - \[PartialD]f1 / \[PartialD]x2. Curl[{f1, f2, f3}, {x1, x2, \
x3}] gives the curl (\[PartialD]f3 / \[PartialD]x2 - \[PartialD]f2 / \
\[PartialD]x3, \[PartialD]f1 / \[PartialD]x3 - \[PartialD]f3 / \[PartialD]x1, \
\[PartialD]f2 / \[PartialD]x1 - \[PartialD]f1 / \[PartialD]x2). Curl[f, {x1, \
\[Ellipsis], xn}] gives the curl of the n \[Times]n \
\[Times]\[Ellipsis]\[Times]n array f with respect to the n -dimensional \
vector {x1, \[Ellipsis], xn}. Curl[f, x, chart] gives the curl in the \
coordinates chart."}, {"CurrencyConvert", "CurrencyConvert[quantity, target] \
attempts to convert the specified currency quantity to the specified target \
currency. CurrencyConvert[quantity, target, date] converts to the target \
currency for the historical date specification."}, 
 {"CurrentDate", "CurrentDate[gran] gives the current date of the specified \
granularity type gran. CurrentDate[date, gran] gives the date of the given \
granularity that includes the specified date. CurrentDate[] gives the instant \
corresponding to the current date."}, {"CurrentImage", "CurrentImage[] \
returns the current image captured from a connected camera. CurrentImage[n] \
returns n sequential image frames as a list."}, 
 {"CurrentNotebookImage", "CurrentNotebookImage[nb] returns an image captured \
from the portion of the notebook nb that appears on your screen. \
CurrentNotebookImage[] returns an image captured from the notebook in which \
the function is evaluated."}, {"CurrentScreenImage", "CurrentScreenImage[] \
returns an image captured from all current display screens on your computer. \
CurrentScreenImage[n] returns an image captured from display screen n. \
CurrentScreenImage[{{xmin, ymin}, {xmax, ymax}}] returns the specified \
rectangle from the image of all current display screens."}, 
 {"CurrentValue", "CurrentValue[item] gives the current value of item at a \
location in the Wolfram System and interface. CurrentValue[{item, spec}] \
gives the current value for the feature of item specified by spec. \
CurrentValue[obj, item] gives the current value of item associated with the \
object obj."}, {"CurryApplied", "CurryApplied[f, n] represents an operator \
form of the function f of n arguments so that CurryApplied[f, \
n][x1]\[Ellipsis][xn] is equivalent to f[x1, \[Ellipsis], xn]. \
CurryApplied[n] represents an operator form of CurryApplied that can be \
applied to a function to represent an operator form with n arguments. \
CurryApplied[f, {i1, \[Ellipsis], in}] represents an operator form of the \
function f of n arguments so that CurryApplied[f, {i1, \[Ellipsis], \
in}][x1]\[Ellipsis][xn] is equivalent to f[xi1, \[Ellipsis], xin]. \
CurryApplied[f, k->{i1, \[Ellipsis], in}] represents an operator form that \
takes k arguments."}, {"CurvatureFlowFilter", "CurvatureFlowFilter[image] \
applies a mean curvature flow filter to image. CurvatureFlowFilter[image, t] \
specifies the amount of curvature flow time t to be applied. \
CurvatureFlowFilter[image, t, k] applies the curvature flow with a modified \
conductance term parametrized by k."}, {"CurveClosed", "CurveClosed is an \
option for JoinedCurve that specifies whether individual curve components \
should be closed curves."}, 
 {"Cyan", 
  "Cyan represents the color cyan in graphics or style specifications."}, 
 {"CycleGraph", "CycleGraph[n] gives the cycle graph with n vertices Cn."}, 
 {"CycleIndexPolynomial", "CycleIndexPolynomial[perm, {x1, \[Ellipsis], xn}] \
constructs the cycle index monomial of the permutation perm in the variables \
xi. CycleIndexPolynomial[group, {x1, \[Ellipsis], xn}] constructs the cycle \
index polynomial of group in the variables xi."}, 
 {"Cycles", "Cycles[{cyc1, cyc2, \[Ellipsis]}] represents a permutation with \
disjoint cycles cyci."}, {"CyclicGroup", 
  "CyclicGroup[n] represents the cyclic group of degree n."}, 
 {"Cyclotomic", 
  "Cyclotomic[n, x] gives the n^th cyclotomic polynomial in x."}, 
 {"Cylinder", "Cylinder[{{x1, y1, z1}, {x2, y2, z2}}, r] represents a \
cylinder of radius r around the line from (x1, y1, z1) to (x2, y2, z2). \
Cylinder[{{x1, y1, z1}, {x2, y2, z2}}] represents a cylinder of radius 1."}, 
 {"CylindricalDecomposition", "CylindricalDecomposition[expr, {x1, x2, \
\[Ellipsis]}] finds a decomposition of the region represented by the \
statement expr into cylindrical parts whose directions correspond to the \
successive xi. CylindricalDecomposition[expr, {x1, x2, \[Ellipsis]}, op] \
finds a decomposition of the result of applying the topological operation op \
to the region represented by the statement expr. \
CylindricalDecomposition[expr, {x1, x2, \[Ellipsis]}, \"Function\"] \
represents the result as CylindricalDecompositionFunction[\[Ellipsis]][x1, \
x2, \[Ellipsis]] that can be efficiently used in further computation."}, 
 {"CylindricalDecompositionFunction", "CylindricalDecompositionFunction[data]\
[x1, x2, \[Ellipsis]] represents a cylindrical algebraic formula in x1, x2, \
\[Ellipsis]."}, {"D", "D[f, x] gives the partial derivative \[PartialD]f / \
\[PartialD]x. D[f, {x, n}] gives the multiple derivative \[PartialD]^nf / \
\[PartialD]x^n. D[f, x, y, \[Ellipsis]] gives the partial derivative \
\[CenterEllipsis] (\[PartialD] / \[PartialD]y)(\[PartialD] / \[PartialD]x) f. \
D[f, {x, n}, {y, m}, \[Ellipsis]] gives the multiple partial derivative \
\[CenterEllipsis] (\[PartialD]^m / \[PartialD]y^m)(\[PartialD]^n / \
\[PartialD]x^n) f. D[f, {{x1, x2, \[Ellipsis]}}] for a scalar f gives the \
vector derivative (\[PartialD]f / \[PartialD]x1, \[PartialD]f / \
\[PartialD]x2, \[Ellipsis]). D[f, {array}] gives an array derivative."}, 
 {"DEigensystem", "DEigensystem[\[ScriptCapitalL][u[x, y, \[Ellipsis]]], u, \
{x, y, \[Ellipsis]}\[Element]\[CapitalOmega], n] gives the n smallest \
magnitude eigenvalues and eigenfunctions for the linear differential operator \
\[ScriptCapitalL] over the region \[CapitalOmega]. DEigensystem[eqns, u, t, \
{x, y, \[Ellipsis]}\[Element]\[CapitalOmega], n] gives the eigenvalues and \
eigenfunctions for solutions u of the time-dependent differential equations \
eqns."}, {"DEigenvalues", "DEigenvalues[\[ScriptCapitalL][u[x, y, \
\[Ellipsis]], u, {x, y, \[Ellipsis]}\[Element]\[CapitalOmega], n] gives the n \
smallest magnitude eigenvalues for the linear differential operator \
\[ScriptCapitalL] over the region \[CapitalOmega]. DEigenvalues[eqns, u, t, \
{x, y, \[Ellipsis]}\[Element]\[CapitalOmega], n] gives the eigenvalues for \
solutions u of the time-dependent differential equations eqns."}, 
 {"DGaussianWavelet", "DGaussianWavelet[] represents a derivative of Gaussian \
wavelet of derivative order 2. DGaussianWavelet[n] represents a derivative of \
Gaussian wavelet of derivative order n."}, {"DMSList", "DMSList[\[Theta]] \
converts an angle \[Theta] given in decimal degrees to a DMS list {degree, \
minute, second}. DMSList[\"\\!\\(\\*dms\"] converts a DMS string to a DMS \
list {degree, minute, second}. DMSList[\"\\!\\(\\*latlon\"] converts a \
latitude-longitude string to a pair of DMS lists. \
DMSList[GeoPosition[\[Ellipsis]]] converts GeoPosition data to a pair or \
array of pairs of DMS lists."}, {"DMSString", "DMSString[\[Theta]] converts \
an angle \[Theta] given in decimal degrees to a degrees-minutes-seconds \
string. DMSString[{\[Phi], \[Lambda]}] converts latitude and longitude given \
in decimal degrees to a DMS latitude-longitude string. DMSString[{d, m, s}] \
converts a DMS list to a DMS string."}, {"DSolve", "DSolve[eqn, u, x] solves \
a differential equation for the function u, with independent variable x. \
DSolve[eqn, u, {x, xmin, xmax}] solves a differential equation for x between \
xmin and xmax. DSolve[{eqn1, eqn2, \[Ellipsis]}, {u1, u2, \[Ellipsis]}, \
\[Ellipsis]] solves a list of differential equations. DSolve[eqn, u, {x1, x2, \
\[Ellipsis]}] solves a partial differential equation. DSolve[eqn, u, {x1, x2, \
\[Ellipsis]}\[Element]\[CapitalOmega]] solves the partial differential \
equation eqn over the region \[CapitalOmega]."}, 
 {"DSolveValue", "DSolveValue[eqn, expr, x] gives the value of expr \
determined by a symbolic solution to the ordinary differential equation eqn \
with independent variable x. DSolveValue[eqn, expr, {x, xmin, xmax}] uses a \
symbolic solution for x between xmin and xmax. DSolveValue[{eqn1, eqn2, \
\[Ellipsis]}, expr, \[Ellipsis]] uses a symbolic solution for a list of \
differential equations. DSolveValue[eqn, expr, {x1, x2, \[Ellipsis]}] uses a \
solution for the partial differential equation eqn. DSolveValue[eqn, expr, \
{x1, x2, \[Ellipsis]}\[Element]\[CapitalOmega]] uses a solution of the \
partial differential equation eqn over the region \[CapitalOmega]."}, 
 {"DagumDistribution", "DagumDistribution[p, a, b] represents a Dagum \
distribution with shape parameters p and a and scale parameter b."}, 
 {"DamData", "DamData[entity, property] gives the value of the specified \
property for the dam entity. DamData[{entity1, entity2, \[Ellipsis]}, \
property] gives a list of property values for the specified dam entities. \
DamData[entity, property, annotation] gives the specified annotation \
associated with the given property."}, {"DamerauLevenshteinDistance", "Damera\
uLevenshteinDistance[u, v] gives the Damerau-Levenshtein distance between \
strings or vectors u and v. DamerauLevenshteinDistance[u, v] gives the \
Damerau-Levenshtein distance between strings, vectors or biomolecular \
sequences u and v."}, {"Darker", "Darker[color] represents a darker version \
of the specified color. Darker[color, f] represents a version of the \
specified color darkened by a fraction f. Darker[image, \[Ellipsis]] gives a \
darker version of an image."}, {"Dashed", "Dashed is a graphics directive \
specifying that lines that follow should be drawn dashed."}, 
 {"Dashing", "Dashing[{r1, r2, \[Ellipsis]}] is a two-dimensional graphics \
directive specifying that lines that follow are to be drawn dashed, with \
successive segments of lengths r1, r2, \[Ellipsis] (repeated cyclically). The \
ri are given as a fraction of the total width of the graph. Dashing[r] is \
equivalent to Dashing[{r, r}]. Dashing[{r1, r2, \[Ellipsis]}, offset] offsets \
the dashes by offset. Dashing[{r1, r2, \[Ellipsis]}, offset, capform] sets \
the CapForm for individual dashes to capform."}, 
 {"DataDistribution", "DataDistribution[ddist, \[Ellipsis]] represents a \
probability distribution of type ddist, estimated from a set of data."}, 
 {"DataRange", "DataRange is an option for functions such as ListPlot and \
ListDensityPlot that specifies what range of actual coordinates the data \
should be assumed to occupy."}, {"DataReversed", "DataReversed is an option \
for ArrayPlot and related functions that specifies whether data should be \
plotted in reverse order."}, {"DataStructure", 
  "DataStructure[\"\\!\\(\\*type\", data] represents a data structure."}, 
 {"DataStructureQ", "DataStructureQ[ds] yields True if ds is a valid data \
structure and False otherwise. DataStructureQ[ds, type] yields True if ds is \
a valid data structure of the specified type and False otherwise."}, 
 {"DatabaseConnect", 
  "DatabaseConnect[db] activates a connection to the database db."}, 
 {"DatabaseDisconnect", 
  "DatabaseDisconnect[db] deactivates a connection to the database db."}, 
 {"DatabaseReference", "DatabaseReference[File[\"\\!\\(\\*filename\"]] \
represents a reference to a local file-based SQL database. \
DatabaseReference[URL[\"\\!\\(\\*url\"]] represents a reference to a \
server-based SQL database. DatabaseReference[assoc] represents a fully \
specified reference to any SQL database."}, {"Databin", "Databin[\"\\!\\(\\*i\
d\"] represents a databin in the Wolfram Data Drop. Databin[\"\\!\\(\\*id\", \
n] represents the first n entries in a databin. Databin[\"\\!\\(\\*id\", - n] \
represents the most recent n entries in a databin. Databin[\"\\!\\(\\*id\", \
{m, n}] represents entries m through n in a databin, with negative numbers \
counting from the end. Databin[\"\\!\\(\\*id\", {m, n, s}] represents entries \
m through n with step s. Databin[\"\\!\\(\\*id\", time] represents entries \
going back for the quantity of time specified by time. \
Databin[\"\\!\\(\\*id\", date] represents the entries in a databin from the \
specified date to now. Databin[\"\\!\\(\\*id\", {date1, date2}] represents \
the entries in a databin from date1 to date2. Databin[\"\\!\\(\\*id\", range, \
{\"\\!\\(\\*key_1\", \"\\!\\(\\*key_2\", \[Ellipsis]}] represents only \
elements with keys keyi within each entry in a databin."}, 
 {"DatabinAdd", 
  "DatabinAdd[bin, data] adds the specified data to a databin."}, 
 {"DatabinSubmit", "DatabinSubmit[bin, data] submits the specified data to be \
added to the databin bin asynchronously."}, {"DatabinUpload", "DatabinUpload[\
bin, {entry1, entry2, \[Ellipsis]}] bulk uploads all the entries entryi to a \
databin. DatabinUpload[bin, EventSeries[\[Ellipsis]]] bulk uploads all \
entries in an event series to a databin."}, {"Databins", "Databins[] gives a \
list of databins associated with the currently connected user."}, 
 {"Dataset", "Dataset[data] represents a structured dataset based on a \
hierarchy of lists and associations."}, {"DatasetTheme", "DatasetTheme is an \
option for Dataset that specifies an overall theme for a dataset and its \
elements."}, {"DateBounds", "DateBounds[{date1, date2, \[Ellipsis]}] gives \
the earliest and latest of the datei. DateBounds[tseries] gives the first and \
last dates in the time series tseries. DateBounds[bin] gives the first and \
last time stamps in the databin bin. DateBounds[interval] gives the start and \
end dates of the date interval interval. DateBounds[interval, gran] gives the \
endpoints of interval in the specified granularity gran."}, 
 {"DateDifference", "DateDifference[date1, date2] gives the number of days \
from date1 to date2. DateDifference[date1, date2, \"\\!\\(\\*unit\"] gives \
the difference between date1 and date2 in the specified unit. \
DateDifference[date1, date2, {\"\\!\\(\\*unit_1\", \"\\!\\(\\*unit_2\", \
\[Ellipsis]}] gives the difference as a list with elements corresponding to \
the successive \"\\!\\(\\*unit_i\"."}, 
 {"DateFormat", 
  "DateFormat is an option that determines the date formatting of dates."}, 
 {"DateFunction", "DateFunction is an option for DateListPlot and \
TemporalData that specifies how dates given as input should be interpreted."}\
, {"DateHistogram", "DateHistogram[{date1, date2, \[Ellipsis]}] plots a \
histogram of the dates datei. DateHistogram[{date1, date2, \[Ellipsis]}, \
bspec] plots a histogram with bin width specification bspec. \
DateHistogram[{date1, date2, \[Ellipsis]}, bspec, hspec] plots a histogram \
with bin heights computed according to the specification hspec. \
DateHistogram[{data1, data2, \[Ellipsis]}] plots histograms for multiple \
datasets datai."}, {"DateInterval", "DateInterval[{start, end}] represents \
the continuous interval of time between start and end. DateInterval[{start, \
end}, gran] represents an interval of dates with calendar granularity gran. \
DateInterval[{{start1, end1}, {start2, end2}, \[Ellipsis]}] represents the \
union of intervals start1 to end1, start2 to end2, \[Ellipsis]. \
DateInterval[gdate] gives the date interval from the initial to final \
instants of the granular date object gdate."}, 
 {"DateList", "DateList[] gives the current local date and time in the form \
{year, month, day, hour, minute, second}. DateList[date] gives a date list \
corresponding to the given date specification."}, 
 {"DateListLogPlot", "DateListLogPlot[{{date1, v1}, {date2, v2}, \
\[Ellipsis]}] makes a log plot with values vi at a sequence of dates. \
DateListLogPlot[{v1, v2, \[Ellipsis]}, datespec] makes a log plot with dates \
at equal intervals specified by datespec. DateListLogPlot[tseries] plots the \
time series tseries. DateListLogPlot[{data1, data2, \[Ellipsis]}] plots data \
from all the datai. DateListLogPlot[{\[Ellipsis], w[datai], \[Ellipsis]] \
plots datai with features defined by the symbolic wrapper w."}, 
 {"DateListPlot", "DateListPlot[{{date1, v1}, {date2, v2}, \[Ellipsis], \
{daten, vn}}] plots points with values vi at a sequence of dates. \
DateListPlot[{v1, v2, \[Ellipsis], vn}, datespec] plots points with dates at \
equal intervals specified by datespec. DateListPlot[tseries] plots the time \
series tseries. DateListPlot[{data1, data2, \[Ellipsis]}] plots data from all \
the datai. DateListPlot[{\[Ellipsis], w[datai], \[Ellipsis]] plots datai with \
features defined by the symbolic wrapper w."}, 
 {"DateListStepPlot", "DateListStepPlot[{{date1, v1}, {date2, v2}, \
\[Ellipsis]}] plots the values vi in steps at a sequence of dates. \
DateListStepPlot[{v1, v2, \[Ellipsis]}, datespec] plots the values vi in \
steps with dates at equal intervals specified by datespec. \
DateListStepPlot[tseries] plots the time series tseries. \
DateListStepPlot[{data1, data2, \[Ellipsis]}] plots data from all the datai. \
DateListStepPlot[\[Ellipsis], step] plots using steps specified by step. \
DateListStepPlot[{\[Ellipsis], w[datai], \[Ellipsis]}] plots data datai with \
features defined by the symbolic wrapper w."}, 
 {"DateObject", "DateObject[] gives the current local date. DateObject[date] \
gives a date object corresponding to the given date specification. \
DateObject[rdate, gran] gives the date object of calendar granularity gran \
that includes the reference date rdate."}, {"DateObjectQ", "DateObjectQ[expr] \
gives True if expr is a DateObject with valid arguments, and False \
otherwise."}, {"DateOverlapsQ", "DateOverlapsQ[date1, date2] returns True if \
the calendar dates date1 and date2 overlap, and False otherwise."}, 
 {"DatePattern", "DatePattern[{\"\\!\\(\\*e_1\", \"\\!\\(\\*e_2\", \
\[Ellipsis]}] represents the characters of a date with elements of type \
\"\\!\\(\\*e_i\" in StringExpression. DatePattern[{\"\\!\\(\\*e_1\", \
\"\\!\\(\\*e_2\", \[Ellipsis]}, sep] allows separators that match the string \
expression sep."}, {"DatePlus", "DatePlus[date, n] gives the date n days \
after date. DatePlus[date, {n, step}] gives the date n calendar steps after \
date. DatePlus[date, {{n1, step1}, {n2, step2}, \[Ellipsis]}] gives a date \
offset by ni steps of each specified size. DatePlus[n] gives the date n days \
after the current date. DatePlus[offset] gives the date with the specified \
offset from the current date."}, {"DateRange", "DateRange[date1, date2] gives \
all dates in the range from date1 to date2. DateRange[date1, date2, \
increment] gives the dates in the range from date1 to date2 that are \
increment apart."}, {"DateReduction", "DateReduction is an option for \
DateHistogram that specifies the length for cyclic periods of time."}, 
 {"DateSelect", "DateSelect[list, crit] picks out all dates datei of a list \
for which crit[datei] is True. DateSelect[int, crit] returns all dates within \
the DateInterval int for which crit[datei] is True. DateSelect[crit] \
represents an operator form of DateSelect that can be applied to an \
expression."}, {"DateString", "DateString[] gives a string representing the \
complete current local date and time. DateString[date] gives a string \
corresponding to the given date specification. \
DateString[{\"\\!\\(\\*elem_1\", \"\\!\\(\\*elem_2\", \[Ellipsis]}] \
concatenates the specified elements in the order given. DateString[date, fmt] \
gives elements specified by the date format fmt for the date or time \
specification date."}, {"DateTicksFormat", "DateTicksFormat is an option for \
DateListPlot which specifies how date tick labels should be formatted."}, 
 {"DateValue", "DateValue[\"\\!\\(\\*elem\"] gives the specified element of \
the current date and time. DateValue[{\"\\!\\(\\*elem_1\", \
\"\\!\\(\\*elem_2\", \[Ellipsis]}] gives a list of the specified elements of \
the current date and time. DateValue[date, elem] gives the specified element \
of the specified date. DateValue[date, elem, form] gives the result in the \
specified form."}, {"DateWithinQ", "DateWithinQ[date1, date2] returns True if \
the calendar date date2 is entirely contained within date1, and False \
otherwise."}, {"Dated", "Dated[obj, year] represents the object obj \
associated with a particular year. Dated[obj, date] represents the object obj \
associated with a date. Dated[obj, All] represents the object obj for all \
dates where information is available about it."}, 
 {"DatedUnit", 
  "DatedUnit[unit, date] represents the specified unit at a specific date."}, 
 {"DaubechiesWavelet", "DaubechiesWavelet[] represents a Daubechies wavelet \
of order 2. DaubechiesWavelet[n] represents a Daubechies wavelet of order n."}\
, {"DavisDistribution", "DavisDistribution[b, n, \[Mu]] represents a Davis \
distribution with scale parameter b, shape parameter n, and location \
parameter \[Mu]."}, {"DawsonF", 
  "DawsonF[z] gives the Dawson integral F(z)."}, 
 {"DayCount", "DayCount[date1, date2] gives the number of days from date1 to \
date2. DayCount[date1, date2, daytype] gives the number of days of the \
specified daytype from date1 to date2."}, {"DayCountConvention", "DayCountCon\
vention is an option that specifies the day count convention used by \
DateDifference."}, {"DayHemisphere", "DayHemisphere[] is a two-dimensional \
GeoGraphics primitive that represents the half of the Earth that is currently \
in daylight. DayHemisphere[datespec] represents the daylight half of the \
Earth for the specified date."}, {"DayMatchQ", "DayMatchQ[date, daytype] \
returns True if the date matches the daytype specification and returns False \
otherwise."}, {"DayName", "DayName[] gives the current day of the week. \
DayName[date] gives the day of the week for the given date."}, 
 {"DayNightTerminator", "DayNightTerminator[] is a one-dimensional \
GeoGraphics primitive that represents the separation line between the halves \
of the Earth currently in daytime and nighttime. DayNightTerminator[datespec] \
represents the separation line between day and night for the specified date."}\
, {"DayPlus", "DayPlus[date, n] gives the date n days away from date. \
DayPlus[date, n, daytype] gives the date that is n days of daytype away from \
date."}, {"DayRange", "DayRange[date1, date2] gives the dates in the range \
from date1 to date2. DayRange[date1, date2, daytype] gives the dates in the \
range from date1 to date2 that are of the specified daytype."}, 
 {"DayRound", "DayRound[date, daytype] rounds date to the nearest day of \
daytype, using the next-day rounding convention. DayRound[date, daytype, \
rounding] rounds date to the nearest day of daytype, using rounding."}, 
 {"DaylightQ", "DaylightQ[] gives True if it is currently daylight from the \
user's location. DaylightQ[datespec] gives True if it is daylight from the \
user's location on the specified datespec. DaylightQ[locationspec] gives True \
if it is currently daylight from the specified locationspec. \
DaylightQ[locationspec, datespec] gives True if it is daylight from the \
specified locationspec on the specified datespec. DaylightQ[{{location1, \
date1}, {location2, date2}, \[Ellipsis]}] gives True if it is daylight from \
the specified locations and dates. DaylightQ[locationspec, datespec, \
inclusionspec] gives True if it is daylight from the specified locationspec \
on the specified datespec taking inclusionspec into account."}, 
 {"DeBruijnGraph", "DeBruijnGraph[m, n] gives the n -dimensional De Bruijn \
graph with m symbols. DeBruijnGraph[m, n, type] gives the De Bruijn graph \
with connectivity given by type."}, {"DeBruijnSequence", "DeBruijnSequence[li\
st, n] gives a de Bruijn sequence on the elements in list taken n at a time. \
DeBruijnSequence[k, n] gives a de Bruijn sequence on the elements 0, \
\[Ellipsis], k - 1. DeBruijnSequence[\"\\!\\(\\*string\", n] gives a de \
Bruijn sequence on the characters in \"\\!\\(\\*string\"."}, 
 {"Decapitalize", "Decapitalize[string] yields a string in which the first \
character has been made lowercase."}, {"DecimalForm", "DecimalForm[expr] \
prints with approximate real numbers in expr always given in decimal form, \
without scientific notation. DecimalForm[expr, n] prints with approximate \
real numbers given in decimal form to n -digit precision. DecimalForm[expr, \
{n, f}] prints with approximate real numbers having n digits, with f digits \
to the right of the decimal point."}, {"DeclarePackage", "DeclarePackage[\"\\\
!\\(\\*StyleBox[\\(\\*context`]\", {\"\\!\\(\\*name_1\", \"\\!\\(\\*name_2\", \
\[Ellipsis]}] declares that Needs[\"\\!\\(\\*StyleBox[\\(\\*context`]\"] \
should automatically be executed if a symbol with any of the specified names \
is ever used."}, {"Decompose", "Decompose[poly, x] decomposes a polynomial, \
if possible, into a composition of simpler polynomials."}, 
 {"DeconvolutionLayer", "DeconvolutionLayer[n, sz] represents a trainable \
deconvolutional net layer having n output channels and using kernels of size \
sz to compute the deconvolution. DeconvolutionLayer[n, {s}] represents a \
layer performing one-dimensional deconvolutions with kernels of size s. \
DeconvolutionLayer[n, {h, w}] represents a layer performing two-dimensional \
deconvolutions with kernels of size h\[Times]w. DeconvolutionLayer[n, kernel, \
opts] includes options for initial kernels and other parameters."}, 
 {"Decrement", 
  "x-- decreases the value of x by 1, returning the old value of x."}, 
 {"Decrypt", "Decrypt[\"\\!\\(\\*password\", enc] attempts to decrypt the \
encrypted object enc using the specified password. Decrypt[keyspec, enc] \
attempts to decrypt using the cryptographic key specification keyspec. \
Decrypt[obj] interactively requests a password with which to try to decrypt \
obj."}, {"DecryptFile", "DecryptFile[\"\\!\\(\\*password\", file] generates a \
decrypted version of a file, using the specified password. \
DecryptFile[\"\\!\\(\\*password\", source, target] generates a decrypted \
version of source, putting the result in target. DecryptFile[keyspec, source, \
\[Ellipsis]] decrypts using the cryptographic key specification keyspec."}, 
 {"DedekindEta", "DedekindEta[\[Tau]] gives the Dedekind eta modular elliptic \
function \[Eta](\[Tau])."}, {"DeepSpaceProbeData", "DeepSpaceProbeData[entity\
, property] gives the value of the specified property for the deep space \
probe entity. DeepSpaceProbeData[{entity1, entity2, \[Ellipsis]}, property] \
gives a list of property values for the specified deep space probe entities. \
DeepSpaceProbeData[entity, property, annotation] gives the specified \
annotation associated with the given property."}, 
 {"Default", "Default[f] gives the default value for arguments of the \
function f obtained with a _. pattern object. Default[f, i] gives the default \
value to use when _. appears as the i^th argument of f. Default[f, i, n] \
gives the default value for the i^th argument out of a total of n arguments. \
Default[f, \[Ellipsis]] = val defines default values for arguments of f."}, 
 {"DefaultAxesStyle", "DefaultAxesStyle is a low-level option for graphics \
functions that specifies the default style to use in displaying axes and \
axes-like constructs."}, {"DefaultBaseStyle", "DefaultBaseStyle is a \
low-level option for formatting and related constructs that specifies a \
default base style to use before BaseStyle."}, 
 {"DefaultBoxStyle", "DefaultBoxStyle is a low-level option for \
three-dimensional graphics functions that specifies the default style to use \
in rendering the bounding box."}, {"DefaultButton", "DefaultButton[] \
represents an OK button that closes a dialog, and is the default when Enter \
is pressed in the dialog. DefaultButton[action] represents a button that is \
labeled OK, and whose action is to evaluate action. DefaultButton[label, \
action] uses label as the label for the button."}, 
 {"DefaultDuplicateCellStyle", "DefaultDuplicateCellStyle is a notebook \
option that specifies the default style to use for cells created by automatic \
duplication of other cells in the notebook."}, 
 {"DefaultDuration", "DefaultDuration is an option to Animate and related \
functions that specifies the default total duration of the animation in \
seconds."}, {"DefaultElement", "DefaultElement is an option for Grid and \
related constructs which specifies what to insert when a new element is \
interactively created."}, {"DefaultFaceGridsStyle", "DefaultFaceGridsStyle is \
a low-level option for 3D graphics functions that specifies the default style \
to use in rendering face grids."}, {"DefaultFieldHintStyle", "DefaultFieldHin\
tStyle is a low-level option for InputField that specifies the default style \
to use for displaying the field hint."}, {"DefaultFrameStyle", "DefaultFrameS\
tyle is a low-level option for graphics and related constructs that specifies \
the default style to use in displaying their frames."}, 
 {"DefaultFrameTicksStyle", "DefaultFrameTicksStyle is a low-level option for \
2D graphics functions that specifies the default style to use in rendering \
frame ticks."}, {"DefaultGridLinesStyle", "DefaultGridLinesStyle is a \
low-level option for 2D graphics functions that specifies the default style \
to use in rendering grid lines."}, {"DefaultLabelStyle", "DefaultLabelStyle \
is a low-level option for formatting and related constructs that specifies \
the default style to use in displaying their label-like elements."}, 
 {"DefaultMenuStyle", "DefaultMenuStyle is a low-level option for \
menu-generating constructs that specifies the default style to use for \
displaying menu items."}, {"DefaultNaturalLanguage", "DefaultNaturalLanguage \
is an option for character selections that specifies the language used when \
checking the spelling of a word in a human natural language selection."}, 
 {"DefaultNewCellStyle", "DefaultNewCellStyle is a notebook option which \
specifies the default style to use for new cells created in the notebook."}, 
 {"DefaultOptions", "DefaultOptions is a style option that allows default \
options to be specified for particular formatting and related constructs."}, 
 {"DefaultPrintPrecision", "DefaultPrintPrecision is an option for \
NumberForm, DecimalForm and related functions that specifies the default \
number of digits of precision with which to print machine numbers."}, 
 {"DefaultTicksStyle", "DefaultTicksStyle is a low-level option for graphics \
functions that specifies the default style to use in rendering ticks."}, 
 {"DefaultTooltipStyle", "DefaultTooltipStyle is a low-level option for \
tooltips that specifies the default style to use in displaying their \
elements."}, {"Defer", "Defer[expr] yields an object that displays as the \
unevaluated form of expr, but that is evaluated if it is explicitly given as \
Wolfram Language input."}, {"DefineInputStreamMethod", "DefineInputStreamMeth\
od[\"\\!\\(\\*name\", {\"\\!\\(\\*fname_1\"->function1, \
\"\\!\\(\\*fname_2\"->function2, \[Ellipsis] }] defines a custom input stream \
method with the specified name, allowing the Wolfram Language to call the \
stream functions fnamei for opening and reading from an input stream."}, 
 {"DefineOutputStreamMethod", "DefineOutputStreamMethod[\"\\!\\(\\*name\", \
{\"\\!\\(\\*fname_1\"->function1, \"\\!\\(\\*fname_2\"->function2, \
\[Ellipsis] }] defines a custom output stream method with the specified name, \
allowing the Wolfram Language to call the stream functions for opening and \
writing to an output stream."}, {"DefineResourceFunction", "DefineResourceFun\
ction[f] defines a resource function that can be applied to arguments to give \
the same result as f[\[Ellipsis]]. DefineResourceFunction[f, name] uses name \
as the name of the resource function."}, 
 {"Definition", 
  "Definition[symbol] prints as the definitions given for a symbol."}, 
 {"Degree", "Degree gives the number of radians in one degree. It has a \
numerical value of \[Pi]/180."}, {"DegreeCentrality", "DegreeCentrality[g] \
gives a list of vertex degrees for the vertices in the underlying simple \
graph of g. DegreeCentrality[g, \"In\"] gives a list of vertex in-degrees. \
DegreeCentrality[g, \"Out\"] gives a list of vertex out-degrees. \
DegreeCentrality[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify \
the graph g."}, {"DegreeGraphDistribution", "DegreeGraphDistribution[dlist] \
represents a degree graph distribution with vertex degree dlist."}, 
 {"Deinitialization", "Deinitialization is an option for Dynamic, \
DynamicModule, Manipulate, and related constructs that specifies an \
expression to be evaluated when the construct can no longer be displayed or \
used."}, {"Del", "Del[x] displays as \[Del]x."}, 
 {"DelaunayMesh", "DelaunayMesh[{p1, p2, \[Ellipsis]}] gives a MeshRegion \
representing the Delaunay mesh from the points p1, p2, \[Ellipsis]."}, 
 {"Delayed", "Delayed[expr] represents an expression whose evaluation is \
delayed until its value is externally requested. Delayed[expr, fmt] specifies \
that the result from evaluating expr should be given in format fmt. \
Delayed[expr, {fmt, rform}] specifies that the result should be given as a \
response of the form rform."}, {"Deletable", "Deletable is an option for Cell \
that specifies whether the cell can be deleted interactively using the front \
end."}, {"Delete", "Delete[expr, n] deletes the element at position n in \
expr. If n is negative, the position is counted from the end. Delete[expr, \
{i, j, \[Ellipsis]}] deletes the part at position {i, j, \[Ellipsis]}. \
Delete[expr, {{i1, j1, \[Ellipsis]}, {i2, j2, \[Ellipsis]}, \[Ellipsis]}] \
deletes parts at several positions. Delete[pos] represents an operator form \
of Delete that can be applied to an expression."}, 
 {"DeleteAnomalies", "DeleteAnomalies[{example1, example2, \[Ellipsis]}] \
gives a list in which examplei that are considered anomalous have been \
dropped. DeleteAnomalies[fun, data] drops anomalies in data using the given \
AnomalyDetectorFunction[\[Ellipsis]] or LearnedDistribution[\[Ellipsis]]."}, 
 {"DeleteBorderComponents", "DeleteBorderComponents[image] replaces connected \
components adjacent to the border in a binary image image with background \
pixels. DeleteBorderComponents[m] replaces components adjacent to the border \
in a label matrix m with 0."}, {"DeleteCases", "DeleteCases[expr, pattern] \
removes all elements of expr that match pattern. DeleteCases[expr, pattern, \
levelspec] removes all parts of expr on levels specified by levelspec that \
match pattern. DeleteCases[expr, pattern, levelspec, n] removes the first n \
parts of expr that match pattern. DeleteCases[pattern] represents an operator \
form of DeleteCases that can be applied to an expression."}, 
 {"DeleteChannel", "DeleteChannel[channel] deletes the specified channel from \
the channel broker server. DeleteChannel[{channel1, channel2, \[Ellipsis]}] \
deletes all the channeli. DeleteChannel[All] deletes all channels owned by \
the currently authenticated user."}, {"DeleteCloudExpression", "DeleteCloudEx\
pression[\"\\!\\(\\*name\"] deletes the cloud expression identified by \
\"name\". DeleteCloudExpression[obj] deletes the cloud expression obj."}, 
 {"DeleteContents", "DeleteContents is an option for DeleteDirectory that \
specifies whether the contents of directories should automatically be \
deleted."}, {"DeleteDirectory", 
  "DeleteDirectory[\"\\!\\(\\*dir\"] deletes the specified directory."}, 
 {"DeleteDuplicates", "DeleteDuplicates[list] deletes all duplicates from \
list. DeleteDuplicates[list, test] applies test to pairs of elements to \
determine whether they should be considered duplicates."}, 
 {"DeleteDuplicatesBy", "DeleteDuplicatesBy[{e1, e2, \[Ellipsis]}, f] deletes \
those ei that yield duplicates in the list {f[e1], f[e2], \[Ellipsis]}. \
DeleteDuplicatesBy[f] represents an operator form of DeleteDuplicatesBy that \
can be applied to an expression."}, {"DeleteFile", "DeleteFile[\"\\!\\(\\*fil\
e\"] deletes a file. DeleteFile[{\"\\!\\(\\*file_1\", \"\\!\\(\\*file_2\", \
\[Ellipsis]}] deletes a list of files."}, {"DeleteMissing", "DeleteMissing[li\
st] drops elements with head Missing from a list. DeleteMissing[assoc] drops \
elements whose values have head Missing from the association assoc. \
DeleteMissing[expr, n] applies DeleteMissing to any lists or associations \
that occur within the first n levels of expr. DeleteMissing[expr, n, d] \
considers an element at level n to be missing if Missing occurs within the \
first d levels of the element."}, {"DeleteObject", "DeleteObject[obj] deletes \
the object obj. DeleteObject[{obj1, obj2, \[Ellipsis]}] deletes all the \
obji."}, {"DeletePermissionsKey", "DeletePermissionsKey[key] deletes a \
permissions key, rendering it invalid. DeletePermissionsKey[{key1, key2, \
\[Ellipsis]}] deletes several permissions keys."}, 
 {"DeleteSearchIndex", "DeleteSearchIndex[obj] deletes the search index \
represented by the search index object obj. \
DeleteSearchIndex[\"\\!\\(\\*name\"] deletes the search index with the \
specified name in the SearchIndices[] list."}, 
 {"DeleteSmallComponents", "DeleteSmallComponents[image] replaces small \
connected components in a binary image image with background pixels. \
DeleteSmallComponents[m] replaces positive integers in a label matrix m with \
0 if their tally is small. DeleteSmallComponents[\[Ellipsis], n] replaces \
components consisting of n or fewer elements."}, 
 {"DeleteStopwords", "DeleteStopwords[list] deletes stopwords from a list of \
words. DeleteStopwords[\"\\!\\(\\*string\"] deletes stopwords from a string. \
DeleteStopwords[{\"\\!\\(\\*string_1\", \"\\!\\(\\*string_2\", \[Ellipsis]}] \
deletes stopwords from a list of strings."}, {"DelimitedSequence", "Delimited\
Sequence[form] represents a delimited sequence of elements of the specified \
form in Interpreter and related functions. DelimitedSequence[form, sep] \
assumes a separator that matches sep. DelimitedSequence[form, {left, sep, \
right}] assumes left and right delimiters matching left and right, \
respectively."}, {"Delimiter", "Delimiter represents a delimiter to be \
displayed in objects such as PopupMenu, Manipulate, and FormObject."}, 
 {"DelimiterAutoMatching", "DelimiterAutoMatching is an option for cells and \
notebooks that specifies whether matching delimiters are automatically \
inserted when typing Wolfram Language code."}, 
 {"DelimiterFlashTime", "DelimiterFlashTime is an option for cells and \
notebooks that specifies how long in seconds a delimiter should flash when \
its matching delimiter is entered."}, {"Delimiters", "Delimiters is an option \
to various functions that specifies what delimiters to use or look for."}, 
 {"DeliveryFunction", "DeliveryFunction is an option that specifies how \
material such as documents generated by DocumentGenerator should be \
delivered."}, {"Dendrogram", "Dendrogram[{e1, e2, \[Ellipsis]}] constructs a \
dendrogram from the hierarchical clustering of the elements e1, e2, \
\[Ellipsis]. Dendrogram[{e1->v1, e2->v2, \[Ellipsis]}] represents ei with vi \
in the constructed dendrogram. Dendrogram[{e1, e2, \[Ellipsis]}->{v1, v2, \
\[Ellipsis]}] represents ei with vi in the constructed dendrogram. \
Dendrogram[\[LeftAssociation]label1->e1, label2->e2, \
\[Ellipsis]\[RightAssociation]] represents ei using labels labeli in the \
constructed dendrogram. Dendrogram[data, orientation] constructs an oriented \
dendrogram according to orientation. Dendrogram[tree] constructs the \
dendrogram corresponding to weighted tree tree."}, 
 {"Denominator", "Denominator[expr] gives the denominator of expr."}, 
 {"DensityHistogram", "DensityHistogram[{{x1, y1}, {x2, y2}, \[Ellipsis]}] \
plots a density histogram of the values {xi, yi}. DensityHistogram[{{x1, y1}, \
{x2, y2}, \[Ellipsis]}, bspec] plots a density histogram with bins specified \
by bspec. DensityHistogram[{{x1, y1}, {x2, y2}, \[Ellipsis]}, bspec, hspec] \
plots a density histogram with bin densities computed according to the \
specification hspec."}, {"DensityPlot", "DensityPlot[f, {x, xmin, xmax}, {y, \
ymin, ymax}] makes a density plot of f as a function of x and y. \
DensityPlot[f, {x, y}\[Element]reg] takes the variables {x, y} to be in the \
geometric region reg."}, {"DensityPlot3D", "DensityPlot3D[f, {x, xmin, xmax}, \
{y, ymin, ymax}, {z, zmin, zmax}] makes a density plot of f as a function of \
x, y, and z. DensityPlot3D[f, {x, y, z}\[Element]reg] takes the variables to \
be in the geometric region reg."}, {"DependentVariables", "DependentVariables \
is an option for NDSolve and other functions that specifies the list of all \
objects that should be considered as dependent variables in equations that \
have been supplied."}, {"Deploy", "Deploy[expr] yields a deployed version of \
expr in which elements such as Slider, InputField, Locator and Button are \
active, but general editing and selection is disabled."}, 
 {"Deployed", "Deployed is an option for displayed objects, cells, and \
notebooks that specifies whether their contents should be considered \
deployed, so that elements such as Slider, InputField, Locator, and Button \
are active, but general editing and selection is disabled."}, 
 {"Depth", "Depth[expr] gives the maximum number of indices needed to specify \
any part of expr, plus 1."}, {"DepthFirstScan", "DepthFirstScan[g, s, \
{\"\\!\\(\\*event_1\"->f1, \"\\!\\(\\*event_2\"->f2, \[Ellipsis]}] performs a \
depth-first scan of the graph g starting at the vertex s and evaluates fi \
whenever \"\\!\\(\\*event_i\" occurs. DepthFirstScan[g, \
{\"\\!\\(\\*event_1\"->f1, \"\\!\\(\\*event_2\"->f2, \[Ellipsis]}] performs a \
depth-first scan of the whole graph g. DepthFirstScan[{v->w, \[Ellipsis]}, \
\[Ellipsis]] uses rules v->w to specify the graph g."}, 
 {"Derivative", "f' represents the derivative of a function f of one \
argument. Derivative[n1, n2, \[Ellipsis]][f] is the general form, \
representing a function obtained from f by differentiating n1 times with \
respect to the first argument, n2 times with respect to the second argument, \
and so on."}, {"DerivativeFilter", "DerivativeFilter[data, {n1, n2, \
\[Ellipsis]}] computes the ni^th derivative of data at level i. \
DerivativeFilter[data, {n1, n2, \[Ellipsis]}, \[Sigma]] computes the \
derivative at a Gaussian scale of standard deviation \[Sigma]. \
DerivativeFilter[data, {der1, der2, \[Ellipsis]}, \[Ellipsis]] computes \
several derivatives der1, der2, \[Ellipsis]."}, 
 {"DerivativePDETerm", "DerivativePDETerm[vars, \[Gamma]] represents a load \
derivative term \[Del]{x1, \[Ellipsis], xn}\[CenterDot](\[Gamma]) with load \
derivative coefficient \[Gamma] and model variables vars. \
DerivativePDETerm[vars, \[Gamma], pars] uses model parameters pars."}, 
 {"DerivedKey", "DerivedKey[assoc] represents a derived key generated by \
GenerateDerivedKey."}, {"DescriptorStateSpace", "DescriptorStateSpace is an \
option to StateSpaceModel and StateSpaceTransform that specifies whether to \
use descriptor or standard representation."}, {"DesignMatrix", "DesignMatrix[\
{{x11, x12, \[Ellipsis], y1}, {x21, x22, \[Ellipsis], y2}, \[Ellipsis]}, {f1, \
f2, \[Ellipsis]}, {x1, x2, \[Ellipsis]}] constructs the design matrix for the \
linear model \[Beta]0 + \[Beta]1 f1 + \[Beta]2 f2 + \[Ellipsis]."}, 
 {"Det", "Det[m] gives the determinant of the square matrix m."}, 
 {"DeviceClose", "DeviceClose[device] closes the connection to a device and \
frees related resources."}, {"DeviceConfigure", "DeviceConfigure[device, \
config] configures the specified device according to config."}, 
 {"DeviceExecute", "DeviceExecute[device, \"\\!\\(\\*command\"] executes the \
specified command on a device. DeviceExecute[device, \"\\!\\(\\*command\", \
params] executes the command with the parameters params."}, 
 {"DeviceExecuteAsynchronous", "DeviceExecuteAsynchronous[device, \
\"\\!\\(\\*command\", fun] initiates asynchronous execution of the specified \
command on a device, calling the handler function fun when an event occurs. \
DeviceExecuteAsynchronous[device, \"\\!\\(\\*command\", params, fun] executes \
the command with the parameters params."}, {"DeviceObject", "DeviceObject[\
\[Ellipsis]] represents a device that can be accessed in a Wolfram Language \
session."}, {"DeviceOpen", "DeviceOpen[\"\\!\\(\\*devclass\"] opens a \
connection to the first available device in the class specified by \
\"\\!\\(\\*devclass\". DeviceOpen[\"\\!\\(\\*devclass\", spec] opens a \
connection to the particular device defined by spec. DeviceOpen[device] opens \
a connection to an existing device specified by a DeviceObject."}, 
 {"DeviceRead", "DeviceRead[devobj] reads a single default item from the open \
device corresponding to the specified DeviceObject. \
DeviceRead[\"\\!\\(\\*devclass\"] reads from the default device in the class \
\"\\!\\(\\*devclass\". DeviceRead[device, param] reads the parameter param \
from the specified device. DeviceRead[device, {param1, param2, \[Ellipsis]}] \
reads the list of parameters parami from the specified device."}, 
 {"DeviceReadBuffer", "DeviceReadBuffer[device] reads the complete contents \
of the buffer on a device. DeviceReadBuffer[device, n] reads n elements from \
the buffer. DeviceReadBuffer[device, crit] reads elements from the buffer \
until the device-specific criterion crit is met. DeviceReadBuffer[device, \
crit, param] reads elements associated with the parameter param. \
DeviceReadBuffer[device, crit, {param1, param2, \[Ellipsis]}] reads elements \
associated with the parami."}, {"DeviceReadLatest", "DeviceReadLatest[device] \
returns the most recently collected default item from a device. \
DeviceReadLatest[device, n] returns a list of the n most recently collected \
items. DeviceReadLatest[device, n, param] returns the n most recently \
collected values of param. DeviceReadLatest[device, n, {param1, param2, \
\[Ellipsis]}] returns a list of the most recently collected values of the \
parami."}, {"DeviceReadList", "DeviceReadList[device, n] reads from the \
specified device n times, returning a list of the results. \
DeviceReadList[device, n, param] reads the parameter param. \
DeviceReadList[device, n, {param1, param2, \[Ellipsis]}] reads the list of \
parameters parami."}, {"DeviceReadTimeSeries", "DeviceReadTimeSeries[device, \
{t, dt}] repeatedly reads default items from the specified device at interval \
dt for a total time t, returning a time series of the resulting values. \
DeviceReadTimeSeries[device, {t, dt}, param] repeatedly reads the parameter \
param and returns a time series of its values. DeviceReadTimeSeries[device, \
{t, dt}, {param1, param2, \[Ellipsis]}] repeatedly reads the parami and \
returns a time series of their values."}, {"DeviceStreams", "DeviceStreams[de\
vice] gives a list of all open streams associated with a device. \
DeviceStreams[device, patt] gives a list of streams whose names match the \
string pattern patt. DeviceStreams[device, {patt1, patt2, \[Ellipsis]}] gives \
a list of streams whose names match any of the patti."}, 
 {"DeviceWrite", "DeviceWrite[device, val] writes the value val to the \
specified device. DeviceWrite[device, {val1, val2, \[Ellipsis]}] writes the \
sequence of values vali to the specified device. DeviceWrite[device, \
param->val] writes val as the value of the parameter param. \
DeviceWrite[device, {param1->val1, param2->val2, \[Ellipsis]}] writes values \
of several parameters."}, {"DeviceWriteBuffer", "DeviceWriteBuffer[device, \
vals] fills the buffer on a device with the values vals. \
DeviceWriteBuffer[device, param->vals] fills the buffer associated with the \
parameter param with the values vals. DeviceWriteBuffer[device, \
{param1->vals1, param2->vals2, \[Ellipsis]}] fills the buffers associated \
with the parami with the corresponding values valsi."}, 
 {"Devices", "Devices[] gives a list of registered devices on a particular \
system. Devices[form] gives a list of devices in classes whose names match \
the string pattern form. Devices[{form1, form2, \[Ellipsis]}] gives a list of \
devices in classes whose names match any of the formi."}, 
 {"Diagonal", "Diagonal[m] gives the list of elements on the leading diagonal \
of the matrix m. Diagonal[m, k] gives the elements on the k^th diagonal of \
m."}, {"DiagonalMatrix", "DiagonalMatrix[list] gives a matrix with the \
elements of list on the leading diagonal, and zero elsewhere. \
DiagonalMatrix[list, k] gives a matrix with the elements of list on the k^th \
diagonal. DiagonalMatrix[list, k, n] pads with zeros to create an n \[Times]n \
matrix."}, {"DiagonalMatrixQ", "DiagonalMatrixQ[m] gives True if m is \
diagonal, and False otherwise. DiagonalMatrixQ[m, k] gives True if m has \
nonzero elements only on the k^th diagonal, and False otherwise."}, 
 {"DiagonalizableMatrixQ", "DiagonalizableMatrixQ[m] gives True if m is \
diagonalizable, and False otherwise."}, {"Dialog", "Dialog[] initiates a \
dialog. Dialog[expr] initiates a dialog with expr as the current value of %."}\
, {"DialogInput", "DialogInput[expr] interactively puts up expr as a dialog \
notebook, waits until a DialogReturn[e] is evaluated from within it, and then \
returns the result e. DialogInput[{x = x0, y = y0, \[Ellipsis]}, expr] sets \
up local variables x, y, \[Ellipsis] in expr."}, 
 {"DialogNotebook", "DialogNotebook[{cell1, cell2, \[Ellipsis]}] represents a \
dialog notebook that can be manipulated by the Wolfram System front end."}, 
 {"DialogProlog", "DialogProlog is an option for Dialog that can give an \
expression to evaluate before the dialog starts."}, 
 {"DialogReturn", "DialogReturn[expr] closes a dialog window, returning the \
expression expr from the dialog. DialogReturn[] closes a dialog window, \
returning Null."}, {"DialogSymbols", "DialogSymbols is an option for Dialog \
that gives a list of symbols whose values should be localized in the dialog."}\
, {"Diamond", 
  "Diamond[x, y, \[Ellipsis]] displays as x\[Diamond]y\[Diamond]\[Ellipsis]."}\
, {"DiamondMatrix", "DiamondMatrix[r] gives a matrix whose elements are 1 in \
a diamond-shaped region that extends r index positions to each side, and are \
0 otherwise. DiamondMatrix[r, w] gives a w\[Times]w matrix containing a \
diamond-shaped region of 1 s. DiamondMatrix[{r1, r2, \[Ellipsis]}, \
\[Ellipsis]] yields an array whose elements are 1 in a diamond-shaped region \
that extends ri index positions in the i^th direction."}, 
 {"DiceDissimilarity", "DiceDissimilarity[x, y] gives the Dice dissimilarity \
between Boolean vectors x and y."}, {"DictionaryLookup", "DictionaryLookup[pa\
tt] finds all words in an English dictionary that match the string pattern \
patt. DictionaryLookup[patt, n] gives only the first n words found. \
DictionaryLookup[{\"\\!\\(\\*lang\", patt}] finds words in the language \
specified by lang."}, {"DictionaryWordQ", "DictionaryWordQ[\"\\!\\(\\*word\"] \
tests whether \"\\!\\(\\*word\" is a recognized dictionary word."}, 
 {"DifferenceDelta", "DifferenceDelta[f, i] gives the discrete difference \
\[DifferenceDelta]if = f(i + 1) - f(i). DifferenceDelta[f, {i, n}] gives the \
multiple difference \[DifferenceDelta]inf. DifferenceDelta[f, {i, n, h}] \
gives the multiple difference with step h. DifferenceDelta[f, i, j, \
\[Ellipsis]] computes the partial difference with respect to i, j, \
\[Ellipsis]."}, {"DifferenceQuotient", "DifferenceQuotient[f, {x, h}] gives \
the difference quotient (f(x + h) - f(x)) / h. DifferenceQuotient[f, {x, n, \
h}] gives a multiple difference quotient with step h. DifferenceQuotient[f, \
{x1, n1, h1}, {x2, n2, h2}, \[Ellipsis]] computes the partial difference \
quotient with respect to x1, x2, \[Ellipsis]."}, 
 {"DifferenceRoot", "DifferenceRoot[lde][k] gives the holonomic sequence \
h(k), specified by the linear difference equation lde[h, k]. \
DifferenceRoot[lde] represents a pure holonomic sequence h."}, 
 {"DifferenceRootReduce", "DifferenceRootReduce[expr, n] attempts to reduce \
expr to a single DifferenceRoot object as a function of n."}, 
 {"Differences", "Differences[list] gives the successive differences of \
elements in list. Differences[list, n] gives the n^th differences of list. \
Differences[list, n, s] gives the differences of elements step s apart. \
Differences[list, {n1, n2, \[Ellipsis]}] gives the successive nk^th \
differences at level k in a nested list."}, 
 {"DifferentialD", "DifferentialD[x] displays as dx."}, 
 {"DifferentialRoot", "DifferentialRoot[lde][x] gives the holonomic function \
h(x), specified by the linear differential equation lde[h, x]. \
DifferentialRoot[lde] represents a pure holonomic function h."}, 
 {"DifferentialRootReduce", "DifferentialRootReduce[expr, x] attempts to \
reduce expr to a single DifferentialRoot object as a function of x. \
DifferentialRootReduce[expr, {x, x0}] takes the initial conditions to be \
specified at x = x0."}, {"DifferentiatorFilter", "DifferentiatorFilter[data, \
\[Omega]c] applies a differentiator filter with a cutoff frequency \[Omega]c \
to an array of data. DifferentiatorFilter[data, \[Omega]c, n] uses a filter \
kernel of length n. DifferentiatorFilter[data, \[Omega]c, n, wfun] applies a \
smoothing window wfun to the filter kernel."}, 
 {"DiffusionPDETerm", "DiffusionPDETerm[vars] represents a diffusion term \
\[Del]{x1, \[Ellipsis], xn}\[CenterDot]( - \[Del]{x1, \[Ellipsis], xn}u) with \
model variables vars. DiffusionPDETerm[vars, c] represents a diffusion term \
\[Del]{x1, \[Ellipsis], xn}\[CenterDot]( - c\[Del]{x1, \[Ellipsis], xn}u) \
with diffusion coefficient c. DiffusionPDETerm[vars, c, pars] uses model \
parameters pars."}, {"DiggleGatesPointProcess", "DiggleGatesPointProcess[\
\[Mu], \[Rho], d] represents a Diggle-Gates point process with constant \
intensity \[Mu] and interaction radius \[Rho] in \[DoubleStruckCapitalR]^d."}\
, {"DiggleGrattonPointProcess", "DiggleGrattonPointProcess[\[Mu], \[Kappa], \
\[Delta], \[Rho], d] represents a Diggle-Gratton point process with constant \
intensity \[Mu], interaction parameter \[Kappa], hard-core interaction radius \
\[Delta] and interaction radius \[Rho] in \[DoubleStruckCapitalR]^d."}, 
 {"DigitBlock", "DigitBlock is an option for NumberForm and related functions \
that specifies the maximum length of blocks of digits between breaks."}, 
 {"DigitCharacter", 
  "DigitCharacter represents a digit character 0-9 in StringExpression."}, 
 {"DigitCount", "DigitCount[n, b, d] gives the number of d digits in the \
base-b representation of n. DigitCount[n, b] gives a list of the numbers of \
1, 2, \[Ellipsis], b - 1, 0 digits in the base-b representation of n. \
DigitCount[n] gives a list of the numbers of 1, 2, \[Ellipsis], 9, 0 digits \
in the base-10 representation of n."}, {"DigitQ", "DigitQ[string] yields True \
if all the characters in the string are digits in the range 0 through 9, and \
yields False otherwise."}, {"DigitalSignature", 
  "DigitalSignature[assoc] represents a digital signature object."}, 
 {"DihedralAngle", "DihedralAngle[{p1, p2}, {v, w}] gives the angle between \
two half-planes bounded by the line through p1 and p2 and extended in the \
direction v and w."}, {"DihedralGroup", 
  "DihedralGroup[n] represents the dihedral group of order 2n."}, 
 {"Dilation", "Dilation[image, ker] gives the morphological dilation of image \
with respect to the structuring element ker. Dilation[image, r] gives the \
dilation with respect to a range-r square. Dilation[data, \[Ellipsis]] \
applies dilation to an array of data."}, {"DimensionReduce", "DimensionReduce\
[{example1, example2, \[Ellipsis]}] projects the examples examplei to a \
lower-dimensional approximating manifold. DimensionReduce[examples, n] \
projects onto an approximating manifold in n -dimensional space."}, 
 {"DimensionReducerFunction", "DimensionReducerFunction[\[Ellipsis]] \
represents a function generated by DimensionReduction that projects data onto \
a lower-dimensional approximating manifold."}, 
 {"DimensionReduction", "DimensionReduction[{example1, example2, \
\[Ellipsis]}] generates a DimensionReducerFunction[\[Ellipsis]] that projects \
from the space defined by the examplei to a lower-dimensional approximating \
manifold. DimensionReduction[examples, n] generates a \
DimensionReducerFunction[\[Ellipsis]] for an n -dimensional approximating \
manifold. DimensionReduction[examples, n, props] generates the specified \
properties of the dimensionality reduction."}, 
 {"DimensionalCombinations", "DimensionalCombinations[{pq1, pq2, \
\[Ellipsis]}] returns the possible combinations of the list of physical \
quantities pqi that are dimensionless. DimensionalCombinations[{pq1, pq2, \
\[Ellipsis]}, dim] returns the possible combinations of the list of physical \
quantities pqi that match the dimensions of physical quantity dim."}, 
 {"DimensionalMeshComponents", "DimensionalMeshComponents[mr] gives a list \
{r0, r1, \[Ellipsis]} of regions such that rd has dimension d for a mesh \
region mr."}, {"Dimensions", "Dimensions[expr] gives a list of the dimensions \
of expr. Dimensions[expr, n] gives a list of the dimensions of expr down to \
level n."}, {"DiracComb", "DiracComb[x] represents the Dirac comb function x \
giving a delta function at every integer point. DiracComb[x1, x2, \
\[Ellipsis]] represents the multidimensional Dirac comb function x1, x2, \
\[Ellipsis]."}, {"DiracDelta", "DiracDelta[x] represents the Dirac delta \
function \[Delta](x). DiracDelta[x1, x2, \[Ellipsis]] represents the \
multidimensional Dirac delta function \[Delta](x1, x2, \[Ellipsis])."}, 
 {"DirectedEdge", "DirectedEdge[u, v] or u\[DirectedEdge]v represents a \
directed edge from u to v. DirectedEdge[u, v, t] or u\[DirectedEdge]tv \
represents a directed edge from u to v with tag t."}, 
 {"DirectedEdges", "DirectedEdges is an option for Graph, GraphPlot, and \
related functions that specifies whether edges should be taken to be \
directed."}, {"DirectedGraph", "DirectedGraph[g] gives a directed graph from \
the undirected graph g. DirectedGraph[g, conv] gives a directed graph using \
the conversion conv. DirectedGraph[{v->w, \[Ellipsis]}, \[Ellipsis]] uses \
rules v->w to specify the graph g."}, {"DirectedGraphQ", "DirectedGraphQ[g] \
yields True if the graph g is a directed graph and False otherwise."}, 
 {"DirectedInfinity", "DirectedInfinity[] represents an infinite numerical \
quantity whose direction in the complex plane is unknown. DirectedInfinity[z] \
represents an infinite numerical quantity that is a positive real multiple of \
the complex number z."}, {"Direction", "Direction is an option for Limit and \
related functions that specifies the direction in which the limit is taken."}\
, {"Directive", "Directive[g1, g2, \[Ellipsis]] represents a single graphics \
directive composed of the directives g1, g2, \[Ellipsis]."}, 
 {"Directory", "Directory[] gives the current working directory."}, 
 {"DirectoryName", "DirectoryName[\"\\!\\(\\*name\"] extracts the directory \
name from the specification for a file."}, {"DirectoryQ", "DirectoryQ[\"\\!\\\
(\\*name\"] gives True if the directory with the specified name exists, and \
gives False otherwise."}, {"DirectoryStack", "DirectoryStack[] gives the \
directory stack that represents the sequence of current directories used."}, 
 {"DirichletBeta", 
  "DirichletBeta[s] gives the Dirichlet beta function \[Beta](s)."}, 
 {"DirichletCharacter", "DirichletCharacter[k, j, n] gives the Dirichlet \
character \[Chi]k, j(n) with modulus k and index j."}, 
 {"DirichletCondition", "DirichletCondition[beqn, pred] represents a \
Dirichlet boundary condition given by equation beqn, satisfied on the part of \
the boundary of the region given to NDSolve and related functions where pred \
is True."}, {"DirichletConvolve", "DirichletConvolve[f, g, n, m] gives the \
Dirichlet convolution of the expressions f and g."}, 
 {"DirichletDistribution", "DirichletDistribution[{\[Alpha]1, \[Ellipsis], \
\[Alpha]k+1}] represents a Dirichlet distribution of dimension k with shape \
parameters \[Alpha]i."}, {"DirichletEta", 
  "DirichletEta[s] gives the Dirichlet eta function \[Eta](s)."}, 
 {"DirichletL", "DirichletL[k, j, s] gives the Dirichlet L-function L(\[Chi], \
s) for the Dirichlet character \[Chi](n) with modulus k and index j."}, 
 {"DirichletLambda", 
  "DirichletLambda[s] gives the Dirichlet lambda function \[Lambda](s)."}, 
 {"DirichletTransform", "DirichletTransform[expr, n, s] gives the Dirichlet \
transform of expr with respect to n."}, {"DirichletWindow", 
  "DirichletWindow[x] represents a Dirichlet window function of x."}, 
 {"DisableFormatting", "DisableFormatting[expr] is a form that disables the \
formatting of expr when it appears inside held expressions, but gives expr as \
soon as evaluation occurs."}, {"DiscreteAsymptotic", "DiscreteAsymptotic[expr\
, n->\[Infinity]] gives an asymptotic approximation for expr as n tends to \
infinity over the integers. DiscreteAsymptotic[expr, {n, \[Infinity], m}] \
gives an asymptotic series approximation for expr to order m."}, 
 {"DiscreteChirpZTransform", "DiscreteChirpZTransform[list] gives the chirp Z \
transform of list. DiscreteChirpZTransform[list, n] returns a length n chirp \
Z transform. DiscreteChirpZTransform[list, n, w] uses a spiral path on the \
complex z plane defined by w. DiscreteChirpZTransform[list, n, w, a] uses a \
as the complex starting point. DiscreteChirpZTransform[list, {n1, n2, \
\[Ellipsis]}, {w1, w2, \[Ellipsis]}, {a1, a2, \[Ellipsis]}] gives the \
multidimensional chirp Z transform."}, {"DiscreteConvolve", "DiscreteConvolve\
[f, g, n, m] gives the convolution with respect to n of the expressions f and \
g. DiscreteConvolve[f, g, {n1, n2, \[Ellipsis]}, {m1, m2, \[Ellipsis]}] gives \
the multidimensional convolution."}, {"DiscreteDelta", "DiscreteDelta[n1, n2, \
\[Ellipsis]] gives the discrete delta function \[Delta](n1, n2, \[Ellipsis]), \
equal to 1 if all the ni are zero, and 0 otherwise."}, 
 {"DiscreteHadamardTransform", "DiscreteHadamardTransform[list] gives the \
discrete Hadamard transform of list."}, {"DiscreteIndicator", "DiscreteIndica\
tor[x, x1, {u1, u2, \[Ellipsis]}] yields the discrete indicator function, \
equal to 1 if x = x1 and, otherwise, to 0 if x = ui for some i."}, 
 {"DiscreteLQEstimatorGains", "DiscreteLQEstimatorGains[ssm, {w, v}, \[Tau]] \
gives the optimal discrete-time estimator gain matrix with sampling period \
\[Tau] for the continuous-time StateSpaceModel ssm, with process and \
measurement noise covariance matrices w and v. DiscreteLQEstimatorGains[{ssm, \
sensors}, {w, v}, \[Tau]] specifies sensors as the noisy measurements of ssm. \
DiscreteLQEstimatorGains[{ssm, sensors, dinputs}, {w, v}, \[Tau]] specifies \
dinputs as the deterministic inputs of ssm."}, 
 {"DiscreteLQRegulatorGains", "DiscreteLQRegulatorGains[sspec, wts, \[Tau]] \
gives the discrete-time state feedback gains with sampling period \[Tau] for \
the continuous-time system specification sspec that minimizes a cost function \
with weights wts. DiscreteLQRegulatorGains[\[Ellipsis], \"\\!\\(\\*prop\"] \
gives the value of the property \"\\!\\(\\*prop\"."}, 
 {"DiscreteLimit", "DiscreteLimit[f, k->\[Infinity]] gives the limit \
\[Backslash][Limit]k->\[Infinity]f(k) for the sequence f as k tends to \
infinity over the integers. DiscreteLimit[f, {k1->k1*, \[Ellipsis], kn->kn*}] \
gives the nested limit \[Backslash][Limit]k1->k1*\[CenterEllipsis] \
\[Backslash][Limit]kn->kn*f(k1, \[Ellipsis], kn) over the integers. \
DiscreteLimit[f, {k1, \[Ellipsis], kn}->{k1*, \[Ellipsis], kn*}] gives the \
multivariate limit \[Backslash][Limit]{k1, \[Ellipsis], kn}->{k1*, \
\[Ellipsis], kn*}f(k1, \[Ellipsis], kn) over the integers."}, 
 {"DiscreteLyapunovSolve", "DiscreteLyapunovSolve[a, c] finds the numeric \
solution x of the discrete matrix equation a.x.a\[ConjugateTranspose] - x==c. \
DiscreteLyapunovSolve[a, b, c] solves a.x.b - x==c. DiscreteLyapunovSolve[{a, \
d}, c] solves a.x.a\[ConjugateTranspose] - d.x.d\[ConjugateTranspose]==c. \
DiscreteLyapunovSolve[{a, d}, {b, e}, c] solves a.x.b - d.x.e==c."}, 
 {"DiscreteMarkovProcess", "DiscreteMarkovProcess[i0, m] represents a \
discrete-time, finite-state Markov process with transition matrix m and \
initial state i0. DiscreteMarkovProcess[p0, m] represents a Markov process \
with initial state probability vector p0. DiscreteMarkovProcess[\[Ellipsis], \
g] represents a Markov process with transition matrix from the graph g."}, 
 {"DiscreteMaxLimit", "DiscreteMaxLimit[f, k->\[Infinity]] gives the max \
limit \[Backslash][MaxLimit]k->\[Infinity]f(k) of the sequence f as k tends \
to \[Infinity] over the integers. DiscreteMaxLimit[f, {k1->k1*, \[Ellipsis], \
kn->kn*}] gives the nested max limit \
\[Backslash][MaxLimit]k1->k1*\[CenterEllipsis] \
\[Backslash][MaxLimit]kn->kn*f(k1, \[Ellipsis], kn) over the integers. \
DiscreteMaxLimit[f, {k1, \[Ellipsis], kn}->{k1*, \[Ellipsis], kn*}] gives the \
multivariate max limit \[Backslash][MaxLimit]{k1, \[Ellipsis], kn}->{k1*, \
\[Ellipsis], kn*}f(k1, \[Ellipsis], kn) over the integers."}, 
 {"DiscreteMinLimit", "DiscreteMinLimit[f, k->\[Infinity]] gives the min \
limit \[Backslash][MinLimit]k->\[Infinity]f(k) of the sequence f as k tends \
to \[Infinity] over the integers. DiscreteMinLimit[f, {k1->k1*, \[Ellipsis], \
kn->kn*}] gives the nested min limit \
\[Backslash][MinLimit]k1->k1*\[CenterEllipsis] \
\[Backslash][MinLimit]kn->kn*f(k1, \[Ellipsis], kn) over the integers. \
DiscreteMinLimit[f, {k1, \[Ellipsis], kn}->{k1*, \[Ellipsis], kn*}] gives the \
multivariate min limit \[Backslash][MinLimit]{k1, \[Ellipsis], kn}->{k1*, \
\[Ellipsis], kn*}f(k1, \[Ellipsis], kn) over the integers."}, 
 {"DiscretePlot", "DiscretePlot[expr, {n, nmax}] generates a plot of the \
values of expr when n runs from 1 to nmax. DiscretePlot[expr, {n, nmin, \
nmax}] generates a plot of the values of expr when n runs from nmin to nmax. \
DiscretePlot[expr, {n, nmin, nmax, dn}] uses steps dn. DiscretePlot[expr, {n, \
{n1, n2, \[Ellipsis]}}] uses the successive values n1, n2, \[Ellipsis]. \
DiscretePlot[{expr1, expr2, \[Ellipsis]}, \[Ellipsis]] plots the values of \
all the expri."}, {"DiscretePlot3D", "DiscretePlot3D[expr, {i, imin, imax}, \
{j, jmin, jmax}] generates a plot of the values of expr when i runs from imin \
to imax and j runs from jmin to jmax. DiscretePlot3D[expr, {i, imin, imax, \
di}, {j, jmin, jmax, dj}] uses steps di and dj. DiscretePlot3D[expr, {i, {i1, \
i2, \[Ellipsis]}}, {j, {j1, j2, \[Ellipsis]}}] uses successive i values i1, \
i2, \[Ellipsis] and j values j1, j2, \[Ellipsis]. DiscretePlot3D[{expr1, \
expr2, \[Ellipsis]}, \[Ellipsis], \[Ellipsis]] plots the values of all the \
expri."}, {"DiscreteRatio", "DiscreteRatio[f, i] gives the discrete ratio f(i \
+ 1)/f(i). DiscreteRatio[f, {i, n}] gives the multiple discrete ratio. \
DiscreteRatio[f, {i, n, h}] gives the multiple discrete ratio with step h. \
DiscreteRatio[f, i, j, \[Ellipsis]] computes the partial difference ratio \
with respect to i, j, \[Ellipsis]."}, {"DiscreteRiccatiSolve", "DiscreteRicca\
tiSolve[{a, b}, {q, r}] gives the matrix x that is the stabilizing solution \
of the discrete algebraic Riccati equation a.x.a - x - a.x.b.(r + \
b.x.b).b.x.a + q==0. DiscreteRiccatiSolve[{a, b}, {q, r, p}] solves a.x.a - x \
- (a.x.b + p).(r + b.x.b).(b.x.a + p) + q==0."}, 
 {"DiscreteShift", "DiscreteShift[f, i] gives the discrete shift f(i)i==f(i + \
1). DiscreteShift[f, {i, n}] gives the multiple shift \[DiscreteShift]in f. \
DiscreteShift[f, {i, n, h}] gives the multiple shift of step h. \
DiscreteShift[f, i, j, \[Ellipsis]] computes partial shifts with respect to \
i, j, \[Ellipsis]."}, {"DiscreteTimeModelQ", "DiscreteTimeModelQ[lsys] gives \
True if lsys is a discrete-time systems model, and False otherwise."}, 
 {"DiscreteUniformDistribution", "DiscreteUniformDistribution[{imin, imax}] \
represents a discrete uniform distribution over the integers from imin to \
imax. DiscreteUniformDistribution[{{imin, imax}, {jmin, jmax}, \[Ellipsis]}] \
represents a multivariate discrete uniform distribution over integers within \
the box {{imin, imax}, {jmin, jmax}, \[Ellipsis]}."}, 
 {"DiscreteVariables", "DiscreteVariables is an option for NDSolve and other \
functions that specifies variables that only change at discrete times in a \
temporal integration."}, {"DiscreteWaveletData", "DiscreteWaveletData[{wind1-\
>coef1, \[Ellipsis]}, wave, wtrans] yields a discrete wavelet data object \
with wavelet coefficients coefi corresponding to wavelet index windi, wavelet \
wave, and wavelet transform wtrans. DiscreteWaveletData[{wind1->coef1, \
\[Ellipsis]}, wave, wtrans, {d1, \[Ellipsis]}] yields a discrete wavelet data \
object assuming data dimensions {d1, \[Ellipsis]}."}, 
 {"DiscreteWaveletPacketTransform", "DiscreteWaveletPacketTransform[data] \
gives the discrete wavelet packet transform (DWPT) of an array of data. \
DiscreteWaveletPacketTransform[data, wave] gives the discrete wavelet packet \
transform using the wavelet wave. DiscreteWaveletPacketTransform[data, wave, \
r] gives the discrete wavelet packet transform using r levels of refinement."}\
, {"DiscreteWaveletTransform", "DiscreteWaveletTransform[data] gives the \
discrete wavelet transform (DWT) of an array of data. \
DiscreteWaveletTransform[data, wave] gives the discrete wavelet transform \
using the wavelet wave. DiscreteWaveletTransform[data, wave, r] gives the \
discrete wavelet transform using r levels of refinement."}, 
 {"DiscretizeGraphics", "DiscretizeGraphics[g] discretizes a 2D or 3D graphic \
g into a MeshRegion. DiscretizeGraphics[g, patt] discretizes only the \
elements in g that match the pattern patt."}, {"DiscretizeRegion", "Discretiz\
eRegion[reg] discretizes a region reg into a MeshRegion. \
DiscretizeRegion[reg, {{xmin, xmax}, \[Ellipsis]}] restricts to the bounds \
[xmin, xmax]\[Times]\[CenterEllipsis]."}, {"Discriminant", "Discriminant[poly\
, var] computes the discriminant of the polynomial poly with respect to the \
variable var. Discriminant[poly, var, Modulus->p] computes the discriminant \
modulo p."}, {"DisjointQ", "DisjointQ[list1, list2] yields True if list1 and \
list2 do not share any common elements, and False otherwise."}, 
 {"Disjunction", "Disjunction[expr, {a1, a2, \[Ellipsis]}] gives the \
disjunction of expr over all choices of the Boolean variables ai."}, 
 {"Disk", "Disk[{x, y}, r] represents a disk of radius r centered at {x, y}. \
Disk[{x, y}] gives a disk of radius 1. Disk[{x, y}, {rx, ry}] gives an \
axis-aligned elliptical disk with semiaxes lengths rx and ry. Disk[{x, y}, \
\[Ellipsis], {\[Theta]1, \[Theta]2}] gives a sector of a disk from angle \
\[Theta]1 to \[Theta]2."}, {"DiskMatrix", "DiskMatrix[r] gives a matrix whose \
elements are 1 in a disk-shaped region of radius r, and are otherwise 0. \
DiskMatrix[r, w] gives a w\[Times]w matrix containing a disk of 1 s with \
radius r. DiskMatrix[{r1, r2, \[Ellipsis]}, \[Ellipsis]] yields an array \
whose elements are 1 in an ellipsoidal region with semiaxis ri in the i^th \
index direction."}, {"DiskSegment", "DiskSegment[{x, y}, r, {\[Theta]1, \
\[Theta]2}] represents the disk segment from angle \[Theta]1 to \[Theta]2 in \
a disk centered at {x, y} of radius r. DiskSegment[{x, y}, {rx, ry}, \
{\[Theta]1, \[Theta]2}] represents the ellipse segment from angle \[Theta]1 \
to \[Theta]2 in an axis-aligned ellipse with semiaxes lengths rx and ry."}, 
 {"Dispatch", "Dispatch[{lhs1->rhs1, lhs2->rhs2, \[Ellipsis]}] generates an \
optimized dispatch table representation of a list of rules. The object \
produced by Dispatch can be used to give the rules in expr/.rules."}, 
 {"DispersionEstimatorFunction", "DispersionEstimatorFunction is an option \
for generalized linear model fitting functions that specifies the estimator \
for the dispersion parameter."}, {"DisplayAllSteps", "DisplayAllSteps is an \
option to Animate and related functions that specifies whether all frames \
should be displayed in an animation, even if to do so would slow the \
animation down."}, {"DisplayEndPacket", "DisplayEndPacket[] is a WSTP packet \
that indicates the end of a series of expressions relating to a postscript \
graphic."}, {"DisplayForm", "DisplayForm[expr] prints with low-level boxes \
inside expr shown in explicit two-dimensional or other form."}, 
 {"DisplayFunction", "DisplayFunction is an option for graphics and sound \
functions that specifies a function to apply to graphics and sound objects \
before returning them."}, {"DisplayPacket", "DisplayPacket[] is a WSTP packet \
that indicates the beginning of a series of expressions related to a \
PostScript graphic."}, {"DistanceFunction", "DistanceFunction is an option \
for functions such as Nearest that specifies the distance value to assume \
between any two specified points."}, {"DistanceMatrix", "DistanceMatrix[{u1, \
u2, \[Ellipsis]}] gives the matrix of distances between each pair of elements \
ui, uj. DistanceMatrix[{u1, u2, \[Ellipsis]}, {v1, v2, \[Ellipsis]}] gives \
the matrix of distances between each pair of elements ui, vj."}, 
 {"DistanceTransform", "DistanceTransform[image] gives the distance transform \
of image, in which the value of each pixel is replaced by its distance to the \
nearest background pixel. DistanceTransform[image, t] treats values above t \
as foreground."}, {"Distribute", "Distribute[f[x1, x2, \[Ellipsis]]] \
distributes f over Plus appearing in any of the xi. Distribute[expr, g] \
distributes over g. Distribute[expr, g, f] performs the distribution only if \
the head of expr is f."}, {"DistributeDefinitions", "DistributeDefinitions[s1\
, s2, \[Ellipsis]] distributes all definitions for the symbols si to all \
parallel kernels. DistributeDefinitions[\"\\!\\(\\*context`\"] distributes \
definitions for all symbols in the specified context."}, 
 {"Distributed", "Distributed[x, dist] or x\[Distributed]dist asserts that \
the random variable x is distributed according to the probability \
distribution dist. Distributed[{x1, x2, \[Ellipsis]}, dist] or {x1, x2, \
\[Ellipsis]}\[Distributed]dist asserts that the random vector {x1, x2, \
\[Ellipsis]} is distributed according to the multivariate probability \
distribution dist."}, {"DistributedContexts", "DistributedContexts is an \
option for various parallel computing functions that specifies which \
definitions for symbols appearing in an expression should be distributed to \
all parallel kernels."}, {"DistributionChart", "DistributionChart[{data1, \
data2, \[Ellipsis]}] makes a distribution chart with a distribution symbol \
for each datai. DistributionChart[{\[Ellipsis], wi[datai, \[Ellipsis]], \
\[Ellipsis], wj[dataj, \[Ellipsis]], \[Ellipsis]}] makes a distribution chart \
with symbol features defined by the symbolic wrappers wk. \
DistributionChart[{{data1, data2, \[Ellipsis]}, \[Ellipsis]}] makes a \
distribution chart from multiple groups of datasets {data1, data2, \
\[Ellipsis]}."}, {"DistributionFitTest", "DistributionFitTest[data] tests \
whether data is normally distributed. DistributionFitTest[data, dist] tests \
whether data is distributed according to dist. DistributionFitTest[data, \
dist, \"\\!\\(\\*property\"] returns the value of \"\\!\\(\\*property\"."}, 
 {"DistributionParameterAssumptions", "DistributionParameterAssumptions[dist] \
gives a logical expression for assumptions on parameters in the symbolic \
distribution dist."}, {"DistributionParameterQ", "DistributionParameterQ[dist\
] yields True if dist is a valid distribution, and yields False otherwise."}, 
 {"Dithering", "Dithering is an option for ColorQuantize that specifies \
whether or not to apply dithering while quantizing the pixel values."}, 
 {"Div", "Div[{f1, \[Ellipsis], fn}, {x1, \[Ellipsis], xn}] gives the \
divergence \[PartialD]f1 / \[PartialD]x1 + \[Ellipsis] + \[PartialD]fn / \
\[PartialD]xn. Div[{f1, \[Ellipsis], fn}, {x1, \[Ellipsis], xn}, chart] gives \
the divergence in the coordinates chart."}, 
 {"Divide", "x / y or Divide[x, y] is equivalent to x y^ - 1."}, 
 {"DivideBy", "x/=c divides x by c and returns the new value of x."}, 
 {"DivideSides", "DivideSides[rel, x] divides each side of the equation or \
inequality rel by x. DivideSides[rel1, rel2] divides the corresponding sides \
of two equations or inequalities. DivideSides[rel] divides each side of rel \
by the right-hand side, producing a 1 right-hand side."}, 
 {"Dividers", "Dividers is an option for Grid and related constructs that \
specifies where and how to draw divider lines."}, 
 {"Divisible", "Divisible[n, m] yields True if n is divisible by m, and \
yields False if it is not."}, {"DivisorSigma", 
  "DivisorSigma[k, n] gives the divisor function \[Sigma]k(n)."}, 
 {"DivisorSum", "DivisorSum[n, form] represents the sum of form[i] for all i \
that divide n. DivisorSum[n, form, cond] includes only those divisors for \
which cond[i] gives True."}, {"Divisors", 
  "Divisors[n] gives a list of the integers that divide n."}, 
 {"Do", "Do[expr, n] evaluates expr n times. Do[expr, {i, imax}] evaluates \
expr with the variable i successively taking on the values 1 through imax (in \
steps of 1 ). Do[expr, {i, imin, imax}] starts with i = imin. Do[expr, {i, \
imin, imax, di}] uses steps di. Do[expr, {i, {i1, i2, \[Ellipsis]}}] uses the \
successive values i1, i2, \[Ellipsis]. Do[expr, {i, imin, imax}, {j, jmin, \
jmax}, \[Ellipsis]] evaluates expr looping over different values of j etc. \
for each i."}, {"DockedCells", "DockedCells is an option for notebooks that \
gives a list of cells that are to be displayed \"docked\" at the top of the \
notebook."}, {"DocumentGenerator", "DocumentGenerator[template, timespec] \
represents a document generator with template template to be evaluated on the \
schedule defined by timespec. DocumentGenerator[template, driver, timespec] \
takes parameters for filling the template from driver."}, 
 {"DocumentGeneratorInformation", "DocumentGeneratorInformation[cloudobj] \
returns the properties of the DocumentGenerator cloudobj. \
DocumentGeneratorInformation[cloudobj, property] returns the value of the \
property property."}, {"DocumentGenerators", "DocumentGenerators[] returns a \
list of CloudObject expressions that represent currently deployed document \
generators."}, {"DocumentNotebook", "DocumentNotebook[{cell1, cell2, \
\[Ellipsis]}] represents a complete document notebook in the Wolfram System \
front end."}, {"DocumentWeightingRules", "DocumentWeightingRules is an option \
for TextSearch and related functions that allows the specification of weights \
for documents based on the values of fields in the search index."}, 
 {"Dodecahedron", "Dodecahedron[] represents a regular dodecahedron centered \
at the origin with unit edge length. Dodecahedron[l] represents a \
dodecahedron with edge length l. Dodecahedron[{\[Theta], \[Phi]}, \
\[Ellipsis]] represents a dodecahedron rotated by an angle \[Theta] with \
respect to the z axis and angle \[Phi] with respect to the y axis. \
Dodecahedron[{x, y, z}, \[Ellipsis]] represents a dodecahedron centered at \
{x, y, z}."}, {"DominantColors", "DominantColors[image] returns dominant \
colors in image. DominantColors[image, n] returns at most n dominant colors \
in image. DominantColors[image, n, prop] returns the specified property prop \
for the regions that belong to the same dominant color. DominantColors[image, \
n, prop, format] returns the output in the specified format. \
DominantColors[{image1, image2, \[Ellipsis]}, \[Ellipsis]] returns dominant \
colors in each imagei."}, 
 {"Dot", 
  "a.b.c or Dot[a, b, c] gives products of vectors, matrices, and tensors."}, 
 {"DotDashed", "DotDashed is a graphics directive specifying that lines that \
follow should be drawn dot-dashed."}, {"DotEqual", "DotEqual[x, y, \
\[Ellipsis]] displays as x\[DotEqual]y\[DotEqual]\[Ellipsis]."}, 
 {"DotLayer", "DotLayer[] represents a net layer that takes the dot product \
of two or more arrays."}, {"Dotted", "Dotted is a graphics directive \
specifying that lines that follow should be drawn dotted."}, 
 {"DoubleBracketingBar", "DoubleBracketingBar[x, y, \[Ellipsis]] displays as \
\[LeftDoubleBracketingBar]x, y, \[Ellipsis]\[RightDoubleBracketingBar]."}, 
 {"DoubleDownArrow", "DoubleDownArrow[x, y, \[Ellipsis]] displays as \
x\[DoubleDownArrow]y\[Ellipsis]."}, {"DoubleLeftArrow", 
  "DoubleLeftArrow[x, y, \[Ellipsis]] displays as x<=y<=\[Ellipsis]."}, 
 {"DoubleLeftRightArrow", 
  "DoubleLeftRightArrow[x, y, \[Ellipsis]] displays as x<=>y<=>\[Ellipsis]."}\
, {"DoubleLeftTee", "DoubleLeftTee[x, y] displays as x\[DoubleLeftTee]y."}, 
 {"DoubleLongLeftArrow", 
  "DoubleLongLeftArrow[x, y, \[Ellipsis]] displays as x<==y<==\[Ellipsis]."}, 
 {"DoubleLongLeftRightArrow", "DoubleLongLeftRightArrow[x, y, \[Ellipsis]] \
displays as x<==>y<==>\[Ellipsis]."}, {"DoubleLongRightArrow", 
  "DoubleLongRightArrow[x, y, \[Ellipsis]] displays as x==>y==>\[Ellipsis]."}\
, {"DoubleRightArrow", 
  "DoubleRightArrow[x, y, \[Ellipsis]] displays as x=>y=>\[Ellipsis]."}, 
 {"DoubleRightTee", "DoubleRightTee[x, y] displays as x\[DoubleRightTee]y."}, 
 {"DoubleUpArrow", "DoubleUpArrow[x, y, \[Ellipsis]] displays as \
x\[DoubleUpArrow]y\[DoubleUpArrow]\[Ellipsis]."}, 
 {"DoubleUpDownArrow", "DoubleUpDownArrow[x, y, \[Ellipsis]] displays as \
x\[DoubleUpDownArrow]y\[DoubleUpDownArrow]\[Ellipsis]."}, 
 {"DoubleVerticalBar", "DoubleVerticalBar[x, y, \[Ellipsis]] displays as \
x\[DoubleVerticalBar]y\[DoubleVerticalBar]\[Ellipsis]."}, 
 {"DownArrow", "DownArrow[x, y, \[Ellipsis]] displays as \
x\[DownArrow]y\[DownArrow]\[Ellipsis]."}, {"DownArrowBar", "DownArrowBar[x, \
y, \[Ellipsis]] displays as x\[DownArrowBar]y\[DownArrowBar]\[Ellipsis]."}, 
 {"DownArrowUpArrow", "DownArrowUpArrow[x, y, \[Ellipsis]] displays as \
x\[DownArrowUpArrow]y\[DownArrowUpArrow]\[Ellipsis]."}, 
 {"DownLeftRightVector", "DownLeftRightVector[x, y, \[Ellipsis]] displays as \
x\[DownLeftRightVector]y\[DownLeftRightVector]\[Ellipsis]."}, 
 {"DownLeftTeeVector", "DownLeftTeeVector[x, y, \[Ellipsis]] displays as \
x\[DownLeftTeeVector]y\[DownLeftTeeVector]\[Ellipsis]."}, 
 {"DownLeftVector", "DownLeftVector[x, y, \[Ellipsis]] displays as \
x\[DownLeftVector]y\[DownLeftVector]\[Ellipsis]."}, 
 {"DownLeftVectorBar", "DownLeftVectorBar[x, y, \[Ellipsis]] displays as \
x\[DownLeftVectorBar]y\[DownLeftVectorBar]\[Ellipsis]."}, 
 {"DownRightTeeVector", "DownRightTeeVector[x, y, \[Ellipsis]] displays as \
x\[DownRightTeeVector]y\[DownRightTeeVector]\[Ellipsis]."}, 
 {"DownRightVector", "DownRightVector[x, y, \[Ellipsis]] displays as \
x\[DownRightVector]y\[DownRightVector]\[Ellipsis]."}, 
 {"DownRightVectorBar", "DownRightVectorBar[x, y, \[Ellipsis]] displays as \
x\[DownRightVectorBar]y\[DownRightVectorBar]\[Ellipsis]."}, 
 {"DownTee", "DownTee[x, y] displays as x\[DownTee]y."}, 
 {"DownTeeArrow", "DownTeeArrow[x, y, \[Ellipsis]] displays as \
x\[DownTeeArrow]y\[DownTeeArrow]\[Ellipsis]."}, 
 {"DownValues", "DownValues[f] gives a list of transformation rules \
corresponding to all downvalues defined for the symbol f."}, 
 {"Downsample", "Downsample[array, n] returns a downsampled version of the \
array by sampling every n^th element. Downsample[array, n, offset] starts \
sampling from the element at position offset. Downsample[image, \[Ellipsis]] \
downsamples an image."}, {"Drop", "Drop[list, n] gives list with its first n \
elements dropped. Drop[list, - n] gives list with its last n elements \
dropped. Drop[list, {n}] gives list with its n^th element dropped. Drop[list, \
{m, n}] gives list with elements m through n dropped. Drop[list, {m, n, s}] \
gives list with elements m through n in steps of s dropped. Drop[list, seq1, \
seq2, \[Ellipsis]] gives a nested list in which elements specified by seqi \
have been dropped at level i in list."}, {"DropoutLayer", "DropoutLayer[] \
represents a net layer that sets its input elements to zero with probability \
0.5 during training. DropoutLayer[p] sets its input elements to zero with \
probability p during training."}, {"Dt", "Dt[f, x] gives the total derivative \
df / dx. Dt[f] gives the total differential df. Dt[f, {x, n}] gives the \
multiple derivative d^nf / dx^n. Dt[f, x1, x2, \[Ellipsis]] gives d / dx1 d / \
dx2 \[Ellipsis] f."}, {"DualPolyhedron", 
  "DualPolyhedron[poly] gives the dual polyhedron of the polyhedron poly."}, 
 {"DualSystemsModel", 
  "DualSystemsModel[ssm] gives the dual of the state-space model ssm."}, 
 {"DumpSave", "DumpSave[\"\\!\\(\\*file.mx\", symbol] writes definitions \
associated with a symbol to a file in internal Wolfram System format. \
DumpSave[\"\\!\\(\\*file.mx\", \"\\!\\(\\*StyleBox[\\(\\*context`]\"] writes \
out definitions associated with all symbols in the specified context. \
DumpSave[\"\\!\\(\\*file.mx\", {object1, object2, \[Ellipsis]}] writes out \
definitions for several symbols or contexts. \
DumpSave[\"\\!\\(\\*StyleBox[\\(\\*package`]\", objects] chooses the name of \
the output file based on the computer system used."}, 
 {"DuplicateFreeQ", "DuplicateFreeQ[list] gives True if list has no \
duplicates, and False otherwise. DuplicateFreeQ[list, test] applies test to \
pairs of elements to determine whether they should be considered duplicates."}\
, {"Duration", "Duration[expr] returns the duration of expr."}, 
 {"Dynamic", "Dynamic[expr] represents an object that displays as the \
dynamically updated current value of expr. If the displayed form of \
Dynamic[expr] is interactively changed or edited, an assignment expr = val is \
done to give expr the new value val that corresponds to the displayed form. \
Dynamic[expr, None] does not allow interactive changing or editing. \
Dynamic[expr, f] continually evaluates f[val, expr] during interactive \
changing or editing of val. Dynamic[expr, {f, fend}] also evaluates fend[val, \
expr] when interactive changing or editing is complete. Dynamic[expr, \
{fstart, f, fend}] also evaluates fstart[val, expr] when interactive changing \
or editing begins."}, {"DynamicEvaluationTimeout", "DynamicEvaluationTimeout \
is an option for displayed objects, cells, and notebooks that specifies the \
timeout in seconds for any Dynamic computations they contain."}, 
 {"DynamicGeoGraphics", "DynamicGeoGraphics[primitives, options] represents a \
dynamic, interactive, two-dimensional geographical image."}, 
 {"DynamicImage", "DynamicImage[image] displays a dynamic version of image, \
supporting panning, zooming, etc. DynamicImage[file] displays a dynamic \
version of the image stored in file. DynamicImage[url] displays a dynamic \
version of the image stored in url."}, {"DynamicModule", "DynamicModule[{x, \
y, \[Ellipsis]}, expr] represents an object which maintains the same local \
instance of the symbols x, y, \[Ellipsis] in the course of all evaluations of \
Dynamic objects in expr. Symbols specified in a DynamicModule will by default \
have their values maintained even across Wolfram System sessions. \
DynamicModule[{x = x0, y = y0, \[Ellipsis]}, expr] specifies initial values \
for x, y, \[Ellipsis]."}, {"DynamicModuleValues", "DynamicModuleValues is an \
option for DynamicModule that stores downvalues of local symbols."}, 
 {"DynamicSetting", "DynamicSetting[e] represents an object which displays as \
e, but is interpreted as the dynamically updated current value of Setting[e] \
if supplied as Wolfram Language input. DynamicSetting[f, e] displays as e, \
but is interpreted as f[e] if supplied as input."}, 
 {"DynamicUpdating", "DynamicUpdating is an option for displayed objects, \
cells and notebooks that specifies whether dynamic objects and option values \
in their contents will update."}, {"DynamicWrapper", "DynamicWrapper[e, expr] \
represents an object that displays as e, but dynamically updates the \
expression expr whenever that object is visible on screen."}, 
 {"E", "E is the exponential constant E (base of natural logarithms), with \
numerical value \[TildeEqual]2.71828."}, {"EarthImpactData", "EarthImpactData\
[entity, property] gives the value of the specified property for the earth \
impact crater entity. EarthImpactData[{entity1, entity2, \[Ellipsis]}, \
property] gives a list of property values for the specified earth impact \
crater names. EarthImpactData[entity, property, annotation] gives the \
specified annotation associated with the given property."}, 
 {"EarthquakeData", "EarthquakeData[loc] gives all earthquake properties for \
the location corresponding to loc. EarthquakeData[loc, mag] restricts \
earthquakes returned to the magnitude range mag. EarthquakeData[loc, mag, \
{start, end}] gives earthquake data within the magnitude range mag during the \
time interval start to end. EarthquakeData[loc, mag, {start, end}, property] \
gives a time series for the specific earthquake property for earthquakes \
within the magnitude range mag during the time interval start to end. \
EarthquakeData[entity, property] returns data for a specific earthquake."}, 
 {"EccentricityCentrality", "EccentricityCentrality[g] gives a list of \
eccentricity centralities for the vertices in the graph g. \
EccentricityCentrality[{v->w, \[Ellipsis]}] uses rules v->w to specify the \
graph g."}, {"Echo", "Echo[expr] prints expr and returns expr. Echo[expr, \
label] prints expr prepending label and returns expr. Echo[expr, label, f] \
prints f[expr] prepending label and returns expr."}, 
 {"EchoEvaluation", "EchoEvaluation[expr] prints expr before evaluation, then \
prints the result after evaluation and returns that result. \
EchoEvaluation[expr, label] prepends label when printing expr before and \
after evaluation. EchoEvaluation[expr, label1->label2] prepends label1 before \
evaluation and label2 after evaluation. EchoEvaluation[expr, labels, f] \
prints expr before evaluation, then evaluates expr to the result res and \
prints f[res]. EchoEvaluation[expr, labels, g->f] prints g[expr] before \
evaluating expr and then f[res] after evaluation."}, 
 {"EchoFunction", "EchoFunction[f][expr] prints f[expr] and returns expr. \
EchoFunction[label, f][expr] prints f[expr] prepending label and returns \
expr."}, {"EchoLabel", 
  "EchoLabel[label][expr] prints expr prepending label and returns expr."}, 
 {"EchoTiming", "EchoTiming[expr] evaluates expr, prints the time in seconds \
used and returns the result of the evaluation. EchoTiming[expr, label] prints \
the timing, prepending label."}, {"EclipseType", "EclipseType is an option \
for SolarEclipse and LunarEclipse that specifies the type of eclipse being \
queried for."}, {"EdgeAdd", "EdgeAdd[g, e] makes a graph by adding the edge e \
to the graph g. EdgeAdd[g, {e1, e2, \[Ellipsis]}] adds a collection of edges \
to g. EdgeAdd[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify \
the graph g."}, {"EdgeBetweennessCentrality", "EdgeBetweennessCentrality[g] \
gives a list of betweenness centralities for the edges in the graph g. \
EdgeBetweennessCentrality[{v->w, \[Ellipsis]}] uses rules v->w to specify the \
graph g."}, {"EdgeCapacity", "EdgeCapacity is an option and annotation for \
Graph and related functions that specifies an edge capacity."}, 
 {"EdgeConnectivity", "EdgeConnectivity[g] gives the edge connectivity of the \
graph g. EdgeConnectivity[g, s, t] gives the s -t edge connectivity of the \
graph g. EdgeConnectivity[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w \
to specify the graph g."}, {"EdgeContract", "EdgeContract[g, e] contracts the \
edge e of the graph g. EdgeContract[g, {e1, e2, \[Ellipsis]}] contracts a \
collection of edges e1, e2, \[Ellipsis]. EdgeContract[{v->w, \[Ellipsis]}, \
\[Ellipsis]] uses rules v->w to specify the graph g."}, 
 {"EdgeCost", "EdgeCost is an option and annotation for Graph and related \
functions that specifies an edge cost."}, {"EdgeCount", "EdgeCount[g] gives a \
count of the number of edges in the graph g. EdgeCount[g, patt] gives a count \
of the number of edges that match the pattern patt. EdgeCount[{v->w, \
\[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify the graph g."}, 
 {"EdgeCoverQ", "EdgeCoverQ[g, elist] yields True if the edge list elist is \
an edge cover of the graph g and False otherwise."}, 
 {"EdgeCycleMatrix", "EdgeCycleMatrix[g] gives the edge cycle matrix of a \
graph g. EdgeCycleMatrix[{v->w, \[Ellipsis]}] uses rules v->w to specify the \
graph g."}, {"EdgeDelete", "EdgeDelete[g, e] makes a graph by deleting the \
edge e from the graph g. EdgeDelete[g, {e1, e2, \[Ellipsis]}] deletes a \
collection of edges from g. EdgeDelete[g, patt] deletes all edges that match \
the pattern patt. EdgeDelete[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules \
v->w to specify the graph g."}, {"EdgeDetect", "EdgeDetect[image] finds edges \
in image and returns the result as a binary image. EdgeDetect[image, r] finds \
edges at the scale of the specified pixel range r. EdgeDetect[image, r, t] \
uses a threshold t for selecting image edges."}, 
 {"EdgeForm", "EdgeForm[g] is a graphics directive that specifies that edges \
of polygons and other filled graphics objects are to be drawn using the \
graphics directive or list of directives g."}, 
 {"EdgeIndex", "EdgeIndex[g, e] gives the integer index for the edge e in the \
graph g. EdgeIndex[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to \
specify the graph g."}, {"EdgeLabelStyle", "EdgeLabelStyle is an option and \
property for Graph and related functions that specifies the style to use for \
edge labels."}, {"EdgeLabels", "EdgeLabels is an option and annotation for \
Graph and related functions that specifies what labels and label positions \
should be used for edges."}, {"EdgeList", "EdgeList[g] gives the list of \
edges for the graph g. EdgeList[g, patt] gives a list of edges that match the \
pattern patt. EdgeList[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to \
specify the graph g."}, 
 {"EdgeQ", "EdgeQ[g, e] yields True if e is an edge in the graph g and False \
otherwise."}, {"EdgeRules", "EdgeRules[g] gives the list of edge rules for \
the graph g. EdgeRules[{v->w, \[Ellipsis]}] uses rules v->w to specify the \
graph g."}, {"EdgeShapeFunction", "EdgeShapeFunction is an option and \
annotation for Graph and related functions that specifies a function to use \
to generate primitives for rendering each edge."}, 
 {"EdgeStyle", "EdgeStyle is an option and annotation for Graph and related \
functions that specifies what style to use for edges."}, 
 {"EdgeTaggedGraph", "EdgeTaggedGraph[{e1, e2, \[Ellipsis]}] yields a graph \
with edges ej tagged with unique tags. EdgeTaggedGraph[{e1, e2, \
\[Ellipsis]}->{t1, t2, \[Ellipsis]}] yields a graph with edges ej tagged with \
tj. EdgeTaggedGraph[{v1, v2, \[Ellipsis]}, {e1, e2, \[Ellipsis]}->{t1, t2, \
\[Ellipsis]}] yields a graph with vertices vi and edges ej tagged with tj. \
EdgeTaggedGraph[{\[Ellipsis], wi[vi], \[Ellipsis]}, {\[Ellipsis], wj[ej], \
\[Ellipsis]}->{t1, t2, \[Ellipsis]}] yields a graph with vertex and edge \
annotations defined by the symbolic wrappers wk."}, 
 {"EdgeTaggedGraphQ", "EdgeTaggedGraphQ[g] yields True if the graph g has \
edges tagged and False otherwise."}, {"EdgeTags", "EdgeTags[g] gives the list \
of tags for all edges in the graph g. EdgeTags[g, {u, v}] gives the list of \
tags for edges between u and v."}, {"EdgeTransitiveGraphQ", "EdgeTransitiveGr\
aphQ[g] yields True if the graph g is a edge-transitive graph and False \
otherwise."}, {"EdgeWeight", "EdgeWeight is an option and annotation for \
Graph and related functions that specifies an edge weight."}, 
 {"EdgeWeightedGraphQ", "EdgeWeightedGraphQ[g] yields True if the graph g is \
an edge-weighted graph and False otherwise."}, 
 {"EditDistance", "EditDistance[u, v] gives the edit or Levenshtein distance \
between strings or vectors u and v. EditDistance[u, v] gives the edit or \
Levenshtein distance between strings, vectors or biomolecular sequences u and \
v."}, {"Editable", "Editable is an option for displayed objects, cells, and \
notebooks that specifies whether their contents can be edited interactively \
using the front end."}, {"EffectiveInterest", "EffectiveInterest[r, q] gives \
the effective interest rate corresponding to interest specification r, \
compounded at time intervals q."}, {"Eigensystem", "Eigensystem[m] gives a \
list {values, vectors} of the eigenvalues and eigenvectors of the square \
matrix m. Eigensystem[{m, a}] gives the generalized eigenvalues and \
eigenvectors of m with respect to a. Eigensystem[m, k] gives the eigenvalues \
and eigenvectors for the first k eigenvalues of m. Eigensystem[{m, a}, k] \
gives the first k generalized eigenvalues and eigenvectors."}, 
 {"Eigenvalues", "Eigenvalues[m] gives a list of the eigenvalues of the \
square matrix m. Eigenvalues[{m, a}] gives the generalized eigenvalues of m \
with respect to a. Eigenvalues[m, k] gives the first k eigenvalues of m. \
Eigenvalues[{m, a}, k] gives the first k generalized eigenvalues."}, 
 {"EigenvectorCentrality", "EigenvectorCentrality[g] gives a list of \
eigenvector centralities for the vertices in the graph g. \
EigenvectorCentrality[g, \"In\"] gives a list of in-centralities for a \
directed graph g. EigenvectorCentrality[g, \"Out\"] gives a list of \
out-centralities for a directed graph g. EigenvectorCentrality[{v->w, \
\[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify the graph g."}, 
 {"Eigenvectors", "Eigenvectors[m] gives a list of the eigenvectors of the \
square matrix m. Eigenvectors[{m, a}] gives the generalized eigenvectors of m \
with respect to a. Eigenvectors[m, k] gives the first k eigenvectors of m. \
Eigenvectors[{m, a}, k] gives the first k generalized eigenvectors."}, 
 {"Element", "Element[x, dom] or x\[Element]dom asserts that x is an element \
of the domain dom. Element[x, reg] or x\[Element]reg asserts that x is an \
element of the region reg. Element[x1|x2|\[Ellipsis], dom] asserts that all \
the xi are elements of dom. Element[patt, dom] asserts that any expression \
matching the pattern patt is an element of dom."}, 
 {"ElementData", "ElementData[\"\\!\\(\\*name\", \"\\!\\(\\*property\"] gives \
the value of the specified property for the chemical element \
\"\\!\\(\\*name\". ElementData[n, \"\\!\\(\\*property\"] gives the specified \
property for the n^th chemical element."}, {"ElementwiseLayer", "ElementwiseL\
ayer[f] represents a net layer that applies a unary function f to every \
element of the input array. ElementwiseLayer[\"\\!\\(\\*name\"] applies the \
function specified by \"\\!\\(\\*name\"."}, {"ElidedForms", "ElidedForms is \
an option to TextString and related functions that specifies which \
expressions should be elided."}, {"Eliminate", "Eliminate[eqns, vars] \
eliminates variables between a set of simultaneous equations."}, 
 {"Ellipsoid", "Ellipsoid[p, {r1, \[Ellipsis]}] represents an axis-aligned \
ellipsoid centered at the point p and with semiaxes lengths ri. Ellipsoid[p, \
\[CapitalSigma]] represents an ellipsoid centered at p and weight matrix \
\[CapitalSigma]."}, {"EllipticE", "EllipticE[m] gives the complete elliptic \
integral E(m). EllipticE[\[Phi], m] gives the elliptic integral of the second \
kind E(\[Phi]|m)."}, {"EllipticExp", "EllipticExp[u, {a, b}] is the inverse \
for EllipticLog. It produces a list {x, y} such that u == EllipticLog[{x, y}, \
{a, b}]."}, {"EllipticExpPrime", "EllipticExpPrime[u, {a, b}] gives the \
derivative of EllipticExp[u, {a, b}] with respect to u."}, 
 {"EllipticF", "EllipticF[\[Phi], m] gives the elliptic integral of the first \
kind F(\[Phi]|m)."}, {"EllipticFilterModel", "EllipticFilterModel[n] designs \
a lowpass elliptic filter of order n. EllipticFilterModel[{n, \[Omega]c}] \
uses the cutoff frequency \[Omega]c. EllipticFilterModel[{\"\\!\\(\\*type\", \
spec}] designs an elliptic filter of the specified type \"\\!\\(\\*type\", \
using the spec. EllipticFilterModel[{\"\\!\\(\\*type\", spec}, var] expresses \
the model in terms of the variable var."}, 
 {"EllipticK", 
  "EllipticK[m] gives the complete elliptic integral of the first kind K(m)."}\
, {"EllipticLog", "EllipticLog[{x, y}, {a, b}] gives the generalized \
logarithm associated with the elliptic curve y^2 = x^3 + a x^2 + b x."}, 
 {"EllipticNomeQ", "EllipticNomeQ[m] gives the nome q corresponding to the \
parameter m in an elliptic function."}, {"EllipticPi", "EllipticPi[n, m] \
gives the complete elliptic integral of the third kind \[CapitalPi](n|m). \
EllipticPi[n, \[Phi], m] gives the incomplete elliptic integral \
\[CapitalPi](n;\[Phi]|m)."}, {"EllipticTheta", "EllipticTheta[a, u, q] gives \
the theta function \[CurlyTheta]a(u, q)(a = 1, \[Ellipsis], 4). \
EllipticTheta[a, q] gives the theta constant \
\[CurlyTheta]a(q)==\[CurlyTheta]a(0, q)."}, {"EllipticThetaPrime", "EllipticT\
hetaPrime[a, u, q] gives the derivative with respect to u of the theta \
function \[CurlyTheta]a(u, q)(a = 1, \[Ellipsis], 4). EllipticThetaPrime[a, \
q] gives the theta constant \[CurlyTheta]a^\[Prime](0, q)."}, 
 {"EmbedCode", "EmbedCode[obj] generates the code necessary to embed the \
object obj on a webpage. EmbedCode[obj, \"\\!\\(\\*dest\"] generates code for \
an external environment or language of type \"\\!\\(\\*dest\". EmbedCode[obj, \
\"\\!\\(\\*dest\", dir] saves the generated code as files in the directory \
dir. EmbedCode[obj, \"\\!\\(\\*dest\", loc] saves the generated code as a \
file archive in the file location loc."}, {"EmbeddedHTML", "EmbeddedHTML[\"\\\
!\\(\\*string\"] is an object that formats as a web frame containing the HTML \
content \"\\!\\(\\*string\". EmbeddedHTML[URL[\"\\!\\(\\*url\"]] formats as a \
rendering of the webpage corresponding to the specified URL. \
EmbeddedHTML[CloudObject[\[Ellipsis]]] formats as a web rendering of the \
specified cloud object."}, {"EmbeddedSQLEntityClass", "EmbeddedSQLEntityClass\
[string, props] represents a verbatim SQL query to be interpreted as an \
entity class with properties given by props. EmbeddedSQLEntityClass[template, \
props, args] represents an SQL query string template with arguments provided \
by args."}, {"EmbeddedSQLExpression", "EmbeddedSQLExpression[string] \
represents an SQL expression to be evaluated verbatim within an \
EntityFunction object. EmbeddedSQLExpression[template, args] represents an \
SQL expression string template with arguments provided by args."}, 
 {"EmbeddedService", "EmbeddedService[service] is an object that formats as a \
web frame containing content from the specified external service."}, 
 {"EmbeddingLayer", "EmbeddingLayer[size, n] represents a trainable net layer \
that embeds integers between 1 and n into a continuous vector space of \
dimension size. EmbeddingLayer[size] leaves the n to be inferred from \
context."}, {"EmitSound", "EmitSound[snd] emits the sound snd when evaluated. \
EmitSound[{snd1, snd2, \[Ellipsis]}] emits each of the sounds sndi in \
sequence."}, {"EmpiricalDistribution", "EmpiricalDistribution[{x1, x2, \
\[Ellipsis]}] represents an empirical distribution based on the data values \
xi. EmpiricalDistribution[{{x1, y1, \[Ellipsis]}, {x2, y2, \[Ellipsis]}, \
\[Ellipsis]}] represents a multivariate empirical distribution based on the \
data values {xi, yi, \[Ellipsis]}. EmpiricalDistribution[{w1, w2, \
\[Ellipsis]}->{d1, d2, \[Ellipsis]}] represents an empirical distribution \
where data values di occur with weights wi."}, 
 {"EmptyGraphQ", 
  "EmptyGraphQ[g] yields True if g is an empty graph and False otherwise."}, 
 {"EmptyRegion", 
  "EmptyRegion[n] represents the empty subset of \[DoubleStruckCapitalR]^n."}\
, {"EmptySpaceF", "EmptySpaceF[pdata, r] estimates the empty space function \
F(r) for point data pdata at radius r. EmptySpaceF[pproc, r] computes F(r) \
for point process pproc. EmptySpaceF[bdata, r] computes F(r) for binned data \
bdata. EmptySpaceF[pspec] generates the function F that can be applied \
repeatedly to different radii r."}, {"Enabled", "Enabled is an option for \
objects such as Slider that specifies whether the objects should be enabled \
for interactive manipulation."}, {"Enclose", "Enclose[expr] attempts to \
evaluate expr and return the result, but stops if it catches an error and \
returns a failure object. Enclose[expr, f] applies f to any failure object \
generated. Enclose[expr, \"\\!\\(\\*prop\"] gives the property prop of any \
failure object generated. Enclose[expr, handler, form] only catches errors \
with explicitly specified tags matching form."}, 
 {"Encode", "Encode[\"\\!\\(\\*source\", \"\\!\\(\\*dest\"] writes an encoded \
version of the file source to the file dest. <<dest decodes the file before \
reading its contents. Encode[\"\\!\\(\\*source\", \"\\!\\(\\*dest\", \
\"\\!\\(\\*key\"] produces an encoded file that must be read in using \
Get[\"\\!\\(\\*dest\", \"\\!\\(\\*key\"]."}, {"Encrypt", "Encrypt[\"\\!\\(\\*\
password\", expr] encrypts expr using the specified password, to give an \
encrypted object. Encrypt[keyspec, expr] encrypts expr using the \
cryptographic key specification keyspec. Encrypt[expr] interactively requests \
a password with which to encrypt expr."}, {"EncryptFile", "EncryptFile[\"\\!\
\\(\\*password\", file] generates an encrypted version of a file, using the \
specified password. EncryptFile[\"\\!\\(\\*password\", source, target] \
generates an encrypted version of source, putting the result in target. \
EncryptFile[keyspec, source, \[Ellipsis]] encrypts using the cryptographic \
key specification keyspec."}, {"EncryptedObject", 
  "EncryptedObject[assoc] represents encrypted data generated by Encrypt."}, 
 {"End", 
  "End[] returns the present context, and reverts to the previous one."}, 
 {"EndDialogPacket", "EndDialogPacket[integer] is a WSTP packet indicating \
the end of the Dialog subsession referenced by integer."}, 
 {"EndOfBuffer", "EndOfBuffer is a symbol that represents the end of \
currently available data in the buffer for a process or stream."}, 
 {"EndOfFile", 
  "EndOfFile is a symbol returned by Read when it reaches the end of a file."}\
, {"EndOfLine", "EndOfLine represents the end of a line in a string for \
purposes of matching in StringExpression."}, {"EndOfString", "EndOfString \
represents the end of a string for purposes of matching in StringExpression."}\
, {"EndPackage", "EndPackage[] restores $Context and $ContextPath to their \
values before the preceding BeginPackage, and prepends the current context to \
the list $ContextPath."}, {"EngineeringForm", "EngineeringForm[expr] prints \
with all real numbers in expr given in engineering notation. \
EngineeringForm[expr, n] prints with numbers given to n -digit precision."}, 
 {"EnterExpressionPacket", "EnterExpressionPacket[expr] is a WSTP packet that \
requests the evaluation of expr."}, {"EnterTextPacket", "EnterTextPacket[stri\
ng] is a WSTP packet that requests the parsing and evaluation of string as an \
expression."}, {"Entity", "Entity[\"\\!\\(\\*type\", name] represents an \
entity of the specified type, identified by name. Entity[cspec, name] \
represents an entity from the computed class, specified by cspec."}, 
 {"EntityClass", "EntityClass[\"\\!\\(\\*type\", name] represents a class of \
entities of the specified type identified by name. \
EntityClass[\"\\!\\(\\*type\", {property1->vspec1, property2->vspec2, \
\[Ellipsis]}] represents an implicitly defined entity class containing \
entities of the specified type for which the properties propertyi conform to \
the value selector vspeci. EntityClass[cspec, psel] represents an entity \
class with members specified by cspec, selected by the property selector \
psel."}, {"EntityClassList", "EntityClassList[\"\\!\\(\\*type\"] gives a list \
of entity classes for the specified type of entity."}, 
 {"EntityCopies", "EntityCopies[entity, n] represents n copies of entity."}, 
 {"EntityFunction", "EntityFunction[x, body] is a function with a single \
formal parameter x, to be used in EntityValue and related functions. \
EntityFunction[{x1, x2, \[Ellipsis]}, body] is an EntityFunction with a list \
of formal parameters."}, {"EntityGroup", "EntityGroup[{entity1, entity2, \
\[Ellipsis]}] represents a group of entities."}, 
 {"EntityInstance", "EntityInstance[entity, qual->val] represents an entity \
whose qualifier qual has value val. EntityInstance[entity, {qual1->val1, \
qual2->val2, \[Ellipsis]}] represents an entity whose qualifiers quali have \
values vali. EntityInstance[entity, quantity] represents an entity qualified \
by quantity."}, {"EntityList", "EntityList[class] gives a list of entities in \
the specified entity class. EntityList[\"\\!\\(\\*type\"] gives a list of \
entities of the specified type. EntityList[class, simplify] gives a list of \
entities; simplify determines whether to reduce entities to the simplest \
possible type."}, {"EntityPrefetch", "EntityPrefetch[\"\\!\\(\\*type\"] \
fetches cacheable values associated with all entities of the specified type. \
EntityPrefetch[EntityProperty[\"\\!\\(\\*type\", \"\\!\\(\\*prop\"]] fetches \
all values for the specified property."}, {"EntityProperties", 
  "EntityProperties[type] lists properties associated with entity type type."}\
, {"EntityProperty", "EntityProperty[type, pname] represents a property \
identified by pname for use in EntityValue. EntityProperty[class, pname] \
represents a property introduced by the computed entity class class. \
EntityProperty[type, pname, {qual1->val1, qual2->val2, \[Ellipsis]}] \
represents a property modified by the qualifier rules quali->vali."}, 
 {"EntityPropertyClass", "EntityPropertyClass[type, pcname] represents a \
class of properties identified by the name pcname."}, 
 {"EntityRegister", "EntityRegister[estore] registers the entities in the \
entity store estore so that they can be accessed directly using Entity."}, 
 {"EntityStore", "EntityStore[\"\\!\\(\\*type\"] represents an empty entity \
store for entities of type \"\\!\\(\\*type\". \
EntityStore[\"\\!\\(\\*type\"->data] represents an entity store for entities \
of type \"\\!\\(\\*type\" with properties and values defined by data. \
EntityStore[{tspec1, tspec2, \[Ellipsis]}] represents an entity store for \
entities of multiple types. EntityStore[RelationalDatabase[\[Ellipsis]]] \
constructs an entity store from the schema of an external database. \
EntityStore[{tspec1, tspec2,...}, dbspec] constructs an entity store by \
mapping table names in the database specified by dbspec to types as specified \
by the tspeci."}, {"EntityStores", "EntityStores[] gives a list of all \
registered entity stores that are accessed when Entity is used."}, 
 {"EntityTypeName", "EntityTypeName[entity] gives the name of the entity type \
of entity. EntityTypeName[{entity1, \[Ellipsis], entityn}] gives the name of \
the entity type for entity1 through entityn."}, 
 {"EntityUnregister", "EntityUnregister[\"\\!\\(\\*type\"] unregisters all \
entities in the first entity store that defines entities of the specified \
type. EntityUnregister[store] unregisters all entities in the specified \
entity store."}, {"EntityValue", "EntityValue[entity, property] gives the \
value of the specified property for the given entity. EntityValue[{entity1, \
entity2, \[Ellipsis]}, property] gives the list of values of the specified \
property for each of the entityi. EntityValue[class, property] gives the list \
of values of the specified property for all entities in the specified class. \
EntityValue[entity, {property1, property2, \[Ellipsis]}] gives the list of \
values of the propertyi for the specified entity. EntityValue[ents, \
{property1, property2, \[Ellipsis]}] gives the list of values of the \
propertyi for each of the entities represented by ents."}, 
 {"Entropy", "Entropy[list] gives the base E information entropy of the \
values in list. Entropy[k, list] gives the base k information entropy."}, 
 {"EntropyFilter", "EntropyFilter[data, r] filters data by replacing every \
value by the entropy value in its range-r neighborhood. EntropyFilter[data, \
{r1, r2, \[Ellipsis]}] uses ri for filtering the i^th dimension in data."}, 
 {"Environment", "Environment[\"\\!\\(\\*var\"] gives the value of an \
operating system environment variable."}, {"Epilog", "Epilog is an option for \
graphics functions that gives a list of graphics primitives to be rendered \
after the main part of the graphics is rendered."}, 
 {"EpilogFunction", "EpilogFunction is an option for DocumentGenerator \
allowing arbitrary code to be executed after a document is generated."}, 
 {"Equal", "lhs == rhs returns True if lhs and rhs are identical."}, 
 {"EqualTilde", "EqualTilde[x, y, \[Ellipsis]] displays as \
x\[EqualTilde]y\[EqualTilde]\[Ellipsis]."}, {"EqualTo", "EqualTo[y] is an \
operator form that yields x == y when applied to an expression x."}, 
 {"Equilibrium", "Equilibrium[x, y, \[Ellipsis]] displays as \
x\[Equilibrium]y\[Equilibrium]\[Ellipsis]."}, {"EquirippleFilterKernel", "Equ\
irippleFilterKernel[{{{\[Omega]L1, \[Omega]R1}, {\[Omega]L2, \[Omega]R2}, \
\[Ellipsis]}, {a1, a2, \[Ellipsis]}}, n] creates a finite impulse response \
(FIR) filter kernel of length n with an equiripple amplitude response, given \
the specified left and right band edge frequencies {\[Omega]Li, \[Omega]Ri} \
and amplitudes ai. EquirippleFilterKernel[{{{\[Omega]L1, \[Omega]R1}, \
{\[Omega]L2, \[Omega]R2}, \[Ellipsis]}, {a1, a2, \[Ellipsis]}, {w1, \
\[Ellipsis]}}, n] uses relative weights wi for each frequency band. \
EquirippleFilterKernel[{\"\\!\\(\\*type\", {{{\[Omega]L1, \[Omega]R1}, \
\[Ellipsis]}, \[Ellipsis]}, n] creates a filter of the specified \
\"\\!\\(\\*type\"."}, {"Equivalent", "Equivalent[e1, e2, \[Ellipsis]] \
represents the logical equivalence e1<=>e2<=>\[Ellipsis], giving True when \
all of the ei are the same."}, {"Erf", "Erf[z] gives the error function \
erf(z). Erf[z0, z1] gives the generalized error function erf(z1) - erf(z0)."}\
, {"Erfc", "Erfc[z] gives the complementary error function erfc(z)."}, 
 {"Erfi", "Erfi[z] gives the imaginary error function erf(iz) / i."}, 
 {"ErlangB", 
  "ErlangB[c, a] computes the Erlang B loss probability for an M/M/c/c \
queue."}, {"ErlangC", "ErlangC[c, a] computes the Erlang C probability for \
nonzero waiting time in an M/M/c queue."}, {"ErlangDistribution", "ErlangDist\
ribution[k, \[Lambda]] represents the Erlang distribution with shape \
parameter k and rate \[Lambda]."}, {"Erosion", "Erosion[image, ker] gives the \
morphological erosion of image with respect to the structuring element ker. \
Erosion[image, r] gives the erosion with respect to a range-r square. \
Erosion[data, \[Ellipsis]] applies erosion to an array of data."}, 
 {"ErrorBox", "ErrorBox[boxes] is a low-level box construct that represents \
boxes that cannot be interpreted in input or output."}, 
 {"EscapeRadius", "EscapeRadius is an option to MandelbrotSetPlot that \
specifies the criterion to use to decide that a point is not in the \
Mandelbrot set."}, {"EstimatedBackground", "EstimatedBackground[data] \
estimates the background of data. EstimatedBackground[data, \[Sigma]] tries \
to preserve peaks up to scale \[Sigma]."}, {"EstimatedDistribution", "Estimat\
edDistribution[data, dist] estimates the parametric distribution dist from \
data. EstimatedDistribution[data, dist, {{p, p0}, {q, q0}, \[Ellipsis]}] \
estimates the parameters p, q, \[Ellipsis] with starting values p0, q0, \
\[Ellipsis]. EstimatedDistribution[data, dist, idist] estimates distribution \
dist with starting values taken from the instantiated distribution idist."}, 
 {"EstimatedPointProcess", "EstimatedPointProcess[pdata, pproc] estimates the \
parametric point process pproc from point data pdata. \
EstimatedPointProcess[pdata, pproc, {{p, p0}, {q, q0}, \[Ellipsis]}] \
estimates the parameters p, q, \[Ellipsis] with starting values p0, q0, \
\[Ellipsis]."}, {"EstimatedProcess", "EstimatedProcess[data, proc] estimates \
the parametric process proc from data. EstimatedProcess[data, proc, {{p, p0}, \
{q, q0}, \[Ellipsis]}] estimates the parameters p, q, \[Ellipsis] with \
starting values p0, q0, \[Ellipsis]. EstimatedProcess[data, proc, iproc] \
estimates process proc with starting values taken from the instantiated \
process iproc."}, {"EstimatorGains", "EstimatorGains[ssm, {p1, p2, \
\[Ellipsis], pn}] gives the estimator gain matrix for the StateSpaceModel \
ssm, such that the poles of the estimator are pi. EstimatorGains[{ssm, {out1, \
\[Ellipsis]}}, \[Ellipsis]] specifies the measured outputs outi to use."}, 
 {"EstimatorRegulator", "EstimatorRegulator[sspec,{l, \[Kappa]}] gives the \
output feedback controller with estimator and regulator gains l and \[Kappa] \
for the system specification sspec. EstimatorRegulator[\[Ellipsis], \
\"\\!\\(\\*prop\"] gives the value of the property \"\\!\\(\\*prop\"."}, 
 {"EuclideanDistance", "EuclideanDistance[u, v] gives the Euclidean distance \
between vectors u and v."}, {"EulerAngles", "EulerAngles[r] gives Euler \
angles {\[Alpha], \[Beta], \[Gamma]} corresponding to the rotation matrix r. \
EulerAngles[r, {a, b, c}] gives Euler angles {\[Alpha], \[Beta], \[Gamma]} \
with rotation order {a, b, c}."}, {"EulerCharacteristic", 
  "EulerCharacteristic[poly] gives the Euler characteristic of a poly."}, 
 {"EulerE", "EulerE[n] gives the Euler number En. EulerE[n, x] gives the \
Euler polynomial En(x)."}, {"EulerGamma", "EulerGamma is \
Euler\[CloseCurlyQuote]s constant \[Gamma], with numerical value \
\[TildeEqual]0.577216."}, {"EulerMatrix", "EulerMatrix[{\[Alpha], \[Beta], \
\[Gamma]}] gives the Euler 3D rotation matrix formed by rotating by \[Alpha] \
around the current z axis, then by \[Beta] around the current y axis, and \
then by \[Gamma] around the current z axis. EulerMatrix[{\[Alpha], \[Beta], \
\[Gamma]}, {a, b, c}] gives the Euler 3D rotation matrix corresponding, first \
rotating by \[Alpha] around the current a axis, then by \[Beta] around the \
current b axis, and finally by \[Gamma] around the current c axis."}, 
 {"EulerPhi", "EulerPhi[n] gives the Euler totient function \[Phi](n)."}, 
 {"EulerianGraphQ", "EulerianGraphQ[g] yields True if the graph g is \
Eulerian, and False otherwise."}, {"Evaluatable", "Evaluatable is an option \
for Cell that specifies whether a cell should be used as input to be \
evaluated by the Wolfram Language kernel."}, {"Evaluate", "Evaluate[expr] \
causes expr to be evaluated even if it appears as the argument of a function \
whose attributes specify that it should be held unevaluated."}, 
 {"EvaluatePacket", 
  "EvaluatePacket[expr] is a WSTP packet requesting evaluation of expr."}, 
 {"EvaluationBox", "EvaluationBox[] returns a BoxObject corresponding to the \
box structure in which this function is being evaluated."}, 
 {"EvaluationCell", "EvaluationCell[] returns a CellObject corresponding to \
the cell in which this function is being evaluated."}, 
 {"EvaluationData", "EvaluationData[expr] gives an association containing the \
result of evaluating expr and metadata about the process of doing so."}, 
 {"EvaluationElements", "EvaluationElements is an option for NotebookEvaluate \
that determines which cells to evaluate."}, {"EvaluationEnvironment", "Evalua\
tionEnvironment is an option for functions such as InitializationValue and \
InitializationObjects that specifies the environment in which an \
initialization is intended to be used."}, {"EvaluationMonitor", "EvaluationMo\
nitor is an option for various numerical computation and plotting functions \
that gives an expression to evaluate whenever functions derived from the \
input are evaluated numerically."}, {"EvaluationNotebook", "EvaluationNoteboo\
k[] gives the notebook in which this function is being evaluated."}, 
 {"EvaluationObject", "EvaluationObject[n, expr, \[Ellipsis]] represents an \
expression submitted for evaluation on any available parallel kernel."}, 
 {"EvaluationPrivileges", "EvaluationPrivileges is an option for CloudObject \
and related cloud functions that specifies what other files and cloud objects \
can be accessed by evaluations associated with the cloud object."}, 
 {"Evaluator", "Evaluator is an option for objects such as Button, Dynamic, \
and Cell that gives the name of the kernel to use to evaluate their \
contents."}, {"EvaluatorNames", "EvaluatorNames is a global option that \
specifies the kernels that are currently configured to perform evaluations."}\
, {"EvenQ", 
  "EvenQ[expr] gives True if expr is an even integer, and False otherwise."}, 
 {"EventData", "EventData[{e1, e2, \[Ellipsis]}] represents event data with \
explicitly specified censoring ei. EventData[{e1, e2, \[Ellipsis]}, {ci1, \
ci2, \[Ellipsis]}] represents event data ei with censoring indicators cii. \
EventData[{e1, e2, \[Ellipsis]}, {cc1, cc2, \[Ellipsis]}] represents event \
data ei with censoring counts cci. EventData[{e1, e2, \[Ellipsis]}, cspec, \
{tr1, tr2, \[Ellipsis]}] represents event data with censoring and truncation \
tri."}, {"EventHandler", "EventHandler[expr, {\"\\!\\(\\*event_1\":>action1, \
\"\\!\\(\\*event_2\":>action2, \[Ellipsis]}] displays as expr, evaluating \
actioni whenever \"\\!\\(\\*event_i\" occurs in connection with expr."}, 
 {"EventLabels", "EventLabels is an option to CandlestickChart, KagiChart, \
and similar functions that specifies events to labels."}, 
 {"EventSeries", "EventSeries[{{t1, v1}, {t2, v2}\[Ellipsis]}] represents a \
series of events given as time-value pairs {ti, vi}. EventSeries[{v1, v2, \
\[Ellipsis]}, tspec] represents a series of events with values vi at times \
specified by tspec."}, {"ExactBlackmanWindow", 
  "ExactBlackmanWindow[x] represents an exact Blackman window function of x."}\
, {"ExactNumberQ", "ExactNumberQ[expr] returns True if expr is an exact real \
or complex number, and returns False otherwise."}, 
 {"ExampleData", "ExampleData[\"\\!\\(\\*type\"] gives a list of names of \
examples of the specified type. ExampleData[{\"\\!\\(\\*type\", \
\"\\!\\(\\*name\"}] gives the default form of the named example of the \
specified type. ExampleData[{\"\\!\\(\\*type\", \"\\!\\(\\*name\"}, \
\"\\!\\(\\*elem\"] gives the specified element or property of an example."}, 
 {"Except", "Except[c] is a pattern object which represents any expression \
except one that matches c. Except[c, p] represents any expression that \
matches p but not c."}, {"ExcludePods", "ExcludePods is an option to \
WolframAlpha that specifies pod IDs to exclude from the results."}, 
 {"ExcludedContexts", "ExcludedContexts is an option for FullDefinition, \
Manipulate and related symbols that gives contexts whose symbols will not \
have the definitions recursively saved."}, {"ExcludedForms", "ExcludedForms \
is an option that gives a list of patterns for expressions that should be \
excluded from an operation performed by a particular function."}, 
 {"ExcludedLines", "ExcludedLines is an option for SemanticImport and related \
functions that specifies which lines should be ignored for further \
processing."}, {"ExcludedPhysicalQuantities", "ExcludedPhysicalQuantities is \
an option for FormulaLookup that specifies physical quantities that should be \
not used by the formulas returned."}, {"Exclusions", "Exclusions is an option \
that specifies where to exclude in regions used by functions like Plot, \
Plot3D, and NIntegrate."}, {"ExclusionsStyle", "ExclusionsStyle is an option \
to plotting functions that specifies how to render subregions excluded \
according to Exclusions."}, {"Exists", "Exists[x, expr] represents the \
statement that there exists a value of x for which expr is True. Exists[x, \
cond, expr] states that there exists an x satisfying the condition cond for \
which expr is True. Exists[{x1, x2, \[Ellipsis]}, expr] states that there \
exist values for all the xi for which expr is True."}, 
 {"Exit", "Exit[] terminates a Wolfram Language kernel session."}, 
 {"ExoplanetData", "ExoplanetData[entity, property] gives the value of the \
specified property for the exoplanet entity. ExoplanetData[{entity1, entity2, \
\[Ellipsis]}, property] gives a list of property values for the specified \
exoplanet entities. ExoplanetData[entity, property, annotation] gives the \
specified annotation associated with the given property."}, 
 {"Exp", "Exp[z] gives the exponential of z."}, 
 {"ExpGammaDistribution", "ExpGammaDistribution[\[Kappa], \[Theta], \[Mu]] \
represents an exp-gamma distribution with shape parameter \[Kappa], scale \
parameter \[Theta], and location parameter \[Mu]."}, 
 {"ExpIntegralE", 
  "ExpIntegralE[n, z] gives the exponential integral function En(z)."}, 
 {"ExpIntegralEi", 
  "ExpIntegralEi[z] gives the exponential integral function Ei(z)."}, 
 {"ExpToTrig", 
  "ExpToTrig[expr] converts exponentials in expr to trigonometric functions."}\
, {"Expand", "Expand[expr] expands out products and positive integer powers \
in expr. Expand[expr, patt] leaves unexpanded any parts of expr that are free \
of the pattern patt.10496 "}, {"ExpandAll", "ExpandAll[expr] expands out all \
products and integer powers in any part of expr. ExpandAll[expr, patt] avoids \
expanding parts of expr that do not contain terms matching the pattern patt."}\
, {"ExpandDenominator", "ExpandDenominator[expr] expands out products and \
powers that appear as denominators in expr."}, 
 {"ExpandFileName", "ExpandFileName[\"\\!\\(\\*name\"] textually expands name \
to have the form of an absolute file name for your operating system."}, 
 {"ExpandNumerator", "ExpandNumerator[expr] expands out products and powers \
that appear in the numerator of expr."}, {"Expectation", "Expectation[expr, \
x\[Distributed]dist] gives the expectation of expr under the assumption that \
x follows the probability distribution dist. Expectation[expr, \
x\[Distributed]data] gives the expectation of expr under the assumption that \
x follows the probability distribution given by data. Expectation[expr, {x1, \
x2, \[Ellipsis]}\[Distributed]dist] gives the expectation of expr under the \
assumption that {x1, x2, \[Ellipsis]} follows the multivariate distribution \
dist. Expectation[expr, {x1\[Distributed]dist1, x2\[Distributed]dist2, \
\[Ellipsis]}] gives the expectation of expr under the assumption that x1, x2, \
\[Ellipsis] are independent and follow the distributions dist1, dist2, \
\[Ellipsis]. Expectation[expr\[Conditioned]pred, \[Ellipsis]] gives the \
conditional expectation of expr given pred."}, 
 {"ExpirationDate", "ExpirationDate is an option for various functions that \
specifies when a persistent value should be treated as expired."}, 
 {"Exponent", "Exponent[expr, form] gives the maximum power with which form \
appears in the expanded form of expr. Exponent[expr, form, h] applies h to \
the set of exponents with which form appears in expr."}, 
 {"ExponentFunction", "ExponentFunction is an option for NumberForm and \
related functions that determines the exponent to use in printing approximate \
real numbers."}, {"ExponentStep", "ExponentStep is an option for NumberForm \
and related functions that determines in what steps exponents are taken to \
increase when scientific notation is used."}, {"ExponentialDistribution", "Ex\
ponentialDistribution[\[Lambda]] represents an exponential distribution with \
scale inversely proportional to parameter \[Lambda]."}, 
 {"ExponentialFamily", "ExponentialFamily is an option for \
GeneralizedLinearModelFit that specifies the exponential family for the \
model."}, {"ExponentialGeneratingFunction", "ExponentialGeneratingFunction[ex\
pr, n, x] gives the exponential generating function in x for the sequence \
whose n^th term is given by the expression expr. \
ExponentialGeneratingFunction[expr, {n1, n2, \[Ellipsis]}, {x1, x2, \
\[Ellipsis]}] gives the multidimensional exponential generating function in \
x1, x2, \[Ellipsis] whose n1, n2, \[Ellipsis] term is given by expr."}, 
 {"ExponentialMovingAverage", "ExponentialMovingAverage[list, \[Alpha]] gives \
the exponential moving average of list with smoothing constant \[Alpha]."}, 
 {"ExponentialPowerDistribution", "ExponentialPowerDistribution[\[Kappa], \
\[Mu], \[Sigma]] represents an exponential power distribution with shape \
parameter \[Kappa], location parameter \[Mu], and scale parameter \[Sigma]. \
ExponentialPowerDistribution[\[Kappa]] represents an exponential power \
distribution with location parameter 0 and scale parameter 1."}, 
 {"Export", "Export[\"\\!\\(\\*dest.\\!\\(\\*ext\", expr] exports data to a \
file, converting it to the format corresponding to the file extension ext. \
Export[dest, expr, \"format\"] exports data in the specified format. \
Export[dest, exprs, elements] exports data by treating exprs as elements. \
Export[dest, exprs, elements, options] uses the specified options."}, 
 {"ExportByteArray", "ExportByteArray[expr, \"\\!\\(\\*format\"] generates a \
ByteArray object corresponding to expr exported in the specified format. \
ExportByteArray[exprs, elems] generates a ByteArray object by treating exprs \
as elements specified by elems."}, {"ExportForm", "ExportForm[expr, \
\"\\!\\(\\*fmt\"] specifies that expr should be exported in the specified \
format in functions like CloudDeploy and in external results from APIFunction \
and FormFunction. ExportForm[expr, {\"\\!\\(\\*fmt\", \"\\!\\(\\*type\"}] \
specifies that when expr is exported, it should be tagged as having the \
specified MIME type."}, {"ExportString", "ExportString[expr, \
\"\\!\\(\\*format\"] generates a string corresponding to expr exported in the \
specified format. ExportString[rules, {\"\\!\\(\\*format\", \"Rules\"}] gives \
explicit rules for different elements of the data to be exported. \
ExportString[exprs, elems] generates a string by treating exprs as elements \
specified by elems."}, {"Expression", "Expression is a symbol that represents \
an ordinary Wolfram Language expression in Read and related functions."}, 
 {"ExpressionCell", "ExpressionCell[expr] gives an expression cell that can \
appear in a Wolfram System notebook. ExpressionCell[expr, \"\\!\\(\\*style\"] \
gives an expression cell with the specified style. ExpressionCell[expr, \
\"\\!\\(\\*style_1\", \"\\!\\(\\*style_2\", \[Ellipsis]] gives an expression \
cell with multiple styles applied to it."}, {"ExpressionGraph", "ExpressionGr\
aph[expr] gives the tree graph with different levels at different depths. \
ExpressionGraph[expr, n] gives the tree graph only down to level n. \
ExpressionGraph[expr, n, form] gives a tree graph in which subexpressions \
that match form are leaves."}, {"ExpressionTree", "ExpressionTree[expr] gives \
a Tree object from the structure of the expression expr. ExpressionTree[expr, \
struct] gives a Tree object interpreting subexpressions of expr as specified \
by struct."}, {"ExtendedEntityClass", "ExtendedEntityClass[class, \
\"\\!\\(\\*name\"->f] represents an entity class derived from class by adding \
a new computed property \"\\!\\(\\*name\" whose value for each entity is \
obtained by applying the entity function f. ExtendedEntityClass[class, \
{\"\\!\\(\\*name_1\"->f1, \"\\!\\(\\*name_2\"->f2, \[Ellipsis]}] adds the \
properties namei defined by the functions fi."}, 
 {"ExtendedGCD", "ExtendedGCD[n1, n2, \[Ellipsis]] gives the extended \
greatest common divisor of the integers ni."}, 
 {"Extension", "Extension is an option for various polynomial and algebraic \
functions that specifies generators for the algebraic number field to be \
used."}, {"ExtentElementFunction", "ExtentElementFunction is an option to \
DiscretePlot and DiscretePlot3D that gives a function to use to generate the \
primitives for rendering each extent element."}, 
 {"ExtentMarkers", "ExtentMarkers is an option to DiscretePlot and \
DiscretePlot3D that specifies markers to draw at extent boundaries."}, 
 {"ExtentSize", "ExtentSize is an option to DiscretePlot and DiscretePlot3D \
that specifies how far to extend out from each plot point."}, 
 {"ExternalBundle", "ExternalBundle[{\"\\!\\(\\*name_1\"->obj1, \
\"\\!\\(\\*name_2\"->obj2, \[Ellipsis]}] represents a bundle of resources to \
be externally deployed as named URLs, functions, etc. \
ExternalBundle[{name11->{name1->\[Ellipsis], \[Ellipsis]}, \[Ellipsis]}] \
represents a nested bundle of resources."}, {"ExternalEvaluate", "ExternalEva\
luate[\"\\!\\(\\*sys\", \"\\!\\(\\*cmd\"] evaluates the command cmd in the \
external evaluator sys, returning an expression corresponding to the output. \
ExternalEvaluate[{\"\\!\\(\\*sys\", opts}, \"\\!\\(\\*cmd\"] uses the options \
opts for the external evaluator. ExternalEvaluate[DatabaseReference[ref], \
\"\\!\\(\\*cmd\"] evaluates cmd using the database specified by ref. \
ExternalEvaluate[assoc, \"\\!\\(\\*cmd\"] evaluates cmd using the external \
evaluator specified by assoc. ExternalEvaluate[session, \"\\!\\(\\*cmd\"] \
evaluates cmd in the specified running ExternalSessionObject. \
ExternalEvaluate[sys->\"\\!\\(\\*type\", \[Ellipsis]] returns output \
converted to the specified type. ExternalEvaluate[spec, obj] evaluates the \
content of the specified File, URL or CloudObject. ExternalEvaluate[spec, \
assoc] evaluates the command specified by assoc. ExternalEvaluate[spec, \
{cmd1, cmd2, \[Ellipsis]}] evaluates the list of commands cmdi. \
ExternalEvaluate[spec] represents an operator form of ExternalEvaluate that \
can be applied to a command or object."}, {"ExternalFunction", "ExternalFunct\
ion[sys, \"\\!\\(\\*f\"] represents an external function named \"\\!\\(\\*f\" \
defined in the external evaluator sys. ExternalFunction[session, \
\"\\!\\(\\*f\"] represents an external function \"\\!\\(\\*f\" in the \
specified external session. ExternalFunction[sys, \"\\!\\(\\*code\"] \
represents an external function defined by the code fragment \
\"\\!\\(\\*code\"."}, {"ExternalIdentifier", "ExternalIdentifier[\"\\!\\(\\*t\
ype\", id] represents a resource identified by id in the external identifier \
system \"\\!\\(\\*type\". ExternalIdentifier[\"\\!\\(\\*type\", id, meta] \
includes the metadata given by the association meta to this instance of the \
external identifier object."}, {"ExternalObject", "ExternalObject[\[Ellipsis]\
] represents an external object inside an ExternalSessionObject."}, 
 {"ExternalOptions", "ExternalOptions is an option for EmbedCode and related \
functions that gives options specific to the external environment or language \
used."}, {"ExternalSessionObject", "ExternalSessionObject[\[Ellipsis]] \
represents an external session started by StartExternalSession for use with \
ExternalEvaluate."}, {"ExternalSessions", "ExternalSessions[] gives the list \
of currently active external evaluator sessions. ExternalSessions[sys] gives \
the list of sessions associated with the system sys."}, 
 {"ExternalStorageBase", "ExternalStorageBase is an option for various \
external storage functions that specifies which external storage service to \
use."}, {"ExternalStorageDownload", "ExternalStorageDownload[location] \
downloads content from the specified location. \
ExternalStorageDownload[location, dest] downloads content from the specified \
location to a local destination file or directory dest. \
ExternalStorageDownload[location->dest] downloads content from the specified \
locations to a local destination file or directory dest. \
ExternalStorageDownload[{location1, location2, \[Ellipsis]}, dest] downloads \
content from the specified locations to local destination dest. \
ExternalStorageDownload[{location1, location2, \[Ellipsis]}->dest] downloads \
content from the specified locations to local destination dest. \
ExternalStorageDownload[{location1->dest1, location2->dest2, \[Ellipsis]}] \
downloads content from the specified locations to local destinations."}, 
 {"ExternalStorageGet", "ExternalStorageGet[ExternalStorageObject[\[Ellipsis]\
]] reads in an expression stored at an external storage specified by the \
ExternalStorageObject. ExternalStorageGet[location] reads in an expression \
stored at location in an external storage specified by $ExternalStorageBase."}\
, {"ExternalStorageObject", "ExternalStorageObject[location] represents a \
file stored in an external location. ExternalStorageObject[assoc] represents \
a file stored in an external service specified by the components of the \
association assoc. ExternalStorageObject[location, assoc] represents a file \
stored in an external location with additional elements given by assoc."}, 
 {"ExternalStoragePut", "ExternalStoragePut[expr] writes expr to an external \
storage specified by $ExternalStorageBase. ExternalStoragePut[expr, path] \
writes expr to a specific path in an external storage specified by \
$ExternalStorageBase. ExternalStoragePut[expr, ExternalStorageObject[...]] \
writes expr to the service and path represented by an ExternalStorageObject."}\
, {"ExternalStorageUpload", "ExternalStorageUpload[file] uploads file to an \
external storage specified by $ExternalStorageBase. \
ExternalStorageUpload[file, dest] uploads file to a specific destination dest \
for external storage services that support it. \
ExternalStorageUpload[file->dest] uploads file to a specific destination dest \
for external storage services that support it. ExternalStorageUpload[{file1, \
file2, \[Ellipsis]}, dest] uploads a list of files to a specific destination \
dest for external storage services that support it. \
ExternalStorageUpload[{file1, file2, \[Ellipsis]}->dest] uploads a list of \
files to a specific destination dest for external storage services that \
support it. ExternalStorageUpload[{file1->dest1, file2->dest2, \[Ellipsis]}] \
uploads a list of files to specific destinations for external storage \
services that support it."}, {"ExternalTypeSignature", "ExternalTypeSignature \
is an option for EmbedCode that gives rules specifying the mapping to \
external types in an embedded code."}, {"ExternalValue", "ExternalValue[sys, \
\"\\!\\(\\*sym\"] gives the value of \"\\!\\(\\*sym\" in external evaluator \
sys. ExternalValue[session, \"\\!\\(\\*sym\"] gives the value of \
\"\\!\\(\\*sym\" in the specified external session."}, 
 {"Extract", "Extract[expr, pos] extracts the part of expr at the position \
specified by pos. Extract[expr, {pos1, pos2, \[Ellipsis]}] extracts a list of \
parts of expr. Extract[expr, pos, h] extracts parts of expr, wrapping each of \
them with head h before evaluation. Extract[pos] represents an operator form \
of Extract that can be applied to an expression."}, 
 {"ExtractArchive", "ExtractArchive[source] expands an archive file, saving \
its content into the current directory. ExtractArchive[source, dir] saves the \
content of an archive file into directory dir. ExtractArchive[source, dir, \
pattern] extracts only files whose names match pattern."}, 
 {"ExtractLayer", "ExtractLayer[] represents a net layer that takes an array \
and a position specification as inputs and extracts the specified parts from \
the array."}, {"ExtractPacletArchive", "ExtractPacletArchive[file] extracts \
the contents of the paclet archive file into the directory in which file \
resides. ExtractPacletArchive[file, destdir] extracts the contents of the \
paclet archive file into destdir."}, {"ExtremeValueDistribution", "ExtremeVal\
ueDistribution[\[Alpha], \[Beta]] represents an extreme value distribution \
with location parameter \[Alpha] and scale parameter \[Beta]. \
ExtremeValueDistribution[] represents an extreme value distribution with \
location parameter 0 and scale parameter 1."}, 
 {"FARIMAProcess", "FARIMAProcess[{a1, \[Ellipsis], ap}, d, {b1, \[Ellipsis], \
bq}, v] represents an autoregressive fractionally integrated moving-average \
process y(t) such that its d^th difference is an ARMAProcess[{a1, \
\[Ellipsis], ap}, {b1, \[Ellipsis], bq, v]. FARIMAProcess[{a1, \[Ellipsis], \
ap}, d, {b1, \[Ellipsis], bq}, \[CapitalSigma]] represents a vector \
autoregressive fractionally integrated moving-average process (y1(t), \
\[Ellipsis], yn(t)) such that its (d, \[Ellipsis], d)^th difference is a \
vector ARMAProcess. FARIMAProcess[{a1, \[Ellipsis], ap}, {d1, \[Ellipsis], \
dn}, {b1, \[Ellipsis], bq}, \[CapitalSigma]] represents a vector \
autoregressive fractionally integrated moving-average process (y1(t), \
\[Ellipsis], yn(t)) such that its (d1, \[Ellipsis], dn)^th difference is a \
vector ARMAProcess."}, {"FRatioDistribution", "FRatioDistribution[n, m] \
represents an F-ratio distribution with n numerator and m denominator degrees \
of freedom."}, {"FaceAlign", "FaceAlign[image] attempts to find faces in \
image and align them. FaceAlign[image, fref] gives aligned faces according to \
the face reference fref. FaceAlign[image, fref, size] gives aligned faces of \
the specified size. FaceAlign[{image1, image2, \[Ellipsis]}, \[Ellipsis]] \
gives a list of aligned faces for all imagei."}, 
 {"FaceForm", "FaceForm[g] is a graphics directive which specifies that faces \
of polygons and other filled graphics objects are to be drawn using the \
graphics directive or list of directives g. FaceForm[g, gback] specifies that \
the front faces of three-dimensional polygons should be drawn with directives \
g, and the backs with directives gback."}, {"FaceGrids", "FaceGrids is an \
option for three-dimensional graphics functions that specifies grid lines to \
draw on the faces of the bounding box."}, {"FaceGridsStyle", "FaceGridsStyle \
is an option for 3D graphics functions that specifies how face grids should \
be rendered."}, {"FaceRecognize", "FaceRecognize[{example1->name1, \
example2->name2, \[Ellipsis]}] generates a ClassifierFunction[\[Ellipsis]] \
based on the face examples and names given. FaceRecognize[{example1, \
example2, \[Ellipsis]}->{name1, name2, \[Ellipsis]}] also generates a \
ClassifierFunction[\[Ellipsis]] based on the examples and names given. \
FaceRecognize[\[LeftAssociation]name1->{example11, \[Ellipsis]}, \
name2->{example21, \[Ellipsis]}, \[Ellipsis]\[RightAssociation]] uses an \
association of names with their examples. FaceRecognize[training, image] \
attempts to find faces present in an image and classify them with the given \
training set. FaceRecognize[training, image, prop] returns the specified \
property prop."}, {"FacialFeatures", "FacialFeatures[image] returns a minimal \
summary of facial features for all detected faces in image. \
FacialFeatures[image, features] returns the specified facial features."}, 
 {"Factor", "Factor[poly] factors a polynomial over the integers. \
Factor[poly, Modulus->p] factors a polynomial modulo a prime p. Factor[poly, \
Extension->{a1, a2, \[Ellipsis]}] factors a polynomial allowing coefficients \
that are rational combinations of the algebraic numbers ai."}, 
 {"FactorInteger", "FactorInteger[n] gives a list of the prime factors of the \
integer n, together with their exponents. FactorInteger[n, k] does partial \
factorization, pulling out at most k distinct factors."}, 
 {"FactorList", "FactorList[poly] gives a list of the factors of a \
polynomial, together with their exponents."}, 
 {"FactorSquareFree", 
  "FactorSquareFree[poly] pulls out any multiple factors in a polynomial."}, 
 {"FactorSquareFreeList", "FactorSquareFreeList[poly] gives a list of \
square-free factors of a polynomial, together with their exponents."}, 
 {"FactorTerms", "FactorTerms[poly] pulls out any overall numerical factor in \
poly. FactorTerms[poly, x] pulls out any overall factor in poly that does not \
depend on x. FactorTerms[poly, {x1, x2, \[Ellipsis]}] pulls out any overall \
factor in poly that does not depend on any of the xi."}, 
 {"FactorTermsList", "FactorTermsList[poly] gives a list in which the first \
element is the overall numerical factor in poly, and the second element is \
the polynomial with the overall factor removed. FactorTermsList[poly, {x1, \
x2, \[Ellipsis]}] gives a list of factors of poly. The first element in the \
list is the overall numerical factor. The second element is a factor that \
does not depend on any of the xi. Subsequent elements are factors which \
depend on progressively more of the xi."}, 
 {"Factorial", "n! gives the factorial of n."}, 
 {"Factorial2", "n!! gives the double factorial of n."}, 
 {"FactorialMoment", "FactorialMoment[list, r] gives the r^th moment of the \
elements in the list. FactorialMoment[dist, r] gives the r^th moment of the \
distribution dist. FactorialMoment[r] represents the r^th factorial moment."}\
, {"FactorialMomentGeneratingFunction", "FactorialMomentGeneratingFunction[di\
st, t] gives the factorial moment-generating function for the distribution \
dist as a function of the variable t. FactorialMomentGeneratingFunction[dist, \
{t1, t2, \[Ellipsis]}] gives the factorial moment-generating function for the \
multivariate distribution dist as a function of the variables t1, t2, \
\[Ellipsis]."}, {"FactorialPower", "FactorialPower[x, n] gives the factorial \
power x^(n). FactorialPower[x, n, h] gives the step-h factorial power x^(n, \
h)."}, {"Failure", "Failure[\"\\!\\(\\*tag\", assoc] represents a failure of \
a type indicated by tag, with details given by the association assoc."}, 
 {"FailureAction", "FailureAction is an option to Query and related functions \
that determines what should happen when a failure or message is generated."}, 
 {"FailureDistribution", "FailureDistribution[bexpr, {{x1, dist1}, {x2, \
dist2}, \[Ellipsis]}] represents the failure distribution for a system with \
events xi having reliability distribution disti where the top event occurs \
when the Boolean expression bexpr is True and event xi has occurred when xi \
is True."}, {"FailureQ", "FailureQ[expr] gives True if expr has head Failure \
or is equal to $Failed or $Aborted."}, 
 {"False", "False is the symbol for the Boolean value false."}, 
 {"FareySequence", "FareySequence[n] generates the Farey sequence of order n. \
FareySequence[n, k] gives the k^th element of the Farey sequence of order n."}\
, {"FeatureDistance", "FeatureDistance[example1, example2, extractor] gives \
the distance between example1 and example2 in the feature space defined by \
extractor. FeatureDistance[extractor] represents an operator form of \
FeatureDistance that can be applied to a pair of examples."}, 
 {"FeatureExtract", "FeatureExtract[{example1, example2, \[Ellipsis]}] \
extracts features for each of the examplei using a feature extractor trained \
on all the examplei. FeatureExtract[examples, extractor] extracts features \
using the specified feature extractor method. FeatureExtract[examples, \
{extractor1, extractor2, \[Ellipsis]}] extracts features by applying the \
extractori in sequence. FeatureExtract[examples, spec->ext] uses the \
extractor methods specified by ext on parts of examples specified by spec. \
FeatureExtract[examples, {spec1->ext1, spec2->ext2, \[Ellipsis]}] uses the \
extractor methods exti on parts of examples specified by the speci."}, 
 {"FeatureExtraction", "FeatureExtraction[{example1, example2, \[Ellipsis]}] \
generates a FeatureExtractorFunction[\[Ellipsis]] trained from the examples \
given. FeatureExtraction[examples, extractor] uses the specified feature \
extractor method. FeatureExtraction[examples, {extractor1, extractor2, \
\[Ellipsis]}] applies the extractori in sequence to generate a feature \
extractor. FeatureExtraction[examples, spec->ext] uses the extractor methods \
specified by ext on parts of examples specified by spec. \
FeatureExtraction[examples, {spec1->ext1, spec2->ext2, \[Ellipsis]}] uses the \
extractor methods exti on parts of examples specified by the speci. \
FeatureExtraction[examples, extractor, props] gives the feature extraction \
properties specified by props."}, {"FeatureExtractor", "FeatureExtractor is \
an option for functions such as Classify that specifies how features should \
be extracted."}, {"FeatureExtractorFunction", "FeatureExtractorFunction[\
\[Ellipsis]] represents a feature extractor function generated by \
FeatureExtraction."}, {"FeatureNames", "FeatureNames is an option for machine \
learning functions such as Classify or Predict that specifies names to use \
for elements of input data given."}, {"FeatureNearest", "FeatureNearest[{elem\
1, elem2, \[Ellipsis]}, x] gives the list of elemi to which x is nearest in a \
computed feature space. FeatureNearest[{elem1->v1, elem2->v2, \[Ellipsis]}, \
x] gives the vi corresponding to the elemi to which x is nearest. \
FeatureNearest[{elem1, elem2, \[Ellipsis]}->{v1, v2, \[Ellipsis]}, x] gives \
the same result. FeatureNearest[{elem1, elem2, \[Ellipsis]}->prop, x] gives \
the property prop for the elemi to which x is nearest. FeatureNearest[data, \
{x1, x2, \[Ellipsis]}] effectively gives {FeatureNearest[data, x1], \
FeatureNearest[data, x2], \[Ellipsis]}. FeatureNearest[data, x, n] gives the \
n nearest elemi to x. FeatureNearest[data] generates a \
NearestFunction[\[Ellipsis]] that can be applied repeatedly to different x."}\
, {"FeatureSpacePlot", "FeatureSpacePlot[{example1, example2, \[Ellipsis]}] \
plots features extracted from the examplei as a scatter plot."}, 
 {"FeatureSpacePlot3D", "FeatureSpacePlot3D[{example1, example2, \
\[Ellipsis]}] plots features extracted from the examplei as a scatter 3D \
plot."}, {"FeatureTypes", "FeatureTypes is an option for machine learning \
functions such as Classify or Predict that specifies what feature types to \
assume for elements of input data given."}, {"FeedbackLinearize", "FeedbackLi\
nearize[asys] input-output linearizes the AffineStateSpaceModel asys by state \
transformation and feedback. FeedbackLinearize[asys, {z, v}] specifies the \
new states z and the new control inputs v. FeedbackLinearize[asys, {z, v}, \
\"\\!\\(\\*prop\"] computes the property \"\\!\\(\\*prop\"."}, 
 {"FeedbackSector", "FeedbackSector is an option to NyquistPlot that \
specifies the sector limits of the nonlinearity in the feedback."}, 
 {"FeedbackSectorStyle", "FeedbackSectorStyle is an option to NyquistPlot \
that specifies the style in which graphics of FeedbackSector should be \
drawn."}, {"FeedbackType", "FeedbackType is an option for some control system \
functions that specifies the feedback type."}, 
 {"FetalGrowthData", "FetalGrowthData[age] returns the values for all \
properties of fetal development for the specified age of the fetus. \
FetalGrowthData[age, property] returns the value for a property of fetal \
development for the specified age. FetalGrowthData[age, index] returns the \
values for all properties of fetal development at the specified age and \
percentile. FetalGrowthData[age, property, index] returns the value for a \
property at the specified age and percentile."}, 
 {"Fibonacci", "Fibonacci[n] gives the Fibonacci number Fn. Fibonacci[n, x] \
gives the Fibonacci polynomial Fn(x)."}, 
 {"Fibonorial", "Fibonorial[n] gives the fibonorial n!F."}, 
 {"FieldCompletionFunction", "FieldCompletionFunction is an option for \
InputField that specifies a function to apply to the input field's contents \
to generate a list of completions."}, {"FieldHint", "FieldHint is an option \
for InputField that specifies contents to display when the input field is \
empty."}, {"FieldHintStyle", "FieldHintStyle is an option for InputField that \
specifies the style to use for displaying the field hint."}, 
 {"FieldMasked", "FieldMasked is an option to InputField that determines \
whether to mask user input."}, {"FieldSize", "FieldSize is an option for \
InputField, PopupMenu, and related functions that specifies the size of the \
field allowed for input or contents."}, {"File", "File[\"\\!\\(\\*path\"] is \
a symbolic representation of a location in the local file system."}, 
 {"FileBaseName", "FileBaseName[\"\\!\\(\\*file\"] gives the base name for a \
file without its extension."}, {"FileByteCount", 
  "FileByteCount[file] gives the number of bytes in a file."}, 
 {"FileConvert", "FileConvert[source->\"\\!\\(\\*dest.\\!\\(\\*ext\"] \
converts the contents of source to the format defined by the extension ext \
and writes the result to the file dest.ext. FileConvert[source, \
\"\\!\\(\\*format\"] writes the result to the filename defined by source, but \
with an extension defined by the specified format. \
FileConvert[source->\"\\!\\(\\*dest.\\!\\(\\*ext\", \
\"\\!\\(\\*format_1\"->\"\\!\\(\\*format_2\"] takes the contents of source to \
be in the specified format \"\\!\\(\\*format_1\"."}, 
 {"FileDate", "FileDate[\"\\!\\(\\*file\"] gives the date and time at which a \
file was last modified. FileDate[\"\\!\\(\\*file\", \"\\!\\(\\*type\"] gives \
information on the specified type of date associated with a file."}, 
 {"FileExistsQ", "FileExistsQ[\"\\!\\(\\*name\"] gives True if the file with \
the specified name exists, and gives False otherwise."}, 
 {"FileExtension", 
  "FileExtension[\"\\!\\(\\*file\"] gives the file extension for a file \
name."}, {"FileFormat", "FileFormat[source] attempts to determine what Import \
format could be used to import the file corresponding to source. \
FileFormat[source, {\"\\!\\(\\*fmt_1\", \"\\!\\(\\*fmt_2\", \[Ellipsis]}] \
returns the first \"\\!\\(\\*fmt_i\" that can be used to import source."}, 
 {"FileFormatQ", "FileFormatQ[source, \"\\!\\(\\*fmt\"] gives True if the \
file corresponding to source might be imported as format \"\\!\\(\\*fmt\" and \
gives False otherwise. FileFormatQ[source, {\"\\!\\(\\*fmt_1\", \
\"\\!\\(\\*fmt_2\", \[Ellipsis]}] gives True if source might be imported as \
one of \"\\!\\(\\*fmt_i\"."}, {"FileHash", "FileHash[file] gives an integer \
hash code for the contents of the specified file. FileHash[file, \
\"\\!\\(\\*type\"] gives an integer hash of the specified type. \
FileHash[file, \"\\!\\(\\*type\", \"\\!\\(\\*format\"] gives a hash code in \
the specified format. FileHash[{file, range}, \[Ellipsis]] gives the hash \
code for the specified range of bytes. FileHash[{filespec1, filespec2, \
\[Ellipsis]}, \[Ellipsis]] gives the hash codes for a list of files."}, 
 {"FileNameDepth", "FileNameDepth[\"\\!\\(\\*name\"] gives the number of path \
elements in the file name \"\\!\\(\\*file\"."}, 
 {"FileNameDrop", "FileNameDrop[\"\\!\\(\\*name\", n] drops the first n path \
elements in the file name \"\\!\\(\\*name\". FileNameDrop[\"\\!\\(\\*name\", \
- n] drops the last n path elements in the file name \"\\!\\(\\*name\". \
FileNameDrop[\"\\!\\(\\*name\", {m, n}] drops elements m through n in the \
file name \"\\!\\(\\*name\". FileNameDrop[\"\\!\\(\\*name\"] drops the last \
path element in the file name \"\\!\\(\\*name\"."}, 
 {"FileNameForms", "FileNameForms is an option that specifies the pattern for \
file names to be selected by a function."}, {"FileNameJoin", "FileNameJoin[{\
\"\\!\\(\\*name_1\", \"\\!\\(\\*name_2\", \[Ellipsis]}] joins the namei \
together into a file name suitable for your current operating system. \
FileNameJoin[{CloudObject[\[Ellipsis]], \"\\!\\(\\*name_2\", \[Ellipsis]}] \
joins the namei to the path in the specified cloud object. \
FileNameJoin[{LocalObject[\[Ellipsis]], \"\\!\\(\\*name_2\", \[Ellipsis]}] \
joins the namei to the path in the specified local object."}, 
 {"FileNameSetter", "FileNameSetter[name] represents a file name setter which \
displays as a Browse button and when clicked brings up a system file opening \
dialog, starting from the location corresponding to name. \
FileNameSetter[Dynamic[name]] uses the dynamically updated current value of \
name, with the value of name being reset if a different file is chosen. \
FileNameSetter[name, \"Save\"] brings up a file saving dialog. \
FileNameSetter[name, \"\\!\\(\\*spec\", \
{\"\\!\\(\\*type_1\"->{\"\\!\\(\\*patt_11\", \"\\!\\(\\*patt_12\", \
\[Ellipsis]}, \"\\!\\(\\*type_2\"->{\[Ellipsis]}, \[Ellipsis]}] looks for \
files of types typei with names matching the file patterns pattij."}, 
 {"FileNameSplit", 
  "FileNameSplit[\"\\!\\(\\*name\"] splits a file name into a list of parts."}\
, {"FileNameTake", "FileNameTake[\"\\!\\(\\*name\"] gives the last path \
element in the file name \"\\!\\(\\*name\". FileNameTake[\"\\!\\(\\*name\", \
n] gives the first n path elements in the file name \"\\!\\(\\*name\". \
FileNameTake[\"\\!\\(\\*name\", - n] gives the last n path elements in the \
file name \"\\!\\(\\*name\". FileNameTake[\"\\!\\(\\*name\", {m, n}] gives \
elements m through n in the file name \"\\!\\(\\*name\"."}, 
 {"FileNames", "FileNames[] lists all files in the current working directory. \
FileNames[form] lists all files in the current working directory whose names \
match the string pattern form. FileNames[{form1, form2, \[Ellipsis]}] lists \
all files whose names match any of the formi. FileNames[All, dir] lists all \
files in the directory dir. FileNames[forms, {dir1, dir2, \[Ellipsis]}] lists \
files with names matching forms in any of the directories diri. \
FileNames[forms, dirs, n] includes files that are in subdirectories up to n \
levels down."}, {"FilePrint", "FilePrint[\"\\!\\(\\*file\"] prints out the \
raw textual contents of file. FilePrint[\"\\!\\(\\*file\", n] prints out the \
first n raw textual lines of file. FilePrint[\"\\!\\(\\*file\", - n] prints \
out the last n raw textual lines of file. FilePrint[\"\\!\\(\\*file\", m;;n] \
prints out lines m through n of file. FilePrint[\"\\!\\(\\*file\", m;;n;;s] \
prints out lines m through n of file in steps of s."}, 
 {"FileSize", "FileSize[file] gives the size of a file as a quantity."}, 
 {"FileSystemMap", "FileSystemMap[f, root] gives an association whose keys \
are the names of files in root, and whose values are the results of applying \
f to the full names of these files. FileSystemMap[f, root, n] gives a nested \
association in which subdirectories down to level n are represented by an \
association. FileSystemMap[f, root, {m, n}] gives a nested association \
including files in subdirectories from level m down through n. \
FileSystemMap[f, root, lev, r] combines levels to give a nested output \
association with r levels."}, {"FileSystemScan", "FileSystemScan[f, root] \
evaluates f on all files contained in root. FileSystemScan[f, root, n] \
restricts the operation to directories at level n."}, 
 {"FileTemplate", "FileTemplate[\"\\!\\(\\*file\"] yields a TemplateObject \
expression that represents a file template to be applied using functions like \
TemplateApply. FileTemplate[src] uses File[\[Ellipsis]], URL[\[Ellipsis]], or \
CloudObject[\[Ellipsis]] as the specification for the file location. \
FileTemplate[form, args] yields a TemplateObject with arguments, suitable for \
cloud deployment or other evaluation."}, {"FileTemplateApply", "FileTemplateA\
pply[template] applies a template, evaluating all template elements it \
contains, and then writes the result to a temporary file, whose name is \
returned. FileTemplateApply[template, args] applies a template, using args to \
fill its slots, and then writes the result to a temporary file. \
FileTemplateApply[template, output] applies a template, writing the results \
to the file represented by output. FileTemplateApply[template, args, output] \
applies a template, using args to fill its slots, and then writes the result \
to the file represented by output."}, {"FileType", "FileType[\"\\!\\(\\*file\
\"] gives the type of a file, typically File, Directory, or None."}, 
 {"FilledCurve", "FilledCurve[{segment1, segment2, \[Ellipsis]}] represents a \
filled curve consisting of segment1 followed by segment2 etc. \
FilledCurve[{component1, component2, \[Ellipsis]}] represents a list of \
separate filled component curves component1, component2, etc."}, 
 {"Filling", "Filling is an option for ListPlot, Plot, Plot3D, and related \
functions that specifies what filling to add under points, curves, and \
surfaces."}, {"FillingStyle", "FillingStyle is an option for ListPlot, Plot, \
Plot3D, and related functions that specifies the default style of filling to \
be used."}, {"FillingTransform", "FillingTransform[image] gives a version of \
image with all extended minima filled. FillingTransform[image, marker] fills \
extended minima in regions where at least one corresponding element of marker \
is nonzero. FillingTransform[image, h] fills only extended minima of depth h \
or less."}, {"FilterRules", "FilterRules[rules, patt] filters the list rules \
by picking out only those rules whose left-hand sides match patt. \
FilterRules[rules, {patt1, patt2, \[Ellipsis]}] picks out rules whose \
left-hand sides match any of the patti."}, {"FilteredEntityClass", "FilteredE\
ntityClass[class, f] represents a class of entities where only entities for \
which the EntityFunction object f yields True are kept. \
FilteredEntityClass[class, prop] represents a class of entities where only \
entities for which the property prop is True are kept."}, 
 {"FinancialBond", "FinancialBond[params, ambientparams] gives the value of a \
financial bond instrument. FinancialBond[params, ambientparams, prop] \
computes the specified property prop."}, {"FinancialData", "FinancialData[\"\
\\!\\(\\*name\"] gives the last known price or value for the financial entity \
specified by \"\\!\\(\\*name\". FinancialData[\"\\!\\(\\*name\", start] gives \
a list of dates and daily closing values for \"\\!\\(\\*name\" from start \
until the current date. FinancialData[\"\\!\\(\\*name\", {start, end}] gives \
a list of dates and daily closing values for dates from start to end. \
FinancialData[\"\\!\\(\\*name\", {start, end, period}] gives a list of dates \
and prices for the specified periods lying between start and end. \
FinancialData[\"\\!\\(\\*name\", \"\\!\\(\\*prop\"] gives the value of the \
specified property for the financial entity \"\\!\\(\\*name\". \
FinancialData[\"\\!\\(\\*name\", \"\\!\\(\\*prop\", {start, end, \
\[Ellipsis]}] gives a list of dates and values of a property for a sequence \
of dates or periods."}, {"FinancialDerivative", "FinancialDerivative[instrume\
nt, params, ambientparams] gives the value of the specified financial \
instrument. FinancialDerivative[instrument, params, ambientparams, prop] \
computes the specified property prop."}, {"FinancialIndicator", "FinancialInd\
icator[\"\\!\\(\\*ind\", par1, par2, \[Ellipsis]] represents a financial \
indicator \"\\!\\(\\*ind\" with parameters par1, par2, etc."}, 
 {"Find", "Find[stream, \"\\!\\(\\*text\"] finds the first line in an input \
stream that contains the specified string. Find[stream, {\"\\!\\(\\*text_1\", \
\"\\!\\(\\*text_2\", \[Ellipsis]}] finds the first line that contains any of \
the specified strings."}, {"FindAnomalies", "FindAnomalies[{example1, \
example2, \[Ellipsis]}] gives a list of the examplei that are considered \
anomalous with respect to the other examples. FindAnomalies[examples, prop] \
gives the specified property related to the anomaly computation. \
FindAnomalies[examples, {prop1, prop2, \[Ellipsis]}] gives the properties \
propi. FindAnomalies[fun, data] finds anomalies in data using the given \
AnomalyDetectorFunction[\[Ellipsis]] or LearnedDistribution[\[Ellipsis]]. \
FindAnomalies[fun, data, props] gives properties related to the anomaly \
computation."}, {"FindArgMax", "FindArgMax[f, x] gives the position xmax of a \
local maximum of f. FindArgMax[f, {x, x0}] gives the position xmax of a local \
maximum of f, found by a search starting from the point x = x0. FindArgMax[f, \
{{x, x0}, {y, y0}, \[Ellipsis]}] gives the position {xmax, ymax, \[Ellipsis]} \
of a local maximum of a function of several variables. FindArgMax[{f, cons}, \
{{x, x0}, {y, y0}, \[Ellipsis]}] gives the position of a local maximum \
subject to the constraints cons. FindArgMax[{f, cons}, {x, y, \[Ellipsis]}] \
starts from a point within the region defined by the constraints."}, 
 {"FindArgMin", "FindArgMin[f, x] gives the position xmin of a local minimum \
of f. FindArgMin[f, {x, x0}] gives the position xmin of a local minimum of f, \
found by a search starting from the point x = x0. FindArgMin[f, {{x, x0}, {y, \
y0}, \[Ellipsis]}] gives the position {xmin, ymin, \[Ellipsis]} of a local \
minimum of a function of several variables. FindArgMin[{f, cons}, {{x, x0}, \
{y, y0}, \[Ellipsis]}] gives the position of a local minimum subject to the \
constraints cons. FindArgMin[{f, cons}, {x, y, \[Ellipsis]}] starts from a \
point within the region defined by the constraints."}, 
 {"FindChannels", "FindChannels[] gives a list of channels in your home area \
on the channel broker server. FindChannels[None] gives a list of your unnamed \
channels. FindChannels[All] gives a list of all channels owned by you. \
FindChannels[form] gives a list of channels in your home area whose names \
match the string pattern form. FindChannels[\"/\\!\\(\\*abspath\"] gives a \
list of channels whose names match the string pattern \"/\\!\\(\\*abspath\". \
FindChannels[\"\\!\\(\\*mqtts\",AutoSpacing->False]\\!\\(\\*StyleBox[\":\",Au\
toSpacing->False]\\!\\(\\*StyleBox[\"//\",AutoSpacing->False]\\!\\(\\*StyleBo\
x[\"\[Ellipsis]\"] gives a list of channels whose names match the specified \
pattern representing a URL."}, {"FindClique", "FindClique[g] finds a largest \
clique in the graph g. FindClique[g, n] finds a clique containing at most n \
vertices. FindClique[g, {n}] finds a clique containing exactly n vertices. \
FindClique[g, {nmin, nmax}] finds a clique containing between nmin and nmax \
vertices. FindClique[g, nspec, s] finds at most s cliques. FindClique[{g, v}, \
\[Ellipsis]] finds cliques that include the vertex v only. FindClique[{v->w, \
\[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify the graph g."}, 
 {"FindClusters", "FindClusters[{e1, e2, \[Ellipsis]}] partitions the ei into \
clusters of similar elements. FindClusters[{e1->v1, e2->v2, \[Ellipsis]}] \
returns the vi corresponding to the ei in each cluster. FindClusters[{e1, e2, \
\[Ellipsis]}->{v1, v2, \[Ellipsis]}] gives the same result. \
FindClusters[\[LeftAssociation]label1->e1, label2->e2, \
\[Ellipsis]\[RightAssociation]] returns the labeli corresponding to the ei in \
each cluster. FindClusters[data, n] partitions data into at most n clusters."}\
, {"FindCookies", "FindCookies[] gives a list of all currently set cookies. \
FindCookies[domain] gives a list of cookies associated with the specified \
domain. FindCookies[assoc] gives a list of cookies whose attributes match the \
specification in the association assoc."}, {"FindCurvePath", "FindCurvePath[{\
{x1, y1}, {x2, y2}, \[Ellipsis]}] gives an ordering of the {xi, yi} that \
corresponds to one or more smooth curves."}, {"FindCycle", "FindCycle[g] \
finds a cycle in the graph g. FindCycle[g, k] finds a cycle of length at most \
k in the graph g. FindCycle[g, {k}] finds a cycle of length exactly k. \
FindCycle[g, {kmin, kmax}] finds a cycle of length between kmin and kmax. \
FindCycle[g, kspec, s] finds at most s cycles. FindCycle[{g, v}, \[Ellipsis]] \
finds cycles that include the vertex v. FindCycle[{v->w, \[Ellipsis]}, \
\[Ellipsis]] uses rules v->w to specify the graph g."}, 
 {"FindDevices", "FindDevices[] searches for available devices on your \
computer system. FindDevices[form] gives a list of devices in classes whose \
names match the string pattern form. FindDevices[{form1, form2, \[Ellipsis]}] \
gives a list of devices in classes whose names match any of the formi. \
FindDevices[forms, n] returns at most n devices."}, 
 {"FindDistribution", "FindDistribution[data] finds a simple functional form \
to fit the distribution of data. FindDistribution[data, n] finds up to n best \
distributions. FindDistribution[data, n, prop] returns up to n best \
distributions associated with property prop. FindDistribution[data, n, \
{prop1, prop2, \[Ellipsis]}] returns up to n best distributions associated \
with properties prop1, prop2, etc."}, {"FindDistributionParameters", "FindDis\
tributionParameters[data, dist] finds the parameter estimates for the \
distribution dist from data. FindDistributionParameters[data, dist, {{p, p0}, \
{q, q0}, \[Ellipsis]}] finds the parameters p, q, \[Ellipsis] with starting \
values p0, q0, \[Ellipsis]."}, {"FindDivisions", "FindDivisions[{xmin, xmax}, \
n] finds a list of about n \"nice\" numbers that divide the interval around \
xmin to xmax into equally spaced parts. FindDivisions[{xmin, xmax, dx}, n] \
makes the parts always have lengths that are integer multiples of dx. \
FindDivisions[{xmin, xmax}, {n1, n2, \[Ellipsis]}] finds successive \
subdivisions into about n1, n2, \[Ellipsis] parts. FindDivisions[{xmin, xmax, \
{dx1, dx2, \[Ellipsis]}}, {n1, n2, \[Ellipsis]}] uses spacings that are \
forced to be multiples of dx1, dx2, \[Ellipsis]."}, 
 {"FindEdgeCover", "FindEdgeCover[g] finds an edge cover of the graph g with \
a minimum number of edges. FindEdgeCover[{v->w, \[Ellipsis]}] uses rules v->w \
to specify the graph g."}, {"FindEdgeCut", "FindEdgeCut[g] finds a smallest \
edge cut of the graph g. FindEdgeCut[g, s, t] finds a smallest s -t edge cut \
of the graph g. FindEdgeCut[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w \
to specify the graph g."}, {"FindEdgeIndependentPaths", "FindEdgeIndependentP\
aths[g, s, t, k] finds at most k edge-independent paths from vertex s to \
vertex t in the graph g. FindEdgeIndependentPaths[{v->w, \[Ellipsis]}, \
\[Ellipsis]] uses rules v->w to specify the graph g."}, 
 {"FindEquationalProof", "FindEquationalProof[thm, axms] tries to find an \
equational proof of the symbolic theorem thm using the axioms axms. \
FindEquationalProof[thm, \"\\!\\(\\*theory\"] tries to find a proof of thm \
using the specified named axiomatic theory."}, 
 {"FindEulerianCycle", "FindEulerianCycle[g] finds an Eulerian cycle in the \
graph g. FindEulerianCycle[g, k] finds at most k Eulerian cycles. \
FindEulerianCycle[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to \
specify the graph g."}, {"FindExternalEvaluators", "FindExternalEvaluators[] \
finds installed external evaluators that can be used with ExternalEvaluate, \
returning a dataset of the results found. \
FindExternalEvaluators[\"\\!\\(\\*sys\"] finds only external evaluators for \
language or system sys."}, {"FindFaces", "FindFaces[image] attempts to find \
human faces in image and returns a list of bounding boxes. FindFaces[image, \
prop] returns the specified property prop for each detected face. \
FindFaces[image, crit, prop] finds faces that satisfy the criterion crit."}, 
 {"FindFile", "FindFile[name] finds the file with the specified name that \
would be loaded by Get[name] and related functions."}, 
 {"FindFit", "FindFit[data, expr, pars, vars] finds numerical values of the \
parameters pars that make expr give a best fit to data as a function of vars. \
FindFit[data, {expr, cons}, pars, vars] finds a best fit subject to the \
parameter constraints cons."}, {"FindFormula", "FindFormula[data] finds a \
pure function that approximates data. FindFormula[data, x] finds a symbolic \
function of the variable x that approximates data. FindFormula[data, x, n] \
finds up to n functions that approximate data. FindFormula[data, x, n, prop] \
returns up to n best functions associated with property prop. \
FindFormula[data, x, n, {prop1, prop2, \[Ellipsis]}] returns up to n best \
functions associated with properties prop1, prop2, etc."}, 
 {"FindFundamentalCycles", 
  "FindFundamentalCycles[g] finds fundamental cycles of the graph g."}, 
 {"FindGeneratingFunction", "FindGeneratingFunction[{a0, a1, \[Ellipsis]}, x] \
attempts to find a simple generating function in x whose n^th series \
coefficient is an. FindGeneratingFunction[{{n0, a0}, {n1, a1}, \[Ellipsis]}, \
x] attempts to find a simple generating function whose ni^th series \
coefficient is ai."}, {"FindGeoLocation", "FindGeoLocation[] attempts to find \
the current geo location of your computer. FindGeoLocation[\"\\!\\(\\*ip\"] \
gives an estimate of the geo location associated with the IP address given. \
FindGeoLocation[\"\\!\\(\\*address\"] attempts to find the geo location \
associated with the street address given. FindGeoLocation[entity] gives the \
geo location associated with the specified entity."}, 
 {"FindGeometricConjectures", "FindGeometricConjectures[scene] finds \
conjectures that appear to hold for the GeometricScene object scene and adds \
these conjectures to the scene object. FindGeometricConjectures[{scene1, \
scene2, \[Ellipsis]}] finds conjectures that appear to hold for all instances \
scenei of a geometric scene and returns a combined scene with the conjectures \
added. FindGeometricConjectures[scenes, patt] adds only conjectures that \
match the pattern patt. FindGeometricConjectures[scenes, patt, n] adds only \
up to n conjectures."}, {"FindGeometricTransform", "FindGeometricTransform[pt\
s1, pts2] finds a geometric transformation that aligns positions specified by \
pts2 with pts1, returning the alignment error together with the \
transformation function. FindGeometricTransform[ref, {pts1, pts2, \
\[Ellipsis]}] finds geometric transformations that align each of the ptsi \
with ref. FindGeometricTransform[{pts1, pts2, \[Ellipsis]}] finds geometric \
transformations that align each of the ptsi with pts1."}, 
 {"FindGraphCommunities", "FindGraphCommunities[g] finds communities in the \
graph g. FindGraphCommunities[{v->w, \[Ellipsis]}] uses rules v->w to specify \
the graph g."}, {"FindGraphIsomorphism", "FindGraphIsomorphism[g1, g2] finds \
an isomorphism that maps the graph g1 to g2 by renaming vertices. \
FindGraphIsomorphism[g1, g2, n] finds at most n isomorphisms. \
FindGraphIsomorphism[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to \
specify the graph g."}, {"FindGraphPartition", "FindGraphPartition[g] gives a \
partition of vertices of the graph g. FindGraphPartition[g, k] gives a \
partition of vertices into k approximately equal-size parts. \
FindGraphPartition[g, {n1, \[Ellipsis], nk}] gives a partition of vertices \
into parts with sizes n1, \[Ellipsis], nk. FindGraphPartition[g, {\[Alpha]1, \
\[Ellipsis], \[Alpha]k}] gives a partition of vertices into parts with \
approximate size proportions \[Alpha]1, \[Ellipsis], \[Alpha]k. \
FindGraphPartition[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to \
specify the graph g."}, {"FindHamiltonianCycle", "FindHamiltonianCycle[g] \
finds a Hamiltonian cycle in the graph g. FindHamiltonianCycle[g, k] finds at \
most k Hamiltonian cycles. FindHamiltonianCycle[{v->w, \[Ellipsis]}, \
\[Ellipsis]] uses rules v->w to specify the graph g."}, 
 {"FindHamiltonianPath", "FindHamiltonianPath[g] finds a Hamiltonian path in \
the graph g with the smallest total length. FindHamiltonianPath[g, s, t] \
finds a Hamiltonian path with the smallest total length from s to t."}, 
 {"FindHiddenMarkovStates", "FindHiddenMarkovStates[data, hmm] finds the most \
likely hidden states of the HiddenMarkovProcess hmm corresponding to the \
emissions data. FindHiddenMarkovStates[data, hmm, crit] uses the given \
criterion crit to find the hidden states."}, {"FindImageText", "FindImageText\
[image] detects text in image and returns a single bounding box. \
FindImageText[image, level] returns a list of bounding boxes at the specified \
structural level. FindImageText[image, level, prop] returns prop for text at \
the given level."}, {"FindIndependentEdgeSet", "FindIndependentEdgeSet[g] \
finds an independent edge set of the graph g with a maximum number of edges. \
FindIndependentEdgeSet[{v->w, \[Ellipsis]}] uses rules v->w to specify the \
graph g."}, {"FindIndependentVertexSet", "FindIndependentVertexSet[g] finds \
an independent vertex set of the graph g with a maximum number of vertices. \
FindIndependentVertexSet[g, n] finds an independent vertex set with at most n \
vertices. FindIndependentVertexSet[g, {n}] finds an independent vertex set \
with exactly n vertices. FindIndependentVertexSet[g, {nmin, nmax}] finds an \
independent vertex set containing between nmin and nmax vertices. \
FindIndependentVertexSet[g, nspec, s] finds at most s independent vertex \
sets. FindIndependentVertexSet[{g, v}, \[Ellipsis]] finds independent sets \
that include the vertex v only. FindIndependentVertexSet[{v->w, \[Ellipsis]}, \
\[Ellipsis]] uses rules v->w to specify the graph g."}, 
 {"FindInstance", "FindInstance[expr, vars] finds an instance of vars that \
makes the statement expr be True. FindInstance[expr, vars, dom] finds an \
instance over the domain dom. Common choices of dom are Complexes, Reals, \
Integers, and Booleans. FindInstance[expr, vars, dom, n] finds n instances."}\
, {"FindIntegerNullVector", "FindIntegerNullVector[{x1, x2, \[Ellipsis], xn}] \
finds a list of integers ai such that a1 x1 + a2 x2 + \[CenterEllipsis] + an \
xn==0. FindIntegerNullVector[{x1, x2, \[Ellipsis], xn}, d] finds a list of \
integers ai with {a1, \[Ellipsis], an}<=d such that a1 x1 + a2 x2 + \
\[CenterEllipsis] + an xn==0."}, {"FindKClan", "FindKClan[g, k] finds a \
largest k -clan in the graph g. FindKClan[g, k, n] finds a k -clan containing \
at most n vertices. FindKClan[g, k, {n}] finds a k -clan containing exactly n \
vertices. FindKClan[g, k, {nmin, nmax}] finds a k -clan containing between \
nmin and nmax vertices. FindKClan[g, k, nspec, s] finds at most s k -clans. \
FindKClan[{g, v}, k, \[Ellipsis]] finds k -clans that include the vertex v \
only. FindKClan[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify \
the graph g."}, {"FindKClique", "FindKClique[g, k] finds a largest k -clique \
in the graph g. FindKClique[g, k, n] finds a k -clique containing at most n \
vertices. FindKClique[g, k, {n}] finds a k -clique containing exactly n \
vertices. FindKClique[g, k, {nmin, nmax}] finds a k -clique containing \
between nmin and nmax vertices. FindKClique[g, k, nspec, s] finds at most s k \
-cliques. FindKClique[{g, v}, k, \[Ellipsis]] finds k -cliques that include \
the vertex v only. FindKClique[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules \
v->w to specify the graph g."}, {"FindKClub", 
  "FindKClub[g, k] finds a largest k -club in the graph g."}, 
 {"FindKPlex", "FindKPlex[g, k] finds a largest k -plex in the graph g. \
FindKPlex[g, k, n] finds a k -plex containing at most n vertices. \
FindKPlex[g, k, {n}] finds a k -plex containing exactly n vertices. \
FindKPlex[g, k, {nmin, nmax}] finds a k -plex containing between nmin and \
nmax vertices. FindKPlex[g, k, nspec, s] finds at most s k -plexes. \
FindKPlex[{g, v}, k, \[Ellipsis]] finds k -plexes that include the vertex v \
only. FindKPlex[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify \
the graph g."}, {"FindLibrary", "FindLibrary[lib] finds a dynamic library \
that can be loaded by LibraryFunctionLoad."}, {"FindLinearRecurrence", "FindL\
inearRecurrence[list] finds if possible the minimal linear recurrence that \
generates list. FindLinearRecurrence[list, d] finds if possible the linear \
recurrence of maximum order d that generates list."}, 
 {"FindList", "FindList[\"\\!\\(\\*file\", \"\\!\\(\\*text\"] gives a list of \
lines in the file that contain the specified string. \
FindList[\"\\!\\(\\*file\", {\"\\!\\(\\*text_1\", \"\\!\\(\\*text_2\", \
\[Ellipsis]}] gives a list of all lines that contain any of the specified \
strings. FindList[{\"\\!\\(\\*file_1\", \[Ellipsis]}, \[Ellipsis]] gives a \
list of lines containing the specified strings in any of the filei. \
FindList[files, text, n] includes only the first n lines found."}, 
 {"FindMatchingColor", "FindMatchingColor[image, color] returns a color \
similar to the color that is present in image. FindMatchingColor[image, \
{color1, color2, \[Ellipsis]}] returns a list of colors matching each colori. \
FindMatchingColor[{image1, image2, \[Ellipsis]}, {color1, color2, \
\[Ellipsis]}] returns lists of matching colors for all imagei."}, 
 {"FindMaxValue", "FindMaxValue[f, x] gives the value at a local maximum of \
f. FindMaxValue[f, {x, x0}] gives the value at a local maximum of f, found by \
a search starting from the point x = x0. FindMaxValue[f, {{x, x0}, {y, y0}, \
\[Ellipsis]}] gives the value at a local maximum of a function of several \
variables. FindMaxValue[{f, cons}, {{x, x0}, {y, y0}, \[Ellipsis]}] gives the \
value at a local maximum subject to the constraints cons. FindMaxValue[{f, \
cons}, {x, y, \[Ellipsis]}] starts from a point within the region defined by \
the constraints."}, {"FindMaximum", "FindMaximum[f, x] searches for a local \
maximum in f, starting from an automatically selected point. FindMaximum[f, \
{x, x0}] searches for a local maximum in f, starting from the point x = x0. \
FindMaximum[f, {{x, x0}, {y, y0}, \[Ellipsis]}] searches for a local maximum \
in a function of several variables. FindMaximum[{f, cons}, {{x, x0}, {y, y0}, \
\[Ellipsis]}] searches for a local maximum subject to the constraints cons. \
FindMaximum[{f, cons}, {x, y, \[Ellipsis]}] starts from a point within the \
region defined by the constraints."}, {"FindMaximumCut", 
  "FindMaximumCut[g] gives the maximum cut of the graph g."}, 
 {"FindMaximumFlow", "FindMaximumFlow[g, s, t] finds the maximum flow between \
source vertex s and target vertex t in a graph g. FindMaximumFlow[m, s, t] \
finds the maximum flow between vertex indices s and t in a graph with edge \
capacity matrix m. FindMaximumFlow[data, {s1, \[Ellipsis]}, {t1, \
\[Ellipsis]}] finds the maximum flow between multi-sources s1, \[Ellipsis] \
and multi-targets t1, \[Ellipsis]. FindMaximumFlow[data, source, target, \
\"\\!\\(\\*property\"] returns the value of \"\\!\\(\\*property\". \
FindMaximumFlow[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify \
the graph g."}, {"FindMeshDefects", "FindMeshDefects[mreg] finds defects in \
the mesh region mreg. FindMeshDefects[mreg, {def1, \[Ellipsis]}] finds only \
the specified type of defects def1, \[Ellipsis]. FindMeshDefects[mreg, \
defects, format] formats the results according to format specification."}, 
 {"FindMinValue", "FindMinValue[f, x] gives the value at a local minimum of \
f. FindMinValue[f, {x, x0}] gives the value at a local minimum of f, found by \
a search starting from the point x = x0. FindMinValue[f, {{x, x0}, {y, y0}, \
\[Ellipsis]}] gives the value at a local minimum of a function of several \
variables. FindMinValue[{f, cons}, {{x, x0}, {y, y0}, \[Ellipsis]}] gives the \
value at a local minimum subject to the constraints cons. FindMinValue[{f, \
cons}, {x, y, \[Ellipsis]}] starts from a point within the region defined by \
the constraints."}, {"FindMinimum", "FindMinimum[f, x] searches for a local \
minimum in f, starting from an automatically selected point. FindMinimum[f, \
{x, x0}] searches for a local minimum in f, starting from the point x = x0. \
FindMinimum[f, {{x, x0}, {y, y0}, \[Ellipsis]}] searches for a local minimum \
in a function of several variables. FindMinimum[{f, cons}, {{x, x0}, {y, y0}, \
\[Ellipsis]}] searches for a local minimum subject to the constraints cons. \
FindMinimum[{f, cons}, {x, y, \[Ellipsis]}] starts from a point within the \
region defined by the constraints."}, {"FindMinimumCostFlow", "FindMinimumCos\
tFlow[g, {sd1, sd2, \[Ellipsis]}] finds the minimum cost flow in the graph g \
with sd1, sd2, \[Ellipsis] vertex supplies or demands. FindMinimumCostFlow[g, \
s, t] finds the minimum cost maximum flow between source vertex s and target \
vertex t in a graph g. FindMinimumCostFlow[g, s, t, d] finds the minimum cost \
flow between source s and target t, with the required flow d. \
FindMinimumCostFlow[m, \[Ellipsis]] finds the minimum cost flow in a graph \
with cost matrix m. FindMinimumCostFlow[data, \[Ellipsis], \
\"\\!\\(\\*property\"] returns the value of \"\\!\\(\\*property\". \
FindMinimumCostFlow[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to \
specify the graph g."}, {"FindMinimumCut", "FindMinimumCut[g] gives the \
minimum cut of the graph g. FindMinimumCut[{v->w, \[Ellipsis]}] uses rules \
v->w to specify the graph g."}, {"FindMoleculeSubstructure", "FindMoleculeSub\
structure[mol, patt] finds a mapping between the atom indices in mol and an \
occurrence of patt in mol. FindMoleculeSubstructure[mol, patt, All] finds all \
occurrences of patt in mol and returns all mappings. \
FindMoleculeSubstructure[mol, patt, n] finds at most n mappings."}, 
 {"FindPath", "FindPath[g, s, t] finds a path between vertex s and vertex t \
in the graph g. FindPath[g, s, t,k] finds a path of length at most k between \
vertex s and vertex t in the graph g. FindPath[g, s, t, {k}] finds a path of \
length exactly k. FindPath[g, s, t, {kmin, kmax}] finds a path of length \
between kmin and kmax. FindPath[g, s, t, kspec, n] finds at most n paths. \
FindPath[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify the \
graph g."}, {"FindPeaks", "FindPeaks[list] gives positions and values of the \
detected peaks in list. FindPeaks[list, \[Sigma]] finds peaks that survive \
Gaussian blurring up to scale \[Sigma]. FindPeaks[list, \[Sigma], s] finds \
peaks with minimum sharpness s. FindPeaks[list, \[Sigma], s, t] finds only \
peaks with values greater than t. FindPeaks[list, \[Sigma], {s, \[Sigma]s}, \
{t, \[Sigma]t}] uses different scales for thresholding sharpness and value."}\
, {"FindPermutation", "FindPermutation[expr] gives a permutation that \
produces expr by permuting Sort[expr]. FindPermutation[expr1, expr2] gives a \
permutation that converts expr1 to expr2 for two expressions that differ only \
in the order of their arguments."}, {"FindPointProcessParameters", "FindPoint\
ProcessParameters[pdata, pproc] estimates the parameters of the point process \
pproc from point data pdata. FindPointProcessParameters[pdata, pproc, {{p, \
p0}, {q, q0}, \[Ellipsis]}] estimates the parameters p, q, \[Ellipsis] with \
starting values p0, q0, \[Ellipsis]."}, {"FindPostmanTour", "FindPostmanTour[\
g] finds a Chinese postman tour in the graph g of minimal length. \
FindPostmanTour[g, k] finds at most k Chinese postman tours. \
FindPostmanTour[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify \
the graph g."}, {"FindProcessParameters", "FindProcessParameters[data, proc] \
finds the parameter estimates for the process proc from data. \
FindProcessParameters[data, proc, {{p, p0}, {q, q0}, \[Ellipsis]}] finds the \
parameters p, q, \[Ellipsis] with starting values p0, q0, \[Ellipsis]."}, 
 {"FindRepeat", "FindRepeat[list] finds the minimal sublist or subarray that \
repeats to give list. FindRepeat[list, n] requires that the sublist be \
repeated at least n times in list. FindRepeat[list, {n1, n2, \[Ellipsis]}] \
requires ni to repeat at level i in list. FindRepeat[\"\\!\\(\\*string\"] \
finds the minimal substring that repeats to give string. \
FindRepeat[\"\\!\\(\\*string\", n] requires that the substring be repeated at \
least n times."}, {"FindRoot", "FindRoot[f, {x, x0}] searches for a numerical \
root of f, starting from the point x = x0. FindRoot[lhs == rhs, {x, x0}] \
searches for a numerical solution to the equation lhs == rhs. FindRoot[{f1, \
f2, \[Ellipsis]}, {{x, x0}, {y, y0}, \[Ellipsis]}] searches for a \
simultaneous numerical root of all the fi. FindRoot[{eqn1, eqn2, \
\[Ellipsis]}, {{x, x0}, {y, y0}, \[Ellipsis]}] searches for a numerical \
solution to the simultaneous equations eqni."}, 
 {"FindSequenceFunction", "FindSequenceFunction[{a1, a2, a3, \[Ellipsis]}] \
attempts to find a simple function that yields the sequence an when given \
successive integer arguments. FindSequenceFunction[{{n1, a1}, {n2, a2}, \
\[Ellipsis]}] attempts to find a simple function that yields ai when given \
argument ni. FindSequenceFunction[\[LeftAssociation]n1->a1, n2->a2, \
\[Ellipsis]\[RightAssociation]] gives a function that yields ai when given \
argument ni. FindSequenceFunction[{n1->a1, n2->a2, \[Ellipsis]}] gives a \
function that yields ai when given argument ni. FindSequenceFunction[list, n] \
gives the function applied to n."}, {"FindSettings", "FindSettings is a \
global option that specifies settings for the Find dialog box."}, 
 {"FindShortestPath", "FindShortestPath[g, s, t] finds the shortest path from \
source vertex s to target vertex t in the graph g. FindShortestPath[g, s, \
All] generates a ShortestPathFunction[\[Ellipsis]] that can be applied \
repeatedly to different t. FindShortestPath[g, All, t] generates a \
ShortestPathFunction[\[Ellipsis]] that can be applied repeatedly to different \
s. FindShortestPath[g, All, All] generates a \
ShortestPathFunction[\[Ellipsis]] that can be applied to different s and t. \
FindShortestPath[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify \
the graph g."}, {"FindShortestTour", "FindShortestTour[{v1, v2, \[Ellipsis]}] \
attempts to find an ordering of the vi that minimizes the total distance on a \
tour that visits all the vi once. FindShortestTour[graph] attempts to find an \
ordering of the vertices in graph that minimizes the total length when \
visiting each vertex once. FindShortestTour[{v1, v2, \[Ellipsis]}, j, k] \
finds an ordering of the vi that minimizes the total distance on a path from \
vj to vk. FindShortestTour[graph, s, t] finds an ordering of the vertices \
that minimizes the total length on a path from s to t. \
FindShortestTour[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify \
the graph g."}, {"FindSpanningTree", "FindSpanningTree[{v1, v2, \[Ellipsis], \
vn}] finds a spanning tree that minimizes the total distance between the vi. \
FindSpanningTree[g] finds a spanning tree of the graph g that minimizes the \
total distances between vertices. FindSpanningTree[{g, v}, \[Ellipsis]] finds \
a spanning tree of the connected component of g that includes the vertex v. \
FindSpanningTree[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify \
the graph g."}, {"FindSystemModelEquilibrium", "FindSystemModelEquilibrium[mo\
del] searches for an equilibrium to the model model. \
FindSystemModelEquilibrium[model, {{{x1, x10}, \[Ellipsis]}, {{u1, u10}, \
\[Ellipsis]}, {{y1, y10}, \[Ellipsis]}}] searches for an equilibrium, \
starting from the points xi = xi0, ui = ui0 and yi = yi0. \
FindSystemModelEquilibrium[model, {x1==v1, \[Ellipsis]}, \[Ellipsis]] \
searches for an equilibrium, with variable xi constrained to have the value \
vi etc."}, {"FindTextualAnswer", "FindTextualAnswer[text, \
\"\\!\\(\\*question\"] gives the substring of text that best appears to \
answer question. FindTextualAnswer[text, \"\\!\\(\\*question\", n] gives a \
list of up to n answers that appear most probable. FindTextualAnswer[text, \
\"\\!\\(\\*question\", n, prop] gives the specified property for each \
answer."}, {"FindThreshold", "FindThreshold[image] finds a global threshold \
value that partitions the intensity values in image into two intervals."}, 
 {"FindTransientRepeat", "FindTransientRepeat[list, n] returns a pair of \
lists {transient, repeat} where the elements of repeat occur successively at \
least n times after the elements of the transient part of list. \
FindTransientRepeat[string, n] returns a pair of strings {transient, \
repeat}."}, {"FindVertexCover", "FindVertexCover[g] finds a vertex cover of \
the graph g with a minimum number of vertices. FindVertexCover[{v->w, \
\[Ellipsis]}] uses rules v->w to specify the graph g."}, 
 {"FindVertexCut", "FindVertexCut[g] finds a smallest vertex cut of the graph \
g. FindVertexCut[g, s, t] finds a smallest s -t vertex cut of the graph g. \
FindVertexCut[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify \
the graph g."}, {"FindVertexIndependentPaths", "FindVertexIndependentPaths[g, \
s, t, k] finds at most k vertex-independent paths from vertex s to vertex t \
in the graph g. FindVertexIndependentPaths[{v->w, \[Ellipsis]}, \[Ellipsis]] \
uses rules v->w to specify the graph g."}, {"FinishDynamic", "FinishDynamic[] \
finishes updating and displaying all currently visible Dynamic objects."}, 
 {"FiniteAbelianGroupCount", "FiniteAbelianGroupCount[n] gives the number of \
finite Abelian groups of order n."}, {"FiniteGroupCount", 
  "FiniteGroupCount[n] gives the number of finite groups of order n."}, 
 {"FiniteGroupData", "FiniteGroupData[name, \"\\!\\(\\*property\"] gives the \
value of the specified property for the finite group specified by name. \
FiniteGroupData[\"\\!\\(\\*class\"] gives a list of finite groups in the \
specified class."}, {"First", "First[expr] gives the first element in expr. \
First[expr, def] gives the first element if it exists, or def otherwise."}, 
 {"FirstCase", "FirstCase[{e1, e2, \[Ellipsis]}, pattern] gives the first ei \
to match pattern, or Missing[\"NotFound\"] if none matching pattern is found. \
FirstCase[{e1, \[Ellipsis]}, pattern->rhs] gives the value of rhs \
corresponding to the first ei to match pattern. FirstCase[expr, pattern, \
default] gives default if no element matching pattern is found. \
FirstCase[expr, pattern, default, levelspec] finds only objects that appear \
on levels specified by levelspec. FirstCase[pattern] represents an operator \
form of FirstCase that can be applied to an expression."}, 
 {"FirstPassageTimeDistribution", "FirstPassageTimeDistribution[mproc, f] \
represents the distribution of times for the Markov process mproc to pass \
from the initial state to final states f for the first time."}, 
 {"FirstPosition", "FirstPosition[expr, pattern] gives the position of the \
first element in expr that matches pattern, or Missing[\"NotFound\"] if no \
such element is found. FirstPosition[expr, pattern, default] gives default if \
no element matching pattern is found. FirstPosition[expr, pattern, default, \
levelspec] finds only objects that appear on levels specified by levelspec. \
FirstPosition[pattern] represents an operator form of FirstPosition that can \
be applied to an expression."}, {"FischerGroupFi22", 
  "FischerGroupFi22[] represents the sporadic simple Fischer group Fi22."}, 
 {"FischerGroupFi23", 
  "FischerGroupFi23[] represents the sporadic simple Fischer group Fi23."}, 
 {"FischerGroupFi24Prime", "FischerGroupFi24Prime[] represents the sporadic \
simple Fischer group Fi24\[Prime]."}, {"FisherHypergeometricDistribution", "F\
isherHypergeometricDistribution[n, nsucc, ntot, w] represents a Fisher \
noncentral hypergeometric distribution."}, {"FisherRatioTest", "FisherRatioTe\
st[data] tests whether the variance of data is 1. FisherRatioTest[{data1, \
data2}] tests whether the variances of data1 and data2 are equal. \
FisherRatioTest[dspec, \[Sigma]02] tests a dispersion measure against \
\[Sigma]02. FisherRatioTest[dspec, \[Sigma]02, \"\\!\\(\\*property\"] returns \
the value of \"\\!\\(\\*property\"."}, {"FisherZDistribution", "FisherZDistri\
bution[n, m] represents a Fisher z distribution with n numerator and m \
denominator degrees of freedom."}, {"Fit", "Fit[data, {f1, \[Ellipsis], fn}, \
{x, y, \[Ellipsis]}] finds a fit a1 f1 + \[Ellipsis] + an fn to a list of \
data for functions f1, \[Ellipsis], fn of variables {x, y, \[Ellipsis]}. \
Fit[{m, v}] finds a fit vector a that minimizes ||m.a - v|| for a design \
matrix m. Fit[\[Ellipsis], \"\\!\\(\\*prop\"] specifies what fit property \
prop should be returned."}, {"FitRegularization", "FitRegularization is an \
option for Fit and FindFit that specifies a regularization for fitting a \
model."}, {"FittedModel", "FittedModel[\[Ellipsis]] represents the symbolic \
fitted model obtained from functions like LinearModelFit."}, 
 {"FixedOrder", "FixedOrder[p1, p2, \[Ellipsis]] is a grammar rules pattern \
object that represents a sequence of elements matching p1, p2, \[Ellipsis], \
in the fixed order given."}, {"FixedPoint", "FixedPoint[f, expr] starts with \
expr, then applies f repeatedly until the result no longer changes."}, 
 {"FixedPointList", "FixedPointList[f, expr] generates a list giving the \
results of applying f repeatedly, starting with expr, until the results no \
longer change."}, {"Flat", "Flat is an attribute that can be assigned to a \
symbol f to indicate that all expressions involving nested functions f should \
be flattened out. This property is accounted for in pattern matching."}, 
 {"FlatTopWindow", 
  "FlatTopWindow[x] represents an exact flat top window function of x."}, 
 {"Flatten", "Flatten[list] flattens out nested lists. Flatten[list, n] \
flattens to level n. Flatten[list, n, h] flattens subexpressions with head h. \
Flatten[list, {{s11, s12, \[Ellipsis]}, {s21, s22, \[Ellipsis]}, \
\[Ellipsis]}] flattens list by combining all levels sij to make each level i \
in the result."}, {"FlattenAt", "FlattenAt[list, n] flattens out a sublist \
that appears as the n^th element of list. If n is negative, the position is \
counted from the end. FlattenAt[expr, {i, j, \[Ellipsis]}] flattens out the \
part of expr at position {i, j, \[Ellipsis]}. FlattenAt[expr, {{i1, j1, \
\[Ellipsis]}, {i2, j2, \[Ellipsis]}, \[Ellipsis]}] flattens out parts of expr \
at several positions. FlattenAt[pos] represents an operator form of FlattenAt \
that can be applied to an expression."}, {"FlattenLayer", "FlattenLayer[] \
represents a net layer that flattens any input array into a vector. \
FlattenLayer[n] represents a net layer that flattens its input to level n."}, 
 {"FlipView", "FlipView[{expr1, expr2}] represents an object which flips \
between displaying expr1 and expr2 each time it is clicked. FlipView[{expr1, \
expr2, \[Ellipsis]}] cyclically flips through successive expri. \
FlipView[{expr1, expr2, \[Ellipsis]}, i] makes expri be the object currently \
displayed."}, {"Floor", "Floor[x] gives the greatest integer less than or \
equal to x. Floor[x, a] gives the greatest multiple of a less than or equal \
to x."}, {"FlowPolynomial", "FlowPolynomial[g, k] gives the flow polynomial \
of the graph g. FlowPolynomial[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules \
v->w to specify the graph g."}, {"Fold", "Fold[f, x, list] gives the last \
element of FoldList[f, x, list]. Fold[f, list] is equivalent to Fold[f, \
First[list], Rest[list]]. Fold[f] represents an operator form of Fold that \
can be applied to expressions."}, {"FoldList", "FoldList[f, x, {a, b, \
\[Ellipsis]}] gives {x, f[x, a], f[f[x, a], b], \[Ellipsis]}. FoldList[f, {a, \
b, c, \[Ellipsis]}] gives {a, f[a, b], f[f[a, b], c], \[Ellipsis]}. \
FoldList[f] represents an operator form of FoldList that can be applied to \
expressions."}, {"FoldPair", "FoldPair[f, y0, list] gives the last element of \
FoldPairList[f, y0, list]. FoldPair[f, y0, list, g] gives the last element of \
FoldPairList[f, y0, list, g]. FoldPair[f, {a0, a1, a2, \[Ellipsis]}] is \
equivalent to FoldPair[f, a0, {a1, a2, \[Ellipsis]}]."}, 
 {"FoldPairList", "FoldPairList[f, y0, {a1, a2, \[Ellipsis]}] gives the list \
of successive xi obtained by applying f to pairs of the form {yi - 1, ai}, \
where at each step f returns {xi, yi}. FoldPairList[f, y0, list, g] gives the \
list of successive values of g[{xi, yi}]. FoldPairList[f, {a0, a1, a2, \
\[Ellipsis]}] is equivalent to FoldPairList[f, a0, {a1, a2, \[Ellipsis]}]."}, 
 {"FoldWhile", "FoldWhile[f, x, {a1, a2, \[Ellipsis]}, test] returns the \
first expression f[\[Ellipsis] f[f[x, a1], a2]\[Ellipsis], ak] to which \
applying test does not yield True. FoldWhile[f, list, test] is equivalent to \
FoldWhile[f, First[list], Rest[list], test]. FoldWhile[f, x, {a1, a2, \
\[Ellipsis]}, test, m] supplies the most recent m results as arguments for \
test at each step. FoldWhile[f, x, {a1, a2, \[Ellipsis]}, test, All] supplies \
all results so far as arguments for test at each step. FoldWhile[f, x, {a1, \
a2, \[Ellipsis]}, test, m, n] returns the result after applying f an extra n \
times after test fails. FoldWhile[f, x, {a1, a2, \[Ellipsis]}, test, m, - n] \
returns the result found when f had been applied n fewer times. FoldWhile[f, \
test] represents an operator form of FoldWhile that can be applied to \
expressions."}, {"FoldWhileList", "FoldWhileList[f, x, {a1, a2, \[Ellipsis]}, \
test] returns {x, f[x, a1], f[f[x, a1], a2], \[Ellipsis]}, repeatedly \
applying f with subsequent values ai until applying test to the result does \
not yield True. FoldWhileList[f, list, test] is equivalent to \
FoldWhileList[f, First[list], Rest[list], test]. FoldWhileList[f, x, {a1, a2, \
\[Ellipsis]}, test, m] supplies the most recent m results as arguments for \
test at each step. FoldWhileList[f, x, {a1, a2, \[Ellipsis]}, test, All] \
supplies all results so far as arguments for test at each step. \
FoldWhileList[f, x, {a1, a2, \[Ellipsis]}, test, m, n] returns n additional \
results by applying f an extra n times after test fails. FoldWhileList[f, x, \
{a1, a2, \[Ellipsis]}, test, m, - n] returns n fewer results. \
FoldWhileList[f, test] represents an operator form of FoldWhileList that can \
be applied to expressions."}, {"FollowRedirects", "FollowRedirects is an \
option for URLRead and related functions that specifies whether to follow \
HTTP redirects when retrieving a URL."}, {"FontColor", "FontColor is an \
option for Style, Cell, and related constructs that specifies the default \
color in which to render text."}, {"FontFamily", "FontFamily is an option for \
Style and Cell that specifies the font family in which text should be \
rendered."}, {"FontSize", "FontSize is an option for Style and Cell that \
specifies the default size in printer's points of the font in which to render \
text."}, {"FontSlant", "FontSlant is an option for Style, Cell, and related \
constructs that specifies how slanted characters in text should be."}, 
 {"FontSubstitutions", "FontSubstitutions is a global option that gives a \
list of substitutions to try for font family names."}, 
 {"FontTracking", "FontTracking is an option for Style and Cell that \
specifies how condensed or expanded you want the font in which text is \
rendered to be."}, {"FontVariations", "FontVariations is an option for Style, \
Cell, and related constructs that specifies what font variations should be \
used."}, {"FontWeight", "FontWeight is an option for Style, Cell, and related \
constructs that specifies how heavy the characters in a font should be."}, 
 {"For", "For[start, test, incr, body] executes start, then repeatedly \
evaluates body and incr until test fails to give True."}, 
 {"ForAll", "ForAll[x, expr] represents the statement that expr is True for \
all values of x. ForAll[x, cond, expr] states that expr is True for all x \
satisfying the condition cond. ForAll[{x1, x2, \[Ellipsis]}, expr] states \
that expr is True for all values of all the xi."}, 
 {"ForceVersionInstall", "ForceVersionInstall is an option to PacletInstall \
and PacletInstallSubmit that specifies whether an older version of a paclet \
is allowed to be installed if a newer version is already installed."}, 
 {"FormBox", "FormBox[boxes, form] is a low-level box construct which \
displays as boxes but specifies that rules associated with form should be \
used to interpret boxes on input."}, {"FormBoxOptions", "FormBoxOptions is an \
option for cells that specifies settings for FormBox objects within the \
cell."}, {"FormControl", "FormControl[assoc, struct] represents an editable \
form in a notebook, with structure specified by struct and current values \
specified by assoc. FormControl[Dynamic[x], struct] represents a form in a \
notebook in which current values are given by the dynamically updated value \
of x."}, {"FormFunction", "FormFunction[formspec, func] represents an active \
form that, when submitted, applies func to the values obtained from the form \
specified by formspec. FormFunction[{\"\\!\\(\\*name_1\"->type1, \
\[Ellipsis]}, func] represents an active form with fields named namei \
interpreted as types typei. FormFunction[{{\"\\!\\(\\*name_1\", \
label1}->type1, \[Ellipsis]}, func] uses labeli as the label for the field \
named namei. FormFunction[{namespec1->type1->default1, \[Ellipsis]}, func] \
uses defaulti as the default for the field specified by namespeci. \
FormFunction[formspec, func, fmt] specifies that in the cloud, the result \
from applying func should be returned in format fmt. FormFunction[{formspec1, \
formspec2, \[Ellipsis]}, func, \[Ellipsis]] represents a multipage form, in \
which the successive formspeci can be functions that are applied to the \
values obtained so far."}, {"FormLayoutFunction", "FormLayoutFunction is an \
option for FormObject and FormFunction that can be used to specify how to lay \
out a form."}, {"FormObject", "FormObject[{\"\\!\\(\\*name_1\"->type1, \
\"\\!\\(\\*name_2\"->type2, \[Ellipsis]}] represents a form with fields \
having names namei that take data of type typei. \
FormObject[{{\"\\!\\(\\*name_1\", label1}->type1, \[Ellipsis]}] uses labeli \
as the label for the field named namei. \
FormObject[{\"\\!\\(\\*name_1\"->assoc1, \[Ellipsis], objj, \[Ellipsis]}] \
uses full specification associ for a field, and objj as part of the layout of \
the form."}, {"FormPage", "FormPage[formspec, func] represents an active page \
that takes input from a form and generates results on the same page by \
applying func to the values obtained from the form whose structure is defined \
by formspec. FormPage[{\"\\!\\(\\*name_1\"->type1, \[Ellipsis]}, func] \
represents an active form page with fields named namei interpreted as types \
typei. FormPage[{{\"\\!\\(\\*name_1\", label1}->type1, \[Ellipsis]}, func] \
uses labeli as the label for the field named namei. \
FormPage[{namespec1->type1->default1, \[Ellipsis]}, func] uses defaulti as \
the default for the field specified by namespeci. FormPage[formspec, func, \
form] lays out the page according to the layout specification form. \
FormPage[formspec, func, initform->resform] uses initform as the initial \
layout specification and resform as the layout specification for result \
pages."}, {"FormProtectionMethod", "FormProtectionMethod is an option for \
form generation functions that specifies what method to use for protecting \
the form against spam and other undesired submissions."}, 
 {"Format", "Format[expr] prints as the formatted form of expr. Assigning \
values to Format[expr] defines print forms for expressions. Format[expr, \
form] gives a format for the specified form of output."}, 
 {"FormatType", "FormatType is an option for output streams, graphics, and \
functions such as Text that specifies the default format type to use when \
outputting expressions."}, {"FormulaData", "FormulaData[name] gives the \
equations for the formula name. FormulaData[name, {var1->quantity1, \
var2->quantity2, \[Ellipsis]}] solves or simplifies equations using the \
specified values quantityi for the variables vari. FormulaData[name, \
\"\\!\\(\\*property\"] gives the value of the specified property for the \
formula name."}, {"FormulaLookup", "FormulaLookup[\"\\!\\(\\*query\"] gives a \
list of the full names of formulas whose names are consistent with \
\"\\!\\(\\*query\". FormulaLookup[\"\\!\\(\\*query\", n] returns at most n \
results."}, {"FortranForm", 
  "FortranForm[expr] prints as a Fortran language version of expr."}, 
 {"Forward", "Forward is a symbol that represents the forward direction for \
purposes of motion and animation."}, {"ForwardBackward", "ForwardBackward is \
a symbol that represents alternate forward and backward motion or animation."}\
, {"ForwardCloudCredentials", "ForwardCloudCredentials is an option for \
remote evaluation and submission functions that specifies whether Wolfram \
Cloud credentials from the local session should be copied into remote \
sessions."}, {"Fourier", "Fourier[list] finds the discrete Fourier transform \
of a list of complex numbers. Fourier[list, {p1, p2, \[Ellipsis]}] returns \
the specified positions of the discrete Fourier transform."}, 
 {"FourierCoefficient", "FourierCoefficient[expr, t, n] gives the n^th \
coefficient in the Fourier series expansion of expr. FourierCoefficient[expr, \
{t1, t2, \[Ellipsis]}, {n1, n2, \[Ellipsis]}] gives a multidimensional \
Fourier coefficient."}, {"FourierCosCoefficient", "FourierCosCoefficient[expr\
, t, n] gives the n^th coefficient in the Fourier cosine series expansion of \
expr. FourierCosCoefficient[expr, {t1, t2, \[Ellipsis]}, {n1, n2, \
\[Ellipsis]}] gives a multidimensional Fourier cosine coefficient."}, 
 {"FourierCosSeries", "FourierCosSeries[expr, t, n] gives the n^th -order \
Fourier cosine series expansion of expr in t. FourierCosSeries[expr, {t1, t2, \
\[Ellipsis]}, {n1, n2, \[Ellipsis]}] gives the multidimensional Fourier \
cosine series of expr."}, {"FourierCosTransform", "FourierCosTransform[expr, \
t, \[Omega]] gives the symbolic Fourier cosine transform of expr. \
FourierCosTransform[expr, {t1, t2, \[Ellipsis]}, {\[Omega]1, \[Omega]2, \
\[Ellipsis]}] gives the multidimensional Fourier cosine transform of expr."}, 
 {"FourierDCT", "FourierDCT[list] finds the Fourier discrete cosine transform \
of a list of real numbers. FourierDCT[list, m] finds the Fourier discrete \
cosine transform of type m."}, {"FourierDCTFilter", "FourierDCTFilter[image, \
t] reduces noise in image by locally thresholding the discrete cosine \
transforms of overlapping subimages, using the hard threshold t."}, 
 {"FourierDCTMatrix", "FourierDCTMatrix[n] returns an n \[Times]n discrete \
cosine transform matrix of type 2. FourierDCTMatrix[n, m] returns an n \
\[Times]n discrete cosine transform matrix of type m."}, 
 {"FourierDST", "FourierDST[list] finds the Fourier discrete sine transform \
of a list of real numbers. FourierDST[list, m] finds the Fourier discrete \
sine transform of type m."}, {"FourierDSTMatrix", "FourierDSTMatrix[n] \
returns an n \[Times]n discrete sine transform matrix of type 2. \
FourierDSTMatrix[n, m] returns an n \[Times]n discrete sine transform matrix \
of type m."}, {"FourierMatrix", 
  "FourierMatrix[n] returns an n \[Times]n Fourier matrix."}, 
 {"FourierParameters", "FourierParameters is an option to Fourier and related \
functions that specifies the conventions to use in computing Fourier \
transforms."}, {"FourierSequenceTransform", "FourierSequenceTransform[expr, \
n, \[Omega]] gives the Fourier sequence transform of expr. \
FourierSequenceTransform[expr, {n1, n2, \[Ellipsis]}, {\[Omega]1, \[Omega]2, \
\[Ellipsis]}] gives the multidimensional Fourier sequence transform."}, 
 {"FourierSeries", "FourierSeries[expr, t, n] gives the n^th -order Fourier \
series expansion of expr in t. FourierSeries[expr, {t1, t2, \[Ellipsis]}, \
{n1, n2, \[Ellipsis]}] gives the multidimensional Fourier series."}, 
 {"FourierSinCoefficient", "FourierSinCoefficient[expr, t, n] gives the n^th \
coefficient in the Fourier sine series expansion of expr. \
FourierSinCoefficient[expr, {t1, t2, \[Ellipsis]}, {n1, n2, \[Ellipsis]}] \
gives a multidimensional Fourier sine coefficient."}, 
 {"FourierSinSeries", "FourierSinSeries[expr, t, n] gives the n^th -order \
Fourier sine series expansion of expr in t. FourierSinSeries[expr, {t1, t2, \
\[Ellipsis]}, {n1, n2, \[Ellipsis]}] gives the multidimensional Fourier sine \
series of expr."}, {"FourierSinTransform", "FourierSinTransform[expr, t, \
\[Omega]] gives the symbolic Fourier sine transform of expr. \
FourierSinTransform[expr, {t1, t2, \[Ellipsis]}, {\[Omega]1, \[Omega]2, \
\[Ellipsis]}] gives the multidimensional Fourier sine transform of expr."}, 
 {"FourierTransform", "FourierTransform[expr, t, \[Omega]] gives the symbolic \
Fourier transform of expr. FourierTransform[expr, {t1, t2, \[Ellipsis]}, \
{\[Omega]1, \[Omega]2, \[Ellipsis]}] gives the multidimensional Fourier \
transform of expr."}, {"FourierTrigSeries", "FourierTrigSeries[expr, t, n] \
gives the n^th -order Fourier trigonometric series expansion of expr in t. \
FourierTrigSeries[expr, {t1, t2, \[Ellipsis]}, {n1, n2, \[Ellipsis]}] gives \
the multidimensional Fourier trigonometric series of expr."}, 
 {"FoxH", "FoxH[{{{a1, \[Alpha]1}, \[Ellipsis], {an, \[Alpha]n}}, {{an + 1, \
\[Alpha]n + 1}, \[Ellipsis], {ap, \[Alpha]p}}}, {{{b1, \[Beta]1}, \
\[Ellipsis], {bm, \[Beta]m}}, {{bm + 1, \[Beta]m + 1}, \[Ellipsis], {bq, \
\[Beta]q}}}, z] is the Fox H function Hpqmn(z|(a1, \[Alpha]1), \[Ellipsis], \
(ap, \[Alpha]p) (b1, \[Beta]1), \[Ellipsis], (bq, \[Beta]q) )."}, 
 {"FractionBox", "FractionBox[x, y] is a low-level formatting construct that \
represents x/y in notebook expressions."}, {"FractionBoxOptions", "FractionBo\
xOptions is an option that specifies settings for FractionBox objects."}, 
 {"FractionalBrownianMotionProcess", "FractionalBrownianMotionProcess[\[Mu], \
\[Sigma], h] represents fractional Brownian motion process with drift \[Mu], \
volatility \[Sigma], and Hurst index h. FractionalBrownianMotionProcess[h] \
represents fractional Brownian motion process with drift 0, volatility 1, and \
Hurst index h."}, {"FractionalGaussianNoiseProcess", "FractionalGaussianNoise\
Process[\[Mu], \[Sigma], h] represents a fractional Gaussian noise process \
with drift \[Mu], volatility \[Sigma], and Hurst index h. \
FractionalGaussianNoiseProcess[h] represents a fractional Gaussian noise \
process with drift 0, volatility 1, and Hurst index h."}, 
 {"FractionalPart", "FractionalPart[x] gives the fractional part of x."}, 
 {"Frame", "Frame is an option for Graphics, Grid, and other constructs that \
specifies whether to include a frame."}, {"FrameBox", "FrameBox[box] is a \
low-level box construct that represents box with a frame drawn around it."}, 
 {"FrameBoxOptions", "FrameBoxOptions is an option that specifies default \
settings for FrameBox objects."}, {"FrameFitting", "FrameFitting is an option \
for VideoJoin and others that specifies how to conform frames of different \
videos."}, {"FrameLabel", "FrameLabel is an option for Graphics, Manipulate, \
and related functions that specifies labels to be placed on the edges of a \
frame."}, {"FrameListVideo", "FrameListVideo[{image1, image2, \[Ellipsis]}] \
generates a video containing frames image1, image2, etc."}, 
 {"FrameMargins", "FrameMargins is an option for objects that can be \
displayed with frames which specifies the absolute margins in printer's \
points to leave inside the frame."}, 
 {"FrameRate", 
  "FrameRate is an option to specify the number of frames per second."}, 
 {"FrameStyle", "FrameStyle is an option for Graphics, Grid, and other \
constructs that specifies the style in which to draw frames."}, 
 {"FrameTicks", "FrameTicks is an option for 2D graphics functions that \
specifies tick marks for the edges of a frame."}, 
 {"FrameTicksStyle", "FrameTicksStyle is an option for 2D graphics functions \
that specifies how frame ticks should be rendered."}, 
 {"Framed", "Framed[expr] displays a framed version of expr."}, 
 {"FrechetDistribution", "FrechetDistribution[\[Alpha], \[Beta]] represents \
the Fr\[EAcute]chet distribution with shape parameter \[Alpha] and scale \
parameter \[Beta]. FrechetDistribution[\[Alpha], \[Beta], \[Mu]] represents \
the Fr\[EAcute]chet distribution with shape parameter \[Alpha], scale \
parameter \[Beta], and location parameter \[Mu]."}, 
 {"FreeQ", "FreeQ[expr, form] yields True if no subexpression in expr matches \
form, and yields False otherwise. FreeQ[expr, form, levelspec] tests only \
those parts of expr on levels specified by levelspec. FreeQ[form] represents \
an operator form of FreeQ that can be applied to an expression."}, 
 {"FrenetSerretSystem", "FrenetSerretSystem[{x1, \[Ellipsis], xn}, t] gives \
the generalized curvatures and Frenet-Serret basis for the parametric curve \
xi[t]. FrenetSerretSystem[{x1, \[Ellipsis], xn}, t, chart] interprets the xi \
as coordinates in the specified coordinate chart."}, 
 {"FrequencySamplingFilterKernel", "FrequencySamplingFilterKernel[{a1, \
\[Ellipsis], ak}] creates a finite impulse response (FIR) filter kernel using \
a frequency sampling method from amplitude values ai. \
FrequencySamplingFilterKernel[{a1, \[Ellipsis], ak}, m] creates an FIR filter \
kernel of type m."}, {"FresnelC", 
  "FresnelC[z] gives the Fresnel integral C(z)."}, 
 {"FresnelF", "FresnelF[z] gives the Fresnel auxiliary function F(z)."}, 
 {"FresnelG", "FresnelG[z] gives the Fresnel auxiliary function G(z)."}, 
 {"FresnelS", "FresnelS[z] gives the Fresnel integral S(z)."}, 
 {"Friday", "Friday is a day of the week."}, {"FrobeniusNumber", "FrobeniusNu\
mber[{a1, \[Ellipsis], an}] gives the Frobenius number of a1, \[Ellipsis], \
an."}, {"FrobeniusSolve", "FrobeniusSolve[{a1, \[Ellipsis], an}, b] gives a \
list of all solutions of the Frobenius equation a1x1 + \[Ellipsis] + anxn==b. \
FrobeniusSolve[{a1, \[Ellipsis], an}, b, m] gives at most m solutions."}, 
 {"FromAbsoluteTime", "FromAbsoluteTime[time] gives a date object \
corresponding to an absolute time specification as given by AbsoluteTime."}, 
 {"FromCharacterCode", "FromCharacterCode[n] gives a string consisting of the \
character with integer code n. FromCharacterCode[{n1, n2, \[Ellipsis]}] gives \
a string consisting of the sequence of characters with codes ni. \
FromCharacterCode[{{n11, n12, \[Ellipsis]}, {n21, \[Ellipsis]}, \[Ellipsis]}] \
gives a list of strings. FromCharacterCode[codes, \"\\!\\(\\*encoding\"] uses \
the specified character encoding."}, {"FromCoefficientRules", "FromCoefficien\
tRules[list, {x1, x2, \[Ellipsis]}] constructs a polynomial from a list of \
rules for exponent vectors and coefficients."}, 
 {"FromContinuedFraction", "FromContinuedFraction[list] reconstructs a number \
from the list of its continued fraction terms."}, 
 {"FromDMS", "FromDMS[{d, m, s}] converts from degrees, minutes, and seconds \
to decimal degrees. FromDMS[\"\\!\\(\\*dms\"] converts from a DMS string to \
decimal degrees. FromDMS[\"\\!\\(\\*latlon\"] converts from a \
latitude-longitude string to latitude and longitude in decimal degrees."}, 
 {"FromDateString", "FromDateString[\"\\!\\(\\*string\"] gives a date object \
corresponding to the date represented by \"\\!\\(\\*string\". \
FromDateString[\"\\!\\(\\*string\", {\"\\!\\(\\*e_1\", \"\\!\\(\\*e_2\", \
\[Ellipsis]}] gives the date object obtained by extracting elements \
\"\\!\\(\\*e_i\" from \"\\!\\(\\*string\". \
FromDateString[\"\\!\\(\\*string\", fmt] gives the date object obtained using \
the date format fmt."}, {"FromDigits", "FromDigits[list] constructs an \
integer from the list of its decimal digits. FromDigits[list, b] takes the \
digits to be given in base b. FromDigits[list, MixedRadix[blist]] uses the \
mixed radix with list of bases blist. FromDigits[\"\\!\\(\\*string\"] \
constructs an integer from a string of digits. \
FromDigits[\"\\!\\(\\*string\", \"Roman\"] constructs an integer from Roman \
numerals."}, {"FromEntity", "FromEntity[entity] returns a Wolfram Language \
object corresponding to an entity."}, {"FromJulianDate", "FromJulianDate[jd] \
gives a date object corresponding to the Julian date jd. \
FromJulianDate[\"\\!\\(\\*type\", jd] gives a date object corresponding to \
the specified Julian date variant."}, {"FromLetterNumber", "FromLetterNumber[\
n] gives the lowercase letter at position n in the English alphabet. \
FromLetterNumber[n, alpha] gives the letter at position n in the alphabet \
specified by alpha."}, {"FromPolarCoordinates", "FromPolarCoordinates[{r, \
\[Theta]}] gives the {x, y} Cartesian coordinates corresponding to the polar \
coordinates {r, \[Theta]}. FromPolarCoordinates[{r, \[Theta]1, \[Ellipsis], \
\[Theta]n - 2, \[Phi]}] gives the coordinates corresponding to the \
hyperspherical coordinates {r, \[Theta]1, \[Ellipsis], \[Theta]n - 2, \[Phi]} \
"}, {"FromRomanNumeral", "FromRomanNumeral[\"\\!\\(\\*string\"] gives the \
integer corresponding to the Roman numeral \"string\"."}, 
 {"FromSphericalCoordinates", "FromSphericalCoordinates[{r, \[Theta], \
\[Phi]}] gives the {x, y, z} Cartesian coordinates corresponding to the \
spherical coordinates {r, \[Theta], \[Phi]}."}, 
 {"FromUnixTime", "FromUnixTime[time] gives a date object corresponding to a \
UnixTime specification."}, {"Front", "Front is a symbol that represents the \
front of a graphic for purposes of placement and alignment."}, 
 {"FrontEndDynamicExpression", "FrontEndDynamicExpression is a global front \
end option that specifies an expression to be dynamically updated whenever \
the front end is running."}, {"FrontEndEventActions", "FrontEndEventActions \
is an option for the notebook front end that gives a list of actions to \
perform when specified user-interface events occur."}, 
 {"FrontEndExecute", "FrontEndExecute[expr] sends expr to be executed by the \
Wolfram System front end."}, {"FrontEndToken", "FrontEndToken[\"\\!\\(\\*cmd\
\"] is an object that represents a front end command token, typically \
corresponding to a front end menu item, to be executed by FrontEndExecute. \
FrontEndToken[nb, \"\\!\\(\\*cmd\"] represents a command that targets the \
specified notebook. FrontEndToken[nb, \"\\!\\(\\*cmd\", param] represents a \
command with a parameter."}, {"FrontEndTokenExecute", "FrontEndTokenExecute[\
\"\\!\\(\\*cmd\"] executes the specified front end command token, typically \
corresponding to a front end menu item."}, {"Full", "Full is a setting used \
for certain options, typically indicating that a full range of values should \
be included."}, {"FullDefinition", "FullDefinition[symbol] prints as the \
definitions given for symbol, and all symbols on which these depend."}, 
 {"FullForm", 
  "FullForm[expr] prints as the full form of expr, with no special syntax."}, 
 {"FullGraphics", "FullGraphics[g] takes a graphics object, and generates a \
new one in which objects specified by graphics options are given as explicit \
lists of graphics primitives."}, {"FullInformationOutputRegulator", "FullInfo\
rmationOutputRegulator[sys, rspec] gives the full state information output \
regulator for sys using specification rspec. \
FullInformationOutputRegulator[{sys, {out1, \[Ellipsis]}, {in1, \
\[Ellipsis]}}, \[Ellipsis]] specifies the regulated outputs outi and the \
controlled inputs inj."}, {"FullRegion", 
  "FullRegion[n] represents the full region \[DoubleStruckCapitalR]^n."}, 
 {"FullSimplify", "FullSimplify[expr] tries a wide range of transformations \
on expr involving elementary and special functions and returns the simplest \
form it finds. FullSimplify[expr, assum] does simplification using \
assumptions."}, {"Function", "body& or Function[body] is a pure (or \
\"anonymous\") function. The formal parameters are # (or #1 ), #2, etc. \
x|->body or x\[Function]body or Function[x, body] is a pure function with a \
single formal parameter x. {x1, x2, \[Ellipsis]}|->body or {x1, x2, \
\[Ellipsis]}\[Function]body or Function[{x1, x2, \[Ellipsis]}, body] is a \
pure function with a list of formal parameters. Function[params, body, attrs] \
is a pure function that is treated as having attributes attrs for purposes of \
evaluation."}, {"FunctionAnalytic", "FunctionAnalytic[f, x] tests whether \
f(x) is an analytic function for x\[Element]Reals. FunctionAnalytic[f, x, \
dom] tests whether f(x) is an analytic function for x\[Element]dom. \
FunctionAnalytic[{f1, f2, \[Ellipsis]}, {x1, x2, \[Ellipsis]}, dom] tests \
whether f1(x1, x2, \[Ellipsis]), f2(x1, x2, \[Ellipsis]), \[Ellipsis] are \
analytic functions for x1, x2, \[Ellipsis]\[Element]dom. \
FunctionAnalytic[{funs, cons}, xvars, dom] tests whether funs(xvars) are \
analytic functions for xvars in an open set containing the solutions of the \
constraints cons over the domain dom."}, {"FunctionBijective", "FunctionBijec\
tive[f, x] tests whether f(x)==y has exactly one solution x\[Element]Reals \
for each y\[Element]Reals. FunctionBijective[f, x, dom] tests whether f(x)==y \
has exactly one solution x\[Element]dom for each y\[Element]dom. \
FunctionBijective[{f1, f2, \[Ellipsis]}, {x1, x2, \[Ellipsis]}, dom] tests \
whether f1(x1, x2, \[Ellipsis])==y1, f2(x1, x2, \[Ellipsis])==y2, \[Ellipsis] \
has exactly one solution x1, x2, \[Ellipsis]\[Element]dom for each y1, y2, \
\[Ellipsis]\[Element]dom. FunctionBijective[{funs, xcons, ycons}, xvars, \
yvars, dom] tests whether funs(xvars)==yvars has exactly one solution with \
xvars\[Element]dom restricted by the constraints xcons for each \
yvars\[Element]dom restricted by the constraints ycons."}, 
 {"FunctionCompile", "FunctionCompile[f] generates a compiled code function \
from a pure function. FunctionCompile[{f1, f2, \[Ellipsis]}] generates a list \
of compiled code functions from a list of pure functions. \
FunctionCompile[\[LeftAssociation]k1->f1, k2->f2, \
\[Ellipsis]\[RightAssociation]] generates an association of compiled code \
functions from an association of Wolfram Language functions. \
FunctionCompile[defs, fspec] uses the local auxiliary definitions defs."}, 
 {"FunctionCompileExport", "FunctionCompileExport[\"\\!\\(\\*file.\\!\\(\\*ex\
t\", fspec] exports a compiled version of functions fspec in the format \
specified by the file extension ext. FunctionCompileExport[path, defs, fspec] \
exports a compiled version of fspec using local auxiliary definitions defs. \
FunctionCompileExport[path, fspec, \"\\!\\(\\*format\"] exports in the \
specified format. FunctionCompileExport[path, defs, fspec, \
\"\\!\\(\\*format\"] exports a compiled version using local auxiliary \
definitions."}, {"FunctionCompileExportByteArray", "FunctionCompileExportByte\
Array[fspec] gives a byte array of binary LLVM code obtained by compiling the \
function specification fspec. FunctionCompileExportByteArray[defs, fspec] \
uses the auxiliary definitions defs for compilation. \
FunctionCompileExportByteArray[fspec, \"\\!\\(\\*format\"] gives a byte array \
of binary code in the specified format."}, {"FunctionCompileExportLibrary", "\
FunctionCompileExportLibrary[file, fspec] exports a compiled version of \
function specification fspec as a shared library suitable for external use. \
FunctionCompileExportLibrary[file, defs, fspec] uses the auxiliary \
definitions defs for compilation."}, {"FunctionCompileExportString", "Functio\
nCompileExportString[fspec] gives a string of textual LLVM code obtained by \
compiling the function specification fspec. FunctionCompileExportString[defs, \
fspec] uses the auxiliary definitions defs for compilation. \
FunctionCompileExportString[fspec, \"\\!\\(\\*format\"] gives a string of \
textual code in the specified format."}, {"FunctionContinuous", "FunctionCont\
inuous[f, x] tests whether f(x) is a real-valued continuous function for \
x\[Element]Reals. FunctionContinuous[f, x, dom] tests whether f(x) is a \
continuous function for x\[Element]dom. FunctionContinuous[{f1, f2, \
\[Ellipsis]}, {x1, x2, \[Ellipsis]}, dom] tests whether f1(x1, x2, \
\[Ellipsis]), f2(x1, x2, \[Ellipsis]), \[Ellipsis] are continuous functions \
for x1, x2, \[Ellipsis]\[Element]dom. FunctionContinuous[{funs, cons}, xvars, \
dom] tests whether funs(xvars) are continuous functions for \
xvars\[Element]dom restricted by the constraints cons."}, 
 {"FunctionConvexity", "FunctionConvexity[f, {x1, x2, \[Ellipsis]}] finds the \
convexity of the function f with variables x1, x2, \[Ellipsis] over the \
reals. FunctionConvexity[{f, cons}, {x1, x2, \[Ellipsis]}] finds the \
convexity when variables are restricted by the constraints cons representing \
a convex region."}, {"FunctionDeclaration", "FunctionDeclaration[name, \
typedfun] declares name to be a typed function suitable for use in a compiler \
environment."}, {"FunctionDiscontinuities", "FunctionDiscontinuities[f, x] \
finds the discontinuities of f(x) for x\[Element]Reals. \
FunctionDiscontinuities[f, x, dom] finds the discontinuities of f(x) for \
x\[Element]dom. FunctionDiscontinuities[{f1, f2, \[Ellipsis]}, {x1, x2, \
\[Ellipsis]}, dom] finds the discontinuities of f1(x1, x2, \[Ellipsis]), \
f2(x1, x2, \[Ellipsis]), \[Ellipsis] for x1, x2, \[Ellipsis]\[Element]dom."}, 
 {"FunctionDomain", "FunctionDomain[f, x] finds the largest domain of \
definition of the real function f of the variable x. FunctionDomain[f, x, \
dom] considers f to be a function with arguments and values in the domain \
dom. FunctionDomain[funs, vars, dom] finds the largest domain of definition \
of the mapping funs of the variables vars. FunctionDomain[{funs, cons}, vars, \
dom] finds the domain of funs with the values of vars restricted by \
constraints cons."}, {"FunctionExpand", "FunctionExpand[expr] tries to expand \
out special and certain other functions in expr, when possible reducing \
compound arguments to simpler ones. FunctionExpand[expr, assum] expands using \
assumptions."}, {"FunctionInjective", "FunctionInjective[f, x] tests whether \
f(x)==y has at most one solution x\[Element]Reals for each y. \
FunctionInjective[f, x, dom] tests whether f(x)==y has at most one solution \
x\[Element]dom. FunctionInjective[{f1, f2, \[Ellipsis]}, {x1, x2, \
\[Ellipsis]}, dom] tests whether f1(x1, x2, \[Ellipsis])==y1, f2(x1, x2, \
\[Ellipsis])==y2, \[Ellipsis] has at most one solution x1, x2, \
\[Ellipsis]\[Element]dom. FunctionInjective[{funs, xcons, ycons}, xvars, \
yvars, dom] tests whether funs(xvars)==yvars has at most one solution with \
xvars\[Element]dom restricted by the constraints xcons for each \
yvars\[Element]dom restricted by the constraints ycons."}, 
 {"FunctionInterpolation", "FunctionInterpolation[expr, {x, xmin, xmax}] \
evaluates expr with x running from xmin to xmax and constructs an \
InterpolatingFunction object which represents an approximate function \
corresponding to the result. FunctionInterpolation[expr, {x, xmin, xmax}, {y, \
ymin, ymax}, \[Ellipsis]] constructs an InterpolatingFunction object with \
several arguments."}, {"FunctionLayer", "FunctionLayer[f] represents a net \
layer that applies function f to its input."}, 
 {"FunctionMeromorphic", "FunctionMeromorphic[f, x] test whether f(x) is a \
meromorphic function of x. FunctionMeromorphic[f, {x1, x2, \[Ellipsis]}] test \
whether f1(x1, x2, \[Ellipsis]) is a meromorphic function of x1, x2, \
\[Ellipsis]. FunctionMeromorphic[{f1, f2, \[Ellipsis]}, {x1, x2, \
\[Ellipsis]}] test whether f1(x1, x2, \[Ellipsis]), f2(x1, x2, \[Ellipsis]), \
\[Ellipsis] are meromorphic functions for x1, x2, \[Ellipsis]. \
FunctionMeromorphic[{funs, cons}, xvars] test whether funs(xvars) are \
meromorphic functions for xvars in an open set containing the solutions of \
the constraints cons."}, {"FunctionMonotonicity", "FunctionMonotonicity[f, x] \
finds the monotonicity of the function f with the variable x over the reals. \
FunctionMonotonicity[f, x, dom] finds the monotonicity of f when x is \
restricted to the domain dom. FunctionMonotonicity[{f, cons}, x, dom] gives \
the monotonicity of f when x is restricted by the constraints cons."}, 
 {"FunctionPeriod", "FunctionPeriod[f, x] gives a period p of the function f \
over the reals such that f(x + p)==f(x). FunctionPeriod[f, x, dom] gives a \
period with x restricted to the domain dom. FunctionPeriod[{f1, f2, \
\[Ellipsis]}, {x1, x2, \[Ellipsis]}, \[Ellipsis]] gives periods {p1, p2, \
\[Ellipsis]} for {x1, x2, \[Ellipsis]} such that f(x1 + p1, x2 + p2, \
\[Ellipsis])==f(x1, x2, \[Ellipsis])."}, {"FunctionRange", "FunctionRange[f, \
x, y] finds the range of the real function f of the variable x returning the \
result in terms of y. FunctionRange[f, x, y, dom] considers f to be a \
function with arguments and values in the domain dom. FunctionRange[funs, \
xvars, yvars, dom] finds the range of the mapping funs of the variables xvars \
returning the result in terms of yvars. FunctionRange[{funs, cons}, xvars, \
yvars, dom] finds the range of the mapping funs with the values of xvars \
restricted by constraints cons."}, {"FunctionSign", "FunctionSign[f, {x1, x2, \
\[Ellipsis]}] finds the real sign of the function f with variables x1, x2, \
\[Ellipsis] over the reals. FunctionSign[f, {x1, x2, \[Ellipsis]}, dom] finds \
the real sign with variables restricted to the domain dom. FunctionSign[{f, \
cons}, {x1, x2, \[Ellipsis]}, dom] gives the sign when variables are \
restricted by the constraints cons."}, {"FunctionSingularities", "FunctionSin\
gularities[f, x] finds the singularities of f(x) for x\[Element]Reals. \
FunctionSingularities[f, x, dom] finds the singularities of f(x) for \
x\[Element]dom. FunctionSingularities[{f1, f2, \[Ellipsis]}, {x1, x2, \
\[Ellipsis]}, dom] finds the singularities of f1(x1, x2, \[Ellipsis]), f2(x1, \
x2, \[Ellipsis]), \[Ellipsis] for x1, x2, \[Ellipsis]\[Element]dom."}, 
 {"FunctionSpace", "FunctionSpace is an option for FindSequenceFunction and \
related functions that specifies the space of functions to consider for \
representations."}, {"FunctionSurjective", "FunctionSurjective[f, x] tests \
whether f(x)==y has at least one solution x\[Element] for each \
y\[Element]Reals. FunctionSurjective[f, x, dom] tests whether f(x)==y has at \
least one solution x\[Element]dom for each y\[Element]dom. \
FunctionSurjective[{f1, f2, \[Ellipsis]}, {x1, x2, \[Ellipsis]}, dom] tests \
whether f1(x1, x2, \[Ellipsis])==y1, f2(x1, x2, \[Ellipsis])==y2, \[Ellipsis] \
has at least one solution x1, x2, \[Ellipsis]\[Element]dom for each y1, y2, \
\[Ellipsis]\[Element]dom. FunctionSurjective[{funs, xcons, ycons}, xvars, \
yvars, dom] tests whether funs(xvars)==yvars has at least one solution with \
xvars\[Element]dom restricted by the constraints xcons for each \
yvars\[Element]dom restricted by the constraints ycons."}, 
 {"FussellVeselyImportance", "FussellVeselyImportance[rdist, t] gives the \
Fussell-Vesely importances for all components in the ReliabilityDistribution \
rdist at time t. FussellVeselyImportance[fdist, t] gives the Fussell-Vesely \
importances for all components in the FailureDistribution fdist at time t."}, 
 {"GARCHProcess", "GARCHProcess[\[Kappa], {\[Alpha]1, \[Ellipsis], \
\[Alpha]q}, {\[Beta]1, \[Ellipsis], \[Beta]p}] represents a generalized \
autoregressive conditionally heteroscedastic process of orders p and q, \
driven by a standard white noise. GARCHProcess[\[Kappa], {\[Alpha]1, \
\[Ellipsis], \[Alpha]q}, {\[Beta]1, \[Ellipsis], \[Beta]p}, init] represents \
a GARCH process with initial data init."}, 
 {"GCD", 
  "GCD[n1, n2, \[Ellipsis]] gives the greatest common divisor of the ni."}, 
 {"GaborFilter", "GaborFilter[data, r, k] filters data by convolving with a \
Gabor kernel of pixel radius r and wave vector k. GaborFilter[data, r, k, \
\[Phi]] uses a Gabor kernel with phase shift \[Phi]. GaborFilter[data, {r, \
\[Sigma]}, \[Ellipsis]] uses a Gabor kernel with radius r and standard \
deviation \[Sigma]."}, {"GaborMatrix", "GaborMatrix[r, k] gives a matrix that \
corresponds to the real part of a Gabor kernel of radius r and wave vector k. \
GaborMatrix[r, k, \[Phi]] uses phase shift \[Phi]. GaborMatrix[{r, \[Sigma]}, \
\[Ellipsis]] uses the specified standard deviation \[Sigma]. \
GaborMatrix[{{r1, r2, \[Ellipsis]}}, \[Ellipsis]] gives an array \
corresponding to a Gabor kernel with radius ri in the i^th index direction."}\
, {"GaborWavelet", "GaborWavelet[] represents a Gabor wavelet of frequency 6. \
GaborWavelet[w] represents a Gabor wavelet of frequency w."}, 
 {"GainMargins", "GainMargins[lsys] gives the gain margins of the linear \
time-invariant system lsys."}, {"GainPhaseMargins", "GainPhaseMargins[lsys] \
gives the gain and phase margins of the linear time-invariant system lsys."}, 
 {"GalaxyData", "GalaxyData[entity, property] gives the value of the \
specified property for the galaxy entity. GalaxyData[{entity1, entity2, \
\[Ellipsis]}, property] gives a list of property values for the specified \
galaxy entities. GalaxyData[entity, property, annotation] gives the specified \
annotation associated with the given property."}, 
 {"GalleryView", "GalleryView[{expr1, expr2, \[Ellipsis]}] represents an \
object in which the expri are displayed in a browsable gallery layout. \
GalleryView[{assoc1, assoc2, \[Ellipsis]}] uses each of the associations \
associ to define the display of an item in the gallery."}, 
 {"Gamma", "Gamma[z] is the Euler gamma function \[CapitalGamma](z). Gamma[a, \
z] is the incomplete gamma function \[CapitalGamma](a, z). Gamma[a, z0, z1] \
is the generalized incomplete gamma function \[CapitalGamma](a, z0) - \
\[CapitalGamma](a, z1)."}, {"GammaDistribution", "GammaDistribution[\[Alpha], \
\[Beta]] represents a gamma distribution with shape parameter \[Alpha] and \
scale parameter \[Beta]. GammaDistribution[\[Alpha], \[Beta], \[Gamma], \
\[Mu]] represents a generalized gamma distribution with shape parameters \
\[Alpha] and \[Gamma], scale parameter \[Beta], and location parameter \
\[Mu]."}, {"GammaRegularized", "GammaRegularized[a, z] is the regularized \
incomplete gamma function Q(a, z)."}, {"GapPenalty", "GapPenalty is an option \
for SequenceAlignment and related functions that gives the additional cost \
associated with each gap corresponding to a run of insertions or deletions."}\
, {"GatedRecurrentLayer", "GatedRecurrentLayer[n] represents a trainable \
recurrent layer that takes a sequence of vectors and produces a sequence of \
vectors each of size n. GatedRecurrentLayer[n, opts] includes options for \
initial weights and other parameters."}, {"Gather", "Gather[list] gathers the \
elements of list into sublists of identical elements. Gather[list, test] \
applies test to pairs of elements to determine if they should be considered \
identical."}, {"GatherBy", "GatherBy[list, f] gathers into sublists each set \
of elements in list that gives the same value when f is applied. \
GatherBy[list, {f1, f2, \[Ellipsis]}] gathers list into nested sublists using \
fi at level i."}, {"GaugeFaceElementFunction", "GaugeFaceElementFunction is \
an option for gauge functions that gives a function to use to generate the \
primitives for rendering the gauge face."}, {"GaugeFaceStyle", "GaugeFaceStyl\
e is an option for gauge functions that specifies the style in which the face \
is to be drawn."}, {"GaugeFrameElementFunction", "GaugeFrameElementFunction \
is an option for gauge functions that gives a function to generate the \
primitives for rendering the gauge frame."}, {"GaugeFrameSize", "GaugeFrameSi\
ze is an option for gauge functions that controls the size of the frame \
around the gauge."}, {"GaugeFrameStyle", "GaugeFrameStyle is an option for \
gauge functions that specifies the style in which the frame is to be drawn."}\
, {"GaugeLabels", "GaugeLabels is an option for gauge functions that \
specifies labels to be placed on the gauge."}, 
 {"GaugeMarkers", "GaugeMarkers is an option for gauge functions that \
specifies what markers to draw to mark the values."}, 
 {"GaugeStyle", "GaugeStyle is an option for gauge functions that specifies \
styles in which the markers are to be drawn."}, 
 {"GaussianFilter", "GaussianFilter[data, r] filters data by convolving with \
a Gaussian kernel of radius r. GaussianFilter[data, r, {n1, n2, \[Ellipsis]}] \
convolves data with a kernel formed from the ni^th derivatives of the \
discrete Gaussian. GaussianFilter[data, {r, \[Sigma]}, \[Ellipsis]] uses a \
Gaussian kernel with radius r and standard deviation \[Sigma]. \
GaussianFilter[data, {{r1, r2, \[Ellipsis]}, \[Ellipsis]}] uses radius ri at \
level i in data."}, {"GaussianIntegers", "GaussianIntegers is an option for \
FactorInteger, PrimeQ, Factor, and related functions that specifies whether \
factorization should be done over Gaussian integers."}, 
 {"GaussianMatrix", "GaussianMatrix[r] gives a matrix that corresponds to a \
Gaussian kernel of radius r. GaussianMatrix[{r, \[Sigma]}] gives a matrix \
corresponding to a Gaussian kernel with radius r and standard deviation \
\[Sigma]. GaussianMatrix[r, {n1, n2}] gives a matrix formed from the n1^th \
derivative of the Gaussian with respect to rows and the n2^th derivative with \
respect to columns. GaussianMatrix[r, {{n11, n12}, {n21, n22}, \[Ellipsis]}] \
gives a matrix formed from the sums of the ni1 and ni2 derivatives. \
GaussianMatrix[{{r1, r2, \[Ellipsis]}, \[Sigma]}, \[Ellipsis]] gives an array \
corresponding to a Gaussian kernel with radius ri in the i^th index \
direction."}, {"GaussianOrthogonalMatrixDistribution", "GaussianOrthogonalMat\
rixDistribution[\[Sigma], n] represents a Gaussian orthogonal matrix \
distribution with matrix dimensions {n, n} and scale parameter \[Sigma]. \
GaussianOrthogonalMatrixDistribution[n] represents a Gaussian orthogonal \
matrix distribution with unit scale parameter."}, 
 {"GaussianSymplecticMatrixDistribution", "GaussianSymplecticMatrixDistributi\
on[\[Sigma], n] represents a Gaussian symplectic matrix distribution with \
matrix dimensions {2 n, 2 n} over the field of complex numbers and scale \
parameter \[Sigma]. GaussianSymplecticMatrixDistribution[n] represents a \
Gaussian symplectic matrix distribution with unit scale parameter."}, 
 {"GaussianUnitaryMatrixDistribution", "GaussianUnitaryMatrixDistribution[\
\[Sigma], n] represents a Gaussian unitary matrix distribution with matrix \
dimensions {n, n} and scale parameter \[Sigma]. \
GaussianUnitaryMatrixDistribution[n] represents a Gaussian unitary matrix \
distribution with unit scale parameter."}, {"GaussianWindow", "GaussianWindow\
[x] represents a Gaussian window function of x. GaussianWindow[x, \[Sigma]] \
uses standard deviation \[Sigma]."}, {"GegenbauerC", "GegenbauerC[n, m, x] \
gives the Gegenbauer polynomial Cn(m)(x). GegenbauerC[n, x] gives the \
renormalized form limm->0LimitsPositioningTrueCn(m)(x) / m."}, 
 {"General", 
  "General is a symbol to which general system messages are attached."}, 
 {"GeneralizedLinearModelFit", "GeneralizedLinearModelFit[{y1, y2, \
\[Ellipsis]}, {f1, f2, \[Ellipsis]}, x] constructs a generalized linear model \
of the form g^ - 1(\[Beta]0 + \[Beta]1f1 + \[Beta]2f2 + \[Ellipsis]) that \
fits the yi for successive x values 1, 2, \[Ellipsis]. \
GeneralizedLinearModelFit[{{x11, x12, \[Ellipsis], y1}, {x21, x22, \
\[Ellipsis], y2}, \[Ellipsis]}, {f1, f2, \[Ellipsis]}, {x1, x2, \[Ellipsis]}] \
constructs a generalized linear model of the form g^ - 1(\[Beta]0 + \
\[Beta]1f1 + \[Beta]2f2 + \[Ellipsis]) where the fi depend on the variables \
xk. GeneralizedLinearModelFit[{m, v}] constructs a generalized linear model \
from the design matrix m and response vector v."}, 
 {"GenerateAsymmetricKeyPair", "GenerateAsymmetricKeyPair[] randomly \
generates a PrivateKey and corresponding PublicKey object for use with \
public-key cryptographic functions. GenerateAsymmetricKeyPair[type] randomly \
generates private and public keys of the specified type. \
GenerateAsymmetricKeyPair[opts] randomly generates keys using the specified \
options."}, {"GenerateConditions", "GenerateConditions is an option for \
Integrate, Sum, and similar functions that specifies whether explicit \
conditions on parameters should be generated in the result."}, 
 {"GenerateDerivedKey", "GenerateDerivedKey[password] generates a DerivedKey \
object from the password given. GenerateDerivedKey[password, salt] generates \
a DerivedKey object from the password and salt given."}, 
 {"GenerateDigitalSignature", "GenerateDigitalSignature[expr, key] generates \
a digital signature for expr using the specified private key. \
GenerateDigitalSignature[key] represents an operator form of \
GenerateDigitalSignature that can be applied to expressions."}, 
 {"GenerateDocument", "GenerateDocument[nb] generates a document by \
evaluating all template elements in the notebook nb. GenerateDocument[nb, \
args] generates a document using args to fill template slots. \
GenerateDocument[nb, output] writes the generated document in the output file \
represented by output. GenerateDocument[nb, args, output] uses args to fill \
template slots and puts the result in output."}, 
 {"GenerateFileSignature", "GenerateFileSignature[\"\\!\\(\\*file\", key] \
generates a digital signature of file using the specified private key. \
GenerateFileSignature[{\"\\!\\(\\*file\", range}, key] generates a digital \
signature of the specified range of bytes in the file. \
GenerateFileSignature[{{\"\\!\\(\\*file_1\", range1}, {\"\\!\\(\\*file_2\", \
range2}, \[Ellipsis]}, key] generates digital signatures for each specified \
filei and rangei. GenerateFileSignature[key] represents an operator form of \
GenerateFileSignature that can be applied to files."}, 
 {"GenerateHTTPResponse", "GenerateHTTPResponse[expr] gives the HTTPResponse \
object that is generated when a cloud object containing expr is requested on \
the web. GenerateHTTPResponse[expr, req] gives the response for the HTTP \
request specified by req."}, {"GenerateSecuredAuthenticationKey", "GenerateSe\
curedAuthenticationKey[] generates a new anonymous SecuredAuthenticationKey \
owned by the current user ID. \
GenerateSecuredAuthenticationKey[\"\\!\\(\\*name\"] generates a new \
SecuredAuthenticationKey with the specified name owned by the current user \
ID. GenerateSecuredAuthenticationKey[SecuredAuthenticationKey[\[Ellipsis]]] \
generates a new set of credentials for an existing SecuredAuthenticationKey."}\
, {"GenerateSymmetricKey", "GenerateSymmetricKey[] randomly generates a \
SymmetricKey object suitable for use with cryptographic functions. \
GenerateSymmetricKey[\"\\!\\(\\*password\"] derives a SymmetricKey object \
from the password string given. GenerateSymmetricKey[bytes] generates a \
SymmetricKey object using the byte array or list of bytes directly as the \
key. GenerateSymmetricKey[DerivedKey[\[Ellipsis]]] generates a symmetric key \
object with a key given by the DerivedKey object. GenerateSymmetricKey[opts] \
randomly generates a symmetric key using the specified options."}, 
 {"GeneratedAssetFormat", "GeneratedAssetFormat is an option for functions \
like VideoGenerator that specifies the format of the resulting asset."}, 
 {"GeneratedAssetLocation", "GeneratedAssetLocation is an option for \
functions like VideoGenerator that specifies the location of the resulting \
asset."}, {"GeneratedCell", "GeneratedCell is an option for Cell that \
indicates whether the cell was generated from the kernel."}, 
 {"GeneratedDocumentBinding", "GeneratedDocumentBinding is an option for \
supplying parameters to a DocumentGenerator during manual evaluation."}, 
 {"GeneratedParameters", "GeneratedParameters is an option that specifies how \
parameters generated to represent the results of various symbolic operations \
should be named."}, {"GeneratedQuantityMagnitudes", "GeneratedQuantityMagnitu\
des is an option that specifies how quantities generated to represent the \
quantity multiplier results in NondimensionalizationTransform should be \
named."}, {"GeneratingFunction", "GeneratingFunction[expr, n, x] gives the \
generating function in x for the sequence whose n^th series coefficient is \
given by the expression expr. GeneratingFunction[expr, {n1, n2, \[Ellipsis]}, \
{x1, x2, \[Ellipsis]}] gives the multidimensional generating function in x1, \
x2, \[Ellipsis] whose n1, n2, \[Ellipsis] coefficient is given by expr."}, 
 {"GeneratorDescription", "GeneratorDescription is an option for providing a \
textual description for a DocumentGenerator."}, 
 {"GeneratorHistoryLength", "GeneratorHistoryLength is an option for document \
generators controlling the number of runs archived in the cloud."}, 
 {"GeneratorOutputType", "GeneratorOutputType is an option controlling the \
file format of documents produced by a DocumentGenerator."}, 
 {"GenericCylindricalDecomposition", "GenericCylindricalDecomposition[ineqs, \
{x1, x2, \[Ellipsis]}] finds the full-dimensional part of the decomposition \
of the region represented by the inequalities ineqs into cylindrical parts \
whose directions correspond to the successive xi, together with any \
hypersurfaces containing the rest of the region."}, 
 {"GenomeData", "GenomeData[\"\\!\\(\\*gene\"] gives the DNA sequence for the \
specified gene on the reference human genome. GenomeData[\"\\!\\(\\*gene\", \
\"\\!\\(\\*property\"] gives the value of the specified property for the \
human gene gene. GenomeData[{\"\\!\\(\\*chr\", {n1, n2}}] gives the sequence \
from positions n1 to n2 on chromosome chr in the reference human genome."}, 
 {"GenomeLookup", "GenomeLookup[\"\\!\\(\\*seq\"] returns the positions of \
exact matches for the DNA sequence seq on the reference human genome. \
GenomeLookup[\"\\!\\(\\*seq\", n] returns at most n matches."}, 
 {"GeoAntipode", "GeoAntipode[loc] gives the antipodal position of location \
loc. GeoAntipode[g] gives the antipodal primitive of the geo primitive g."}, 
 {"GeoArea", "GeoArea[g] gives the area of the geo region g."}, 
 {"GeoArraySize", "GeoArraySize is an option for geographic data functions \
that determines the dimensions of the array generated."}, 
 {"GeoBackground", "GeoBackground is an option that specifies the background \
style of a GeoGraphics object."}, {"GeoBoundary", 
  "GeoBoundary[g] returns the boundary line of the geo region g."}, 
 {"GeoBoundingBox", "GeoBoundingBox[g] gives the geo positions that define \
the bounding rectangle enclosing the geo region g. GeoBoundingBox[g, \
\[Delta]] pads the region on all sides by an amount \[Delta]. \
GeoBoundingBox[g, Scaled[s]] pads by a fractional amount s."}, 
 {"GeoBounds", "GeoBounds[g] gives the ranges of latitudes and longitudes in \
the geo region g. GeoBounds[g, \[Delta]] pads ranges of latitudes and \
longitudes by \[PlusMinus]\[Delta]. GeoBounds[g, Scaled[s]] pads range of \
latitudes and longitudes by a scaled amount s."}, 
 {"GeoBoundsRegion", "GeoBoundsRegion[{{latmin, latmax}, {lonmin, lonmax}}] \
is a two-dimensional GeoGraphics primitive that represents a geo region \
bounded by parallels latmin, latmax and meridians lonmin, lonmax on the \
surface of the Earth. GeoBoundsRegion[g] represents the latitude-longitude \
bounding box of the geo region g. GeoBoundsRegion[g, \[Delta]] pads the \
ranges of latitudes and longitudes by \[PlusMinus]\[Delta]."}, 
 {"GeoBoundsRegionBoundary", "GeoBoundsRegionBoundary[{{latmin, latmax}, \
{lonmin, lonmax}}] is a one-dimensional GeoGraphics primitive that represents \
the boundary of the region between parallels latmin, latmax and meridians \
lonmin, lonmax on the surface of the Earth. GeoBoundsRegionBoundary[g] \
represents the boundary of the latitude-longitude bounding box of the geo \
region g. GeoBoundsRegionBoundary[g, \[Delta]] pads the ranges of latitudes \
and longitudes by \[PlusMinus]\[Delta]."}, {"GeoBubbleChart", "GeoBubbleChart\
[{reg1->val1, reg2->val2, \[Ellipsis]}] makes a geo bubble chart with bubbles \
centered at the geographic regions regi with sizes vali. \
GeoBubbleChart[regions->values] uses a collection of regions regi from \
regions with corresponding sizes vali from values. GeoBubbleChart[{data1, \
data2, \[Ellipsis]}] plots data from all the datai. \
GeoBubbleChart[{\[Ellipsis], w[datai], \[Ellipsis]}] plots datai with \
features defined by the symbolic wrapper w."}, 
 {"GeoCenter", "GeoCenter is an option for GeoGraphics that specifies the \
coordinates of the point that should appear at the geographic center of the \
final map."}, {"GeoCircle", "GeoCircle[loc, r] is a two-dimensional \
GeoGraphics primitive that represents a circle of radius r centered at the \
location loc on the surface of the Earth. GeoCircle[loc, r, {\[Alpha]1, \
\[Alpha]2}] represents a sector of a circle from bearing \[Alpha]1 to bearing \
\[Alpha]2."}, {"GeoContourPlot", "GeoContourPlot[{loc1->val1, loc2->val2, \
\[Ellipsis]}] makes a geo contour plot from values vali defined at specified \
locations loci. GeoContourPlot[locs->vals] uses a collection of locations \
locs with corresponding values vals."}, {"GeoDensityPlot", "GeoDensityPlot[{l\
oc1->val1, loc2->val2, \[Ellipsis]}] makes a geo density plot with colors at \
the location loci determined by the value vali. GeoDensityPlot[locs->vals] \
uses a collection of locations locs with corresponding values vals."}, 
 {"GeoDestination", "GeoDestination[loc, {d, \[Alpha]}] gives the end \
position of the geodesic of length d starting from loc with azimuthal \
direction \[Alpha]."}, {"GeoDirection", "GeoDirection[{lat1, lon1}, {lat2, \
lon2}] gives the azimuthal direction from one latitude-longitude position on \
the Earth to another. GeoDirection[loc1, loc2] gives the azimuthal direction \
between locations specified by position objects or geographic entities."}, 
 {"GeoDisk", "GeoDisk[loc, r] is a two-dimensional GeoGraphics primitive that \
represents a filled disk of radius r centered at the location loc on the \
surface of the Earth. GeoDisk[loc, r, {\[Alpha]1, \[Alpha]2}] gives a sector \
of a disk from bearing \[Alpha]1 to bearing \[Alpha]2."}, 
 {"GeoDisplacement", "GeoDisplacement[{dist, \[Alpha]}] represents a geodesic \
displacement of length dist and initial bearing \[Alpha] from a geo location. \
GeoDisplacement[{dist, \[Alpha]}, pathtype] represents a displacement of \
length dist and initial bearing \[Alpha] along a path of type pathtype. \
GeoDisplacement[loc1, loc2, pathtype] returns the displacement needed to \
reach loc2 from loc1 along a path of type pathtype."}, 
 {"GeoDistance", "GeoDistance[{lat1, lon1}, {lat2, lon2}] gives the geodesic \
distance between latitude-longitude positions on the Earth. GeoDistance[loc1, \
loc2] gives the distance between locations specified by position objects or \
geographical entities. GeoDistance[{loc1, \[Ellipsis], locn}] gives the total \
distance from loc1 to locn through all the intermediate loci."}, 
 {"GeoDistanceList", "GeoDistanceList[{loc1, loc2, \[Ellipsis], locn}] \
returns the list of geodesic distances between consecutive pairs of \
locations."}, {"GeoElevationData", "GeoElevationData[] gives the elevation \
above sea level at $GeoLocation. GeoElevationData[loc] gives the elevation at \
the geographic location loc. GeoElevationData[{loc1, loc2}] gives an array of \
elevation values within the bounding box given by {loc1, loc2}. \
GeoElevationData[GeoPosition[{{lat1, lon1}, {lat2, lon2}, \[Ellipsis]}]] \
gives the list of elevations at the positions {lati, loni}. \
GeoElevationData[loc, etype] gives the elevation of type etype for the \
location loc. GeoElevationData[loc, etype, format] gives the elevation in the \
specified format."}, {"GeoEntities", "GeoEntities[reg, enttype] gives a list \
of the geographic entities of type enttype contained in the extended region \
reg."}, {"GeoGraphPlot", "GeoGraphPlot[{e1, e2, \[Ellipsis]}] generates a \
plot of the geographic graph with edges ei. GeoGraphPlot[{v1, v2, \
\[Ellipsis]}, {e1, e2, \[Ellipsis]}] generates a plot with vertices vi and \
edges ej. GeoGraphPlot[{vi->vj, \[Ellipsis]}] uses rules vi->vj to specify \
the graph. GeoGraphPlot[g] displays the graph g with vertices at geographic \
locations on a map. GeoGraphPlot[{\[Ellipsis], w[ei], \[Ellipsis]}] plots ei \
with features defined by the symbolic wrapper w."}, 
 {"GeoGraphics", "GeoGraphics[primitives, options] represents a \
two-dimensional geographical image."}, {"GeoGridDirectionDifference", "GeoGri\
dDirectionDifference[proj, loc, \[Beta]] gives the difference between the \
angle from north to direction \[Beta] on the geo grid obtained with \
projection proj and the actual angle from north to direction \[Beta] at \
location loc. GeoGridDirectionDifference[proj, loc, \[Alpha]->\[Beta]] gives \
the difference between projected and unprojected angles from direction \
\[Alpha] to direction \[Beta]."}, {"GeoGridLines", "GeoGridLines is an option \
for GeoGraphics that specifies what parallels and meridians to show."}, 
 {"GeoGridLinesStyle", "GeoGridLinesStyle is an option for GeoGraphics that \
specifies how parallels and meridians should be rendered."}, 
 {"GeoGridPosition", "GeoGridPosition[{x, y}, proj] represents a point {x, y} \
in a planimetric cartographic grid using the projection proj. \
GeoGridPosition[{x, y, h}, proj] represents a point {x, y, h} in a \
cartographic grid with height h with respect to the reference ellipsoid. \
GeoGridPosition[{{x1, y1}, {x2, y2}, \[Ellipsis]}, proj] represents an array \
of cartographic grid positions. GeoGridPosition[{x, y, h}, proj, datum] \
represents a point in a cartographic grid obtained by projection from data in \
the given datum. GeoGridPosition[entity, proj] returns the cartographic grid \
position of the specified geographical entity."}, 
 {"GeoGridRange", "GeoGridRange is an option for geographic functions that \
specifies the range of projected coordinates to include."}, 
 {"GeoGridRangePadding", "GeoGridRangePadding is an option for geographic \
functions that specifies how much to extend the projected coordinate ranges \
determined by GeoGridRange."}, {"GeoGridUnitArea", "GeoGridUnitArea[proj, \
loc] gives the actual geo area corresponding to a unit area on the geo grid \
obtained with projection proj, evaluated in the limit of small geo regions \
around location loc."}, {"GeoGridUnitDistance", "GeoGridUnitDistance[proj, \
loc, \[Alpha]] gives the actual geo distance corresponding to a unit distance \
on the geo grid obtained with projection proj, evaluated in the limit of \
small displacement from location loc in direction \[Alpha]."}, 
 {"GeoGridVector", "GeoGridVector[loc->{vx, vy}, proj] represents a \
horizontal two-dimensional vector of components vx, vy in the orthonormal \
frame of the coordinates of the geo projection proj, at geo location loc. \
GeoGridVector[loc->{vx, vy, vz}, proj] represents a three-dimensional vector \
of horizontal components vx, vy and vertical component vz at geo location \
loc. GeoGridVector[{loc1, loc2, \[Ellipsis]}->{vec1, vec2, \[Ellipsis]}, \
proj] represents a collection of vectors veci at respective geo locations \
loci. GeoGridVector[{loc1->vec1, loc2->vec2, \[Ellipsis]}, proj] represents \
the same collection of vectors. GeoGridVector[vec, proj] represents a geo \
vector whose associated location has been implicitly specified."}, 
 {"GeoGroup", "GeoGroup[geoobjects] represents a list of geographic objects \
to be treated as a single object for certain operations."}, 
 {"GeoHemisphere", "GeoHemisphere[] is a two-dimensional GeoGraphics \
primitive that represents the half of the Earth centered at your current geo \
location. GeoHemisphere[loc] represents the half of the Earth centered at the \
location loc."}, {"GeoHemisphereBoundary", "GeoHemisphereBoundary[] is a \
one-dimensional GeoGraphics primitive that represents the boundary line of a \
hemisphere of the Earth centered at the current geo location. \
GeoHemisphereBoundary[loc] represents the boundary line of a hemisphere \
centered at the location loc."}, {"GeoHistogram", "GeoHistogram[locs] plots a \
density histogram of the geographic locations locs. GeoHistogram[locs, bspec] \
plots a density histogram with bins specified by bspec. GeoHistogram[locs, \
bspec, hspec] plots a density histogram with bin densities computed according \
to the specification hspec."}, {"GeoIdentify", "GeoIdentify[enttype] \
identifies the geographic entities of the type enttype in which the current \
geo location is contained. GeoIdentify[enttype, loc] identifies the entities \
in which the location loc is contained. GeoIdentify[] identifies the entities \
of any type in which the current geo location is contained."}, 
 {"GeoImage", "GeoImage[reg] gives a satellite image of the geo region reg. \
GeoImage[reg, mapstyle] gives an image of the geo region reg with style \
mapstyle."}, {"GeoLabels", "GeoLabels is an option for GeoListPlot and \
GeoRegionValuePlot that specifies whether and how to add labels to the \
locations in the first argument."}, 
 {"GeoLength", "GeoLength[g] gives the length of the geo path g."}, 
 {"GeoListPlot", "GeoListPlot[{loc1, loc2, \[Ellipsis]}] generates a map on \
which the locations loci are indicated. GeoListPlot[{list1, list2, \
\[Ellipsis]}] generates a map showing several lists of locations."}, 
 {"GeoLocation", "GeoLocation is an option for Interpreter and related \
functions that specifies the location to assume for semantic interpretation."}\
, {"GeoMarker", "GeoMarker[] is a GeoGraphics primitive that represents a \
marker at the current $GeoLocation. GeoMarker[loc] is a GeoGraphics primitive \
that represents a marker at the location loc. GeoMarker[{loc1, loc2, \
\[Ellipsis]}] is a GeoGraphics primitive that represents markers at locations \
loci. GeoMarker[loc, marker] is a GeoGraphics primitive that represents a \
custom marker at the location loc. GeoMarker[{loc1, loc2, \[Ellipsis]}, \
marker] is a GeoGraphics primitive that represents custom markers at \
locations loci."}, {"GeoModel", "GeoModel is an option for GeoGraphics that \
specifies the reference body or model for it for the purposes of geodetic \
computations and map drawing."}, {"GeoNearest", "GeoNearest[enttype, loc] \
returns the geographic entity of type enttype closest to the geo location \
loc. GeoNearest[{reg1, reg2, \[Ellipsis], regn}, loc] returns the nearest of \
the regi. GeoNearest[{reg1->val1, reg2->val2, \[Ellipsis], regn->valn}, loc] \
returns the vali corresponding to the nearest regi. GeoNearest[{reg1, reg2, \
\[Ellipsis], regn}->{val1, val2, \[Ellipsis], valn}, loc] returns the same \
result. GeoNearest[{reg1, reg2, \[Ellipsis], regn}->Automatic, loc] takes the \
vali to be successive integers i. GeoNearest[spec, loc, n] returns n nearest \
values. GeoNearest[spec, loc, {n, r}] returns up to n matches within a radius \
r of loc."}, {"GeoOrientationData", "GeoOrientationData[date, prop] gives the \
value of the property prop about the orientation of the Earth on the given \
date. GeoOrientationData[date, prop, \"\\!\\(\\*variant\"] gives the \
specified variant of the property prop on the given date."}, 
 {"GeoPath", "GeoPath[{loc1, loc2}, pathtype] is a GeoGraphics primitive that \
represents a path of type pathtype between locations loc1 and loc2. \
GeoPath[{loc1, loc2, \[Ellipsis]}, pathtype] represents a path formed by \
joining paths of type pathtype between consecutive locations loci. \
GeoPath[{loc1, d, \[Alpha]}, pathtype] represents a path moving from location \
loc1 a distance d with initial bearing \[Alpha]. GeoPath[{{loc11, loc12, \
\[Ellipsis]}, {loc21, \[Ellipsis]}, \[Ellipsis]}, pathtype] represents a \
disjoint collection of paths of type pathtype."}, 
 {"GeoPolygon", "GeoPolygon[{loc1, \[Ellipsis], locn}] is a GeoGraphics \
primitive that represents a filled polygon whose boundary is formed by \
geodesic segments between locations loci and loci + 1. GeoPolygon[{loc1, \
\[Ellipsis], locn}->{{q1, \[Ellipsis], qm}, \[Ellipsis]}] represents a geo \
polygon with holes {q1, \[Ellipsis], qm}, \[Ellipsis]. GeoPolygon[{poly1, \
poly2, \[Ellipsis]}] represents a collection of polygons polyi. \
GeoPolygon[{poly1, poly2, \[Ellipsis]}, sideness] specifies which of the two \
sides of each boundary polyi is in the interior of the geo polygon. \
GeoPolygon[polys, sideness, pathtype] represents a geo polygon whose boundary \
is formed by geo paths of type pathtype."}, {"GeoPosition", "GeoPosition[{lat\
, lon}] represents a geodetic position with latitude lat and longitude lon. \
GeoPosition[{lat, lon, h}] represents a geodetic position with height h \
relative to the reference ellipsoid. GeoPosition[{lat, lon, h}, datum] \
represents a geodetic position referring to the specified datum. \
GeoPosition[{{lat1, lon1}, {lat2, lon2}, \[Ellipsis]}, datum] represents an \
array of geodetic positions. GeoPosition[entity] returns the geodetic \
position of the specified geographical entity."}, 
 {"GeoPositionENU", "GeoPositionENU[{east, north, up}, p] represents a \
position with local Cartesian coordinates {east, north, up} in a reference \
system centered at the position p. GeoPositionENU[{{e1, n1, u1}, {e2, n2, \
u2}, \[Ellipsis]}, p] represents an array of positions. \
GeoPositionENU[entity, p] returns the Cartesian position with respect to p of \
the specified geographical entity."}, {"GeoPositionXYZ", "GeoPositionXYZ[{x, \
y, z}] represents a position in a Cartesian geocentric coordinate system. \
GeoPositionXYZ[{x, y, z}, datum] represents a point referred to the specified \
datum. GeoPositionXYZ[{{x1, y1, z1}, {x2, y2, z2}, \[Ellipsis]}, datum] \
represents an array of points in a Cartesian geocentric coordinate system. \
GeoPositionXYZ[entity] returns the Cartesian geocentric position of the given \
geographical entity."}, {"GeoProjection", "GeoProjection is an option for \
GeoGraphics that specifies the cartographic projection to use for the map."}, 
 {"GeoProjectionData", "GeoProjectionData[\"\\!\\(\\*projection\", \
\"\\!\\(\\*property\"] gives the value of the specified property for the \
specified cartographic projection. GeoProjectionData[\"\\!\\(\\*projection\"] \
gives the complete options for the default form of the specified projection."}\
, {"GeoRange", "GeoRange is an option for geographic functions that specifies \
the range of latitude and longitude to include."}, 
 {"GeoRangePadding", "GeoRangePadding is an option for GeoGraphics that \
specifies what padding to use when extending beyond the original ranges of \
latitude and longitude."}, {"GeoRegionValuePlot", "GeoRegionValuePlot[{reg1->\
val1, reg2->val2, \[Ellipsis]}] generates a plot in which the geographic \
regions regi are colored according to the values vali. \
GeoRegionValuePlot[regions->values] uses a collection of regions regi from \
regions with corresponding values vali from values. \
GeoRegionValuePlot[region->prop] generates a plot in which the geographic \
subdivisions in region are colored according to the values \
EntityValue[\[Ellipsis], prop]. GeoRegionValuePlot[data] generates a plot \
using the data available in data."}, {"GeoResolution", "GeoResolution is an \
option for geographic functions that specifies an average distance between \
neighboring pixels in the resulting map."}, {"GeoScaleBar", "GeoScaleBar is \
an option for GeoGraphics that determines what scale to show on the map."}, 
 {"GeoServer", "GeoServer is an option for GeoGraphics, GeoStyling and \
GeoImage that specifies the URL address of a geo server and connection \
parameters to download map tiles and geo elevation data."}, 
 {"GeoSmoothHistogram", "GeoSmoothHistogram[locs] plots a smooth kernel \
histogram of the geo locations locs. GeoSmoothHistogram[locs, espec] plots a \
smooth kernel histogram with estimator specification espec. \
GeoSmoothHistogram[locs, espec, dfun] plots the distribution function dfun."}\
, {"GeoStreamPlot", "GeoStreamPlot[vecs] generates a stream plot from the \
field of geo vectors vecs. GeoStreamPlot[{vecs1, vecs2, \[Ellipsis]}] \
generates a separate set of streams for each vecsi."}, 
 {"GeoStyling", "GeoStyling[mapstyle] displays faces of polygons and other \
filled geo objects using mapstyle. GeoStyling[mapstyle, directive] uses \
mapstyle with the given graphics directive applied."}, 
 {"GeoStylingImageFunction", "GeoStylingImageFunction is an option for \
specifying an image effect to apply to a geo style."}, 
 {"GeoVariant", "GeoVariant[obj, qual] represents a geographic object obj \
with qualifier qual."}, {"GeoVector", "GeoVector[loc->{m, \[Alpha]}] \
represents a horizontal two-dimensional vector of magnitude m and bearing \
\[Alpha] at geo location loc. GeoVector[loc->{m, \[Alpha], w}] represents a \
three-dimensional vector of horizontal modulus m, bearing \[Alpha] and \
vertical component w at geo location loc. GeoVector[{loc1, loc2, \
\[Ellipsis]}->{vec1, vec2, \[Ellipsis]}] represents a collection of vectors \
veci at respective geo locations loci. GeoVector[{loc1->vec1, loc2->vec2, \
\[Ellipsis]}] represents the same collection of vectors. GeoVector[vec] \
represents a geo vector whose associated location has been implicitly \
specified."}, {"GeoVectorENU", "GeoVectorENU[loc->{ve, vn}] represents a \
horizontal two-dimensional vector of components ve and vn in an orthonormal \
frame tangent to the Earth at geo location loc. GeoVectorENU[loc->{ve, vn, \
vu}] represents a three-dimensional vector of horizontal components ve and \
vn, and vertical component vu at geo location loc. GeoVectorENU[{loc1, loc2, \
\[Ellipsis]}->{vec1, vec2, \[Ellipsis]}] represents a collection of vectors \
veci at respective geo locations loci. GeoVectorENU[{loc1->vec1, loc2->vec2, \
\[Ellipsis]}] represents the same collection of vectors. GeoVectorENU[vec] \
represents a geo vector whose associated location has been implicitly \
specified."}, {"GeoVectorPlot", "GeoVectorPlot[vecs] generates a vector plot \
from the field of geo vectors vecs. GeoVectorPlot[{vecs1, vecs2, \
\[Ellipsis]}] generates a separate set of vectors for each vecsi."}, 
 {"GeoVectorXYZ", "GeoVectorXYZ[loc->{vX, vY, vZ}] represents a \
three-dimensional vector of Cartesian components vX, vY, vZ in an orthonormal \
frame parallel to the geocentric frame, at location loc. GeoVectorXYZ[{loc1, \
loc2, \[Ellipsis]}->{vec1, vec2, \[Ellipsis]}] represents a collection of \
vectors veci at respective geo locations loci. GeoVectorXYZ[{loc1->vec1, \
loc2->vec2, \[Ellipsis]}] represents the same collection of vectors. \
GeoVectorXYZ[vec] represents a geo vector whose associated location has been \
implicitly specified."}, {"GeoVisibleRegion", "GeoVisibleRegion[{lat, lon, \
h}] is a two-dimensional GeoGraphics primitive that represents the region on \
the surface of the Earth visible from the point of coordinates lat, lon and \
height h above the reference ellipsoid. GeoVisibleRegion[pos] represents the \
region visible from the position pos."}, {"GeoVisibleRegionBoundary", "GeoVis\
ibleRegionBoundary[{lat, lon, h}] is a one-dimensional GeoGraphics primitive \
that represents the boundary of the region on the surface of the Earth \
visible from the point of coordinates lat, lon and height h above the \
reference ellipsoid. GeoVisibleRegionBoundary[pos] represents the boundary of \
the region visible from the position pos."}, {"GeoWithinQ", "GeoWithinQ[reg, \
loc] returns True if the location loc is contained within the region reg, and \
False otherwise. GeoWithinQ[reg] represents an operator form of GeoWithinQ \
that can be applied to a location."}, {"GeoZoomLevel", "GeoZoomLevel is an \
option for specifying the resolution at which to render a map."}, 
 {"GeodesicClosing", "GeodesicClosing[image, ker] gives the geodesic closing \
of image with respect to the structuring element ker. GeodesicClosing[image, \
r] gives the geodesic closing with respect to a range r square. \
GeodesicClosing[data, \[Ellipsis]] applies geodesic closing to an array of \
data."}, {"GeodesicDilation", "GeodesicDilation[marker, mask] gives the fixed \
point of the geodesic dilation of the marker constrained by the mask."}, 
 {"GeodesicErosion", "GeodesicErosion[marker, mask] gives the fixed point of \
the geodesic erosion of the marker constrained by the mask."}, 
 {"GeodesicOpening", "GeodesicOpening[image, ker] gives the geodesic opening \
of image with respect to the structuring element ker. GeodesicOpening[image, \
r] gives the geodesic opening with respect to a range r square. \
GeodesicOpening[data, \[Ellipsis]] applies geodesic opening to an array of \
data."}, {"GeodesyData", "GeodesyData[\"\\!\\(\\*name\", \
\"\\!\\(\\*property\"] gives the value of the specified property for a named \
geodetic datum or reference ellipsoid. GeodesyData[{a, b}, \
\"\\!\\(\\*property\"] gives the value of the property for the ellipsoid with \
semimajor axis a and semiminor axis b. GeodesyData[obj, \
{\"\\!\\(\\*property\", coords}] gives the value of the property at the \
specified coordinates."}, {"GeogravityModelData", "GeogravityModelData[] \
returns the gravitational field data for the current location. \
GeogravityModelData[locationspec] returns the gravitational field data for a \
location. GeogravityModelData[locationspec, component] returns the component \
of the gravitational field."}, {"GeologicalPeriodData", "GeologicalPeriodData\
[entity, property] gives the value of the specified property for the \
geological period entity. GeologicalPeriodData[{entity1, entity2, \
\[Ellipsis]}, property] gives a list of property values for the specified \
period name entities. GeologicalPeriodData[entity, property, annotation] \
gives the specified annotation associated with the given property."}, 
 {"GeomagneticModelData", "GeomagneticModelData[] returns the current \
magnetic field data for the current location. \
GeomagneticModelData[locationspec] returns the current magnetic field data \
for a location. GeomagneticModelData[datespec] returns the magnetic field \
data for the specified time for the current location. \
GeomagneticModelData[locationspec, datespec] returns the magnetic field data \
for the specified time and location. GeomagneticModelData[locationspec, \
datespec, component] returns the component of the magnetic field for the \
specified time and location."}, {"GeometricAssertion", "GeometricAssertion[ob\
j, prop] represents the assertion that the geometric object obj satisfies \
prop. GeometricAssertion[{obj1, obj2, \[Ellipsis]}, prop] represents the \
assertion that the obji satisfy prop. GeometricAssertion[objs, prop1, prop2, \
\[Ellipsis]] represents the assertion that objs satisfies each of the propi."}\
, {"GeometricBrownianMotionProcess", "GeometricBrownianMotionProcess[\[Mu], \
\[Sigma], x0] represents a geometric Brownian motion process with drift \
\[Mu], volatility \[Sigma], and initial value x0."}, 
 {"GeometricDistribution", "GeometricDistribution[p] represents a geometric \
distribution with probability parameter p."}, 
 {"GeometricMean", 
  "GeometricMean[list] gives the geometric mean of the values in list."}, 
 {"GeometricMeanFilter", "GeometricMeanFilter[data, r] filters data by \
replacing every value by the geometric mean value in its range-r \
neighborhood. GeometricMeanFilter[data, {r1, r2, \[Ellipsis]}] uses ri for \
filtering the i^th dimension in data."}, {"GeometricOptimization", "Geometric\
Optimization[f, cons, vars] finds positive values of variables vars that \
minimize the posynomial objective subject to posynomial constraints cons. \
GeometricOptimization[{a0, b0}, {{a1, b1}, \[Ellipsis]}, {aeq, beq}] finds \
the positive vector x = E^y that minimizes \[Sum]j = 1k0E^a0j.y + b0j subject \
to inequality constraints \[Sum]j = 1kiE^aij.y + bij<= 1, i = 1, \[Ellipsis], \
s and linear equality constraints aeq.y + beq = 0. \
GeometricOptimization[\[Ellipsis], \"\\!\\(\\*prop\"] specifies what solution \
property \"\\!\\(\\*prop\" should be returned."}, 
 {"GeometricScene", "GeometricScene[{p1, p2, \[Ellipsis]}, {hyp1, hyp2, \
\[Ellipsis]}] represents an abstract 2D geometric scene defined by the \
hypotheses hypi in terms of the symbolic points pi. GeometricScene[{{p1, p2, \
\[Ellipsis]}, {k1, k2, \[Ellipsis]}}, hyps] represents a scene whose \
hypotheses depend on the symbolic scalar quantities ki. \
GeometricScene[{{p1->{x1, y1}, \[Ellipsis]}, {k1->v1, \[Ellipsis]}}, hyps] \
represents a specific instance with explicit values for all points and scalar \
quantities. GeometricScene[params, hyps, {con1, con2, \[Ellipsis]}] \
represents a scene together with some conclusions coni about it. \
GeometricScene[{{{p1->{x1, y1}, \[Ellipsis]}, {k1->v1, \[Ellipsis]}}, \
\[Ellipsis]}, hyps] represents a collection of specific instances of the same \
scene. GeometricScene[{scene1, scene2, \[Ellipsis]}] combines several scene \
instances into one scene object."}, {"GeometricStep", "GeometricStep[{hyp1, \
hyp2, \[Ellipsis]}] gives a symbolic representation of a step in the \
definition of a geometric scene, in which the hypotheses hypi are introduced. \
GeometricStep[hyps, label] labels the step with label when displaying an \
instance of the geometric scene."}, {"GeometricTest", "GeometricTest[obj, \
prop] tests whether the geometric object obj satisfies prop. \
GeometricTest[{obj1, obj2, \[Ellipsis]}, prop] tests whether the obji satisfy \
prop. GeometricTest[objs, prop1, prop2, \[Ellipsis]] tests whether objs \
satisfy each of the propi."}, {"GeometricTransformation", "GeometricTransform\
ation[g, tfun] represents the result of applying the transformation function \
tfun to the geometric objects corresponding to the primitives g. \
GeometricTransformation[g, m] transforms geometric objects in g by \
effectively replacing every point r by m.r. GeometricTransformation[g, {m, \
v}] effectively replaces every point r by m.r + v. GeometricTransformation[g, \
{t1, t2, \[Ellipsis]}] represents multiple copies of g transformed by a \
collection of transformations."}, {"GestureHandler", "GestureHandler[expr, \
{\"\\!\\(\\*gesture_1\":>fun1, \"\\!\\(\\*gesture_2\":>fun2, \[Ellipsis]] \
displays as expr, evaluating funi[value, velocity] whenever \
\"\\!\\(\\*gesture_i\" occurs within the screen space occupied by expr. \
GestureHandler[expr, {\"\\!\\(\\*gesture\":>{fun, funend}, \[Ellipsis]}] \
evaluates fun as updates are received for \"\\!\\(\\*gesture\", followed by \
funend[value, velocity] when the gesture ends. GestureHandler[expr, \
{\"\\!\\(\\*gesture\":>{funstart, fun, funend}, \[Ellipsis]}] also evaluates \
fstart[value, velocity] when \"\\!\\(\\*gesture\" begins."}, 
 {"Get", "<<name reads in a file, evaluating each expression in it and \
returning the last one. Get[stream] reads from a stream, evaluating each \
expression in it and returning the last one. Get[\"\\!\\(\\*file\", \
\"\\!\\(\\*key\"] reads a file that has been encoded using \
Encode[\"\\!\\(\\*source\", \"\\!\\(\\*file\", \"\\!\\(\\*key\"]."}, 
 {"GetEnvironment", "GetEnvironment[\"\\!\\(\\*var\"] gives the setting \
corresponding to the variable \"\\!\\(\\*var\" in the operating system \
environment. GetEnvironment[{\"\\!\\(\\*var_1\", \"\\!\\(\\*var_2\", \
\[Ellipsis]}] gives a list of rules, corresponding to specified environment \
variables. GetEnvironment[] gives information about all existing settings in \
the operating system environment."}, {"GibbsPointProcess", "GibbsPointProcess\
[{\"PairPotential\", \[Mu], \[Phi]}, d] represents a Gibbs point process with \
density \[Mu] and pair-potential function \[Phi] in \
\[DoubleStruckCapitalR]^d. GibbsPointProcess[{\"PairInteraction\", \[Mu], h}, \
d] represents a Gibbs point process with density \[Mu] and pair-interaction \
function h in \[DoubleStruckCapitalR]^d. GibbsPointProcess[{\"Papangelou\", \
\[Lambda]^*}, d] represents a Gibbs point process with Papangelou conditional \
density \[Lambda]^* in \[DoubleStruckCapitalR]^d. \
GibbsPointProcess[{\"Density\", f}, d] represents a Gibbs point process with \
density function proportional to f in \[DoubleStruckCapitalR]^d."}, 
 {"Glaisher", 
  "Glaisher is Glaisher's constant with numerical value \
\[TildeEqual]1.28243."}, {"GlobalClusteringCoefficient", "GlobalClusteringCoe\
fficient[g] gives the global clustering coefficient of the graph g. \
GlobalClusteringCoefficient[{v->w, \[Ellipsis]}] uses rules v->w to specify \
the graph g."}, {"Glow", "Glow[col] is a graphics directive which specifies \
that surfaces of 3D graphics objects that follow are to be taken to glow with \
color col. Glow[] specifies that there is no glow."}, 
 {"GoldenAngle", "GoldenAngle is the golden angle (3 - \[Sqrt]5) \[Pi], with \
numerical value \[TildeEqual]137.5\[Degree]."}, 
 {"GoldenRatio", "GoldenRatio is the golden ratio \[Phi]==1/2 (\[Sqrt]5 + 1), \
with numerical value \[TildeEqual]1.61803."}, {"GompertzMakehamDistribution", 
  "GompertzMakehamDistribution[\[Lambda], \[Xi]] represents a Gompertz \
distribution with scale parameter \[Lambda] and frailty parameter \[Xi]. \
GompertzMakehamDistribution[\[Lambda], \[Xi], \[Theta], \[Alpha]] represents \
a Gompertz-Makeham distribution with parameters \[Lambda], \[Xi], \[Theta], \
and \[Alpha]."}, {"GoochShading", "GoochShading[] is a three-dimensional \
graphics directive specifying that surfaces that follow are to be drawn with \
a warm color facing toward the light and a cool color facing away. \
GoochShading[col] uses cool and warm colors obtained by blending col with \
slate Blue and Orange. GoochShading[{ccol, wcol}] uses the cool color ccol \
and the warm color wcol. GoochShading[{w1, w2}->{ccol, wcol}] uses the colors \
ccol and wcol weighted by the wi. GoochShading[\"\\!\\(\\*scheme\"] uses the \
specified gradient color scheme in ColorData."}, 
 {"GoodmanKruskalGamma", "GoodmanKruskalGamma[v1, v2] gives the \
Goodman-Kruskal \[Gamma] coefficient for the vectors v1 and v2. \
GoodmanKruskalGamma[m] gives the Goodman-Kruskal \[Gamma] coefficients for \
the matrix m. GoodmanKruskalGamma[m1, m2] gives the Goodman-Kruskal \[Gamma] \
coefficients for the matrices m1 and m2. GoodmanKruskalGamma[dist] gives the \
\[Gamma] coefficient matrix for the multivariate symbolic distribution dist. \
GoodmanKruskalGamma[dist, i, j] gives the (i, j)^th \[Gamma] coefficient for \
the multivariate symbolic distribution dist."}, 
 {"GoodmanKruskalGammaTest", "GoodmanKruskalGammaTest[v1, v2] tests whether \
the vectors v1 and v2 are independent. \
GoodmanKruskalGammaTest[\[Ellipsis],\"\\!\\(\\*property\"] returns the value \
of \"\\!\\(\\*property\"."}, 
 {"Goto", 
  "Goto[tag] scans for Label[tag], and transfers control to that point."}, 
 {"Grad", "Grad[f, {x1, \[Ellipsis], xn}] gives the gradient (\[PartialD]f / \
\[PartialD]x1, \[Ellipsis], \[PartialD]f / \[PartialD]xn). Grad[f, {x1, \
\[Ellipsis], xn}, chart] gives the gradient in the coordinates chart."}, 
 {"Gradient", "Gradient is an option for FindMinimum and related functions \
that specifies the gradient vector to assume for the function being \
extremized."}, {"GradientFilter", "GradientFilter[data, r] gives the \
magnitude of the gradient of data, computed using discrete derivatives of a \
Gaussian of sample radius r. GradientFilter[data, {r, \[Sigma]}] uses a \
Gaussian with standard deviation \[Sigma]. GradientFilter[data, {{r1, r2, \
\[Ellipsis]}, \[Ellipsis]}] uses a Gaussian with radius ri at level i in \
data."}, {"GradientOrientationFilter", "GradientOrientationFilter[data, r] \
gives the local orientation parallel to the gradient of data, computed using \
discrete derivatives of a Gaussian of pixel radius r, returning values \
between - \[Pi] / 2 and \[Pi] / 2. GradientOrientationFilter[data, {r, \
\[Sigma]}] uses a Gaussian with standard deviation \[Sigma]."}, 
 {"GrammarApply", "GrammarApply[grammar, input] attempts to parse input \
according to the grammar defined by grammar."}, 
 {"GrammarRules", "GrammarRules[rules] represents grammar rules to be \
deployed to a cloud object that implements the grammar in a form suitable for \
use with functions like GrammarApply and Interpreter. GrammarRules[rules, \
defs] uses grammar definitions defs."}, {"GrammarToken", "GrammarToken[form] \
is a grammar rules pattern object that represents any input of the specified \
form."}, {"Graph", "Graph[{e1, e2, \[Ellipsis]}] yields a graph with edges \
ej. Graph[{v1, v2, \[Ellipsis]}, {e1, e2, \[Ellipsis]}] yields the graph with \
vertices vi and edges ej. Graph[{\[Ellipsis], wi[vi, \[Ellipsis]], \
\[Ellipsis]}, {\[Ellipsis], wj[ej, \[Ellipsis]], \[Ellipsis]}] yields a graph \
with vertex and edge properties defined by the symbolic wrappers wk."}, 
 {"Graph3D", "Graph3D[g] creates a graph with vertices and edges from the \
graph g and represented as a 3D plot. Graph3D[{e1, e2, \[Ellipsis]}] creates \
a graph with edges ej and represented as a 3D plot. Graph3D[{v1, v2, \
\[Ellipsis]}, {e1, e2, \[Ellipsis]}] creates a graph with vertices vi and \
edges ej."}, {"GraphAssortativity", "GraphAssortativity[g] gives the \
assortativity coefficient of a graph g using vertex degrees. \
GraphAssortativity[g, \"\\!\\(\\*prop\"] gives the assortativity coefficient \
of the graph g using vertex property \"\\!\\(\\*prop\". GraphAssortativity[g, \
{{vi1, vi2, \[Ellipsis]}, \[Ellipsis]}] gives the assortativity coefficient \
of the graph g with respect to the vertex partition {{vi1, vi2, \[Ellipsis]}, \
\[Ellipsis]}. GraphAssortativity[g, {v1, v2, \[Ellipsis]}->{x1, x2, \
\[Ellipsis]}] gives the assortativity coefficient of the graph g using data \
{x1, x2, \[Ellipsis]} for vertices {v1, v2, \[Ellipsis]}. \
GraphAssortativity[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to \
specify the graph g."}, {"GraphAutomorphismGroup", "GraphAutomorphismGroup[g] \
gives the automorphism group of a graph g. GraphAutomorphismGroup[{v->w, \
\[Ellipsis]}] uses rules v->w to specify the graph g."}, 
 {"GraphCenter", "GraphCenter[g] gives the set of vertices with minimum \
eccentricity in the graph g. GraphCenter[{v->w, \[Ellipsis]}] uses rules v->w \
to specify the graph g."}, {"GraphComplement", "GraphComplement[g] gives the \
graph complement of the graph g. GraphComplement[{v->w, \[Ellipsis]}] uses \
rules v->w to specify the graph g."}, {"GraphData", "GraphData[name] gives a \
graph with the specified name. GraphData[entity] gives the graph \
corresponding to the graph entity. GraphData[entity, property] gives the \
value of the property for the specified graph entity. GraphData[class] gives \
a list of available named graphs in the specified graph class. GraphData[n] \
gives a list of available named graphs with n vertices."}, 
 {"GraphDensity", "GraphDensity[g] gives the graph density of the graph g. \
GraphDensity[{v->w, \[Ellipsis]}] uses rules v->w to specify the graph g."}, 
 {"GraphDiameter", "GraphDiameter[g] gives the greatest distance between any \
pair of vertices in the graph g. GraphDiameter[{v->w, \[Ellipsis]}] uses \
rules v->w to specify the graph g."}, {"GraphDifference", "GraphDifference[g1\
, g2] gives the graph difference of the graphs g1 and g2. \
GraphDifference[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify \
the graph g."}, {"GraphDisjointUnion", "GraphDisjointUnion[g1, g2] gives the \
graph disjoint union of the graphs g1 and g2. GraphDisjointUnion[g1, g2, \
\[Ellipsis]] gives the disjoint union of g1, g2, \[Ellipsis]. \
GraphDisjointUnion[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to \
specify the graph g."}, {"GraphDistance", "GraphDistance[g, s, t] gives the \
distance from source vertex s to target vertex t in the graph g. \
GraphDistance[g, s] gives the distance from s to all vertices of the graph g. \
GraphDistance[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify \
the graph g."}, {"GraphDistanceMatrix", "GraphDistanceMatrix[g] gives the \
matrix of distances between vertices for the graph g. GraphDistanceMatrix[g, \
d] gives the matrix of distances between vertices of maximal distance d in \
the graph g. GraphDistanceMatrix[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules \
v->w to specify the graph g."}, {"GraphEmbedding", "GraphEmbedding[g] gives \
coordinates of the vertices of the graph g. GraphEmbedding[g, \
\"\\!\\(\\*emb\"] gives coordinates of the vertices of the graph g using the \
embedding \"\\!\\(\\*emb\". GraphEmbedding[g, \"\\!\\(\\*emb\", dim] gives \
coordinates in dimension dim of the vertices of the graph g using the \
embedding \"\\!\\(\\*emb\"."}, {"GraphHighlight", "GraphHighlight is an \
option to Graph and related objects that specifies graph elements to \
highlight."}, {"GraphHighlightStyle", "GraphHighlightStyle is an option to \
Graph and related objects that specifies styles to use for highlighted graph \
elements."}, {"GraphHub", "GraphHub[g] gives the set of vertices with maximum \
vertex degree in the underlying simple graph of g. GraphHub[g, \"In\"] gives \
the set of vertices with maximum vertex in-degree. GraphHub[g, \"Out\"] gives \
the set of vertices with maximum vertex out-degree. GraphHub[{v->w, \
\[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify the graph g."}, 
 {"GraphIntersection", "GraphIntersection[g1, g2] gives the graph \
intersection of the graphs g1 and g2. GraphIntersection[g1, g2, \[Ellipsis]] \
gives the graph intersection of g1, g2, \[Ellipsis]. GraphIntersection[{v->w, \
\[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify the graph g."}, 
 {"GraphLayerStyle", "GraphLayerStyle is an option for LayeredGraphPlot3D and \
related functions that specifies the style in which to draw a layer on the \
plot."}, {"GraphLayers", "GraphLayers is an option for LayeredGraphPlot3D and \
related functions that specifies layers to draw on the plot."}, 
 {"GraphLayout", "GraphLayout is an option to Graph and related functions \
that specifies what layout to use."}, {"GraphLinkEfficiency", "GraphLinkEffic\
iency[g] gives the link efficiency of the graph g. GraphLinkEfficiency[{v->w, \
\[Ellipsis]}] uses rules v->w to specify the graph g."}, 
 {"GraphPeriphery", "GraphPeriphery[g] gives vertices that are maximally \
distant to at least one vertex in the graph g. GraphPeriphery[{v->w, \
\[Ellipsis]}] uses rules v->w to specify the graph g."}, 
 {"GraphPlot", "GraphPlot[g] generates a plot of the graph g. GraphPlot[{e1, \
e2, \[Ellipsis]}] generates a plot of the graph with edges ei. \
GraphPlot[{\[Ellipsis], w[ei], \[Ellipsis]}] plots ei with features defined \
by the symbolic wrapper w. GraphPlot[{vi1->vj1, \[Ellipsis]}] uses rules \
vik->vjk to specify the graph g. GraphPlot[m] uses the adjacency matrix m to \
specify the graph g."}, {"GraphPlot3D", "GraphPlot3D[g] generates a 3D plot \
of the graph g. GraphPlot3D[{e1, e2, \[Ellipsis]}] generates a 3D plot of the \
graph with edges ei. GraphPlot3D[{\[Ellipsis], w[ei], \[Ellipsis]}] plots ei \
with features defined by the symbolic wrapper w. GraphPlot3D[{vi1->vj1, \
\[Ellipsis]}] uses rules vik->vjk to specify the graph g. GraphPlot3D[m] uses \
the adjacency matrix m to specify the graph g."}, 
 {"GraphPower", "GraphPower[g, n] gives the graph-n^th power of the graph g. \
GraphPower[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify the \
graph g."}, {"GraphPropertyDistribution", "GraphPropertyDistribution[expr, \
x\[Distributed]gdist] represents the distribution of the property expr where \
the random variable x follows the graph distribution gdist. \
GraphPropertyDistribution[expr, {x1\[Distributed]gdist1, \
x2\[Distributed]gdist2, \[Ellipsis]}] represents the distribution where x1, \
x2, \[Ellipsis] are independent and follow the graph distributions gdist1, \
gdist2, \[Ellipsis]."}, {"GraphQ", 
  "GraphQ[g] yields True if g is a valid Graph object and False otherwise."}, 
 {"GraphRadius", "GraphRadius[g] gives the minimum eccentricity of the \
vertices in the graph g. GraphRadius[{v->w, \[Ellipsis]}] uses rules v->w to \
specify the graph g."}, {"GraphReciprocity", "GraphReciprocity[g] gives the \
reciprocity of a graph g. GraphReciprocity[{v->w, \[Ellipsis]}] uses rules \
v->w to specify the graph g."}, {"GraphTree", "GraphTree[g] constructs a tree \
from the tree graph g. GraphTree[g, root] specify what vertex to use as root. \
GraphTree[g, root, h] applies h to each vertex to get the corresponding data \
and ordering of subtrees."}, {"GraphUnion", "GraphUnion[g1, g2] gives the \
graph union of the graphs g1 and g2. GraphUnion[g1, g2, \[Ellipsis]] gives \
the graph union of g1, g2, \[Ellipsis]. GraphUnion[{v->w, \[Ellipsis]}, \
\[Ellipsis]] uses rules v->w to specify the graph g."}, 
 {"Graphics", "Graphics[primitives, options] represents a two-dimensional \
graphical image."}, {"Graphics3D", "Graphics3D[primitives, options] \
represents a three-dimensional graphical image."}, 
 {"GraphicsColumn", "GraphicsColumn[{g1, g2, \[Ellipsis]}] generates a \
graphic in which the gi are laid out in a column, with g1 above g2, etc. \
GraphicsColumn[list, alignment] aligns each element horizontally in the \
specified way. GraphicsColumn[list, alignment, spacing] leaves the specified \
spacing between successive elements."}, {"GraphicsComplex", "GraphicsComplex[\
{pt1, pt2, \[Ellipsis]}, data] represents a graphics complex in which \
coordinates given as integers i in graphics primitives in data are taken to \
be pti."}, {"GraphicsGrid", "GraphicsGrid[{{g11, g12, \[Ellipsis]}, \
\[Ellipsis]}] generates a graphic in which the gij are laid out in a \
two-dimensional grid."}, {"GraphicsGroup", "GraphicsGroup[{g1, g2, \
\[Ellipsis]}] represents a collection of graphics objects grouped together \
for purposes of interactive selection in a notebook."}, 
 {"GraphicsRow", "GraphicsRow[{g1, g2, \[Ellipsis]}] generates a graphic in \
which the gi are laid out in a row. GraphicsRow[list, spacing] leaves the \
specified spacing between successive elements."}, 
 {"Gray", 
  "Gray represents the color gray in graphics or style specifications."}, 
 {"GrayLevel", "GrayLevel[g] represents a color in the grayscale color space \
with gray level g. GrayLevel[g, a] specifies opacity a. \
GrayLevel[\"\\!\\(\\*string\"] returns a color from an HTML color name etc. \
GrayLevel[color] returns the grayscale representation of color."}, 
 {"Greater", "x>y yields True if x is determined to be greater than y. \
x1>x2>x3 yields True if the xi form a strictly decreasing sequence."}, 
 {"GreaterEqual", "x>=y or x>=y yields True if x is determined to be greater \
than or equal to y. x1>=x2>=x3 yields True if the xi form a nonincreasing \
sequence."}, {"GreaterEqualLess", "GreaterEqualLess[x, y, \[Ellipsis]] \
displays as x\[GreaterEqualLess]y\[GreaterEqualLess]\[Ellipsis]."}, 
 {"GreaterEqualThan", "GreaterEqualThan[y] is an operator form that yields \
x>=y when applied to an expression x."}, {"GreaterFullEqual", "GreaterFullEqu\
al[x, y, \[Ellipsis]] displays as \
x\[GreaterFullEqual]y\[GreaterFullEqual]\[Ellipsis]."}, 
 {"GreaterGreater", "GreaterGreater[x, y, \[Ellipsis]] displays as \
x\[GreaterGreater]y\[GreaterGreater]\[Ellipsis]."}, 
 {"GreaterLess", "GreaterLess[x, y, \[Ellipsis]] displays as \
x\[GreaterLess]y\[GreaterLess]\[Ellipsis]."}, {"GreaterSlantEqual", "GreaterS\
lantEqual[x, y, \[Ellipsis]] displays as \
x\[GreaterSlantEqual]y\[GreaterSlantEqual]\[Ellipsis]."}, 
 {"GreaterThan", "GreaterThan[y] is an operator form that yields x>y when \
applied to an expression x."}, {"GreaterTilde", "GreaterTilde[x, y, \
\[Ellipsis]] displays as x\[GreaterTilde]y\[GreaterTilde]\[Ellipsis]."}, 
 {"Green", 
  "Green represents the color green in graphics or style specifications."}, 
 {"GreenFunction", "GreenFunction[{\[ScriptCapitalL][u[x]], \
\[ScriptCapitalB][u[x]]}, u, {x, xmin, xmax}, y] gives a Green's function for \
the linear differential operator \[ScriptCapitalL] with boundary conditions \
\[ScriptCapitalB] in the range xmin to xmax. \
GreenFunction[{\[ScriptCapitalL][u[x1, x2, \[Ellipsis]]], \
\[ScriptCapitalB][u[x1, x2, \[Ellipsis]]]}, u, {x1, x2, \
\[Ellipsis]}\[Element]\[CapitalOmega], {y1, y2, \[Ellipsis]}] gives a Green's \
function for the linear partial differential operator \[ScriptCapitalL] over \
the region \[CapitalOmega]. GreenFunction[{\[ScriptCapitalL][u[x, t]], \
\[ScriptCapitalB][u[x, t]]}, u, {x, xmin, xmax}, t, {y, \[Tau]}] gives a \
Green's function for the linear time-dependent operator \[ScriptCapitalL] in \
the range xmin to xmax. GreenFunction[{\[ScriptCapitalL][u[x1, \[Ellipsis], \
t]], \[ScriptCapitalB][u[x1, \[Ellipsis],t]]}, u, {x1, \
\[Ellipsis]}\[Element]\[CapitalOmega], t, {y1, \[Ellipsis], \[Tau]}] gives a \
Green's function for the linear time-dependent operator \[ScriptCapitalL] \
over the region \[CapitalOmega]."}, {"Grid", "Grid[{{expr11, expr12, \
\[Ellipsis]}, {expr21, expr22, \[Ellipsis]}, \[Ellipsis]}] is an object that \
formats with the exprij arranged in a two-dimensional grid."}, 
 {"GridBox", "GridBox[{{box11, box12, \[Ellipsis]}, {box21, box22, \
\[Ellipsis]}, \[Ellipsis]}] is a low-level box construct that represents a \
two-dimensional grid of boxes or strings in notebook expressions."}, 
 {"GridDefaultElement", "GridDefaultElement is an option for the low-level \
function GridBox that specifies what to insert when a new element is created \
interactively in a GridBox."}, {"GridGraph", "GridGraph[{m, n}] gives the \
grid graph with m\[Times]n vertices Gm, n. GridGraph[{n1, n2, \[Ellipsis], \
nk}] gives the k -dimensional grid graph with \
n1\[Times]n2\[Times]\[CenterEllipsis]\[Times]nk vertices Gn1, n2, \
\[Ellipsis], nk."}, {"GridLines", "GridLines is an option for two-dimensional \
graphics functions that specifies grid lines."}, 
 {"GridLinesStyle", "GridLinesStyle is an option for 2D graphics functions \
that specifies how grid lines should be rendered."}, 
 {"GroebnerBasis", "GroebnerBasis[{poly1, poly2, \[Ellipsis]}, {x1, x2, \
\[Ellipsis]}] gives a list of polynomials that form a Gr\[ODoubleDot]bner \
basis for the set of polynomials polyi. GroebnerBasis[{poly1, poly2, \
\[Ellipsis]}, {x1, x2, \[Ellipsis]}, {y1, y2, \[Ellipsis]}] finds a \
Gr\[ODoubleDot]bner basis in which the yi have been eliminated."}, 
 {"GroupActionBase", 
  "GroupActionBase is an option to specify a base for a group."}, 
 {"GroupBy", "GroupBy[{elem1, elem2, \[Ellipsis]}, f] gives an association \
that groups the elemi into lists associated with distinct keys f[elemi]. \
GroupBy[{elem1, elem2, \[Ellipsis]}, fk->fv] groups the fv[elemi] according \
to the fk[elemi]. GroupBy[{elem1, elem2, \[Ellipsis]}, {fs1, fs2, \
\[Ellipsis]}] groups into nested associations using fsi at level i. \
GroupBy[{elem1, elem2, \[Ellipsis]}, spec, red] applies the function red to \
reduce lists of values that are generated. GroupBy[spec] represents an \
operator form of GroupBy that can be applied to an expression."}, 
 {"GroupCentralizer", "GroupCentralizer[group, g] returns the centralizer of \
the element g in group."}, {"GroupElementFromWord", "GroupElementFromWord[gro\
up, w] returns the element of group determined by the word w in the \
generators of group."}, {"GroupElementPosition", "GroupElementPosition[group, \
g] returns the position of the element g in the list of elements of group. \
GroupElementPosition[group, {g1, \[Ellipsis], gn}] returns the list of \
positions of the elements g1, \[Ellipsis], gn in group."}, 
 {"GroupElementQ", "GroupElementQ[group, g] returns True if the object g is \
an element of group and False otherwise."}, {"GroupElementToWord", "GroupElem\
entToWord[group, g] decomposes the group element g as a product of generators \
of group."}, {"GroupElements", "GroupElements[group] returns the list of all \
elements of group. GroupElements[group, {r1, \[Ellipsis], rk}] returns the \
elements numbered r1, \[Ellipsis], rk in group in the standard order."}, 
 {"GroupGenerators", 
  "GroupGenerators[group] returns a list of generators of group."}, 
 {"GroupMultiplicationTable", "GroupMultiplicationTable[group] gives the \
multiplication table of group as an array."}, {"GroupOrbits", "GroupOrbits[gr\
oup, {p1, \[Ellipsis]}] returns the orbits of the points pi under the action \
of the elements of group. GroupOrbits[group, {p1, \[Ellipsis]}, f] finds the \
orbits under the group action given by a function f."}, 
 {"GroupOrder", 
  "GroupOrder[group] returns the number of elements of group."}, 
 {"GroupPageBreakWithin", "GroupPageBreakWithin is an option for Cell that \
specifies whether a page break should be allowed within the group of cells if \
the notebook that contains the group is printed."}, 
 {"GroupSetwiseStabilizer", "GroupSetwiseStabilizer[group, {p1, \[Ellipsis], \
pn}] returns the subgroup of group for which the images of the points pi are \
still in the list {p1, \[Ellipsis], pn}. GroupSetwiseStabilizer[group, {p1, \
\[Ellipsis], pn}, f] returns the setwise stabilizer subgroup under the action \
given by the function f."}, {"GroupStabilizer", "GroupStabilizer[group, {p1, \
\[Ellipsis], pn}] returns the subgroup of elements of group that move none of \
the points p1, \[Ellipsis], pn. GroupStabilizer[group, {p1, \[Ellipsis], pn}, \
f] returns the stabilizer subgroup under the action given by the function f."}\
, {"GroupStabilizerChain", "GroupStabilizerChain[group] returns a list of \
successive stabilizers in group of the points in a base of group."}, 
 {"Groupings", "Groupings[n, k] gives a list of all possible groupings of 1, \
\[Ellipsis], n taken k at a time. Groupings[{a1, \[Ellipsis], an}, k] gives \
all possible groupings of a1, \[Ellipsis], an taken k at a time. \
Groupings[{{a1, a2, \[Ellipsis]}, {b1, b2, \[Ellipsis]}, \[Ellipsis]}, k] \
gives the combination of all possible groupings of each of the lists ai, bi, \
\[Ellipsis] taken k at a time. Groupings[aspec, f->k] gives all possible \
groupings of aspec taken k at a time with the function f applied at each \
level. Groupings[aspec, {f1->k1, f2->k2, \[Ellipsis]}] gives all possible \
groupings in which the function fi is applied to ki elements. \
Groupings[aspec, {{f1->k1, m1}, {f2->k2, m2}, \[Ellipsis]}] allows at most mi \
occurrences in a given grouping of fi applied to ki elements. \
Groupings[aspec, kspec, h] wraps the function h around each grouping \
generated."}, {"GrowCutComponents", "GrowCutComponents[image, {marker1, \
marker2, \[Ellipsis]}] creates a segmentation from image by growing each \
markeri."}, {"Gudermannian", 
  "Gudermannian[z] gives the Gudermannian function gd(z)."}, 
 {"GuidedFilter", "GuidedFilter[image, guide, r, \[Epsilon]] filters image \
using the guide image guide over range-r neighborhoods with pixel-value \
regularizer \[Epsilon]. GuidedFilter[image, r, \[Epsilon]] filters image so \
as to reduce noise, using image as the guide."}, 
 {"GumbelDistribution", "GumbelDistribution[\[Alpha], \[Beta]] represents a \
Gumbel distribution with location parameter \[Alpha] and scale parameter \
\[Beta]. GumbelDistribution[] represents a Gumbel distribution with location \
parameter 0 and scale parameter 1."}, {"HITSCentrality", "HITSCentrality[g] \
gives a list of authority and hub centralities for the vertices in the graph \
g. HITSCentrality[{v->w, \[Ellipsis]}] uses rules v->w to specify the graph \
g."}, {"HTTPErrorResponse", "HTTPErrorResponse[code] is an object that \
represents an error response to an HTTP request, with specified error code."}\
, {"HTTPRedirect", "HTTPRedirect[uri] represents an HTTP redirect to the \
specified uri. HTTPRedirect[uri, metadata] represents an HTTP redirect to uri \
with the specified metadata."}, {"HTTPRequest", "HTTPRequest[url] represents \
an HTTP request for the specified URL. HTTPRequest[assoc] represents an HTTP \
request built from the components in the association assoc. HTTPRequest[url, \
assoc] represents an HTTP request for the specified URL with additional \
elements such as headers given by assoc."}, {"HTTPRequestData", "HTTPRequestD\
ata[\"\\!\\(\\*prop\"] gives the value of the specified property of the \
current HTTP request. HTTPRequestData[] gives an association with values of \
properties of the current HTTP request."}, {"HTTPResponse", "HTTPResponse[bod\
y] is an object that represents a successful response to an HTTP request, \
with the specified body and default metadata. HTTPResponse[body, metadata] \
represents a response to an HTTP request, including the specified body and \
metadata."}, {"HaarWavelet", "HaarWavelet[] represents a Haar wavelet."}, 
 {"HadamardMatrix", 
  "HadamardMatrix[n] returns an n \[Times]n Hadamard matrix."}, 
 {"HalfLine", "HalfLine[{p1, p2}] represents the half-line from the point p1 \
through p2. HalfLine[p, v] represents the half-line from the point p in the \
direction v."}, {"HalfNormalDistribution", "HalfNormalDistribution[\[Theta]] \
represents a half-normal distribution with scale inversely proportional to \
parameter \[Theta]."}, {"HalfPlane", "HalfPlane[{p1, p2}, w] represents the \
half-plane bounded by the line through p1 and p2 and extended in the \
direction w. HalfPlane[p, v, w] represents the half-plane bounded by the line \
through p along v and extended in the direction w."}, 
 {"HalfSpace", "HalfSpace[n, p] represents the half-space of points x such \
that n.(x - p)<=0. HalfSpace[n, c] represents the half-space of points x such \
that n.x<=c."}, {"HalftoneShading", "HalftoneShading[] is a three-dimensional \
graphics directive specifying that surfaces that follow are to be drawn with \
a base pattern of dots. HalftoneShading[d] uses the density d of shading. \
HalftoneShading[col] uses dots with the specified color col. \
HalftoneShading[\"\\!\\(\\*shape\"] uses the specified \"\\!\\(\\*shape\" as \
base pattern. HalftoneShading[d, col, \"\\!\\(\\*shape\"] uses a fixed \
pattern of \"\\!\\(\\*shape\" with the specified color col and density d."}, 
 {"HamiltonianGraphQ", "HamiltonianGraphQ[g] yields True if the graph g is \
Hamiltonian, and False otherwise."}, {"HammingDistance", "HammingDistance[u, \
v] gives the Hamming distance between strings or vectors u and v. \
HammingDistance[u, v] gives the Hamming distance between strings, vectors or \
biomolecular sequences u and v."}, {"HammingWindow", 
  "HammingWindow[x] represents a Hamming window function of x."}, 
 {"HandlerFunctions", "HandlerFunctions is an option for asynchronous \
operations that specifies functions to apply when events are generated."}, 
 {"HandlerFunctionsKeys", "HandlerFunctionsKeys is an option for asynchronous \
operations that specifies the content of associations to which to apply \
handler functions."}, {"HankelH1", 
  "HankelH1[n, z] gives the Hankel function of the first kind Hn(1)(z)."}, 
 {"HankelH2", 
  "HankelH2[n, z] gives the Hankel function of the second kind Hn(2)(z)."}, 
 {"HankelMatrix", "HankelMatrix[n] gives the n \[Times]n Hankel matrix with \
first row and first column being successive integers. HankelMatrix[{c1, c2, \
\[Ellipsis], cn}] gives the Hankel matrix whose first column consists of \
elements c1, c2, \[Ellipsis]. HankelMatrix[{c1, c2, \[Ellipsis], cm}, {r1, \
r2, \[Ellipsis], rn}] gives the Hankel matrix with elements ci down the first \
column, and ri across the last row."}, {"HankelTransform", "HankelTransform[e\
xpr, r, s] gives the Hankel transform of order 0 for expr. \
HankelTransform[expr, r, s, \[Nu]] gives the Hankel transform of order \[Nu] \
for expr."}, {"HannPoissonWindow", "HannPoissonWindow[x] represents a \
Hann-Poisson window function of x. HannPoissonWindow[x, \[Alpha]] uses the \
parameter \[Alpha]."}, {"HannWindow", "HannWindow[x] represents a Hann window \
function of x. HannWindow[x, \[Alpha]] uses the parameter \[Alpha]."}, 
 {"HaradaNortonGroupHN", "HaradaNortonGroupHN[] represents the sporadic \
simple Harada-Norton group HN."}, {"HararyGraph", "HararyGraph[k, n] \
generates the minimal k -connected graph on n vertices Hk, n."}, 
 {"HardcorePointProcess", "HardcorePointProcess[\[Mu], rh, d] represents a \
hard-core point process with constant intensity \[Mu] and hard-core radius rh \
in \[DoubleStruckCapitalR]^d."}, {"HarmonicMean", 
  "HarmonicMean[list] gives the harmonic mean of the values in list."}, 
 {"HarmonicMeanFilter", "HarmonicMeanFilter[data, r] filters data by \
replacing every value by the harmonic mean value in its range-r neighborhood. \
HarmonicMeanFilter[data, {r1, r2, \[Ellipsis]}] uses ri for filtering the \
i^th dimension in data."}, {"HarmonicNumber", "HarmonicNumber[n] gives the \
n^th harmonic number Hn. HarmonicNumber[n, r] gives the harmonic number Hn(r) \
of order r."}, {"Hash", "Hash[expr] gives an integer hash code for the \
expression expr. Hash[expr, \"\\!\\(\\*type\"] gives an integer hash code of \
the specified type for expr. Hash[expr, \"\\!\\(\\*type\", \
\"\\!\\(\\*format\"] gives a hash code in the specified format."}, 
 {"HatchFilling", "HatchFilling[] is a two-dimensional graphics directive \
that specifies that faces of polygons and other filled graphics objects are \
to be drawn using closely spaced parallel lines. \
HatchFilling[\"\\!\\(\\*name\"] uses the specified line hatching \
\"\\!\\(\\*name\". HatchFilling[\[Theta]] draws parallel lines with an angle \
\[Theta]. HatchFilling[\[Theta], r] draws parallel lines with absolute \
thickness r. HatchFilling[\[Theta], r, d] draws parallel lines with gaps of \
absolute thickness d."}, {"HatchShading", "HatchShading[] is a \
three-dimensional graphics directive specifying that objects that follow are \
to be drawn with closely spaced parallel lines. HatchShading[d] uses the \
density d of shading. HatchShading[col] uses lines with the specified color \
col. HatchShading[d, col] uses lines with the specified color col and density \
d."}, {"Haversine", "Haversine[z] gives the haversine function hav(z)."}, 
 {"HazardFunction", "HazardFunction[dist, x] gives the hazard function for \
the distribution dist evaluated at x. HazardFunction[dist, {x1, x2, \
\[Ellipsis]}] gives the multivariate hazard function for the distribution \
dist evaluated at {x1, x2, \[Ellipsis]}. HazardFunction[dist] gives the \
hazard function as a pure function."}, 
 {"Head", 
  "Head[expr] gives the head of expr. Head[expr, h] wraps the result with h."}\
, {"HeaderAlignment", "HeaderAlignment is an option for Dataset that \
specifies how the contents of a header should be aligned within the available \
area in the header."}, {"HeaderBackground", "HeaderBackground is an option \
for Dataset that specifies what background color to use for row and column \
headers."}, {"HeaderDisplayFunction", "HeaderDisplayFunction is an option for \
Dataset that specifies a function to apply to headers before displaying \
them."}, {"HeaderLines", "HeaderLines is an option for SemanticImport and \
related functions that specifies how many of the initial rows should be \
considered part of a column header."}, {"HeaderSize", "HeaderSize is an \
option for Dataset that specifies the widths and heights of headers."}, 
 {"HeaderStyle", "HeaderStyle is an option for Dataset that specifies the \
style to use for headers."}, {"Heads", "Heads is an option for functions \
which use level specifications that specifies whether heads of expressions \
should be included."}, {"HeatFluxValue", "HeatFluxValue[pred, vars, pars] \
represents a thermal heat flux boundary condition for PDEs with predicate \
pred indicating where it applies, with model variables vars and global \
parameters pars. HeatFluxValue[pred, vars, pars, lkey] represents a thermal \
heat flux boundary condition with local parameters specified in pars[lkey]."}\
, {"HeatInsulationValue", "HeatInsulationValue[pred, vars, pars] represents a \
thermal insulation boundary condition for PDEs with predicate pred indicating \
where it applies, with model variables vars and global parameters pars. \
HeatInsulationValue[pred, vars, pars, lkey] represents a thermal insulation \
boundary condition with local parameters specified in pars[lkey]."}, 
 {"HeatOutflowValue", "HeatOutflowValue[pred, vars, pars] represents a \
thermal outflow boundary condition for PDEs with predicate pred indicating \
where it applies, with model variables vars and global parameters pars. \
HeatOutflowValue[pred, vars, pars, lkey] represents a thermal outflow \
boundary condition with local parameters specified in pars[lkey]."}, 
 {"HeatRadiationValue", "HeatRadiationValue[pred, vars, pars] represents a \
thermal radiation boundary condition for PDEs with predicate pred indicating \
where it applies, with model variables vars and global parameters pars. \
HeatRadiationValue[pred, vars, pars, lkey] represents a thermal radiation \
boundary condition with local parameters specified in pars[lkey]."}, 
 {"HeatSymmetryValue", "HeatSymmetryValue[pred, vars, pars] represents a \
thermal symmetry boundary condition for PDEs with predicate pred indicating \
where it applies, with model variables vars and global parameters pars. \
HeatSymmetryValue[pred, vars, pars, lkey] represents a thermal symmetry \
boundary condition with local parameters specified in pars[lkey]."}, 
 {"HeatTemperatureCondition", "HeatTemperatureCondition[pred, vars, pars] \
represents a thermal surface boundary condition for PDEs with predicate pred \
indicating where it applies, with model variables vars and global parameters \
pars. HeatTemperatureCondition[pred, vars, pars, lkey] represents a thermal \
surface boundary condition with local parameters specified in pars[lkey]."}, 
 {"HeatTransferPDEComponent", "HeatTransferPDEComponent[vars, pars] yields a \
heat transfer PDE term with variables vars and parameters pars."}, 
 {"HeatTransferValue", "HeatTransferValue[pred, vars, pars] represents a \
thermal transfer boundary condition for PDEs with predicate pred indicating \
where it applies, with model variables vars and global parameters pars. \
HeatTransferValue[pred, vars, pars, lkey] represents a thermal transfer \
boundary condition with local parameters specified in pars[lkey]."}, 
 {"HeavisideLambda", "HeavisideLambda[x] represents the triangle distribution \
\[CapitalLambda](x) which is nonzero for \
\[LeftBracketingBar]x\[RightBracketingBar]<1. HeavisideLambda[x1, x2, \
\[Ellipsis]] represents the multidimensional triangle distribution \
\[CapitalLambda](x1, x2, \[Ellipsis]) which is nonzero for \
\[LeftBracketingBar]xi\[RightBracketingBar]<1."}, 
 {"HeavisidePi", "HeavisidePi[x] represents the box distribution \
\[CapitalPi](x), equal to 1 for \
\[LeftBracketingBar]x\[RightBracketingBar]<1/2 and 0 for \
\[LeftBracketingBar]x\[RightBracketingBar]>1/2. HeavisidePi[x1, x2, \
\[Ellipsis]] represents the multidimensional box distribution \
\[CapitalPi](x1, x2, \[Ellipsis]) which is 1 if all \
\[LeftBracketingBar]xi\[RightBracketingBar]<1/2."}, 
 {"HeavisideTheta", "HeavisideTheta[x] represents the Heaviside theta \
function \[Theta](x), equal to 0 for x<0 and 1 for x>0. HeavisideTheta[x1, \
x2, \[Ellipsis]] represents the multidimensional Heaviside theta function, \
which is 1 only if all of the xi are positive."}, 
 {"HeldGroupHe", "HeldGroupHe[] represents the sporadic simple Held group \
He."}, {"HelmholtzPDEComponent", "HelmholtzPDEComponent[vars, pars] yields a \
Helmholtz PDE term \[Del]^2{x1, \[Ellipsis], xn}u+k^2u with model variables \
vars and model parameters pars."}, 
 {"Here", "Here represents the current deduced geo location."}, 
 {"HermiteDecomposition", "HermiteDecomposition[m] gives the Hermite normal \
form decomposition of an integer matrix m."}, 
 {"HermiteH", "HermiteH[n, x] gives the Hermite polynomial Hn(x)."}, 
 {"Hermitian", 
  "Hermitian[{1, 2}] represents the symmetry of a Hermitian matrix."}, 
 {"HermitianMatrixQ", "HermitianMatrixQ[m] gives True if m is explicitly \
Hermitian, and False otherwise."}, {"HessenbergDecomposition", "HessenbergDec\
omposition[m] gives the Hessenberg decomposition of a numerical matrix m."}, 
 {"HeunB", "HeunB[q, \[Alpha], \[Gamma], \[Delta], \[Epsilon], z] gives the \
bi-confluent Heun function."}, {"HeunBPrime", "HeunBPrime[q, \[Alpha], \
\[Gamma], \[Delta], \[Epsilon], z] gives the z -derivative of the HeunB \
function."}, {"HeunC", "HeunC[q, \[Alpha], \[Gamma], \[Delta], \[Epsilon], z] \
gives the confluent Heun function."}, {"HeunCPrime", "HeunCPrime[q, \[Alpha], \
\[Gamma], \[Delta], \[Epsilon], z] gives the z -derivative of the HeunC \
function."}, {"HeunD", "HeunD[q, \[Alpha], \[Gamma], \[Delta], \[Epsilon], z] \
gives the double-confluent Heun function."}, {"HeunDPrime", "HeunDPrime[q, \
\[Alpha], \[Gamma], \[Delta], \[Epsilon], z] gives the z -derivative of the \
HeunD function."}, {"HeunG", "HeunG[a, q, \[Alpha], \[Beta], \[Gamma], \
\[Delta], z] gives the general Heun function."}, 
 {"HeunGPrime", "HeunGPrime[a, q, \[Alpha], \[Beta], \[Gamma], \[Delta], z] \
gives the z -derivative of the HeunG function."}, 
 {"HeunT", "HeunT[q, \[Alpha], \[Gamma], \[Delta], \[Epsilon], z] gives the \
tri-confluent Heun function."}, {"HeunTPrime", "HeunTPrime[q, \[Alpha], \
\[Gamma], \[Delta], \[Epsilon], z] gives the z -derivative of the HeunT \
function."}, {"HexadecimalCharacter", "HexadecimalCharacter represents a \
hexadecimal digit character 0-9, a-f, A-F in StringExpression."}, 
 {"Hexahedron", "Hexahedron[{p1, p2, \[Ellipsis], p8}] represents a filled \
hexahedron with corners p1, p2, \[Ellipsis], p8. Hexahedron[{{p1, 1, p1, 2, \
\[Ellipsis], p1, 8}, {p2, 1, \[Ellipsis]}, \[Ellipsis]}] represents a \
collection of hexahedra."}, {"HiddenItems", 
  "HiddenItems is an option for Dataset that specifies which items to hide."}\
, {"HiddenMarkovProcess", "HiddenMarkovProcess[i0, m, em] represents a \
discrete-time, finite-state hidden Markov process with transition matrix m, \
emission matrix em, and initial hidden state i0. \
HiddenMarkovProcess[\[Ellipsis], m, {dist1, \[Ellipsis]}] represents a hidden \
Markov process with emission distributions disti. HiddenMarkovProcess[p0, m, \
\[Ellipsis]] represents a hidden Markov process with initial hidden state \
probability vector p0."}, {"HighlightGraph", "HighlightGraph[g, {a1, a2, \
\[Ellipsis]}] highlights the ai that can be vertices, edges, or subgraphs of \
g. HighlightGraph[g, {\[Ellipsis], wj[aj], \[Ellipsis]}] highlights using the \
symbolic wrappers wj. HighlightGraph[{v->w, \[Ellipsis]}, \[Ellipsis]] uses \
rules v->w to specify the graph g."}, {"HighlightImage", "HighlightImage[imag\
e, roi] highlights the specified region of interest roi in image. \
HighlightImage[image, {roi1, roi2, \[Ellipsis]}] highlights several regions \
of interest roii. HighlightImage[image, {\[Ellipsis], w[roii], \[Ellipsis]}] \
highlights using a feature defined by the symbolic wrapper w. \
HighlightImage[image, fg, bgstyle] applies the styling bgstyle to the \
complement of all the regions of interest."}, {"HighlightMesh", "HighlightMes\
h[mr, {cellspec1, cellspec2, \[Ellipsis]}] highlights the cells specified by \
cellspeci in the mesh region mr. HighlightMesh[mr, {\[Ellipsis], \
wj[cellspecj], \[Ellipsis]}] highlights using the symbolic wrappers wj."}, 
 {"Highlighted", 
  "Highlighted[expr] displays a highlighted version of expr."}, 
 {"HighpassFilter", "HighpassFilter[data, \[Omega]c] applies a highpass \
filter with a cutoff frequency \[Omega]c to an array of data. \
HighpassFilter[data, \[Omega]c, n] uses a filter kernel of length n. \
HighpassFilter[data, \[Omega]c, n, wfun] applies a smoothing window wfun to \
the filter kernel."}, {"HigmanSimsGroupHS", 
  "HigmanSimsGroupHS[] represents the sporadic simple Higman-Sims group HS."}\
, {"HilbertCurve", "HilbertCurve[n] gives the line segments representing the \
n^th -step Hilbert curve. HilbertCurve[n, d] gives the n^th -step Hilbert \
curve in dimension d."}, {"HilbertFilter", "HilbertFilter[data, \[Omega]c] \
applies a Hilbert filter with a cutoff frequency \[Omega]c to an array of \
data. HilbertFilter[data, \[Omega]c, n] uses a filter kernel of length n. \
HilbertFilter[data, \[Omega]c, n, wfun] applies a smoothing window wfun to \
the filter kernel."}, {"HilbertMatrix", "HilbertMatrix[n] gives the n \
\[Times]n Hilbert matrix with elements of the form 1 / (i + j - 1). \
HilbertMatrix[{m, n}] gives the m \[Times]n Hilbert matrix."}, 
 {"Histogram", "Histogram[{x1, x2, \[Ellipsis]}] plots a histogram of the \
values xi. Histogram[{x1, x2, \[Ellipsis]}, bspec] plots a histogram with bin \
width specification bspec. Histogram[{x1, x2, \[Ellipsis]}, bspec, hspec] \
plots a histogram with bin heights computed according to the specification \
hspec. Histogram[{data1, data2, \[Ellipsis]}, \[Ellipsis]] plots histograms \
for multiple datasets datai."}, {"Histogram3D", "Histogram3D[{{x1, y1}, {x2, \
y2}, \[Ellipsis]}] plots a 3D histogram of the values {xi, yi}. \
Histogram3D[{{x1, y1}, {x2, y2}, \[Ellipsis]}, bspec] plots a 3D histogram \
with bins specified by bspec. Histogram3D[{{x1, y1}, {x2, y2}, \[Ellipsis]}, \
bspec, hspec] plots a 3D histogram with bin heights computed according to the \
specification hspec. Histogram3D[{data1, data2, \[Ellipsis]}] plots 3D \
histograms for multiple datasets datai."}, {"HistogramDistribution", "Histogr\
amDistribution[{x1, x2, \[Ellipsis]}] represents the probability distribution \
corresponding to a histogram of the data values xi. \
HistogramDistribution[{{x1, y1, \[Ellipsis]}, {x2, y2, \[Ellipsis]}, \
\[Ellipsis]}] represents a multivariate histogram distribution based on data \
values {xi, yi, \[Ellipsis]}. HistogramDistribution[\[Ellipsis], bspec] \
represents a histogram distribution with bins specified by bspec."}, 
 {"HistogramList", "HistogramList[{x1, x2, \[Ellipsis]}] gives a list of bins \
and histogram heights of the values xi. HistogramList[{{x1, y1, \[Ellipsis]}, \
{x2, y2, \[Ellipsis]}, \[Ellipsis]}] gives a list of bins and histogram \
heights of the values {xi, yi, \[Ellipsis]}. HistogramList[\[Ellipsis], \
bspec] gives a list of bins and histogram heights with bins specified by \
bspec. HistogramList[\[Ellipsis], bspec, hspec] gives a list of bins and \
histogram heights with bin heights computed according to the specification \
hspec."}, {"HistogramPointDensity", "HistogramPointDensity[pdata] estimates \
the histogram point density function \[Mu](x) for point data pdata. \
HistogramPointDensity[pdata, bspec] estimates the histogram point density \
function \[Mu](x) with histogram bins specified by bspec. \
HistogramPointDensity[bdata, \[Ellipsis], \[Ellipsis]] estimates the \
histogram point density function \[Mu](x) for binned data bdata. \
HistogramPointDensity[pproc, \[Ellipsis], \[Ellipsis]] computes the histogram \
point density function \[Mu](x) for the point process pproc."}, 
 {"HistogramTransform", "HistogramTransform[image] transforms pixel values of \
image so that its histogram is nearly flat. HistogramTransform[image, ref] \
modifies pixel values of image so that its histogram would have nearly the \
same distribution as ref. HistogramTransform[image, ref, n] uses n equally \
spaced quantiles. HistogramTransform[{x1, x2, \[Ellipsis]}, \[Ellipsis]] \
transforms values xi."}, {"HistogramTransformInterpolation", "HistogramTransf\
ormInterpolation[{x1, x2, \[Ellipsis]}] finds a function f so that the \
transformed values f(xi) are distributed nearly uniformly. \
HistogramTransformInterpolation[{x1, x2, \[Ellipsis]}, ref] finds f so that \
f(xi) are distributed with distribution ref. \
HistogramTransformInterpolation[{x1, x2, \[Ellipsis]}, ref, n] finds a \
function with n equally spaced quantiles. \
HistogramTransformInterpolation[image, \[Ellipsis]] finds a function that \
reshapes the histogram of image."}, {"HistoricalPeriodData", "HistoricalPerio\
dData[entity, property] gives the value of the specified property for the \
historical period entity. HistoricalPeriodData[{entity1, entity2, \
\[Ellipsis]}, property] gives a list of property values for the specified \
historical period entities. HistoricalPeriodData[entity, property, \
annotation] gives the specified annotation associated with the given \
property."}, {"HitMissTransform", "HitMissTransform[image, ker] gives the \
hit-or-miss transform of image with respect to the composite structuring \
element ker. HitMissTransform[image, {ker1, ker2, \[Ellipsis]}] gives the \
union of the hit-or-miss transforms for all the structuring elements keri. \
HitMissTransform[image, {ker1, ker2, \[Ellipsis]}, t] treats values above t \
as foreground."}, {"HjorthDistribution", "HjorthDistribution[m, s, f] \
represents the Hjorth distribution with location parameter m, scale parameter \
s, and shape parameter f."}, {"HodgeDual", "HodgeDual[tensor] gives the Hodge \
dual of the tensor HodgeDual[tensor, dim] dualizes tensor in the slots with \
dimension dim HodgeDual[tensor, dim, slots] dualizes tensor in the given \
slots."}, {"HoeffdingD", "HoeffdingD[v1, v2] gives Hoeffding's dependence \
measure \[ScriptCapitalD] for the vectors v1 and v2. HoeffdingD[m] gives \
Hoeffding's dependence measure \[ScriptCapitalD] for the matrix m. \
HoeffdingD[m1, m2] gives Hoeffding's dependence measure \[ScriptCapitalD] for \
the matrices m1 and m2. HoeffdingD[dist] gives Hoeffding's \[ScriptCapitalD] \
matrix for the multivariate symbolic distribution dist. HoeffdingD[dist, i, \
j] gives the (i, j)^th element of \[ScriptCapitalD] for the multivariate \
symbolic distribution dist."}, {"HoeffdingDTest", "HoeffdingDTest[v1, v2] \
tests whether the vectors v1 and v2 are independent. \
HoeffdingDTest[\[Ellipsis], \"\\!\\(\\*property\"] returns the value of \
\"\\!\\(\\*property\"."}, 
 {"Hold", "Hold[expr] maintains expr in an unevaluated form."}, 
 {"HoldAll", "HoldAll is an attribute that specifies that all arguments to a \
function are to be maintained in an unevaluated form."}, 
 {"HoldAllComplete", "HoldAllComplete is an attribute which specifies that \
all arguments to a function are not to be modified or looked at in any way in \
the process of evaluation."}, {"HoldComplete", "HoldComplete[expr] shields \
expr completely from the standard Wolfram Language evaluation process, \
preventing even upvalues associated with expr from being used."}, 
 {"HoldFirst", "HoldFirst is an attribute that specifies that the first \
argument to a function is to be maintained in an unevaluated form."}, 
 {"HoldForm", "HoldForm[expr] prints as the expression expr, with expr \
maintained in an unevaluated form."}, {"HoldPattern", "HoldPattern[expr] is \
equivalent to expr for pattern matching, but maintains expr in an unevaluated \
form."}, {"HoldRest", "HoldRest is an attribute which specifies that all but \
the first argument to a function are to be maintained in an unevaluated \
form."}, {"HolidayCalendar", "HolidayCalendar is an option that specifies the \
holiday calendar schedule in business day functions."}, 
 {"HorizontalGauge", "HorizontalGauge[value] draws a linear gauge showing \
value in a range of 0 to 1. HorizontalGauge[value, {min, max}] draws a linear \
gauge showing value in a range of min to max. HorizontalGauge[Dynamic[value], \
\[Ellipsis]] allows value to be set interactively using the gauge. \
HorizontalGauge[{value1, value2, \[Ellipsis]}, \[Ellipsis]] draws a gauge \
showing multiple values."}, {"HornerForm", "HornerForm[poly] puts the \
polynomial poly in Horner form. HornerForm[poly, vars] puts poly in Horner \
form with respect to the variable or variable list vars. HornerForm[poly1 / \
poly2] puts the rational function poly1 / poly2 in Horner form by nesting \
poly1 and poly2. HornerForm[poly1 / poly2, vars1, vars2] puts poly1 / poly2 \
in Horner form using the variables or variable lists vars1 and vars2 for \
poly1 and poly2, respectively."}, {"HostLookup", "HostLookup[name] gives the \
IP address for the host with the specified name. HostLookup[address] gives \
the host name for the host at the specified IP address. HostLookup[spec, \
prop] gives a specified property of the host. HostLookup[spec, All] gives an \
association of properties found for the host."}, 
 {"HotellingTSquareDistribution", "HotellingTSquareDistribution[p, m] \
represents Hotelling's T^2 distribution with dimensionality parameter p and m \
degrees of freedom."}, {"HoytDistribution", "HoytDistribution[q, \[Omega]] \
represents a Hoyt distribution with shape parameter q and spread parameter \
\[Omega]."}, {"Hue", "Hue[h] represents a color in the HSB color space with \
hue h. Hue[h, s, b] specifies colors in terms of hue, saturation and \
brightness. Hue[h, s, b, a] specifies opacity a. Hue[\"\\!\\(\\*string\"] \
returns a color from an HTML color name etc. Hue[color] returns the HSB \
representation of color."}, {"HumanGrowthData", "HumanGrowthData[spec] \
returns the range of values within one standard deviation of the mean for all \
properties of human growth at the specification spec. HumanGrowthData[spec, \
property] returns the range of values within one standard deviation of the \
mean of a property for the specification spec. HumanGrowthData[spec, index] \
returns the values for all properties of human growth for spec at the \
specified percentile. HumanGrowthData[spec, property, index] returns the \
value at a specific index of a property for spec at the specified percentile. \
HumanGrowthData[spec, property, quantity] returns the percentile and \
probability density for a specific value quantity of the property at spec."}, 
 {"HumpDownHump", "HumpDownHump[x, y, \[Ellipsis]] displays as \
x\[HumpDownHump]y\[HumpDownHump]\[Ellipsis]."}, 
 {"HumpEqual", "HumpEqual[x, y, \[Ellipsis]] displays as \
x\[HumpEqual]y\[HumpEqual]\[Ellipsis]."}, {"HurwitzLerchPhi", "HurwitzLerchPh\
i[z, s, a] gives the Hurwitz-Lerch transcendent \[CapitalPhi](z, s, a)."}, 
 {"HurwitzZeta", 
  "HurwitzZeta[s, a] gives the Hurwitz zeta function \[Zeta](s, a)."}, 
 {"HyperbolicDistribution", "HyperbolicDistribution[\[Alpha], \[Beta], \
\[Delta], \[Mu]] represents a hyperbolic distribution with location parameter \
\[Mu], scale parameter \[Delta], shape parameter \[Alpha], and skewness \
parameter \[Beta]. HyperbolicDistribution[\[Lambda], \[Alpha], \[Beta], \
\[Delta], \[Mu]] represents a generalized hyperbolic distribution with shape \
parameter \[Lambda]."}, {"HypercubeGraph", 
  "HypercubeGraph[n] gives the n -dimensional hypercube graph Qn."}, 
 {"HyperexponentialDistribution", "HyperexponentialDistribution[{\[Alpha]1, \
\[Ellipsis], \[Alpha]m}, {\[Lambda]1, \[Ellipsis], \[Lambda]m}] represents an \
m -phase hyperexponential distribution with phase probabilities \[Alpha]i and \
rates \[Lambda]i."}, {"Hyperfactorial", 
  "Hyperfactorial[n] gives the hyperfactorial function H(n)."}, 
 {"Hypergeometric0F1", "Hypergeometric0F1[a, z] is the confluent \
hypergeometric function \[Null]0F1(;a;z)."}, {"Hypergeometric0F1Regularized", 
  "Hypergeometric0F1Regularized[a, z] is the regularized confluent \
hypergeometric function \[Null]0F1(a;z) / \[CapitalGamma](a)."}, 
 {"Hypergeometric1F1", "Hypergeometric1F1[a, b, z] is the Kummer confluent \
hypergeometric function \[Null]1F1(a;b;z)."}, 
 {"Hypergeometric1F1Regularized", "Hypergeometric1F1Regularized[a, b, z] is \
the regularized confluent hypergeometric function \[Null]1F1(a;b;z) / \
\[CapitalGamma](b)."}, {"Hypergeometric2F1", "Hypergeometric2F1[a, b, c, z] \
is the hypergeometric function \[InvisiblePrefixScriptBase]2F1(a, b;c;z)."}, 
 {"Hypergeometric2F1Regularized", "Hypergeometric2F1Regularized[a, b, c, z] \
is the regularized hypergeometric function \[Null]2F1(a, b;c;z) / \
\[CapitalGamma](c)."}, {"HypergeometricDistribution", "HypergeometricDistribu\
tion[n, nsucc, ntot] represents a hypergeometric distribution."}, 
 {"HypergeometricPFQ", "HypergeometricPFQ[{a1, \[Ellipsis], ap}, {b1, \
\[Ellipsis], bq}, z] is the generalized hypergeometric function \
\[Null]pFq(a;b;z)."}, {"HypergeometricPFQRegularized", "HypergeometricPFQRegu\
larized[{a1, \[Ellipsis], ap}, {b1, \[Ellipsis], bq}, z] is the regularized \
generalized hypergeometric function \[Null]pFq(a;b;z) / \
(\[CapitalGamma](b1)\[Ellipsis]\[CapitalGamma](bq))."}, 
 {"HypergeometricU", "HypergeometricU[a, b, z] is the confluent \
hypergeometric function U(a, b, z)."}, {"Hyperlink", "Hyperlink[uri] \
represents a hyperlink that jumps to the specified URI when clicked. \
Hyperlink[label, uri] represents a hyperlink to be displayed as label."}, 
 {"HyperlinkAction", "HyperlinkAction is an option for Hyperlink that \
controls the behavior of following links in cloud notebooks."}, 
 {"Hyperplane", "Hyperplane[n, p] represents the hyperplane with normal n \
passing through the point p. Hyperplane[n, c] represents the hyperplane with \
normal n given by the points x that satisfy n.x==c."}, 
 {"Hyphenation", "Hyphenation is an option for Cell that specifies whether to \
allow hyphenation for words of text."}, {"HypoexponentialDistribution", "Hypo\
exponentialDistribution[{\[Lambda]1, \[Ellipsis], \[Lambda]m}] represents an \
m -phase hypoexponential distribution with rates \[Lambda]1, \[Ellipsis], \
\[Lambda]m."}, {"HypothesisTestData", "HypothesisTestData[\[Ellipsis]] \
represents hypothesis test data such as generated by DistributionFitTest, \
AndersonDarlingTest, etc."}, 
 {"I", "I represents the imaginary unit \[Sqrt] - 1."}, 
 {"IPAddress", "IPAddress[\"\\!\\(\\*address\"] is a symbolic representation \
of an IPv4 or IPv6 IP address."}, {"IconData", "IconData[type, value] \
generates an icon of the specified type assuming the value given."}, 
 {"IconRules", "IconRules is an option for CloudObject and related objects \
that specifies icons to use in different environments to represent an \
object."}, {"Iconize", "Iconize[expr] gives an iconized form that can be used \
to stand in for expr in notebook input. Iconize[expr, \"\\!\\(\\*name\"] \
displays with the specified name in the icon."}, 
 {"Icosahedron", "Icosahedron[] represents a regular icosahedron centered at \
the origin with unit edge length. Icosahedron[l] represents an icosahedron \
with edge length l. Icosahedron[{\[Theta], \[Phi]}, \[Ellipsis]] represents \
an icosahedron rotated by an angle \[Theta] with respect to the z axis and \
angle \[Phi] with respect to the y axis. Icosahedron[{x, y, z}, \[Ellipsis]] \
represents an icosahedron centered at {x, y, z}."}, 
 {"Identity", "Identity[expr] gives expr (the identity operation)."}, 
 {"IdentityMatrix", "IdentityMatrix[n] gives the n xn identity matrix."}, 
 {"If", "If[condition, t, f] gives t if condition evaluates to True, and f if \
it evaluates to False. If[condition, t, f, u] gives u if condition evaluates \
to neither True nor False."}, {"IgnoreCase", "IgnoreCase is an option for \
string manipulation and searching functions that specifies whether lowercase \
and uppercase letters should be treated as equivalent."}, 
 {"IgnoreDiacritics", "IgnoreDiacritics is an option for string, grammar, and \
related functions that specifies whether diacritics should be ignored in \
strings."}, {"IgnorePunctuation", "IgnorePunctuation is an option for \
AlphabeticSort and related functions that specifies whether to consider \
punctuation in determining sorting order."}, {"IgnoringInactive", "IgnoringIn\
active[patt] is a pattern object that, for purposes of pattern matching, \
ignores occurrences of Inactive in both patt and the expression being \
matched."}, 
 {"Im", "Im[z] gives the imaginary part of the complex number z."}, 
 {"Image", "Image[data] represents a raster image with pixel values given by \
the array data. Image[graphics] creates a raster image from a graphics \
object. Image[obj, options] gives an image that uses the specified options."}\
, {"Image3D", "Image3D[data] represents a 3D image with pixel values given by \
the array data. Image3D[{image1, image2, \[Ellipsis]}] creates a 3D image \
from a list of 2D images. Image3D[obj, \"\\!\\(\\*type\"] creates a 3D image \
of the specified data type."}, {"Image3DProjection", "Image3DProjection[image\
] takes a 3D image and returns a 2D image of maximum projection onto the x -y \
plane. Image3DProjection[image, dir] performs a projection in the direction \
specified by dir. Image3DProjection[image, dir, mode] specifies the \
projection mode."}, {"Image3DSlices", "Image3DSlices[image] gives a list of \
2D images corresponding to the slices in the Image3D object image. \
Image3DSlices[image, n] gives the n^th slice as a 2D image. \
Image3DSlices[image, {s1, s2, \[Ellipsis]}] extracts the specified slices si. \
Image3DSlices[image, sm;;sn] extracts slices sm through sn. \
Image3DSlices[image, \[Ellipsis], d] takes slices in dimension d."}, 
 {"ImageAccumulate", "ImageAccumulate[image] gives an image in which each \
pixel represents a sum of all pixels below and to the left of that pixel in \
image."}, {"ImageAdd", "ImageAdd[image, x] adds an amount x to each channel \
value in image. ImageAdd[image1, image2] gives an image in which each pixel \
is the sum of the corresponding pixels in image1 and image2. ImageAdd[image, \
expr1, expr2, \[Ellipsis]] adds all expri to image, where each expri can be \
either an image, a number, or a color value."}, 
 {"ImageAdjust", "ImageAdjust[image] adjusts the levels in image, rescaling \
them to cover the range 0 to 1. ImageAdjust[image, corr] adjusts the image \
according to the correction specification corr. ImageAdjust[image, corr, \
{inmin, inmax}] first rescales so that the range of input values inmin to \
inmax is mapped to 0 to 1. ImageAdjust[image, corr, {inmin, inmax}, {outmin, \
outmax}] rescales so that the range of input values inmin to inmax is mapped \
to outmin to outmax."}, {"ImageAlign", "ImageAlign[ref, image] returns a \
version of image that is aligned with the reference image ref. \
ImageAlign[ref, {image1, \[Ellipsis], imagen}] gives the result of aligning \
each of the imagei with the reference image ref. ImageAlign[{image1, \
\[Ellipsis], imagen}] uses image1 as the reference image."}, 
 {"ImageApply", "ImageApply[f, image] applies the function f to the list of \
channel values for each pixel in image. ImageApply[f, {image1, image2, \
\[Ellipsis]}] applies f to the sequence of corresponding pixel values taken \
from each imagei."}, {"ImageApplyIndexed", "ImageApplyIndexed[f, image] \
applies the function f to the list of channel values for each pixel in image, \
giving the row and column index of each pixel as a second argument to f. \
ImageApplyIndexed[f, {image1, image2, \[Ellipsis]}] applies f to the sequence \
of corresponding pixel values taken from each imagei, giving the \
corresponding row and column index of pixels as the last argument to f."}, 
 {"ImageAspectRatio", 
  "ImageAspectRatio[image] gives the ratio of height to width for image."}, 
 {"ImageAssemble", "ImageAssemble[{{im11, \[Ellipsis], im1n}, \[Ellipsis], \
{imm1, \[Ellipsis], immn}}] assembles a single image from an array of images. \
ImageAssemble[{{im11, \[Ellipsis], im1n}, \[Ellipsis], {imm1, \[Ellipsis], \
immn}}, fitting] assembles images using the fitting method."}, 
 {"ImageAugmentationLayer", "ImageAugmentationLayer[{h, w}] represents a net \
layer that applies random image transformations to produce images of height h \
and width w."}, {"ImageBoundingBoxes", "ImageBoundingBoxes[image] gives an \
association of lists of bounding boxes for each identified category of \
objects in image. ImageBoundingBoxes[image, category] gives a list of \
bounding boxes for subimages identified as an instance of the specified \
category."}, {"ImageCapture", "ImageCapture[] opens a graphical user \
interface for capturing images from connected cameras."}, 
 {"ImageCaptureFunction", "ImageCaptureFunction is an option for ImageCapture \
that specifies the function to apply to images acquired by the imaging \
device."}, {"ImageCases", "ImageCases[image] gives an association of lists of \
subimages for each identified category of objects in image. ImageCases[image, \
category] gives a list of subimages identified as an instance of the \
specified category. ImageCases[image, category->prop] gives the specified \
property prop for each identified subimage. ImageCases[image, {category1, \
category2, \[Ellipsis]}] gives an association with lists of subimages \
identified as being instances of each of the categoryi."}, 
 {"ImageChannels", "ImageChannels[image] gives the number of channels present \
in the data for the Image or Image3D object image."}, 
 {"ImageClip", "ImageClip[image] clips all channel values in image to lie in \
the default range. ImageClip[image, {min, max}] clips channel values to lie \
in the range from min to max. ImageClip[image, {min, max}, {vmin, vmax}] \
gives vmin for values below min and vmax for values above max."}, 
 {"ImageCollage", "ImageCollage[{image1, image2, \[Ellipsis]}] creates a \
collage of images imagei. ImageCollage[{w1->image1, w2->image2, \[Ellipsis]}] \
creates a collage of images imagei based on their corresponding weights wi. \
ImageCollage[\[LeftAssociation]image1->w1, image2->w2, \
\[Ellipsis]\[RightAssociation]] also creates a collage of images imagei based \
on their corresponding weights wi. ImageCollage[{w1, w2, \
\[Ellipsis]}->{image1, image2, \[Ellipsis]}] also creates a collage of images \
imagei based on their corresponding weights wi. ImageCollage[{{image1, w1}, \
{image2, w2}, \[Ellipsis]}] also creates a collage of images imagei based on \
their corresponding weights wi. ImageCollage[\[Ellipsis], fitting] uses the \
fitting method to create the collage. ImageCollage[\[Ellipsis], fitting, \
size] creates a collage of the specified size."}, 
 {"ImageColorSpace", 
  "ImageColorSpace[image] gives the name of the color space of image."}, 
 {"ImageCompose", "ImageCompose[image, overlay] gives the result of \
overlaying overlay onto image. ImageCompose[image, {overlay, \[Alpha]}] gives \
the result of alpha blending overlay into image using blending fraction \
\[Alpha]. ImageCompose[image, overlay, pos] places the center of overlay at \
position pos in image. ImageCompose[image, overlay, pos, opos] places the \
point opos in overlay at position pos in image. ImageCompose[image, overlay, \
pos, opos, {fi, fo, mode}] uses the compositing fractions fk and the \
specified compositing mode."}, {"ImageContainsQ", "ImageContainsQ[image, \
category] returns True if an instance of the specified category is detected \
in image. ImageContainsQ[image, {category1, category2, \[Ellipsis]}] returns \
True if at least one instance of each of the categoryi is detected in image. \
ImageContainsQ[image, category1|category2|\[Ellipsis]] returns True if image \
contains an instance of at least one of categoryi."}, 
 {"ImageContents", "ImageContents[image] gives a dataset of identified \
entities in image. ImageContents[image, category] gives a dataset that only \
contains entities in the specified category. ImageContents[image, category, \
prop] includes the properties prop for each identified object."}, 
 {"ImageConvolve", 
  "ImageConvolve[image, ker] gives the convolution of image with kernel ker."}\
, {"ImageCooccurrence", "ImageCooccurrence[image, n] gives the n \[Times]n \
co-occurrence matrix for image. ImageCooccurrence[image, n, ker] computes a \
co-occurrence matrix for arbitrary spatial relationships specified by a \
kernel ker."}, {"ImageCorners", "ImageCorners[image] finds corners in image \
and returns their coordinates. ImageCorners[image, r] finds corners at a \
pixel range r. ImageCorners[image, r, t] uses a threshold t for selecting \
corners. ImageCorners[image, r, t, d] returns corners that are at least d + 1 \
pixels apart."}, {"ImageCorrelate", "ImageCorrelate[image, ker] gives the \
correlation of image with kernel ker. ImageCorrelate[image, ker, f] computes \
a generalized correlation in which the function f is used in place of Dot."}, 
 {"ImageCorrespondingPoints", "ImageCorrespondingPoints[image1, image2] finds \
a set of matching interest points in image1 and image2 and returns their \
pixel coordinates."}, {"ImageCrop", "ImageCrop[image] crops image by removing \
borders of uniform color. ImageCrop[image, size] crops image based on the \
size specification size. ImageCrop[image, size, spec] crops image by removing \
pixels from sides specified by spec."}, {"ImageData", "ImageData[image] gives \
the array of pixel values in an Image or Image3D object image. \
ImageData[image, \"\\!\\(\\*type\"] gives the array of pixel values converted \
to the specified type."}, {"ImageDeconvolve", "ImageDeconvolve[image, ker] \
gives a deconvolution of image using kernel ker."}, 
 {"ImageDemosaic", "ImageDemosaic[image, cfa] reconstructs a color image \
using the specified color filter array cfa. ImageDemosaic[image, \
{\"\\!\\(\\*cfa\", {row, col}}] aligns the top-left pixel of the pattern with \
the {row, col} pixel of image."}, {"ImageDifference", "ImageDifference[image1\
, image2] gives an image in which each pixel is the absolute difference of \
the corresponding pixels in image1 and image2."}, 
 {"ImageDimensions", "ImageDimensions[image] gives the pixel dimensions of an \
Image or Image3D object image."}, {"ImageDisplacements", "ImageDisplacements[\
{image1, image2, \[Ellipsis], imagen}] gives estimated horizontal and \
vertical displacements between consecutive images. \
ImageDisplacements[{image1, image2, \[Ellipsis], imagen}, flow] uses flow as \
an initial estimate for displacement between image1 and image2."}, 
 {"ImageDistance", "ImageDistance[image1, image2] returns a distance measure \
between image1 and image2. ImageDistance[image1, image2, pos] places the \
center of image2 at position pos in image1. ImageDistance[image1, image2, \
pos1, pos2] places the point pos2 of image2 at position pos1 in image1."}, 
 {"ImageEffect", "ImageEffect[image, \"\\!\\(\\*effect\"] applies the \
specified image effect to image. ImageEffect[image, {\"\\!\\(\\*effect\", \
params}] uses parameters params."}, {"ImageExposureCombine", "ImageExposureCo\
mbine[{image1, image2, \[Ellipsis]}] combines differently exposed images \
imagei of the same scene into a single image with overall good exposure. \
ImageExposureCombine[{image1, image2, \[Ellipsis]}, mode] creates a low or a \
high dynamic range image based on the specified mode."}, 
 {"ImageFeatureTrack", "ImageFeatureTrack[{image1, image2, \[Ellipsis], \
imagen}] tracks features from image1 through imagen. \
ImageFeatureTrack[{image1, image2, \[Ellipsis], imagen}, pts] tracks features \
starting from the initial set of points pts in image1."}, 
 {"ImageFileApply", "ImageFileApply[f, inputfile, outputfile] applies the \
function f to the list of channel values for each pixel of the image stored \
in inputfile and stores the result in outputfile."}, 
 {"ImageFileFilter", "ImageFileFilter[f, inputfile, r, outputfile] applies \
the function f to the range r neighborhood of each pixel in each channel of \
the image stored in inputfile and stores the result in outputfile."}, 
 {"ImageFileScan", "ImageFileScan[f, inputfile] applies the function f to the \
list of channel values for each pixel of the image stored in inputfile."}, 
 {"ImageFilter", "ImageFilter[f, image, r] applies the function f to the \
range-r neighborhood of each pixel in each channel of image."}, 
 {"ImageFocusCombine", "ImageFocusCombine[{image1, image2, \[Ellipsis]}] \
combines differently focused images imagei of the same scene to obtain a \
single well-focused image."}, {"ImageForestingComponents", "ImageForestingCom\
ponents[image] finds a segmentation of image, returning an integer matrix in \
which positive integers label different components. \
ImageForestingComponents[image, marker] tries to find a segmentation into \
components that include pixels indicated by marker. \
ImageForestingComponents[image, marker, r] finds components that are \
connected at a pixel scale given by r."}, {"ImageFormattingWidth", "ImageForm\
attingWidth is an option that specifies the target width at which to wrap \
when formatting an object."}, {"ImageForwardTransformation", "ImageForwardTra\
nsformation[image, f] gives an image in which each pixel at position f[{x, \
y}] corresponds to the position {x, y} in image. \
ImageForwardTransformation[image, f, size] gives an image of the specified \
size."}, {"ImageGraphics", "ImageGraphics[image] returns the content of image \
in the form of scalable vector graphics. ImageGraphics[image, n] uses up to n \
colors for the vector graphics. ImageGraphics[image, colors] creates vector \
graphics containing the specified colors."}, {"ImageHistogram", "ImageHistogr\
am[image] plots a histogram of the pixel levels for each channel in image. \
ImageHistogram[image, bspec] uses bin specification bspec. \
ImageHistogram[image, bspec, range] plots the histogram of the pixel values \
in the given range."}, {"ImageIdentify", "ImageIdentify[image] yields the \
result of attempting to identify what image is a picture of. \
ImageIdentify[image, category] restricts the identification of image to \
objects within the specified category. ImageIdentify[image, category, n] \
gives a list of up to n possible identifications. ImageIdentify[image, \
category, n, \"\\!\\(\\*prop\"] gives the specified property for each \
identification."}, {"ImageInstanceQ", "ImageInstanceQ[image, obj] gives True \
if image appears to be an instance of the object obj, and gives False \
otherwise. ImageInstanceQ[image, obj, cat] assumes that the image is of \
something in the category cat."}, {"ImageKeypoints", "ImageKeypoints[image] \
finds key features in image and returns their coordinates. \
ImageKeypoints[image, prop] gives the specified property prop for each \
keypoint."}, {"ImageLabels", "ImageLabels is an option for image highlighting \
that specifies what labels to use for each highlighted feature."}, 
 {"ImageLegends", "ImageLegends is an option for image highlighting that \
specifies what legends to use."}, {"ImageLevels", "ImageLevels[image] gives a \
list of pixel values and counts for each channel in image. ImageLevels[image, \
bspec] bins pixel values using bin specification bspec. ImageLevels[image, \
bspec, range] gives counts for bins in the given range."}, 
 {"ImageLines", "ImageLines[image] finds line segments in image and returns \
the coordinates of their endpoints. ImageLines[image, t] uses the threshold t \
for selecting image lines. ImageLines[image, t, d] uses the parameter d to \
control the distinctness of the detected lines."}, 
 {"ImageMargins", "ImageMargins is an option that specifies the absolute \
margins to leave around the image displayed for an object."}, 
 {"ImageMarker", "ImageMarker[pos] is a HighlightImage specification that \
represents a marker at position pos. ImageMarker[pos, marker] represents a \
custom marker at position pos. ImageMarker[{pos1, pos2, \[Ellipsis]}, \
\[Ellipsis]] represents multiple marker positions posi."}, 
 {"ImageMeasurements", "ImageMeasurements[image, \"\\!\\(\\*prop\"] returns \
the value of property \"\\!\\(\\*prop\" for the entire image. \
ImageMeasurements[image, \"\\!\\(\\*prop\", format] returns the values in the \
specified output format. ImageMeasurements[{image1, image2, \[Ellipsis]}, \
\[Ellipsis]] returns measurements for all imagei."}, 
 {"ImageMesh", "ImageMesh[image] returns the foreground region in image as a \
BoundaryMeshRegion object."}, {"ImageMultiply", "ImageMultiply[image, x] \
multiplies each channel value in image by a factor x. ImageMultiply[image1, \
image2] gives an image in which each pixel is the product of the \
corresponding pixels in image1 and image2. ImageMultiply[image, expr1, expr2, \
\[Ellipsis]] multiplies all expri with image, where each expri can be either \
an image, a number, or a color value."}, {"ImagePad", "ImagePad[image, m] \
pads image on all sides with m background pixels. ImagePad[image, m, padding] \
pads image on all sides using the value or method specified by padding. \
ImagePad[image, {{left, right}, {bottom, top}}, \[Ellipsis]] pads image with \
the specified numbers of pixels on each side. ImagePad[image, {{left, right}, \
{front, back}, {bottom, top}}, \[Ellipsis]] pads a 3D image with the \
specified numbers of pixels."}, {"ImagePadding", "ImagePadding is an option \
for graphics functions that specifies what absolute extra padding should be \
left for extended objects such as thick lines and annotations such as tick \
and axis labels."}, {"ImagePartition", "ImagePartition[image, s] partitions \
an image into an array of s xs -pixel subimages. ImagePartition[image, {w, \
h}] partitions an image into an array of subimages of pixel width w and pixel \
height h. ImagePartition[image, {w, h}, {dw, dh}] uses pixel offsets dw and \
dh."}, {"ImagePeriodogram", "ImagePeriodogram[image] shows the squared \
magnitude of the discrete Fourier transform (power spectrum) of image. \
ImagePeriodogram[image, n] shows the average of power spectra of \
non-overlapping partitions of size n \[Times]n. ImagePeriodogram[image, n, d] \
uses partitions with offset d. ImagePeriodogram[image, n, d, wfun] applies a \
smoothing window wfun to each partition. ImagePeriodogram[image, n, d, wfun, \
m] pads partitions with zeros to length m prior to the computation of the \
transform."}, {"ImagePerspectiveTransformation", "ImagePerspectiveTransformat\
ion[image, m] applies a linear fractional transform specified by a matrix m \
to the positions of each pixel in image. \
ImagePerspectiveTransformation[image, tf] uses the TransformationFunction \
given by tf. ImagePerspectiveTransformation[image, \[Ellipsis], size] gives \
an image of the specified size."}, {"ImagePosition", "ImagePosition[image] \
gives an association of image positions for each identified category of \
objects in image. ImagePosition[image, obj] gives a list of image positions \
for subimages identified as instances of the specified category."}, 
 {"ImagePreviewFunction", "ImagePreviewFunction is an option for CurrentImage \
and similar functions that specifies the function to apply to images before \
being displayed."}, {"ImagePyramid", "ImagePyramid[image] creates a Gaussian \
image pyramid formed from image. ImagePyramid[image, pyrtype] returns a \
Gaussian or Laplacian pyramid depending of the specified pyrtype. \
ImagePyramid[image, pyrtype, n] returns up to n levels of the pyramid. \
ImagePyramid[image, pyrtype, {size}] returns pyramid levels down to image \
dimensions given by size. ImagePyramid[image, pyrtype, n, s] returns a \
pyramid with successive levels downsampled by factor s."}, 
 {"ImagePyramidApply", "ImagePyramidApply[f, pyr] applies f to all images in \
the ImagePyramid object pyr. ImagePyramidApply[f, {pyr1, pyr2, \[Ellipsis]}] \
applies f to the sequence of corresponding levels taken from each pyri."}, 
 {"ImageQ", "ImageQ[image] yields True if image has the form of a valid Image \
or Image3D object, and False otherwise."}, {"ImageRecolor", "ImageRecolor[ima\
ge, region->color] recolors pixels in image specified by region using the \
specified color. ImageRecolor[image, {region1->color1, \[Ellipsis]}] recolors \
multiple regions."}, {"ImageReflect", "ImageReflect[image] reverses image by \
top-bottom mirror reflection. ImageReflect[image, side] reverses image by \
reflecting it so that the specified side goes to the opposite side. \
ImageReflect[image, side1->side2] reflects image so that side1 is \
interchanged with side2."}, {"ImageResize", "ImageResize[image, width] gives \
a resized version of image that is width pixels wide. ImageResize[image, \
{size}] gives a resized version of image with a maximum pixel width or height \
given by size. ImageResize[image, {width, height}] gives a resized version of \
image that has exactly the specified pixel width and height. \
ImageResize[image, {width, depth, height}] gives a resized version of a 3D \
image with the specified dimensions."}, {"ImageResolution", "ImageResolution \
is an option for Export, Rasterize, and related functions that specifies at \
what resolution bitmap images should be rendered."}, 
 {"ImageRestyle", "ImageRestyle[image, sample] attempts to restyle image so \
as to follow the graphical style of sample. ImageRestyle[image, w->sample] \
uses restyle weighting w. ImageRestyle[image, {sample1, \[Ellipsis]}] \
attempts to restyle image using a blend of the graphical styles of the \
samplei. ImageRestyle[image, {w1->sample1, \[Ellipsis]}] uses weightings wi \
for the samplei."}, {"ImageRotate", "ImageRotate[image] rotates image by \
90\[Degree] about its center in the x -y plane. ImageRotate[image, \[Theta]] \
rotates image by \[Theta] radians. ImageRotate[image, {\[Theta], w}] rotates \
a 3D image around the 3D vector w. ImageRotate[image, \[Ellipsis], size] \
gives an image of the specified size."}, {"ImageSaliencyFilter", 
  "ImageSaliencyFilter[image] returns a saliency map for image."}, 
 {"ImageScaled", "ImageScaled[{x, y}] gives the position of a graphical \
object in terms of coordinates scaled to run from 0 to 1 across the whole \
image region in each direction. ImageScaled[{dx, dy}, {x0, y0}] gives a \
position obtained by starting at ordinary coordinates {x0, y0}, then moving \
by an image-scaled offset {dx, dy}."}, 
 {"ImageScan", 
  "ImageScan[f, image] evaluates f applied to each pixel of image in turn."}, 
 {"ImageSize", "ImageSize is an option that specifies the overall size of an \
image to display for an object."}, {"ImageSizeAction", "ImageSizeAction is an \
option for Pane and related constructs that specifies what to do if the \
specified ImageSize setting does not match the size of the contents."}, 
 {"ImageSizeMultipliers", "ImageSizeMultipliers is an option that specifies \
how much smaller to render graphics that appear within other constructs."}, 
 {"ImageSubtract", "ImageSubtract[image, x] subtracts a constant amount x \
from each channel value in image. ImageSubtract[image1, image2] gives an \
image in which each pixel is obtained by subtracting the values of the \
corresponding pixels in image1 and image2. ImageSubtract[image, expr1, expr2, \
\[Ellipsis]] subtracts all expri from image, where each expri can be either \
an image, a number, or a color value."}, {"ImageTake", "ImageTake[image, n] \
gives an image consisting of the first n rows of image. ImageTake[image, - n] \
gives an image consisting of the last n rows of image. ImageTake[image, \
{row1, row2}] gives rows row1 through row2. ImageTake[image, {row1, row2}, \
{col1, col2}] gives the image that spans row1 to row2 and col1 to col2. \
ImageTake[image3d, {slice1, slice2}, {row1, row2}, {col1, col2}] gives the 3D \
image consisting of the specified slices, rows, and columns."}, 
 {"ImageTransformation", "ImageTransformation[image, f] gives an image in \
which each pixel at position p corresponds to the position f[p] in image. \
ImageTransformation[image, f, size] gives an image of the specified size."}, 
 {"ImageTrim", "ImageTrim[image, roi] gives the smallest subimage of image \
that includes the specified region of interest roi. ImageTrim[image, roi, r] \
adds a margin of size r back to the resulting image. ImageTrim[image, {roi1, \
roi2, \[Ellipsis]}, \[Ellipsis]] extracts multiple subimages specified by \
roii from image."}, {"ImageType", "ImageType[image] gives the underlying type \
of values used for each pixel element in the Image or Image3D object image."}\
, {"ImageValue", "ImageValue[image, pos] gives the interpolated value of \
image at position pos. ImageValue[image, pos, \"\\!\\(\\*type\"] gives the \
value converted to the specified type."}, {"ImageValuePositions", "ImageValue\
Positions[image, val] returns a list of pixel positions in image that exactly \
match the value val. ImageValuePositions[image, val, d] returns all pixel \
positions that have values within a distance d from val."}, 
 {"ImageVectorscopePlot", 
  "ImageVectorscopePlot[image] plots the chrominance of image."}, 
 {"ImageWaveformPlot", "ImageWaveformPlot[image] plots the waveform of image. \
ImageWaveformPlot[image, colorspace] plots the waveform of image in \
colorspace. ImageWaveformPlot[image, channel] plots the waveform for the \
specified channel."}, {"ImagingDevice", "ImagingDevice is an option to \
specify what device to use for capturing images."}, 
 {"ImplicitRegion", "ImplicitRegion[cond, {x1, \[Ellipsis], xn}] represents a \
region in \[DoubleStruckCapitalR]^n that satisfies the conditions cond. \
ImplicitRegion[cond, {{x1, a1, b1}, \[Ellipsis]}] represents a region in \
\[DoubleStruckCapitalR]^n that satisfies the conditions cond as well as \
a1<=x1<=b1 etc."}, {"Implies", 
  "Implies[p, q] represents the logical implication p=>q."}, 
 {"Import", "Import[source] imports data from source, returning a Wolfram \
Language representation of it. Import[source, \"\\!\\(\\*format\"] takes the \
file to be in the specified format. Import[source, elements] imports the \
specified elements from a file. Import[source, \[Ellipsis], options] uses the \
specified options."}, {"ImportByteArray", "ImportByteArray[ba, \
\"\\!\\(\\*format\"] imports data in the specified format from a ByteArray \
object. ImportByteArray[ba, elements] imports the specified elements. \
ImportByteArray[ba] attempts to determine the format automatically."}, 
 {"ImportOptions", "ImportOptions is an option for Interpreter and related \
functions that specifies what options should be used in importing data."}, 
 {"ImportString", "ImportString[\"\\!\\(\\*data\", \"\\!\\(\\*format\"] \
imports data in the specified format from a string. \
ImportString[\"\\!\\(\\*data\", elements] imports the specified elements. \
ImportString[\"\\!\\(\\*data\"] attempts to determine the format of the \
string from its contents."}, {"ImportedObject", "ImportedObject[\[Ellipsis]] \
represents a piece of imported data that has no special representation in the \
Wolfram Language."}, {"ImprovementImportance", "ImprovementImportance[rdist, \
t] gives the improvement importances for all components in the \
ReliabilityDistribution rdist at time t. ImprovementImportance[fdist, t] \
gives the improvement importances for all components in the \
FailureDistribution fdist at time t."}, {"In", "In[n] is a global object that \
is assigned to have a delayed value of the n^th input line."}, 
 {"InString", "InString[n] is a global object that is assigned to be the text \
of the n^th input line."}, {"Inactivate", "Inactivate[expr] replaces all \
instances of f with Inactive[f] for symbols f used as heads in expr. \
Inactivate[expr, patt] inactivates all symbols in expr that match the pattern \
patt."}, {"Inactive", "Inactive[f] is an inactive form of f."}, 
 {"IncidenceGraph", "IncidenceGraph[m] gives the graph with incidence matrix \
m. IncidenceGraph[{v1, v2, \[Ellipsis]}, m] gives the graph with vertices vi \
and incidence matrix m."}, {"IncidenceList", "IncidenceList[g, v] gives a \
list of edges incident to vertex v. IncidenceList[g, patt] gives a list of \
edges incident to vertices that match the pattern patt. IncidenceList[g, \
patt, d] gives a list of incident edges d steps away. IncidenceList[{v->w, \
\[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify the graph g."}, 
 {"IncidenceMatrix", "IncidenceMatrix[g] gives the vertex-edge incidence \
matrix of the graph g. IncidenceMatrix[{v->w, \[Ellipsis]}] uses rules v->w \
to specify the graph g."}, {"IncludeAromaticBonds", "IncludeAromaticBonds is \
an option for Molecule that specifies whether aromatic bonds should be \
detected and labeled."}, {"IncludeConstantBasis", "IncludeConstantBasis is an \
option for LinearModelFit and other fitting functions that specifies whether \
a constant term should be included if not explicitly given in the list of \
basis functions."}, {"IncludeDefinitions", "IncludeDefinitions is an option \
for cloud and other functions that specifies whether current definitions \
relevant for the evaluation of an expression should be explicitly included \
when the expression is deployed."}, {"IncludeDirectories", "IncludeDirectorie\
s is an option that specifies whether directories are included in \
evaluations."}, {"IncludeGeneratorTasks", "IncludeGeneratorTasks is an option \
controlling the scope of scheduled task listings."}, 
 {"IncludeHydrogens", "IncludeHydrogens is an option that specifies whether \
hydrogen atoms should be explicitly included in the results."}, 
 {"IncludeInflections", "IncludeInflections is an option for linguistic \
functions that specifies whether inflected forms of words should be included \
in results."}, {"IncludeMetaInformation", "IncludeMetaInformation is an \
option for Import, Thumbnail, and other functions to specify what types of \
metadata to include."}, {"IncludePods", "IncludePods is an option for \
WolframAlpha that determines specific pod IDs to include in the results."}, 
 {"IncludeQuantities", "IncludeQuantities is an option for \
DimensionalCombinations for additional quantities to include in the result."}\
, {"IncludeRelatedTables", "IncludeRelatedTables is an option for \
RelationalDatabase that specifies whether to include tables specified in \
foreign keys."}, {"IncludeWindowTimes", "IncludeWindowTimes is an option to \
TimeSeriesWindow that specifies whether the endpoints in the time window \
should be included."}, {"IncludedContexts", "IncludedContexts is an option \
for FullDefinition, Manipulate and related symbols that gives contexts whose \
symbols will have their definitions recursively saved."}, 
 {"Increment", 
  "x++ increases the value of x by 1, returning the old value of x."}, 
 {"IndefiniteMatrixQ", "IndefiniteMatrixQ[m] gives True if m is explicitly \
indefinite, and False otherwise."}, {"IndependenceTest", "IndependenceTest[v1\
, v2] tests whether the vectors v1 and v2 are independent. \
IndependenceTest[m1, m2] tests whether the matrices m1 and m2 are \
independent. IndependenceTest[\[Ellipsis],\"\\!\\(\\*property\"] returns the \
value of \"\\!\\(\\*property\"."}, {"IndependentEdgeSetQ", "IndependentEdgeSe\
tQ[g, elist] yields True if the edge list elist is an independent edge set of \
the graph g, and False otherwise."}, {"IndependentPhysicalQuantity", "Indepen\
dentPhysicalQuantity[string] represents a physical quantity string with no \
relationship to other physical quantities used in QuantityVariable."}, 
 {"IndependentUnit", "IndependentUnit[string] represents a unit string with \
no relationship to other units within a Quantity."}, 
 {"IndependentUnitDimension", "IndependentUnitDimension[dim] represents the \
base dimension dim associated with an independent physical quantity or unit."}\
, {"IndependentVertexSetQ", "IndependentVertexSetQ[g, vlist] yields True if \
the vertex list vlist is an independent vertex set in the graph g, and False \
otherwise."}, {"Indeterminate", "Indeterminate is a symbol that represents a \
numerical quantity whose magnitude cannot be determined."}, 
 {"IndeterminateThreshold", "IndeterminateThreshold is an option for \
Classify, Predict, and related functions that specifies below what \
probability or probability density a result should be considered \
indeterminate."}, {"IndexEdgeTaggedGraph", "IndexEdgeTaggedGraph[g] sets tags \
of edges in the graph g to their edge indices. IndexEdgeTaggedGraph[g, r] \
sets tags of edges to r, r + 1, \[Ellipsis] "}, 
 {"IndexGraph", "IndexGraph[g] replaces the vertices of the graph g by its \
vertex indices. IndexGraph[g, r] replaces the vertices with integers r, r + \
1, \[Ellipsis]. IndexGraph[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w \
to specify the graph g."}, {"Indexed", "Indexed[expr, i] represents the \
component of expr with index i and formats as expri. Indexed[expr, {i, j, \
\[Ellipsis]}] represents the component with indices i, j, \[Ellipsis] and \
formats as expri, j, \[Ellipsis]."}, {"InexactNumberQ", "InexactNumberQ[expr] \
returns True if expr is an inexact real or complex number, and returns False \
otherwise."}, {"InfiniteFuture", "InfiniteFuture returns a DateObject \
expression representing infinite future in time."}, 
 {"InfiniteLine", "InfiniteLine[{p1, p2}] represents the infinite straight \
line passing through the points p1 and p2. InfiniteLine[p, v] represents the \
infinite straight line passing through the point p in the direction v."}, 
 {"InfinitePast", "InfinitePast returns a DateObject expression representing \
infinite past in time."}, {"InfinitePlane", "InfinitePlane[{p1, p2, p3}] \
represents the plane passing through the points p1, p2, and p3. \
InfinitePlane[p, {v1, v2}] represents the plane passing through the point p \
in the directions v1 and v2."}, {"Infinity", "Infinity or \[Infinity] is a \
symbol that represents a positive infinite quantity."}, 
 {"Infix", "Infix[f[e1, e2, \[Ellipsis]]] prints with f[e1, e2, \[Ellipsis]] \
given in default infix form: e1~f~e2~f~e3\[Ellipsis]. Infix[expr, h] prints \
with arguments separated by h : e1 h e2 h e3\[Ellipsis]."}, 
 {"InflationAdjust", "InflationAdjust[quantity, targetdate] attempts to \
adjust the specified quantity purchasing power to targetdate. \
InflationAdjust[quantity] uses the current year as targetdate. \
InflationAdjust[quantity, targetunit] converts the currency to targetunit \
after adjusting to the current year. InflationAdjust[timeseries, targetdate] \
attempts to adjust the specified timeseries data purchasing power to \
targetdate."}, {"InflationMethod", "InflationMethod is an option for \
InflationAdjust that specifies what time series data is to be used for \
adjustment in time."}, {"Information", "Information[expr] gives information \
about the expression expr. Information[expr, prop] gives the value of the \
property prop for expr."}, {"InheritScope", "InheritScope is an option for \
DynamicModule that specifies whether to attempt to bind variables referenced \
in the DynamicModule to a parent DynamicModule instance."}, 
 {"Inherited", "Inherited represents an option value to be inherited from an \
enclosing style, cell, or notebook."}, {"InhomogeneousPoissonPointProcess", "\
InhomogeneousPoissonPointProcess[\[Mu], d ] represents an inhomogeneous \
Poisson point process with density function \
\[Mu]:\[DoubleStruckCapitalR]^d->\[DoubleStruckCapitalR]> in \
\[DoubleStruckCapitalR]^d."}, {"InhomogeneousPoissonProcess", "InhomogeneousP\
oissonProcess[\[Lambda][t], t] represents an inhomogeneous Poisson process \
with intensity \[Lambda][t] given as a function of t."}, 
 {"InitialEvaluationHistory", "InitialEvaluationHistory is an option for \
functions such as BayesianMinimization that gives an initial set of \
configurations and values."}, {"InitialSeeding", "InitialSeeding is an option \
for NDSolve and other functions that specifies equations that specify initial \
seeding values for variables that may be used by iterative algorithms."}, 
 {"Initialization", "Initialization is an option for notebooks, cells, \
Dynamic, DynamicModule, Manipulate and related constructs that specifies an \
expression to be evaluated when the construct is first displayed."}, 
 {"InitializationCell", "InitializationCell is an option for Cell that \
specifies whether the cell should be tagged to be evaluated by the Wolfram \
Language kernel immediately before the first evaluation performed by the user \
after the notebook is opened."}, {"InitializationObjects", "InitializationObj\
ects[] gives the list of all persistent initialization objects in all \
locations in $PersistencePath. InitializationObjects[\"\\!\\(\\*patt\"] gives \
all persistent initialization objects for symbols matching the string pattern \
\"\\!\\(\\*patt\". InitializationObjects[\"\\!\\(\\*patt\", loc] gives all \
matching persistent initialization objects in the persistence location loc. \
InitializationObjects[\"\\!\\(\\*patt\", {loc1, \[Ellipsis]}] gives all \
matching persistent initialization objects in all the loci."}, 
 {"InitializationValue", "InitializationValue[sym] represents the settable \
persistent value with which the symbol sym will be initialized. \
InitializationValue[\"\\!\\(\\*context`name\"] represents the settable \
initialization value for the symbol with the specified complete name. \
InitializationValue[sym, {loc1, \[Ellipsis]}] specifies the persistence \
locations to search for a possible initialization value."}, 
 {"Initialize", "Initialize[sym] initializes the symbol sym from persistent \
values on the default persistence path. Initialize[sym, {loc1, \[Ellipsis]}] \
initializes the symbol sym from persistent values on the persistence path \
{loc1, \[Ellipsis]}. Initialize[\"\\!\\(\\*patt\"] initializes all variables \
matching the string pattern \"\\!\\(\\*patt\"."}, 
 {"Inner", "Inner[f, list1, list2, g] is a generalization of Dot in which f \
plays the role of multiplication and g of addition."}, 
 {"InnerPolygon", 
  "InnerPolygon[poly] gives the inner polygon of the polygon poly."}, 
 {"InnerPolyhedron", 
  "InnerPolyhedron[poly] gives the inner polyhedron of the polyhedron poly."}\
, {"Inpaint", "Inpaint[image, region] retouches parts of image that \
correspond to nonzero elements in region."}, {"Input", "Input[] interactively \
reads in one Wolfram Language expression. Input[prompt] requests input, \
displaying prompt as a \"prompt\". Input[prompt, init] in a notebook front \
end uses init as the initial contents of the input field."}, 
 {"InputAliases", "InputAliases is an option for cells and notebooks which \
specifies additional Esc name Esc aliases to be allowed on input."}, 
 {"InputAssumptions", "InputAssumptions is an option for WolframAlpha that \
specifies assumptions for current query input."}, 
 {"InputAutoReplacements", "InputAutoReplacements is an option for cells and \
notebooks which specifies strings of characters that should be replaced \
immediately on input."}, {"InputField", "InputField[] represents a blank \
editable input field. InputField[x] represents an editable input field that \
currently contains the expression x. InputField[Dynamic[x]] takes the \
contents of the input field to be the dynamically updated current value of x, \
with the value of x being reset if new contents are entered. InputField[x, \
String] represents an input field whose contents are taken to be a string. \
InputField[x, Number] represents an input field whose contents are taken to \
be a number. InputField[x, type] represents an input field whose contents are \
taken to be of the specified type."}, {"InputForm", "InputForm[expr] prints \
as a version of expr suitable for input to the Wolfram Language."}, 
 {"InputNamePacket", "InputNamePacket[string] is a WSTP packet that contains \
in string the name to be assigned to the next input."}, 
 {"InputNotebook", "InputNotebook[] gives the current notebook into which \
keyboard input in the front end will be directed."}, 
 {"InputPacket", "InputPacket[] is a WSTP packet that indicates a prompt for \
input as generated by Input."}, {"InputPorts", "InputPorts is an option to \
specify the number, names or shapes of input ports for some neural net \
layers."}, {"InputStream", "InputStream[\"\\!\\(\\*name\", n] is an object \
that represents an input stream for functions such as Read and Find."}, 
 {"InputString", "InputString[] interactively reads in a character string. \
InputString[prompt] requests input, displaying prompt as a \"prompt\". \
InputString[prompt, init] in a notebook front end uses init as the initial \
contents of the input field."}, {"InputStringPacket", 
  "InputStringPacket[] is a WSTP packet that requests input in string form."}\
, {"Insert", "Insert[list, elem, n] inserts elem at position n in list. If n \
is negative, the position is counted from the end. Insert[expr, elem, {i, j, \
\[Ellipsis]}] inserts elem at position {i, j, \[Ellipsis]} in expr. \
Insert[expr, elem, {{i1, j1, \[Ellipsis]}, {i2, j2, \[Ellipsis]}, \
\[Ellipsis]}] inserts elem at several positions. Insert[elem, pos] represents \
an operator form of Insert that can be applied to an expression."}, 
 {"InsertLinebreaks", "InsertLinebreaks[\"\\!\\(\\*string\"] inserts newline \
characters into string to make a string in which no line is longer than 78 \
characters. InsertLinebreaks[\"\\!\\(\\*string\", n] inserts newline \
characters to make no line longer than n characters."}, 
 {"InsertResults", "InsertResults is an option for NotebookEvaluate that \
determines whether to place the results of evaluation in the notebook being \
evaluated."}, {"InsertionFunction", "InsertionFunction is an option for \
template functions that specifies how expressions are to be processed before \
they are inserted when the template is applied."}, 
 {"Inset", "Inset[obj] represents an object obj inset in a graphic. \
Inset[obj, pos] specifies that the inset should be placed at position pos in \
the graphic. Inset[obj, pos, opos] aligns the inset so that position opos in \
the object lies at position pos in the enclosing graphic. Inset[obj, pos, \
opos, size] specifies the size of the inset in the coordinate system of the \
enclosing graphic. Inset[obj, pos, opos, size, dirs] specifies that the axes \
of the inset should be oriented in directions dirs."}, 
 {"Insphere", "Insphere[{p1, \[Ellipsis], pn+1}] gives the sphere that can be \
inscribed in the simplex defined by points pi in \[DoubleStruckCapitalR]^n. \
Insphere[poly] gives the insphere of a polyhedron or polygon poly."}, 
 {"Install", "Install[\"\\!\\(\\*name\"] starts a WSTP-compatible external \
program and installs Wolfram Language definitions to call functions in it."}, 
 {"InstallService", "InstallService[\"\\!\\(\\*url\"] installs the web \
service operations in the WSDL description at the URL given. \
InstallService[\"\\!\\(\\*url\", \"\\!\\(\\*context`\"] installs web service \
operations, creating functions in the specified context."}, 
 {"Integer", "Integer is the head used for integers."}, 
 {"IntegerDigits", "IntegerDigits[n] gives a list of the decimal digits in \
the integer n. IntegerDigits[n, b] gives a list of the base b digits in the \
integer n. IntegerDigits[n, b, len] pads the list on the left with zeros to \
give a list of length len. IntegerDigits[n, MixedRadix[blist]] uses the mixed \
radix with list of bases blist."}, {"IntegerExponent", 
  "IntegerExponent[n, b] gives the highest power of b that divides n."}, 
 {"IntegerLength", "IntegerLength[n] gives the number of digits in the base \
10 representation of the integer n. IntegerLength[n, b] gives the number of \
digits in the base b representation of n."}, {"IntegerName", "IntegerName[n] \
gives a string containing the full English name of the integer n. \
IntegerName[n, \"\\!\\(\\*type\"] gives a string of the specified type. \
IntegerName[n, p] names only the first p digits explicitly."}, 
 {"IntegerPart", "IntegerPart[x] gives the integer part of x."}, 
 {"IntegerPartitions", "IntegerPartitions[n] gives a list of all possible \
ways to partition the integer n into smaller integers. IntegerPartitions[n, \
k] gives partitions into at most k integers. IntegerPartitions[n, {k}] gives \
partitions into exactly k integers. IntegerPartitions[n, {kmin, kmax}] gives \
partitions into between kmin and kmax integers. IntegerPartitions[n, kspec, \
{s1, s2, \[Ellipsis]}] gives partitions involving only the si. \
IntegerPartitions[n, kspec, sspec, m] limits the result to the first m \
partitions."}, {"IntegerQ", 
  "IntegerQ[expr] gives True if expr is an integer, and False otherwise."}, 
 {"IntegerReverse", "IntegerReverse[n] gives the integer whose digits are \
reversed with respect to those of the integer n. IntegerReverse[n, b] gives \
the integer whose digits in base b are reversed with respect to those of n. \
IntegerReverse[n, b, len] gives the integer with reversed digits after \
padding n with zeros on the left to have len digits."}, 
 {"IntegerString", "IntegerString[n] gives a string consisting of the decimal \
digits in the integer n. IntegerString[n, b] gives a string consisting of the \
base-b digits in the integer n. IntegerString[n, b, len] pads the string on \
the left with zero digits to give a string of length len. IntegerString[n, \
MixedRadix[blist]] uses the mixed radix with a list of bases blist. \
IntegerString[n, \"numsys\"] gives the numeral form of n based on the numeric \
system defined by \"numsys\"."}, 
 {"Integers", 
  "Integers represents the domain of integers, as in x\[Element]Integers."}, 
 {"Integrate", "Integrate[f, x] gives the indefinite integral \[Integral]f \
dx. Integrate[f, {x, xmin, xmax}] gives the definite integral \
\[Integral]xminxmax f dx. Integrate[f, {x, xmin, xmax}, {y, ymin, ymax}, \
\[Ellipsis]] gives the multiple integral \
\[Integral]xminxmaxdx\[Integral]yminymaxdy \[Ellipsis] f. Integrate[f, {x, y, \
\[Ellipsis]}\[Element]reg] integrates over the geometric region reg."}, 
 {"Interactive", "Interactive is an option that specifies whether a function \
should create a user prompt when mimicking an action that would have created \
a user prompt if invoked manually."}, {"InteractiveTradingChart", "Interactiv\
eTradingChart[{{date1, {open1, high1, low1, close1, volume1}}, \[Ellipsis]}] \
makes a chart showing prices and volume for each date. \
InteractiveTradingChart[{\"\\!\\(\\*name\", daterange}] makes a financial \
chart for the financial entity \"\\!\\(\\*name\" over the daterange. \
InteractiveTradingChart[{\[Ellipsis]}, {ind1, ind2, \[Ellipsis]}] makes a \
financial chart with indicators ind1, ind2, \[Ellipsis]."}, 
 {"Interleaving", "Interleaving is an option for Image and related functions \
that specifies whether data corresponding to different channels in an object \
such as an image should be interleaved."}, 
 {"InternallyBalancedDecomposition", "InternallyBalancedDecomposition[ssm] \
yields the internally balanced decomposition of the state-space model ssm."}, 
 {"InterpolatingFunction", "InterpolatingFunction[domain, table] represents \
an approximate function whose values are found by interpolation."}, 
 {"InterpolatingPolynomial", "InterpolatingPolynomial[{f1, f2, \[Ellipsis]}, \
x] constructs an interpolating polynomial in x which reproduces the function \
values fi at successive integer values 1, 2, \[Ellipsis] of x. \
InterpolatingPolynomial[{{x1, f1}, {x2, f2}, \[Ellipsis]}, x] constructs an \
interpolating polynomial for the function values fi corresponding to x values \
xi. InterpolatingPolynomial[{{{x1, y1, \[Ellipsis]}, f1}, {{x2, y2, \
\[Ellipsis]}, f2}, \[Ellipsis]}, {x, y, \[Ellipsis]}] constructs a \
multidimensional interpolating polynomial in the variables x, y, \[Ellipsis]. \
InterpolatingPolynomial[{{{x1, \[Ellipsis]}, f1, df1, \[Ellipsis]}, \
\[Ellipsis]}, {x, \[Ellipsis]}] constructs an interpolating polynomial that \
reproduces derivatives as well as function values."}, 
 {"Interpolation", "Interpolation[{f1, f2, \[Ellipsis]}] constructs an \
interpolation of the function values fi, assumed to correspond to x values 1, \
2, \[Ellipsis]. Interpolation[{{x1, f1}, {x2, f2}, \[Ellipsis]}] constructs \
an interpolation of the function values fi corresponding to x values xi. \
Interpolation[{{{x1, y1, \[Ellipsis]}, f1}, {{x2, y2, \[Ellipsis]}, f2}, \
\[Ellipsis]}] constructs an interpolation of multidimensional data. \
Interpolation[{{{x1, \[Ellipsis]}, f1, df1, \[Ellipsis]}, \[Ellipsis]}] \
constructs an interpolation that reproduces derivatives as well as function \
values. Interpolation[data, x] find an interpolation of data at the point x."}\
, {"InterpolationOrder", "InterpolationOrder is an option for Interpolation, \
as well as ListLinePlot, ListPlot3D, ListContourPlot, and related functions, \
that specifies what order of interpolation to use."}, 
 {"InterpolationPoints", "InterpolationPoints is an option to \
SmoothKernelDistribution and FunctionInterpolation that specifies the initial \
number of interpolation points to use."}, {"Interpretation", "Interpretation[\
e, expr] represents an object that displays as e, but is interpreted as the \
unevaluated form of expr if supplied as input. Interpretation[{x = x0, y = \
y0, \[Ellipsis]}, e, expr] allows local variables x, y, \[Ellipsis] in e and \
expr."}, {"InterpretationBox", "InterpretationBox[boxes, expr] is a low-level \
box construct that displays as boxes but is interpreted on input as expr."}, 
 {"InterpretationBoxOptions", "InterpretationBoxOptions is an option for \
selections that specifies settings for InterpretationBox constructs."}, 
 {"InterpretationFunction", "InterpretationFunction is an option for \
TemplateBox that specifies how the box is to be evaluated."}, 
 {"Interpreter", "Interpreter[form] represents an interpreter object that can \
be applied to an input to try to interpret it as an object of the specified \
form. Interpreter[form, test] returns the interpreted object only if applying \
test to it yields True ; otherwise it returns a Failure object. \
Interpreter[form, test, fail] returns the result of applying the function \
fail if the test fails."}, {"InterquartileRange", "InterquartileRange[list] \
gives the difference between the upper and lower quartiles for the elements \
in list. InterquartileRange[dist] gives the difference between the upper and \
lower quartiles for the distribution dist."}, 
 {"Interrupt", "Interrupt[] generates an interrupt."}, 
 {"IntersectedEntityClass", "IntersectedEntityClass[class1, class2, \
\[Ellipsis]] represents an entity class containing all the entities common to \
all classi."}, {"IntersectingQ", "IntersectingQ[list1, list2] yields True if \
list1 and list2 have at least one element in common, and False otherwise."}, 
 {"Intersection", "Intersection[list1, list2, \[Ellipsis]] gives a sorted \
list of the elements common to all the listi."}, 
 {"Interval", "Interval[{min, max}] represents the range of values between \
min and max. Interval[{min1, max1}, {min2, max2}, \[Ellipsis]] represents the \
union of the ranges min1 to max1, min2 to max2, \[Ellipsis]."}, 
 {"IntervalIntersection", "IntervalIntersection[interval1, interval2, \
\[Ellipsis]] gives the interval representing all points common to each of the \
intervali."}, {"IntervalMarkers", "IntervalMarkers is an option for plotting \
functions such as ListPlot and BarChart that specifies how to represent \
uncertainty intervals."}, {"IntervalMarkersStyle", "IntervalMarkersStyle is \
an option for plotting functions that specifies styles in which uncertainty \
intervals are drawn."}, {"IntervalMemberQ", "IntervalMemberQ[interval, x] \
gives True if the number x lies within the specified interval, and False \
otherwise. IntervalMemberQ[interval1, interval2] gives True if interval2 is \
completely contained within interval1. IntervalMemberQ[interval] represents \
an operator form of IntervalMemberQ that can be applied to a number."}, 
 {"IntervalSlider", "IntervalSlider[{xmin, xmax}] represents a slider with \
setting {xmin, xmax} in the range 0 to 1. IntervalSlider[Dynamic[int]] takes \
the setting to be the dynamically updated current value of int, with the \
value of int being reset if the slider is moved. IntervalSlider[int, {min, \
max}] represents a slider with range min to max. IntervalSlider[int, {min, \
max, dx}] represents a slider that jumps in steps dx."}, 
 {"IntervalUnion", "IntervalUnion[interval1, interval2, \[Ellipsis]] gives \
the interval representing the set of all points in any of the intervali."}, 
 {"Inverse", "Inverse[m] gives the inverse of a square matrix m."}, 
 {"InverseBetaRegularized", "InverseBetaRegularized[s, a, b] gives the \
inverse of the regularized incomplete beta function."}, 
 {"InverseBilateralLaplaceTransform", "InverseBilateralLaplaceTransform[expr, \
s, t] gives the inverse bilateral Laplace transform of expr. \
InverseBilateralLaplaceTransform[expr, {s1, s2, \[Ellipsis], sn}, {t1, t2, \
\[Ellipsis], tn}] gives the multidimensional inverse bilateral Laplace \
transform of expr."}, {"InverseCDF", "InverseCDF[dist, q] gives the inverse \
of the cumulative distribution function for the distribution dist as a \
function of the variable q."}, {"InverseChiSquareDistribution", "InverseChiSq\
uareDistribution[\[Nu]] represents an inverse \[Chi]^2 distribution with \
\[Nu] degrees of freedom. InverseChiSquareDistribution[\[Nu], \[Xi]] \
represents a scaled inverse \[Chi]^2 distribution with \[Nu] degrees of \
freedom and scale \[Xi]."}, {"InverseContinuousWaveletTransform", "InverseCon\
tinuousWaveletTransform[cwd] gives the inverse continuous wavelet transform \
of a ContinuousWaveletData object cwd. InverseContinuousWaveletTransform[cwd, \
wave] gives the inverse transform using the wavelet wave. \
InverseContinuousWaveletTransform[cwd,wave, octvoc] gives the inverse \
transform from the wavelet coefficients specified by octvoc."}, 
 {"InverseDistanceTransform", "InverseDistanceTransform[image] gives the \
inverse distance transform of image, returning the result as a binary image."}\
, {"InverseEllipticNomeQ", "InverseEllipticNomeQ[q] gives the parameter m \
corresponding to the nome q in an elliptic function."}, 
 {"InverseErf", "InverseErf[s] gives the inverse error function obtained as \
the solution for z in s = erf(z)."}, {"InverseErfc", "InverseErfc[s] gives \
the inverse complementary error function obtained as the solution for z in s \
= erfc(z)."}, {"InverseFourier", "InverseFourier[list] finds the discrete \
inverse Fourier transform of a list of complex numbers. InverseFourier[list, \
{p1, p2, \[Ellipsis]}] returns the specified positions of the discrete \
inverse Fourier transform."}, {"InverseFourierCosTransform", "InverseFourierC\
osTransform[expr, \[Omega], t] gives the symbolic inverse Fourier cosine \
transform of expr. InverseFourierCosTransform[expr, {\[Omega]1, \[Omega]2, \
\[Ellipsis]}, {t1, t2, \[Ellipsis]}] gives the multidimensional inverse \
Fourier cosine transform of expr."}, {"InverseFourierSequenceTransform", "Inv\
erseFourierSequenceTransform[expr, \[Omega], n] gives the inverse \
discrete-time Fourier transform of expr. \
InverseFourierSequenceTransform[expr, {\[Omega]1, \[Omega]2, \[Ellipsis]}, \
{n1, n2, \[Ellipsis]}] gives the multidimensional inverse Fourier sequence \
transform."}, {"InverseFourierSinTransform", "InverseFourierSinTransform[expr\
, \[Omega], t] gives the symbolic inverse Fourier sine transform of expr. \
InverseFourierSinTransform[expr, {\[Omega]1, \[Omega]2, \[Ellipsis]}, {t1, \
t2, \[Ellipsis]}] gives the multidimensional inverse Fourier sine transform \
of expr."}, {"InverseFourierTransform", "InverseFourierTransform[expr, \
\[Omega], t] gives the symbolic inverse Fourier transform of expr. \
InverseFourierTransform[expr, {\[Omega]1, \[Omega]2, \[Ellipsis]}, {t1, t2, \
\[Ellipsis]}] gives the multidimensional inverse Fourier transform of expr."}\
, {"InverseFunction", "InverseFunction[f] represents the inverse of the \
function f, defined so that InverseFunction[f][y] gives the value of x for \
which f[x] is equal to y. InverseFunction[f, n, tot] represents the inverse \
with respect to the n^th argument when there are tot arguments in all."}, 
 {"InverseFunctions", "InverseFunctions is an option for Solve and related \
functions that specifies whether inverse functions should be used."}, 
 {"InverseGammaDistribution", "InverseGammaDistribution[\[Alpha], \[Beta]] \
represents an inverse gamma distribution with shape parameter \[Alpha] and \
scale parameter \[Beta]. InverseGammaDistribution[\[Alpha], \[Beta], \
\[Gamma], \[Mu]] represents a generalized inverse gamma distribution with \
shape parameters \[Alpha] and \[Gamma], scale parameter \[Beta], and location \
parameter \[Mu]."}, {"InverseGammaRegularized", "InverseGammaRegularized[a, \
s] gives the inverse of the regularized incomplete gamma function."}, 
 {"InverseGaussianDistribution", "InverseGaussianDistribution[\[Mu], \
\[Lambda]] represents an inverse Gaussian distribution with mean \[Mu] and \
scale parameter \[Lambda]. InverseGaussianDistribution[\[Mu], \[Lambda], \
\[Theta]] represents a generalized inverse Gaussian distribution with \
parameters \[Mu], \[Lambda], and \[Theta]."}, 
 {"InverseGudermannian", 
  "InverseGudermannian[z] gives the inverse Gudermannian function gd^ - \
1(z)."}, {"InverseHankelTransform", "InverseHankelTransform[expr, s, r] gives \
the inverse Hankel transform of order 0 for expr. \
InverseHankelTransform[expr, s, r, \[Nu]] gives the inverse Hankel transform \
of order \[Nu] for expr."}, {"InverseHaversine", 
  "InverseHaversine[z] gives the inverse haversine function hav^ - 1(z)."}, 
 {"InverseImagePyramid", "InverseImagePyramid[pyr] reconstructs an image from \
an ImagePyramid object pyr. InverseImagePyramid[pyr, pyrtype] assumes the \
specified pyramid type pyrtype. InverseImagePyramid[pyr, pyrtype, n] \
reconstructs up to pyramid level n. InverseImagePyramid[pyr, pyrtype, {size}] \
reconstructs up to the smallest pyramid level larger than the specified \
size."}, {"InverseJacobiCD", "InverseJacobiCD[v, m] gives the inverse Jacobi \
elliptic function cd^ - 1(v|m)."}, {"InverseJacobiCN", "InverseJacobiCN[v, m] \
gives the inverse Jacobi elliptic function cn^ - 1(v|m)."}, 
 {"InverseJacobiCS", "InverseJacobiCS[v, m] gives the inverse Jacobi elliptic \
function cs^ - 1(v|m)."}, {"InverseJacobiDC", "InverseJacobiDC[v, m] gives \
the inverse Jacobi elliptic function dc^ - 1(v|m)."}, 
 {"InverseJacobiDN", "InverseJacobiDN[v, m] gives the inverse Jacobi elliptic \
function dn^ - 1(v|m)."}, {"InverseJacobiDS", "InverseJacobiDS[v, m] gives \
the inverse Jacobi elliptic function ds^ - 1(v|m)."}, 
 {"InverseJacobiNC", "InverseJacobiNC[v, m] gives the inverse Jacobi elliptic \
function nc^ - 1(v|m)."}, {"InverseJacobiND", "InverseJacobiND[v, m] gives \
the inverse Jacobi elliptic function nd^ - 1(v|m)."}, 
 {"InverseJacobiNS", "InverseJacobiNS[v, m] gives the inverse Jacobi elliptic \
function ns^ - 1(v|m)."}, {"InverseJacobiSC", "InverseJacobiSC[v, m] gives \
the inverse Jacobi elliptic function sc^ - 1(v|m)."}, 
 {"InverseJacobiSD", "InverseJacobiSD[v, m] gives the inverse Jacobi elliptic \
function sd^ - 1(v|m)."}, {"InverseJacobiSN", "InverseJacobiSN[v, m] gives \
the inverse Jacobi elliptic function sn^ - 1(v|m)."}, 
 {"InverseLaplaceTransform", "InverseLaplaceTransform[F[s], s, t] gives the \
symbolic inverse Laplace transform of F[s] in the variable s as f[t] in the \
variable t. InverseLaplaceTransform[F[s], s, t^] gives the numeric inverse \
Laplace transform at the numerical value t^. InverseLaplaceTransform[F[s1, \
\[Ellipsis], sn], {s1, s2, \[Ellipsis]}, {t1, t2, \[Ellipsis]}] gives the \
multidimensional inverse Laplace transform of F[s1, \[Ellipsis], sn]."}, 
 {"InverseMellinTransform", "InverseMellinTransform[expr, s, x] gives the \
inverse Mellin transform of expr."}, {"InversePermutation", 
  "InversePermutation[perm] returns the inverse of permutation perm."}, 
 {"InverseRadon", "InverseRadon[image] gives the inverse discrete Radon \
transform of image. InverseRadon[image, {w, h}] specifies the width w and the \
height h of the resulting image."}, {"InverseRadonTransform", "InverseRadonTr\
ansform[expr, {p, \[Phi]}, {x, y}] gives the inverse Radon transform of \
expr."}, {"InverseSeries", "InverseSeries[s] takes the series s, and gives a \
series for the inverse of the function represented by s. InverseSeries[s, x] \
uses the variable x in the inverse series."}, {"InverseShortTimeFourier", "In\
verseShortTimeFourier[input] reconstructs the signal from short-time Fourier \
data. InverseShortTimeFourier[input, n] assumes the spectrogram data was \
computed with partitions of length n. InverseShortTimeFourier[input, n, d] \
assumes partitions with offset d. InverseShortTimeFourier[input, n, d, wfun] \
assumes a smoothing window wfun was applied to each partition."}, 
 {"InverseSpectrogram", "InverseSpectrogram[data] reconstructs the signal \
from the magnitude spectrogram data. InverseSpectrogram[img] reconstructs the \
signal, assuming that the image img is the magnitude spectrogram. \
InverseSpectrogram[input, n] assumes the spectrogram data was computed with \
partitions of length n. InverseSpectrogram[input, n, d] assumes partitions \
with offset d. InverseSpectrogram[input, n, d, wfun] assumes a smoothing \
window wfun was applied to each partition."}, {"InverseSurvivalFunction", "In\
verseSurvivalFunction[dist, q] gives the inverse of the survival function for \
the distribution dist as a function of the variable q."}, 
 {"InverseTransformedRegion", "InverseTransformedRegion[reg, f, n] represents \
the inverse transformed region \
{p\[Element]\[DoubleStruckCapitalR]^n|f(p)\[Element]reg}, where reg is a \
region and f is a function."}, {"InverseWaveletTransform", "InverseWaveletTra\
nsform[dwd] gives the inverse wavelet transform of a DiscreteWaveletData \
object dwd. InverseWaveletTransform[dwd, wave] gives the inverse transform \
using the wavelet wave. InverseWaveletTransform[dwd, wave, wind] gives the \
inverse transform from the wavelet coefficients specified by wind."}, 
 {"InverseWeierstrassP", "InverseWeierstrassP[p, {g2, g3}] gives a value of u \
for which the Weierstrass function \[WeierstrassP](u;g2, g3) is equal to p."}\
, {"InverseWishartMatrixDistribution", "InverseWishartMatrixDistribution[\
\[Nu], \[CapitalSigma]] represents an inverse Wishart matrix distribution \
with \[Nu] degrees of freedom and covariance matrix \[CapitalSigma]."}, 
 {"InverseZTransform", "InverseZTransform[expr, z, n] gives the inverse Z \
transform of expr. InverseZTransform[expr, {z1, z2, \[Ellipsis]}, {n1, n2, \
\[Ellipsis]}] gives the multiple inverse Z transform of expr."}, 
 {"Invisible", "Invisible[expr] displays as space that is the same size as \
the formatted version of expr."}, {"IrreduciblePolynomialQ", "IrreduciblePoly\
nomialQ[poly] tests whether poly is an irreducible polynomial over the \
rationals. IrreduciblePolynomialQ[poly, Modulus->p] tests whether poly is \
irreducible modulo a prime p. IrreduciblePolynomialQ[poly, Extension->{a1, \
a2, \[Ellipsis]}] tests whether poly is irreducible over the field extension \
generated by the algebraic numbers ai. IrreduciblePolynomialQ[poly, \
Extension->All] tests whether poly is absolutely irreducible over the complex \
numbers."}, {"IslandData", "IslandData[entity, property] gives the value of \
the specified property for the island entity. IslandData[{entity1, entity2, \
\[Ellipsis]}, property] gives a list of property values for the specified \
island entities. IslandData[entity, property, annotation] gives the specified \
annotation associated with the given property."}, 
 {"IsolatingInterval", "IsolatingInterval[a] gives a rational isolating \
interval for the algebraic number a. IsolatingInterval[a, dx] gives an \
isolating interval of width at most dx."}, {"IsomorphicGraphQ", "IsomorphicGr\
aphQ[g1, g2] yields True if the graphs g1 and g2 are isomorphic, and False \
otherwise."}, {"IsotopeData", "IsotopeData[{Z, A}, \"\\!\\(\\*property\"] \
gives the value of the specified property for the isotope with atomic number \
Z and mass number A. IsotopeData[\"\\!\\(\\*name\", \"\\!\\(\\*property\"] \
gives the value of the property for the named isotope."}, 
 {"Italic", "Italic represents an italic font slant."}, 
 {"Item", "Item[expr, options] represents an item within constructs such as \
Grid, Overlay, and Manipulate that displays with expr as the content, and \
with the specified options applied to the region containing expr."}, 
 {"ItemAspectRatio", "ItemAspectRatio is an option for GraphicsGrid which \
specifies the ratio of height to width for the regions in which items are \
placed in the graphics grid."}, {"ItemDisplayFunction", "ItemDisplayFunction \
is an option for Dataset that specifies a function to apply to items before \
displaying them."}, {"ItemSize", "ItemSize is an option for Grid, Column, and \
related constructs that specifies the sizes to allow for items."}, 
 {"ItemStyle", "ItemStyle is an option for Dataset, Grid and related \
constructs that specifies styles to use for items."}, 
 {"ItoProcess", "ItoProcess[{a, b}, x, t] represents an Ito process x(t), \
where dx(t)==a(t, x(t))dt + b(t, x(t)).dw(t). ItoProcess[{a, b, c}, x, t] \
represents an Ito process y(t)==c(t, x(t)), where dx(t)==a(t, x(t))dt + b(t, \
x(t)).dw(t). ItoProcess[\[Ellipsis], {x, x0}, {t, t0}] uses initial condition \
x(t0)==x0. ItoProcess[\[Ellipsis], \[Ellipsis], \[Ellipsis], \[CapitalSigma]] \
uses a Wiener process w(t), with covariance \[CapitalSigma]. ItoProcess[proc] \
converts proc to a standard Ito process whenever possible. ItoProcess[sdeqns, \
expr, x, t, w\[Distributed]dproc] represents an Ito process specified by a \
stochastic differential equation sdeqns, output expression expr, with state x \
and time t, driven by w following the process dproc."}, 
 {"JaccardDissimilarity", "JaccardDissimilarity[u, v] gives the Jaccard \
dissimilarity between Boolean vectors u and v."}, 
 {"JacobiAmplitude", "JacobiAmplitude[u, m] gives the amplitude am(u|m) for \
Jacobi elliptic functions."}, {"JacobiCD", 
  "JacobiCD[u, m] gives the Jacobi elliptic function cd(u|m)."}, 
 {"JacobiCN", "JacobiCN[u, m] gives the Jacobi elliptic function cn(u|m)."}, 
 {"JacobiCS", "JacobiCS[u, m] gives the Jacobi elliptic function cs(u|m)."}, 
 {"JacobiDC", "JacobiDC[u, m] gives the Jacobi elliptic function dc(u|m)."}, 
 {"JacobiDN", "JacobiDN[u, m] gives the Jacobi elliptic function dn(u|m)."}, 
 {"JacobiDS", "JacobiDS[u, m] gives the Jacobi elliptic function ds(u|m)."}, 
 {"JacobiEpsilon", "JacobiEpsilon[u, m] gives the Jacobi epsilon function \
\[ScriptCapitalE](u|m)."}, {"JacobiNC", 
  "JacobiNC[u, m] gives the Jacobi elliptic function nc(u|m)."}, 
 {"JacobiND", "JacobiND[u, m] gives the Jacobi elliptic function nd(u|m)."}, 
 {"JacobiNS", "JacobiNS[u, m] gives the Jacobi elliptic function ns(u|m)."}, 
 {"JacobiP", "JacobiP[n, a, b, x] gives the Jacobi polynomial Pn(a, b)(x)."}, 
 {"JacobiSC", "JacobiSC[u, m] gives the Jacobi elliptic function sc(u|m)."}, 
 {"JacobiSD", "JacobiSD[u, m] gives the Jacobi elliptic function sd(u|m)."}, 
 {"JacobiSN", "JacobiSN[u, m] gives the Jacobi elliptic function sn(u|m)."}, 
 {"JacobiSymbol", "JacobiSymbol[n, m] gives the Jacobi symbol (n/m)."}, 
 {"JacobiZN", "JacobiZN[u, m] gives the Jacobi zeta function zn(u|m)."}, 
 {"JacobiZeta", 
  "JacobiZeta[\[Phi], m] gives the Jacobi zeta function Z(\[Phi]|m)."}, 
 {"JankoGroupJ1", 
  "JankoGroupJ1[] represents the sporadic simple Janko group J1."}, 
 {"JankoGroupJ2", 
  "JankoGroupJ2[] represents the sporadic simple Janko group J2."}, 
 {"JankoGroupJ3", 
  "JankoGroupJ3[] represents the sporadic simple Janko group J3."}, 
 {"JankoGroupJ4", 
  "JankoGroupJ4[] represents the sporadic simple Janko group J4."}, 
 {"JarqueBeraALMTest", "JarqueBeraALMTest[data] tests whether data is \
normally distributed using the Jarque-Bera ALM test. JarqueBeraALMTest[data, \
\"\\!\\(\\*property\"] returns the value of \"\\!\\(\\*property\"."}, 
 {"JohnsonDistribution", "JohnsonDistribution[\"SB\", \[Gamma], \[Delta], \
\[Mu], \[Sigma]] represents a bounded Johnson distribution with shape \
parameters \[Gamma], \[Delta], location parameter \[Mu], and scale parameter \
\[Sigma]. JohnsonDistribution[\"SL\", \[Gamma], \[Delta], \[Mu], \[Sigma]] \
represents a semi-bounded Johnson distribution. JohnsonDistribution[\"SU\", \
\[Gamma], \[Delta], \[Mu], \[Sigma]] represents an unbounded Johnson \
distribution. JohnsonDistribution[\"SN\", \[Gamma], \[Delta], \[Mu], \
\[Sigma]] represents a normal Johnson distribution."}, 
 {"Join", "Join[list1, list2, \[Ellipsis]] concatenates lists or other \
expressions that share the same head. Join[list1, list2, \[Ellipsis], n] \
joins the objects at level n in each of the listi."}, 
 {"JoinAcross", "JoinAcross[{a1, a2, \[Ellipsis]}, {b1, b2, \[Ellipsis]}, \
key] gives a list of associations obtained by joining those pairs of \
associations ai and bj in which the values associated with key are the same. \
JoinAcross[{a1, a2, \[Ellipsis]}, {b1, b2, \[Ellipsis]}, {key1, key2, \
\[Ellipsis]}] joins pairs of associations only when the values associated \
with all keys keyi are the same. JoinAcross[{a1, a2, \[Ellipsis]}, {b1, b2, \
\[Ellipsis]}, keya->keyb] joins pairs of associations ai, bj in which the \
values associated with keya in the ai are the same as those associated with \
keyb in the bj. JoinAcross[{a1, a2, \[Ellipsis]}, {b1, b2, \[Ellipsis]}, \
{keya1->keyb1, \[Ellipsis]}] joins pairs of associations in which pairs of \
corresponding values agree. JoinAcross[alist, blist, spec, \
\"\\!\\(\\*jspec\"] uses jspec to determine when to allow associations that \
contain missing elements to be generated."}, {"JoinForm", "JoinForm[type] is \
a graphics directive that specifies what type of joins should be used to \
connect segments of lines, tubes, edges, and related primitives."}, 
 {"Joined", "Joined is an option for ListPlot and related functions that \
specifies whether points in each dataset should be joined into a line, or \
should be plotted as separate points."}, {"JoinedCurve", "JoinedCurve[{segmen\
t1, segment2, \[Ellipsis]}] represents a curve consisting of segment1 \
followed by segment2 etc. JoinedCurve[{component1, component2, \[Ellipsis]}] \
represents a list of separate component curves component1, component2, etc."}\
, {"JordanDecomposition", "JordanDecomposition[m] yields the Jordan \
decomposition of a square matrix m. The result is a list {s, j} where s is a \
similarity matrix and j is the Jordan canonical form of m."}, 
 {"JordanModelDecomposition", "JordanModelDecomposition[ssm] yields the \
Jordan decomposition of the state-space model ssm."}, 
 {"JuliaSetBoettcher", "JuliaSetBoettcher[c, z] gives the \
B\[ODoubleDot]ttcher coordinate of z with respect to the quadratic Julia set \
Jc."}, {"JuliaSetIterationCount", "JuliaSetIterationCount[f, z, p] returns \
the number of iterations, beginning with the complex number z==p, of the \
function f(z) needed to determine whether p is in the Julia set of f. \
JuliaSetIterationCount[c, p] returns the number of iterations, beginning with \
the complex number z==p, of the function f(z)==z^2 + c needed to determine \
whether p is in the Julia set of f(z)==z^2 + c. JuliaSetIterationCount[f, z, \
{p1, p2, \[Ellipsis]}] returns a list of the number of iterations required to \
determine whether each member of {p1, p2, \[Ellipsis]} is in the Julia set of \
f. JuliaSetIterationCount[c, {p1, p2, \[Ellipsis]}] returns a list of the \
number of iterations required to determine whether each member of {p1, p2, \
\[Ellipsis]} is in the Julia set of f(z)==z^2 + c."}, 
 {"JuliaSetPlot", "JuliaSetPlot[f, z] plots the Julia set of the rational \
function f of the variable z. JuliaSetPlot[c] plots the Julia set of the \
function f(z)==z^2 + c."}, {"JuliaSetPoints", "JuliaSetPoints[f, z] returns a \
list of coordinates approximating the real and imaginary parts of the complex \
numbers in the Julia set of the rational function f of the variable z. \
JuliaSetPoints[c] returns a list of coordinates of points approximating the \
Julia set of the function f(z)==z^2 + c."}, {"JulianDate", "JulianDate[] \
gives the current number of days since noon on November 24, 4714 BCE in the \
GMT time zone. JulianDate[date] gives the number of days for the specified \
date. JulianDate[\"\\!\\(\\*type\"] gives the Julian date variant of the \
specified type. JulianDate[\"\\!\\(\\*type\", date] gives the variant for the \
specified date."}, {"KCoreComponents", "KCoreComponents[g, k] gives the k \
-core components of the underlying simple graph of g. KCoreComponents[g, k, \
\"In\"] gives the k -core components with vertex in-degrees at least k. \
KCoreComponents[g, k, \"Out\"] gives the k -core components with vertex \
out-degrees at least k. KCoreComponents[{v->w, \[Ellipsis]}, \[Ellipsis]] \
uses rules v->w to specify the graph g."}, {"KDistribution", "KDistribution[\
\[Nu], w] represents a K distribution with shape parameters \[Nu] and w."}, 
 {"KEdgeConnectedComponents", "KEdgeConnectedComponents[g, k] gives the k \
-edge-connected components of the graph g. KEdgeConnectedComponents[g, k, \
{v1, v2, \[Ellipsis]}] gives the k -edge-connected components that include at \
least one of the vertices v1, v2, \[Ellipsis]. \
KEdgeConnectedComponents[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to \
specify the graph g."}, {"KEdgeConnectedGraphQ", "KEdgeConnectedGraphQ[g, k] \
yields True if the graph g is k -edge-connected and False otherwise."}, 
 {"KVertexConnectedComponents", "KVertexConnectedComponents[g, k] gives the k \
-vertex-connected components of the graph g. KVertexConnectedComponents[g, k, \
{v1, v2, \[Ellipsis]}] gives the k -vertex-connected components that include \
at least one of the vertices v1, v2, \[Ellipsis]."}, 
 {"KVertexConnectedGraphQ", "KVertexConnectedGraphQ[g, k] yields True if the \
graph g is k -vertex-connected and False otherwise."}, 
 {"KagiChart", "KagiChart[{{date1, p1}, {date2, p2}, \[Ellipsis]}] makes a \
Kagi chart with prices pi at date datei. KagiChart[{\"\\!\\(\\*name\", \
daterange}] makes a Kagi chart of closing prices for the financial entity \
\"\\!\\(\\*name\" over the date range daterange. KagiChart[{\[Ellipsis]}, rt] \
makes a Kagi chart with reversal threshold rt."}, 
 {"KaiserBesselWindow", 
  "KaiserBesselWindow[x] represents a Kaiser-Bessel window function of x."}, 
 {"KaiserWindow", "KaiserWindow[x] represents a Kaiser window function of x. \
KaiserWindow[x, \[Alpha]] uses the parameter \[Alpha]."}, 
 {"KalmanEstimator", "KalmanEstimator[ssm, {w, v}] constructs the Kalman \
estimator for the StateSpaceModel ssm with process and measurement noise \
covariance matrices w and v. KalmanEstimator[ssm, {w, v, h}] includes the \
cross-covariance matrix h. KalmanEstimator[{ssm, sensors}, {\[Ellipsis]}] \
specifies sensors as the noisy measurements of ssm. KalmanEstimator[{ssm, \
sensors, dinputs}, {\[Ellipsis]}] specifies dinputs as the deterministic \
inputs of ssm."}, {"KalmanFilter", "KalmanFilter[tproc, data] filters data \
using the time series model given by tproc."}, 
 {"KarhunenLoeveDecomposition", "KarhunenLoeveDecomposition[{a1, a2, \
\[Ellipsis]}] gives the Karhunen-Loeve transform {{b1, b2, \[Ellipsis]}, m} \
of the numerical arrays {a1, a2, \[Ellipsis]}, where m.ai==bi. \
KarhunenLoeveDecomposition[{b1, b2, \[Ellipsis]}, m] uses the inverse of the \
matrix m for transforming bi to ai."}, {"KaryTree", "KaryTree[n] gives a \
binary tree with n vertices. KaryTree[n, k] gives a k -ary tree with n \
vertices."}, {"KatzCentrality", "KatzCentrality[g, \[Alpha]] gives a list of \
Katz centralities for the vertices in the graph g and weight \[Alpha]. \
KatzCentrality[g, \[Alpha], \[Beta]] gives a list of Katz centralities using \
weight \[Alpha] and initial centralities \[Beta]. KatzCentrality[{v->w, \
\[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify the graph g."}, 
 {"KeepExistingVersion", "KeepExistingVersion is an option for PacletInstall \
and PacletInstallSubmit that specifies whether an older version of a paclet \
should remain installed when a newer one gets installed."}, 
 {"KelvinBei", "KelvinBei[z] gives the Kelvin function bei(z). KelvinBei[n, \
z] gives the Kelvin function bein(z)."}, {"KelvinBer", "KelvinBer[z] gives \
the Kelvin function ber(z). KelvinBer[n, z] gives the Kelvin function \
bern(z)."}, {"KelvinKei", "KelvinKei[z] gives the Kelvin function kei(z). \
KelvinKei[n, z] gives the Kelvin function kein(z)."}, 
 {"KelvinKer", "KelvinKer[z] gives the Kelvin function ker(z). KelvinKer[n, \
z] gives the Kelvin function kern(z)."}, {"KendallTau", "KendallTau[v1, v2] \
gives Kendall's rank correlation coefficient \[Tau] for the vectors v1 and \
v2. KendallTau[m] gives Kendall's rank correlation coefficients \[Tau] for \
the matrix m. KendallTau[m1, m2] gives Kendall's rank correlation \
coefficients \[Tau] for the matrices m1 and m2. KendallTau[dist] gives \
Kendall's rank correlation matrix for the multivariate symbolic distribution \
dist. KendallTau[dist, i, j] gives the (i, j)^th Kendall rank correlation for \
the multivariate symbolic distribution dist."}, 
 {"KendallTauTest", "KendallTauTest[v1, v2] tests whether the vectors v1 and \
v2 are independent. KendallTauTest[m1, m2] tests whether the matrices m1 and \
m2 are independent. KendallTauTest[\[Ellipsis],\"\\!\\(\\*property\"] returns \
the value of \"\\!\\(\\*property\"."}, {"KernelFunction", "KernelFunction[f] \
represents a function to be evaluated in the Wolfram Engine kernel, even when \
it is called inside compiled code."}, {"KernelMixtureDistribution", "KernelMi\
xtureDistribution[{x1, x2, \[Ellipsis]}] represents a kernel mixture \
distribution based on the data values xi. KernelMixtureDistribution[{{x1, y1, \
\[Ellipsis]}, {x2, y2, \[Ellipsis]}, \[Ellipsis]}] represents a multivariate \
kernel mixture distribution based on data values {xi, yi, \[Ellipsis]}. \
KernelMixtureDistribution[\[Ellipsis], bw] represents a kernel mixture \
distribution with bandwidth bw. KernelMixtureDistribution[\[Ellipsis], bw, \
ker] represents a kernel mixture distribution with bandwidth bw and smoothing \
kernel ker."}, {"KernelObject", "KernelObject[n, name, \[Ellipsis]] \
represents a kernel available for parallel computing."}, 
 {"Kernels", "Kernels[] gives the list of running kernels available for \
parallel computing."}, {"Key", "Key[key] represents a key used to access a \
value in an association. Key[key][assoc] extracts the value corresponding to \
key in the association assoc."}, {"KeyCollisionFunction", "KeyCollisionFuncti\
on is an option for JoinAcross that specifies how to handle pairs of elements \
that are not being joined but nevertheless have the same key."}, 
 {"KeyComplement", "KeyComplement[{assocall, assoc1, assoc2, \[Ellipsis]}] \
generates an association in which only elements whose keys appear in assocall \
but not in any of the associ are retained."}, {"KeyDrop", "KeyDrop[assoc, \
{key1, key2, \[Ellipsis]}] yields an association from which elements with \
keys keyi have been dropped. KeyDrop[{assoc1, assoc2, \[Ellipsis]}, keys] \
gives a list of associations. KeyDrop[keys] represents an operator form of \
KeyDrop that can be applied to an expression."}, 
 {"KeyDropFrom", "KeyDropFrom[a, key] changes the association a by dropping \
the element with the specified key. KeyDropFrom[a, {key1, key2, \[Ellipsis]}] \
drops the elements with keys keyi."}, {"KeyExistsQ", "KeyExistsQ[assoc, key] \
returns True if the specified key exists in the association assoc, and False \
otherwise. KeyExistsQ[key] represents an operator form of KeyExistsQ that can \
be applied to an expression."}, {"KeyFreeQ", "KeyFreeQ[assoc, form] yields \
True if no key in the association assoc matches form, and yields False \
otherwise. KeyFreeQ[form] represents an operator form of KeyFreeQ that can be \
applied to an expression."}, {"KeyIntersection", "KeyIntersection[{assoc1, \
assoc2, \[Ellipsis]}] generates a list of associations in which only elements \
whose keys appear in all the associ are retained."}, 
 {"KeyMap", "KeyMap[f, \[LeftAssociation]key1->val1, key2->val2, \
\[Ellipsis]\[RightAssociation]] maps f over the keys in an association, \
giving \[LeftAssociation]f[key1]->val1, f[key2]->val2, \
\[Ellipsis]\[RightAssociation]. KeyMap[f] represents an operator form of \
KeyMap that can be applied to an expression."}, 
 {"KeyMemberQ", "KeyMemberQ[assoc, form] yields True if a key in the \
association assoc matches form, and False otherwise. KeyMemberQ[form] \
represents an operator form of KeyMemberQ that can be applied to an \
expression."}, {"KeySelect", "KeySelect[assoc, crit] selects elements in the \
association assoc for which crit applied to their keys is True. \
KeySelect[crit] represents an operator form of KeySelect that can be applied \
to an expression."}, {"KeySort", "KeySort[assoc] orders the elements of an \
association by sorting its keys. KeySort[assoc, p] orders the elements of an \
association using the ordering function p."}, {"KeySortBy", "KeySortBy[assoc, \
f] sorts the elements of an association in the order defined by applying f to \
each of their keys. KeySortBy[f] represents an operator form of KeySortBy \
that can be applied to an expression."}, {"KeyTake", "KeyTake[assoc, {key1, \
key2, \[Ellipsis]}] yields an association containing only the elements with \
keys keyi. KeyTake[{assoc1, assoc2, \[Ellipsis]}, keys] gives a list of \
associations. KeyTake[{key1, key2, \[Ellipsis]}] represents an operator form \
of KeyTake that can be applied to an expression."}, 
 {"KeyUnion", "KeyUnion[{assoc1, assoc2, \[Ellipsis]}] generates a list of \
associations in which each association has the union of the keys of the \
associ, padding by inserting values of Missing[\[Ellipsis]] if necessary. \
KeyUnion[{assoc1, assoc2, \[Ellipsis]}, f] uses f[key] as the value \
associated with a missing key."}, {"KeyValueMap", "KeyValueMap[f, \
\[LeftAssociation]key1->val1, key2->val2, \[Ellipsis]\[RightAssociation]] \
gives the list {f[key1, val1], f[key2, val2], \[Ellipsis]}. KeyValueMap[f] \
represents an operator form of KeyValueMap that can be applied to an \
expression."}, {"KeyValuePattern", "KeyValuePattern[{patt1, \[Ellipsis]}] is \
a pattern object that represents an association or list of rules that \
includes elements matching each of the patti."}, 
 {"KeypointStrength", "KeypointStrength is an option for ImageKeypoints and \
related functions to specify a minimum strength of detected keypoints."}, 
 {"Keys", "Keys[\[LeftAssociation]key1->val1, key2->val2, \
\[Ellipsis]\[RightAssociation]] gives a list of the keys keyi in an \
association. Keys[{key1->val1, key2->val2, \[Ellipsis]}] gives a list of the \
keyi in a list of rules. Keys[expr, h] gives a list of keys in expr, wrapping \
each of them with head h before evaluation."}, 
 {"Khinchin", "Khinchin is Khinchin's constant, with numerical value \
\[TildeEqual]2.68545."}, {"KillProcess", "KillProcess[proc] kills the \
external process represented by the ProcessObject proc."}, 
 {"KirchhoffGraph", "KirchhoffGraph[kmat] gives the graph with Kirchhoff \
matrix kmat. KirchhoffGraph[{v1, v2, \[Ellipsis]}, kmat] gives the graph with \
vertices vi and Kirchhoff matrix kmat."}, {"KirchhoffMatrix", "KirchhoffMatri\
x[g] gives the Kirchhoff matrix of the graph g. KirchhoffMatrix[{v->w, \
\[Ellipsis]}] uses rules v->w to specify the graph g."}, 
 {"KleinInvariantJ", "KleinInvariantJ[\[Tau]] gives the Klein invariant \
modular elliptic function J(\[Tau])."}, {"KnapsackSolve", "KnapsackSolve[{cos\
t1, cost2, \[Ellipsis]}, maxtotalcost] solves the knapsack problem of finding \
the maximum number of items associated with each of the costi, subject to the \
constraint that the total cost is not larger than maxtotalcost. \
KnapsackSolve[{{payoff1, cost1}, {payoff2, cost2}, \[Ellipsis]}, \
maxtotalcost] finds a number of items that maximizes the total payoff, while \
satisfying the constraint on the total cost. KnapsackSolve[{{payoff1, cost1, \
maxcount1}, \[Ellipsis]}, maxtotalcost] allows at most maxcounti copies of \
item i. KnapsackSolve[items, {maxtotalpayoff, maxtotalcost}] finds a result \
that gives a total payoff not larger than maxtotalpayoff. \
KnapsackSolve[items, {maxtotalpayoff, maxtotalcost, maxtotalcount}] adds the \
constraint of having no more than maxtotalcount items in total. \
KnapsackSolve[\[LeftAssociation]label1->itemspec1, \
\[Ellipsis]\[RightAssociation], maxtotals] labels each type of item and gives \
the result as an association."}, {"KnightTourGraph", 
  "KnightTourGraph[m, n] gives a Knight's tour graph on an m xn chessboard."}\
, {"KnotData", "KnotData[knot, \"\\!\\(\\*property\"] gives the specified \
property for a knot. KnotData[knot] gives an image of the knot. \
KnotData[\"\\!\\(\\*class\"] gives a list of knots in the specified class."}, 
 {"KnownUnitQ", "KnownUnitQ[expr] returns True if expr is a canonical unit, \
and False otherwise."}, {"KochCurve", "KochCurve[n] gives the line segments \
representing the n^th -step Koch curve. KochCurve[n, {\[Theta]1, \[Theta]2, \
\[Ellipsis]}] takes a series of steps of unit length at successive relative \
angles \[Theta]i. KochCurve[n, {{r1, \[Theta]1}, {r2, \[Theta]2}, \
\[Ellipsis]}] takes successive steps of lengths proportional to ri."}, 
 {"KolmogorovSmirnovTest", "KolmogorovSmirnovTest[data] tests whether data is \
normally distributed using the Kolmogorov-Smirnov test. \
KolmogorovSmirnovTest[data, dist] tests whether data is distributed according \
to dist using the Kolmogorov-Smirnov test. KolmogorovSmirnovTest[data, dist, \
\"\\!\\(\\*property\"] returns the value of \"\\!\\(\\*property\"."}, 
 {"KroneckerDelta", "KroneckerDelta[n1, n2, \[Ellipsis]] gives the Kronecker \
delta \[Delta]n1 n2 \[Ellipsis], equal to 1 if all the ni are equal, and 0 \
otherwise."}, {"KroneckerModelDecomposition", "KroneckerModelDecomposition[ss\
m] yields the Kronecker decomposition of a descriptor state-space model ssm."}\
, {"KroneckerProduct", "KroneckerProduct[m1, m2, \[Ellipsis]] constructs the \
Kronecker product of the arrays mi."}, {"KroneckerSymbol", 
  "KroneckerSymbol[n, m] gives the Kronecker symbol (n/m)."}, 
 {"KuiperTest", "KuiperTest[data] tests whether data is normally distributed \
using the Kuiper test. KuiperTest[data, dist] tests whether data is \
distributed according to dist using the Kuiper test. KuiperTest[data, dist, \
\"\\!\\(\\*property\"] returns the value of \"\\!\\(\\*property\"."}, 
 {"KumaraswamyDistribution", "KumaraswamyDistribution[\[Alpha], \[Beta]] \
represents a Kumaraswamy distribution with shape parameters \[Alpha] and \
\[Beta]."}, {"Kurtosis", "Kurtosis[list] gives the coefficient of kurtosis \
for the elements in list. Kurtosis[dist] gives the coefficient of kurtosis \
for the distribution dist."}, {"KuwaharaFilter", "KuwaharaFilter[data, r] \
computes for each element p in data the variance of the values in the four (r \
+ 1)\[Times](r + 1) squares that have p as a corner, and replaces p with the \
mean of the values of the square with least variance."}, 
 {"LABColor", "LABColor[l, a, b] represents a color in the Lab color space \
with lightness l and color components a and b. LABColor[l, a, b, a] specifies \
opacity a. LABColor[\"\\!\\(\\*string\"] returns a color from an HTML color \
name etc. LABColor[color] returns the Lab representation of color."}, 
 {"LCHColor", "LCHColor[l, c, h] represents a color in the LCH color space \
with lightness l, chroma c and hue h. LCHColor[l, c, h, a] specifies opacity \
a. LCHColor[\"\\!\\(\\*string\"] returns a color from an HTML color name etc. \
LCHColor[color] returns the LCH representation of color."}, 
 {"LCM", "LCM[n1, n2, \[Ellipsis]] gives the least common multiple of the \
ni."}, {"LQEstimatorGains", "LQEstimatorGains[ssm, {w, v}] gives the optimal \
estimator gain matrix for the StateSpaceModel ssm, with process and \
measurement noise covariance matrices w and v. LQEstimatorGains[ssm, {w, v, \
h}] includes the cross-covariance matrix h. LQEstimatorGains[{ssm, sensors}, \
{\[Ellipsis]}] specifies sensors as the noisy measurements of ssm. \
LQEstimatorGains[{ssm, sensors, dinputs}, {\[Ellipsis]}] specifies dinputs as \
the deterministic inputs of ssm."}, {"LQGRegulator", "LQGRegulator[sspec, \
cvs, wts] gives the optimal output feedback regulator for the stochastic \
system specification sspec with noise covariance matrices cvs that minimizes \
a cost function with weights wts. LQGRegulator[\[Ellipsis], \
\"\\!\\(\\*prop\"] gives the value of the property \"\\!\\(\\*prop\"."}, 
 {"LQOutputRegulatorGains", "LQOutputRegulatorGains[sspec, wts] gives the \
state feedback gains for the system specification sspec that minimizes an \
output cost function with weights wts. LQOutputRegulatorGains[\[Ellipsis], \
\"\\!\\(\\*prop\"] gives the value of the property \"\\!\\(\\*prop\"."}, 
 {"LQRegulatorGains", "LQRegulatorGains[spsec, wts] gives the state feedback \
gains for the system specification sspec that minimizes a cost function with \
weights wts. LQRegulatorGains[\[Ellipsis], \"\\!\\(\\*prop\"] gives the value \
of the property \"\\!\\(\\*prop\"."}, {"LUDecomposition", "LUDecomposition[m] \
generates a representation of the LU decomposition of a square matrix m."}, 
 {"LUVColor", "LUVColor[l, u, v] represents a color in the LUV color space \
with lightness l and color components u and v. LUVColor[l, u, v, a] specifies \
opacity a. LUVColor[\"\\!\\(\\*string\"] returns a color from an HTML color \
name etc. LUVColor[color] returns the LUV representation of color."}, 
 {"Label", "Label[tag] represents a point in a compound expression to which \
control can be transferred using Goto."}, {"LabelStyle", "LabelStyle is an \
option for formatting and related constructs that specifies the style to use \
in displaying their label-like elements."}, {"LabelVisibility", "LabelVisibil\
ity is an option for Callout and Labeled in plotting functions that \
determines which labels are shown."}, {"Labeled", "Labeled[expr, lbl] \
displays expr labeled with lbl. Labeled[expr, lbl, pos] places lbl at a \
position specified by pos. Labeled[expr, {lbl1, lbl2, \[Ellipsis]}, {pos1, \
\[Ellipsis]}] places the lbli at positions posi. Labeled[expr, {lbl1, lbl2, \
lbl3, lbl4}, All] places the lbli at the bottom, left, top, and right, \
respectively."}, {"LabelingFunction", "LabelingFunction is an option for data \
visualization functions to automatically label elements of a visualization."}\
, {"LabelingSize", "LabelingSize is an option to visualization functions that \
specifies the size to be used for labels and callouts."}, 
 {"LaguerreL", "LaguerreL[n, x] gives the Laguerre polynomial Ln(x). \
LaguerreL[n, a, x] gives the generalized Laguerre polynomial Lna(x)."}, 
 {"LakeData", "LakeData[entity, property] gives the value of the specified \
property for the lake entity. LakeData[{entity1, entity2, \[Ellipsis]}, \
property] gives a list of property values for the specified lake entities. \
LakeData[entity, property, annotation] gives the specified annotation \
associated with the given property."}, {"LambdaComponents", "LambdaComponents\
[g] gives the lambda components of the graph g. LambdaComponents[g, {v1, v2, \
\[Ellipsis]}] gives the lambda components that include at least one of the \
vertices {v1, v2, \[Ellipsis]}. LambdaComponents[{v->w, \[Ellipsis]}, \
\[Ellipsis]] uses rules v->w to specify the graph g."}, 
 {"LameC", "LameC[\[Nu], j, z, m] gives the j^th Lam\[EAcute] function \
Ec\[Nu]j(z, m) of order \[Nu] with elliptic parameter m."}, 
 {"LameCPrime", "LameCPrime[\[Nu], j, z, m] gives the z -derivative of the \
j^th Lam\[EAcute] function Ec\[Nu]j(z, m) of order \[Nu] with elliptic \
parameter m."}, {"LameEigenvalueA", "LameEigenvalueA[\[Nu], j, m] gives the \
j^th Lam\[EAcute] eigenvalue a\[Nu]j(m) of order \[Nu] with elliptic \
parameter m for the function LameC[\[Nu], j, z, m]."}, 
 {"LameEigenvalueB", "LameEigenvalueB[\[Nu], j, m] gives the j^th \
Lam\[EAcute] eigenvalue b\[Nu]j(m) of order \[Nu] with elliptic parameter m \
for the Lam\[EAcute] function LameS[\[Nu], j, z, m]."}, 
 {"LameS", "LameS[\[Nu], j, z, m] gives the j^th Lam\[EAcute] function \
Es\[Nu]j(z, m) of order \[Nu] with elliptic parameter m."}, 
 {"LameSPrime", "LameSPrime[\[Nu], j, z, m] gives the z -derivative of the \
j^th Lam\[EAcute] function Es\[Nu]j(z, m) of order \[Nu] with elliptic \
parameter m."}, {"LaminaData", "LaminaData[entity, property] gives the value \
of the specified property for the lamina entity. LaminaData[{entity1, \
entity2, \[Ellipsis]}, property] gives a list of property values for the \
specified lamina entities. LaminaData[entity, property, annotation] gives the \
specified annotation associated with the given property."}, 
 {"LanczosWindow", 
  "LanczosWindow[x] represents a Lanczos window function of x."}, 
 {"LandauDistribution", "LandauDistribution[\[Mu], \[Sigma]] represents a \
Landau distribution with location parameter \[Mu] and scale parameter \
\[Sigma]. LandauDistribution[] represents a Landau distribution with location \
parameter 0 and scale parameter 1."}, 
 {"Language", "Language is an option that specifies the language to use."}, 
 {"LanguageCategory", "LanguageCategory is an option for Cell that determines \
in what category of language the contents of the cell should be assumed to be \
for purposes of spell checking and hyphenation."}, 
 {"LanguageData", "LanguageData[entity, property] gives the value of the \
specified property for the language entity. LanguageData[{entity1, entity2, \
\[Ellipsis]}, property] gives a list of property values for the specified \
language entities. LanguageData[entity, property, annotation] gives the \
specified annotation associated with the given property."}, 
 {"LanguageIdentify", "LanguageIdentify[\"\\!\\(\\*string\"] attempts to \
determine what human language text in string is in, predominantly."}, 
 {"LaplaceDistribution", "LaplaceDistribution[\[Mu], \[Beta]] represents a \
Laplace double-exponential distribution with mean \[Mu] and scale parameter \
\[Beta]. LaplaceDistribution[] represents a Laplace double-exponential \
distribution with mean 0 and scale parameter 1."}, 
 {"LaplaceTransform", "LaplaceTransform[f[t], t, s] gives the symbolic \
Laplace transform of f[t] in the variable t and returns a transform F[s] in \
the variable s. LaplaceTransform[f[t], t, s^] gives the numeric Laplace \
transform at the numerical value s^. LaplaceTransform[f[t1, \[Ellipsis], tn], \
{t1, \[Ellipsis], tn}, {s1, \[Ellipsis], sn}] gives the multidimensional \
Laplace transform of f[t1, \[Ellipsis], tn]."}, 
 {"Laplacian", "Laplacian[f, {x1, \[Ellipsis], xn}] gives the Laplacian \
\[PartialD]^2f / \[PartialD]x1^2 + \[Ellipsis] + \[PartialD]^2f / \
\[PartialD]xn^2. Laplacian[f, {x1, \[Ellipsis], xn}, chart] gives the \
Laplacian in the given coordinates chart."}, {"LaplacianFilter", "LaplacianFi\
lter[data, r] convolves data with a radius-r Laplacian kernel. \
LaplacianFilter[data, {r1, r2, \[Ellipsis]}] uses radius ri at level i in \
data."}, {"LaplacianGaussianFilter", "LaplacianGaussianFilter[data, r] \
convolves data with a Laplacian of Gaussian kernel of pixel radius r. \
LaplacianGaussianFilter[data, {r, \[Sigma]}] convolves data with a Laplacian \
of Gaussian kernel of radius r and standard deviation \[Sigma]."}, 
 {"LaplacianPDETerm", "LaplacianPDETerm[vars] represents a Laplacian term \
\[Del]^2{x1, \[Ellipsis], xn}u with model variables vars."}, 
 {"Large", "Large is a style or option setting that specifies that objects \
should be large."}, {"Larger", "Larger is a style or option setting that \
specifies that objects should be larger."}, {"Last", "Last[expr] gives the \
last element in expr. Last[expr, def] gives the last element if there are any \
elements, or def otherwise."}, {"Latitude", "Latitude[pos] gives the latitude \
in degrees of a geographic position specified by pos. Latitude[pos, datum] \
gives the latitude referring to the specified geodetic datum."}, 
 {"LatitudeLongitude", "LatitudeLongitude[pos] gives a list of the latitude \
and longitude in degrees of a geographic position specified by pos. \
LatitudeLongitude[pos, datum] gives the latitude and longitude referring to \
the specified geodetic datum."}, {"LatticeData", "LatticeData[lattice, \
\"\\!\\(\\*property\"] gives the specified property for a lattice. \
LatticeData[n] gives a list of named lattices of dimension n."}, 
 {"LatticeReduce", "LatticeReduce[{v1, v2, \[Ellipsis]}] gives a reduced \
basis for the set of vectors vi."}, {"LaunchKernels", "LaunchKernels[] \
launches all currently configured parallel subkernels. LaunchKernels[n] \
launches n local subkernels on the current computer. LaunchKernels[ker] \
launches the kernel specified by ker. LaunchKernels[{ker1, ker2, \
\[Ellipsis]}] launches the kernels keri."}, {"LayerSizeFunction", "LayerSizeF\
unction is an option for TreePlot that gives a function to specify the \
relative height to allow for each layer."}, {"LayeredGraphPlot", "LayeredGrap\
hPlot[g] generates a layered plot of the graph g. LayeredGraphPlot[{e1, e2, \
\[Ellipsis]}] generates a layered plot of the graph with edges ej. \
LayeredGraphPlot[{\[Ellipsis], w[ei], \[Ellipsis]}] plots ei with features \
defined by the symbolic wrapper w. LayeredGraphPlot[{vi1->vj1, \[Ellipsis]}] \
uses rules vik->vjk to specify the graph g. LayeredGraphPlot[m] uses the \
adjacency matrix m to specify the graph g. LayeredGraphPlot[\[Ellipsis], \
v->pos] places the dominant vertex v in the plot at position pos."}, 
 {"LayeredGraphPlot3D", "LayeredGraphPlot3D[g] generates a 3D layered plot of \
the graph g. LayeredGraphPlot3D[{e1, e2, \[Ellipsis]}] generates a 3D layered \
plot of the graph with edges ei. LayeredGraphPlot3D[{\[Ellipsis], w[ei], \
\[Ellipsis]}] plots ei with features defined by the symbolic wrapper w. \
LayeredGraphPlot3D[{vi1->vj1, \[Ellipsis]}] uses rules vik->vjk to specify \
the graph g. LayeredGraphPlot3D[m] uses the adjacency matrix m to specify the \
graph g. LayeredGraphPlot3D[\[Ellipsis], v->pos] places the dominant vertex v \
in the plot at position pos."}, {"LeaderSize", "LeaderSize is an option for \
Callout that specifies what sizes to use for leader lines."}, 
 {"LeafCount", "LeafCount[expr] gives the total number of indivisible \
subexpressions in expr."}, {"LeapVariant", "LeapVariant[n] represents a \
repeated calendar element caused by a leap period."}, 
 {"LeapYearQ", "LeapYearQ[date] returns True if the year corresponding to \
date is a leap year."}, {"LearnDistribution", "LearnDistribution[{example1, \
example2, \[Ellipsis]}] generates a LearnedDistribution[\[Ellipsis]] that \
attempts to represent an underlying distribution for the examples given."}, 
 {"LearnedDistribution", "LearnedDistribution[\[Ellipsis]] represents a \
distribution generated by LearnDistribution."}, 
 {"LearningRate", "LearningRate is an option for NetTrain that specifies the \
rate at which to adjust neural net weights in order to minimize the training \
loss."}, {"LearningRateMultipliers", "LearningRateMultipliers is an option \
for net layers and for NetTrain, NetChain, NetGraph that specifies learning \
rate multipliers to apply during training."}, {"LeastSquares", "LeastSquares[\
m, b] finds an x that solves the linear least-squares problem for the matrix \
equation m.x == b."}, {"LeastSquaresFilterKernel", "LeastSquaresFilterKernel[\
{{\[Omega]1, \[Ellipsis], \[Omega]k-1}, {a1, \[Ellipsis], ak}}, n] creates a \
k -band finite impulse response (FIR) filter kernel of length n designed \
using a least squares method, given the specified frequencies \[Omega]i and \
amplitudes ai. LeastSquaresFilterKernel[{\"\\!\\(\\*type\", spec}, n] uses \
the full filter specification {\"\\!\\(\\*type\", spec}."}, 
 {"Left", "Left is a symbol that represents the left-hand side for purposes \
of alignment and positioning."}, {"LeftArrow", 
  "LeftArrow[x, y, \[Ellipsis]] displays as x<-y<-\[Ellipsis]."}, 
 {"LeftArrowBar", 
  "LeftArrowBar[x, y, \[Ellipsis]] displays as x|<-y|<-\[Ellipsis]."}, 
 {"LeftArrowRightArrow", "LeftArrowRightArrow[x, y, \[Ellipsis]] displays as \
x\[LeftArrowRightArrow]y\[LeftArrowRightArrow]\[Ellipsis]."}, 
 {"LeftDownTeeVector", "LeftDownTeeVector[x, y, \[Ellipsis]] displays as \
x\[LeftDownTeeVector]y\[LeftDownTeeVector]\[Ellipsis]."}, 
 {"LeftDownVector", "LeftDownVector[x, y, \[Ellipsis]] displays as \
x\[LeftDownVector]y\[LeftDownVector]\[Ellipsis]."}, 
 {"LeftDownVectorBar", "LeftDownVectorBar[x, y, \[Ellipsis]] displays as \
x\[LeftDownVectorBar]y\[LeftDownVectorBar]\[Ellipsis]."}, 
 {"LeftRightArrow", 
  "LeftRightArrow[x, y, \[Ellipsis]] displays as x<->y<->\[Ellipsis]."}, 
 {"LeftRightVector", "LeftRightVector[x, y, \[Ellipsis]] displays as \
x\[LeftRightVector]y\[LeftRightVector]\[Ellipsis]."}, 
 {"LeftTee", "LeftTee[x, y] displays as x\[LeftTee]y."}, 
 {"LeftTeeArrow", "LeftTeeArrow[x, y, \[Ellipsis]] displays as \
x\[LeftTeeArrow]y\[LeftTeeArrow]\[Ellipsis]."}, 
 {"LeftTeeVector", "LeftTeeVector[x, y, \[Ellipsis]] displays as \
x\[LeftTeeVector]y\[LeftTeeVector]\[Ellipsis]."}, 
 {"LeftTriangle", "LeftTriangle[x, y, \[Ellipsis]] displays as \
x\[LeftTriangle]y\[LeftTriangle]\[Ellipsis]."}, 
 {"LeftTriangleBar", "LeftTriangleBar[x, y, \[Ellipsis]] displays as \
x\[LeftTriangleBar]y\[LeftTriangleBar]\[Ellipsis]."}, 
 {"LeftTriangleEqual", "LeftTriangleEqual[x, y, \[Ellipsis]] displays as \
x\[LeftTriangleEqual]y\[LeftTriangleEqual]\[Ellipsis]."}, 
 {"LeftUpDownVector", "LeftUpDownVector[x, y, \[Ellipsis]] displays as \
x\[LeftUpDownVector]y\[LeftUpDownVector]\[Ellipsis]."}, 
 {"LeftUpTeeVector", "LeftUpTeeVector[x, y, \[Ellipsis]] displays as \
x\[LeftUpTeeVector]y\[LeftUpTeeVector]\[Ellipsis]."}, 
 {"LeftUpVector", "LeftUpVector[x, y, \[Ellipsis]] displays as \
x\[LeftUpVector]y\[LeftUpVector]\[Ellipsis]."}, 
 {"LeftUpVectorBar", "LeftUpVectorBar[x, y, \[Ellipsis]] displays as \
x\[LeftUpVectorBar]y\[LeftUpVectorBar]\[Ellipsis]."}, 
 {"LeftVector", "LeftVector[x, y, \[Ellipsis]] displays as \
x\[LeftVector]y\[LeftVector]\[Ellipsis]."}, {"LeftVectorBar", "LeftVectorBar[\
x, y, \[Ellipsis]] displays as \
x\[LeftVectorBar]y\[LeftVectorBar]\[Ellipsis]."}, 
 {"LegendAppearance", "LegendAppearance is an option for charting functions \
that specifies the appearance of any legends that are generated."}, 
 {"LegendFunction", "LegendFunction is an option for legends that specifies \
an overall function to apply to the generated legend."}, 
 {"LegendLabel", "LegendLabel is an option for legends that specifies an \
overall label for a legend."}, {"LegendLayout", "LegendLayout is an option \
for legends that specifies how to format the legend content."}, 
 {"LegendMargins", "LegendMargins is an option for legends that specifies the \
margins to leave around the legend."}, {"LegendMarkerSize", "LegendMarkerSize \
is an option for legends such as PointLegend that specifies the size of \
marker regions for each element."}, {"LegendMarkers", "LegendMarkers is an \
option for legends such as PointLegend that specifies markers for each \
element."}, {"Legended", "Legended[expr, leg] displays expr with legend leg. \
Legended[expr, lbl] indicates in plotting and charting functions that a \
legend entry for expr should be created, with label lbl."}, 
 {"LegendreP", "LegendreP[n, x] gives the Legendre polynomial Pn(x). \
LegendreP[n, m, x] gives the associated Legendre polynomial Pnm(x)."}, 
 {"LegendreQ", "LegendreQ[n, z] gives the Legendre function of the second \
kind Qn(z). LegendreQ[n, m, z] gives the associated Legendre function of the \
second kind Qnm(z)."}, {"Length", 
  "Length[expr] gives the number of elements in expr."}, 
 {"LengthWhile", "LengthWhile[list, crit] gives the number of contiguous \
elements ei starting at the beginning of list for which crit[ei] is True."}, 
 {"LerchPhi", 
  "LerchPhi[z, s, a] gives the Lerch transcendent \[CapitalPhi](z, s, a)."}, 
 {"Less", "x<y yields True if x is determined to be less than y. x1<x2<x3 \
yields True if the xi form a strictly increasing sequence."}, 
 {"LessEqual", "x<=y or x<=y yields True if x is determined to be less than \
or equal to y. x1<=x2<=x3 yields True if the xi form a nondecreasing \
sequence."}, {"LessEqualGreater", "LessEqualGreater[x, y, \[Ellipsis]] \
displays as x\[LessEqualGreater]y\[LessEqualGreater]\[Ellipsis]."}, 
 {"LessEqualThan", "LessEqualThan[y] is an operator form that yields x<=y \
when applied to an expression x."}, {"LessFullEqual", "LessFullEqual[x, y, \
\[Ellipsis]] displays as x\[LessFullEqual]y\[LessFullEqual]\[Ellipsis]."}, 
 {"LessGreater", "LessGreater[x, y, \[Ellipsis]] displays as \
x\[LessGreater]y\[LessGreater]\[Ellipsis]."}, {"LessLess", "LessLess[x, y, \
\[Ellipsis]] displays as x\[LessLess]y\[LessLess]\[Ellipsis]."}, 
 {"LessSlantEqual", "LessSlantEqual[x, y, \[Ellipsis]] displays as \
x\[LessSlantEqual]y\[LessSlantEqual]\[Ellipsis]."}, 
 {"LessThan", "LessThan[y] is an operator form that yields x<y when applied \
to an expression x."}, {"LessTilde", "LessTilde[x, y, \[Ellipsis]] displays \
as x\[LessTilde]y\[LessTilde]\[Ellipsis]."}, 
 {"LetterCharacter", 
  "LetterCharacter represents a letter character in StringExpression."}, 
 {"LetterCounts", "LetterCounts[\"\\!\\(\\*string\"] gives an association \
whose keys are the distinct letters in string, and whose values give the \
number of times those letters appear in string. \
LetterCounts[\"\\!\\(\\*string\", n] gives counts of the distinct n -grams \
consisting of runs of n letters in string. LetterCounts[\"\\!\\(\\*string\", \
n, {\"\\!\\(\\*c_1\", \"\\!\\(\\*c_2\", \[Ellipsis]}] allows the characters \
ci to appear in n -grams, in addition to ordinary letters."}, 
 {"LetterNumber", "LetterNumber[\"\\!\\(\\*c\"] gives the position of the \
character c in the English alphabet. LetterNumber[\"\\!\\(\\*c\", alpha] \
gives the position of c in the alphabet specified by alpha. \
LetterNumber[\"\\!\\(\\*string\", \[Ellipsis]] gives a list of the positions \
of characters in string."}, {"LetterQ", "LetterQ[string] yields True if all \
the characters in the string are letters, and yields False otherwise."}, 
 {"Level", "Level[expr, levelspec] gives a list of all subexpressions of expr \
on levels specified by levelspec. Level[expr, levelspec, f] applies f to the \
sequence of subexpressions."}, {"LeveneTest", "LeveneTest[data] tests whether \
the variance of data is 1. LeveneTest[{data1, data2, \[Ellipsis]}] tests \
whether the variances of data1, data2, \[Ellipsis] are equal. \
LeveneTest[dspec, \[Sigma]02] tests a dispersion measure against \[Sigma]02. \
LeveneTest[dspec, \[Sigma]02, \"\\!\\(\\*property\"] returns the value of \
\"\\!\\(\\*property\"."}, {"LeviCivitaTensor", "LeviCivitaTensor[d] gives the \
d -dimensional Levi-Civita totally antisymmetric tensor."}, 
 {"LevyDistribution", "LevyDistribution[\[Mu], \[Sigma]] represents a \
L\[EAcute]vy distribution with location parameter \[Mu] and dispersion \
parameter \[Sigma]."}, {"LexicographicOrder", "LexicographicOrder[{a1, a2, \
\[Ellipsis]}, {b1, b2, \[Ellipsis]}] gives Order[ai, bi] for the first \
non-coinciding pair ai, bi of elements, and 0 if the lists are identical. \
LexicographicOrder[{a1, a2, \[Ellipsis]}, {b1, b2, \[Ellipsis]}, p] uses the \
ordering function p to compare ai with bi. LexicographicOrder[p] represents \
an operator form that compares lists when applied to {a1, a2, \[Ellipsis]}, \
{b1, b2, \[Ellipsis]}."}, {"LexicographicSort", "LexicographicSort[{e1, e2, \
\[Ellipsis]}] sorts the list of expressions ei in lexicographic order. \
LexicographicSort[{e1, e2, \[Ellipsis]}, p] compares elements of the ei \
expressions using the ordering function p."}, {"LibraryDataType", "LibraryDat\
aType[datatype] specifies the data type for a LibraryFunction argument or \
result to be datatype. LibraryDataType[datatype, etype] specifies an element \
type etype for data structures. LibraryDataType[datatype, etype, d] specifies \
an array depth d for array data types."}, {"LibraryFunction", "LibraryFunctio\
n[ args] represents a function that has been loaded from a Wolfram Library."}\
, {"LibraryFunctionError", "LibraryFunctionError[name, code] represents an \
error returned from a LibraryFunction."}, {"LibraryFunctionInformation", "Lib\
raryFunctionInformation[fun] returns information about a LibraryFunction."}, 
 {"LibraryFunctionLoad", "LibraryFunctionLoad[lib, fun, argtype, rettype] \
loads Wolfram Library lib and makes the library function fun available in the \
Wolfram Language."}, {"LibraryFunctionUnload", "LibraryFunctionUnload[fun] \
unloads a LibraryFunction so that it cannot be used."}, 
 {"LibraryLoad", "LibraryLoad[lib] loads the dynamic library lib into the \
Wolfram System runtime."}, {"LibraryUnload", "LibraryUnload[lib] unloads all \
functions that have been loaded from a Wolfram Library, then it unloads the \
library."}, {"LicenseEntitlementObject", "LicenseEntitlementObject[\
\[Ellipsis]] represents an on-demand license entitlement. \
LicenseEntitlementObject[id] gives the entitlement object representing the \
entitlement specified by id."}, {"LicenseEntitlements", "LicenseEntitlements[\
] gives a list of on-demand license entitlements owned by you."}, 
 {"LicensingSettings", "LicensingSettings is an option for RemoteBatchSubmit \
and related functions to configure licensing for remote kernels."}, 
 {"LiftingFilterData", "LiftingFilterData[\[Ellipsis]] represents \
lifting-filter data used to compute forward and inverse lifting wavelet \
transforms."}, {"LiftingWaveletTransform", "LiftingWaveletTransform[data] \
gives the lifting wavelet transform (LWT) of an array of data. \
LiftingWaveletTransform[data, wave] gives the lifting wavelet transform using \
the wavelet wave. LiftingWaveletTransform[data, wave,r] gives the lifting \
wavelet transform using r levels of refinement."}, 
 {"LightBlue", "LightBlue represents a light blue color in graphics or style \
specifications."}, {"LightBrown", "LightBrown represents a light brown color \
in graphics or style specifications."}, {"LightCyan", "LightCyan represents a \
light cyan color in graphics or style specifications."}, 
 {"LightGray", "LightGray represents a light gray color in graphics or style \
specifications."}, {"LightGreen", "LightGreen represents a light green color \
in graphics or style specifications."}, {"LightMagenta", "LightMagenta \
represents a light magenta color in graphics or style specifications."}, 
 {"LightOrange", "LightOrange represents a light orange color in graphics or \
style specifications."}, {"LightPink", "LightPink represents a light pink \
color in graphics or style specifications."}, {"LightPurple", "LightPurple \
represents a light purple color in graphics or style specifications."}, 
 {"LightRed", 
  "LightRed represents a light red color in graphics or style \
specifications."}, {"LightYellow", "LightYellow represents a light yellow \
color in graphics or style specifications."}, {"Lighter", "Lighter[color] \
represents a lighter version of the specified color. Lighter[color, f] \
represents a version of the specified color lightened by a fraction f. \
Lighter[image, \[Ellipsis]] gives a lighter version of an image."}, 
 {"Lighting", "Lighting is an option for Graphics3D and related functions \
that specifies what simulated lighting to use in coloring 3D surfaces."}, 
 {"LightingAngle", "LightingAngle is an option for ReliefPlot and related \
functions that specifies the angle from which simulated illumination is taken \
to come."}, {"Likelihood", "Likelihood[dist, {x1, x2, \[Ellipsis]}] gives the \
likelihood function for observations x1, x2, \[Ellipsis] from the \
distribution dist. Likelihood[proc, {{t1, x1}, {t2, x2}, \[Ellipsis]}] gives \
the likelihood function for the observations xi at time ti from the process \
proc. Likelihood[proc, {path1, path2, \[Ellipsis]}] gives the likelihood \
function for observations from path1, path2, \[Ellipsis] from the process \
proc."}, {"Limit", "Limit[f, x->x^*] gives the limit \
\[Backslash][Limit]x->x^*f(x). Limit[f, {x1->x1*, \[Ellipsis], xn->xn*}] \
gives the nested limit \[Backslash][Limit]x1->x1*\[CenterEllipsis] \
\[Backslash][Limit]xn->xn*f\[InvisibleApplication](x1, \[Ellipsis], xn). \
Limit[f, {x1, \[Ellipsis], xn}->{x1*, \[Ellipsis], xn*}] gives the \
multivariate limit \[Backslash][Limit]{x1, \[Ellipsis], xn}->{x1*, \
\[Ellipsis], xn*}f\[InvisibleApplication](x1, \[Ellipsis], xn)."}, 
 {"LimitsPositioning", "LimitsPositioning is an option for UnderoverscriptBox \
and related boxes that specifies whether to change the positioning of \
underscripts and overscripts in the way conventional for limits."}, 
 {"LindleyDistribution", "LindleyDistribution[\[Delta]] represents a Lindley \
distribution with shape parameter \[Delta]."}, 
 {"Line", "Line[{p1, p2, \[Ellipsis]}] represents the line segments joining a \
sequence for points pi. Line[{{p11, p12, \[Ellipsis]}, {p21, \[Ellipsis]}, \
\[Ellipsis]}] represents a collection of lines."}, 
 {"LineBreakChart", "LineBreakChart[{{date1, p1}, {date2, p2}, \[Ellipsis]}] \
makes a line break chart with prices pi at date datei. \
LineBreakChart[{\"\\!\\(\\*name\", daterange}] makes a line break chart of \
closing prices for the financial entity \"\\!\\(\\*name\" over the date range \
daterange. LineBreakChart[{\[Ellipsis]}, n] makes a line break chart where n \
bars in a row cause a reversal."}, {"LineGraph", "LineGraph[g] gives the line \
graph of the graph g. LineGraph[{v->w, \[Ellipsis]}] uses rules v->w to \
specify the graph g."}, {"LineIndent", "LineIndent is an option for Style and \
Cell that specifies how many ems of indentation to add at the beginnings of \
lines for each level of nesting in an expression."}, 
 {"LineIndentMaxFraction", "LineIndentMaxFraction is an option for Cell, \
StyleBox, and Style that specifies the maximum fraction of the total page \
width to indent at the beginnings of lines."}, 
 {"LineIntegralConvolutionPlot", "LineIntegralConvolutionPlot[{{vx, vy}, \
image}, {x, xmin, xmax}, {y, ymin, ymax}] generates a line integral \
convolution plot of image convolved with the vector field {vx, vy} as a \
function of x and y. LineIntegralConvolutionPlot[{vx, vy}, {x, xmin, xmax}, \
{y, ymin, ymax}] generates a line integral convolution plot of white noise \
with the vector field {vx, vy}."}, {"LineIntegralConvolutionScale", "LineInte\
gralConvolutionScale is an option to LineIntegralConvolutionPlot and related \
functions that determines the scale of the line integral convolution to be \
used."}, {"LineLegend", "LineLegend[{col1, \[Ellipsis]}, {lbl1, \[Ellipsis]}] \
generates a legend that associates color coli with label lbli. \
LineLegend[{col1, \[Ellipsis]}, Automatic] generates a legend with \
placeholder labels for the colors coli. LineLegend[{lbl1, \[Ellipsis]}] \
represents a legend with inherited colors within visualization functions."}, 
 {"LineSpacing", "LineSpacing is an option for Style and Cell that specifies \
the spacing between successive lines of text."}, 
 {"LinearFractionalOptimization", "LinearFractionalOptimization[f, cons, \
vars] finds values of variables vars that minimize the linear fractional \
objective f subject to linear constraints cons. \
LinearFractionalOptimization[{\[Alpha], \[Beta], \[Gamma], \[Delta]}, {a, b}] \
finds a vector x that minimizes the linear fractional function (\[Alpha].x + \
\[Beta]) / (\[Gamma].x + \[Delta]) subject to the linear inequality \
constraints a.x + b\[SucceedsEqual]0. LinearFractionalOptimization[{\[Alpha], \
\[Beta], \[Gamma], \[Delta]}, {a, b}, {aeq, beq}] includes the linear \
equality constraints aeq.x + beq==0. LinearFractionalOptimization[{\[Alpha], \
\[Beta], \[Gamma], \[Delta]}, \[Ellipsis], {dom1, dom2, \[Ellipsis]}] takes \
xi to be in the domain domi, where domi is Integers or Reals. \
LinearFractionalOptimization[\[Ellipsis], \"\\!\\(\\*prop\"] specifies what \
solution property \"\\!\\(\\*prop\" should be returned."}, 
 {"LinearFractionalTransform", "LinearFractionalTransform[m] gives a \
TransformationFunction that represents a linear fractional transformation \
defined by the homogeneous matrix m. LinearFractionalTransform[{a, b, c, d}] \
represents a linear fractional transformation that maps r to (a.r + b) / (c.r \
+ d)."}, {"LinearGradientFilling", "LinearGradientFilling[{col1, col2, \
\[Ellipsis], coln}] is a two-dimensional graphics directive specifying that \
faces of polygons and other filled graphics objects are to be drawn using a \
progressive transition between colors coli along a straight horizontal line. \
LinearGradientFilling[{pos1, pos2, \[Ellipsis], posn}->{col1, col2, \
\[Ellipsis], coln}] uses the colors coli at the scaled positions posi. \
LinearGradientFilling[{pos1, pos2, \[Ellipsis], posn}->{col1, col2, \
\[Ellipsis], coln}, dir] draws along the straight line with a direction dir. \
LinearGradientFilling[{pos1, \[Ellipsis], posn}->{col1, \[Ellipsis], coln}, \
dir, padding] uses the specified padding when drawing beyond the boundary \
positions pos1 and posn."}, {"LinearGradientImage", "LinearGradientImage[gcol\
] returns an image with values linearly changing from left to right based on \
gradient color gcol. LinearGradientImage[{pos1, pos2}->gcol] returns an image \
where the gradient starts at pos1 and ends at pos2. \
LinearGradientImage[\[Ellipsis], size] returns a linear gradient image of the \
specified size. LinearGradientImage[\[Ellipsis], size, \"type\"] gives an \
image converted to the specified type."}, {"LinearLayer", "LinearLayer[n] \
represents a trainable, fully connected net layer that computes w.x + b with \
output vector of size n. LinearLayer[{n1, n2, \[Ellipsis]}] represents a \
layer that outputs an array of dimensions n1\[Times]n2\[Times]\[Ellipsis]. \
LinearLayer[] leaves the dimensions of the output array to be inferred from \
context. LinearLayer[n, opts] includes options for initial weights and other \
parameters."}, {"LinearModelFit", "LinearModelFit[{y1, y2, \[Ellipsis]}, {f1, \
f2, \[Ellipsis]}, x] constructs a linear model of the form \[Beta]0 + \
\[Beta]1f1 + \[Beta]2f2 + \[Ellipsis] that fits the yi for successive x \
values 1, 2, \[Ellipsis]. LinearModelFit[{{x11, x12, \[Ellipsis], y1}, {x21, \
x22, \[Ellipsis], y2}, \[Ellipsis]}, {f1, f2, \[Ellipsis]}, {x1, x2, \
\[Ellipsis]}] constructs a linear model of the form \[Beta]0 + \[Beta]1f1 + \
\[Beta]2f2 + \[Ellipsis] where the fi depend on the variables xk. \
LinearModelFit[{m, v}] constructs a linear model from the design matrix m and \
response vector v."}, {"LinearOffsetFunction", "LinearOffsetFunction is an \
option for linear and generalized linear model fitting functions that \
specifies a component for the model that is to be assumed known."}, 
 {"LinearOptimization", "LinearOptimization[f, cons, vars] finds values of \
variables vars that minimize the linear objective f subject to linear \
constraints cons. LinearOptimization[c, {a, b}] finds a real vector x that \
minimizes the linear objective c.x subject to the linear inequality \
constraints a.x + b\[SucceedsEqual]0. LinearOptimization[c, {a, b}, {aeq, \
beq}] includes the linear equality constraints aeq.x + beq==0. \
LinearOptimization[c, \[Ellipsis], {dom1, dom2, \[Ellipsis]}] takes xi to be \
in the domain domi, where domi is Integers or Reals. \
LinearOptimization[\[Ellipsis], \"\\!\\(\\*prop\"] specifies what solution \
property \"\\!\\(\\*prop\" should be returned."}, 
 {"LinearProgramming", "LinearProgramming[c, m, b] finds a vector x that \
minimizes the quantity c.x subject to the constraints m.x>=b and x>=0. \
LinearProgramming[c, m, {{b1, s1}, {b2, s2}, \[Ellipsis]}] finds a vector x \
that minimizes c.x subject to x>=0 and linear constraints specified by the \
matrix m and the pairs {bi, si}. For each row mi of m, the corresponding \
constraint is mi.x>=bi if si == 1, or mi.x == bi if si == 0, or mi.x<=bi if \
si == - 1. LinearProgramming[c, m, b, l] minimizes c.x subject to the \
constraints specified by m and b and x>=l. LinearProgramming[c, m, b, {l1, \
l2, \[Ellipsis]}] minimizes c.x subject to the constraints specified by m and \
b and xi>=li. LinearProgramming[c, m, b, {{l1, u1}, {l2, u2}, \[Ellipsis]}] \
minimizes c.x subject to the constraints specified by m and b and li<=xi<=ui. \
LinearProgramming[c, m, b, lu, dom] takes the elements of x to be in the \
domain dom, either Reals or Integers. LinearProgramming[c, m, b, lu, {dom1, \
dom2, \[Ellipsis]}] takes xi to be in the domain domi."}, 
 {"LinearRecurrence", "LinearRecurrence[ker, init, n] gives the sequence of \
length n obtained by iterating the linear recurrence with kernel ker starting \
with initial values init. LinearRecurrence[ker, init, {n}] gives the n^th \
term\[Null]. LinearRecurrence[ker, init, {nmin, nmax}] yields terms nmin \
through nmax."}, {"LinearSolve", "LinearSolve[m, b] finds an x that solves \
the matrix equation m.x == b. LinearSolve[m] generates a \
LinearSolveFunction[\[Ellipsis]] that can be applied repeatedly to different \
b."}, {"LinearSolveFunction", "LinearSolveFunction[dimensions, data] \
represents a function for providing solutions to a matrix equation."}, 
 {"LinearizingTransformationData", "LinearizingTransformationData[\[Ellipsis]\
] represents data of an AffineStateSpaceModel linearized by functions such as \
FeedbackLinearize and StateTransformationLinearize using transformation of \
variables."}, {"LinkActivate", "LinkActivate[lnk] activates a WSTP \
connection, waiting for the program at the other end to respond."}, 
 {"LinkClose", "LinkClose[link] closes an open WSTP connection."}, 
 {"LinkConnect", "LinkConnect[\"\\!\\(\\*name\"] connects to a WSTP link \
created by another program."}, {"LinkCreate", "LinkCreate[\"\\!\\(\\*name\"] \
creates a WSTP link with the specified name for another program to connect \
to. LinkCreate[] creates a WSTP link and picks an unused name for the link."}\
, {"LinkFunction", "LinkFunction is an option for GeneralizedLinearModelFit \
that specifies the link function for the generalized linear model."}, 
 {"LinkInterrupt", "LinkInterrupt[link] sends an interrupt to the program at \
the other end of the specified WSTP connection."}, 
 {"LinkLaunch", "LinkLaunch[\"\\!\\(\\*prog\"] starts the external program \
prog and opens a WSTP connection to it."}, {"LinkObject", "LinkObject[\"\\!\\\
(\\*name\", n1, n2] is an object that represents an active WSTP connection \
for functions such as LinkRead and LinkWrite."}, 
 {"LinkPatterns", "LinkPatterns[link] gives a list of the patterns for which \
definitions were set up when the external program associated with the \
specified WSTP connection was installed."}, {"LinkProtocol", "LinkProtocol is \
an option to LinkLaunch, Install, and related functions that specifies the \
underlying data transport protocol to use for a new WSTP link."}, 
 {"LinkRankCentrality", "LinkRankCentrality[g, \[Alpha]] gives the link-rank \
centralities for edges in the graph g and weight \[Alpha]. \
LinkRankCentrality[g, \[Alpha], \[Beta]] gives the link-rank centralities, \
using weight \[Alpha] and initial vertex page-rank centralities \[Beta]. \
LinkRankCentrality[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to \
specify the graph g."}, {"LinkRead", "LinkRead[link] reads one expression \
from the specified WSTP connection. LinkRead[link, h] wraps h around the \
expression read before evaluating it."}, {"LinkReadyQ", "LinkReadyQ[link] \
tests whether there is an expression ready to read from the specified WSTP \
connection. LinkReadyQ[link, t] waits for up to t seconds to see if an \
expression becomes ready to read. LinkReadyQ[{link1, link2, \[Ellipsis]}, t] \
tests all the linki in parallel, returning as soon as any of them are ready \
to read from."}, {"LinkWrite", 
  "LinkWrite[link, expr] writes expr to the specified WSTP connection."}, 
 {"Links", "Links[] gives a list of all WSTP connections that are currently \
open. Links[patt] lists only links whose names match the specified string \
pattern."}, {"LiouvilleLambda", 
  "LiouvilleLambda[n] gives the Liouville function \[Lambda](n)."}, 
 {"List", "{e1, e2, \[Ellipsis]} is a list of elements."}, 
 {"ListAnimate", "ListAnimate[{expr1, expr2, \[Ellipsis]}] generates an \
animation whose frames are the successive expri. ListAnimate[list, fps] \
displays fps frames per second."}, {"ListContourPlot", "ListContourPlot[array\
] generates a contour plot from an array of height values. \
ListContourPlot[{{x1, y1, f1}, {x2, y2, f2}, \[Ellipsis]}] generates a \
contour plot from values defined at specified points."}, 
 {"ListContourPlot3D", "ListContourPlot3D[array] generates a contour plot \
from a three-dimensional array of values. ListContourPlot3D[{{x1, y1, z1, \
f1}, {x2, y2, z2, f2}, \[Ellipsis]}] generates a contour plot from values \
defined at specified points in three-dimensional space."}, 
 {"ListConvolve", "ListConvolve[ker, list] forms the convolution of the \
kernel ker with list. ListConvolve[ker, list, k] forms the cyclic convolution \
in which the k^th element of ker is aligned with each element in list. \
ListConvolve[ker, list, {kL, kR}] forms the cyclic convolution whose first \
element contains list[[1]]ker[[kL]] and whose last element contains list[[ - \
1]]ker[[kR]]. ListConvolve[ker, list, klist, p] forms the convolution in \
which list is padded at each end with repetitions of the element p. \
ListConvolve[ker, list, klist, {p1, p2, \[Ellipsis]}] forms the convolution \
in which list is padded at each end with cyclic repetitions of the pi. \
ListConvolve[ker, list, klist, padding, g, h] forms a generalized convolution \
in which g is used in place of Times and h in place of Plus. \
ListConvolve[ker, list, klist, padding, g, h, lev] forms a convolution using \
elements at level lev in ker and list."}, {"ListCorrelate", "ListCorrelate[ke\
r, list] forms the correlation of the kernel ker with list. \
ListCorrelate[ker, list, k] forms the cyclic correlation in which the k^th \
element of ker is aligned with each element in list. ListCorrelate[ker, list, \
{kL, kR}] forms the cyclic correlation whose first element contains \
list[[1]]ker[[kL]] and whose last element contains list[[ - 1]]ker[[kR]]. \
ListCorrelate[ker, list, klist, p] forms the correlation in which list is \
padded at each end with repetitions of the element p. ListCorrelate[ker, \
list, klist, {p1, p2, \[Ellipsis]}] forms the correlation in which list is \
padded at each end with cyclic repetitions of the pi. ListCorrelate[ker, \
list, klist, padding, g, h] forms a generalized correlation in which g is \
used in place of Times and h in place of Plus. ListCorrelate[ker, list, \
klist, padding, g, h, lev] forms a correlation using elements at level lev in \
ker and list."}, {"ListCurvePathPlot", "ListCurvePathPlot[{{x1, y1}, {x2, \
y2}, \[Ellipsis]}] plots a curve that corresponds to a smooth path through \
the specified points."}, {"ListDeconvolve", 
  "ListDeconvolve[ker, list] gives a deconvolution of list using kernel ker."}\
, {"ListDensityPlot", "ListDensityPlot[array] generates a smooth density plot \
from an array of values. ListDensityPlot[{{x1, y1, f1}, {x2, y2, f2}, \
\[Ellipsis]}] generates a density plot with values defined at specified \
points."}, {"ListDensityPlot3D", "ListDensityPlot3D[array] generates a smooth \
density plot from an array of values. ListDensityPlot3D[{{x1, y1, z1, f1}, \
{x2, y2, z2, f2}, \[Ellipsis]}] generates a density plot with values fi at \
the specified points {xi, yi, zi}."}, {"ListFormat", "ListFormat is an option \
to TextString and related functions that determines how lists are formatted."}\
, {"ListFourierSequenceTransform", "ListFourierSequenceTransform[list, \
\[Omega]] gives the discrete-time Fourier transform (DTFT) of a list as a \
function of the parameter \[Omega]. ListFourierSequenceTransform[list, \
\[Omega], k] places the first element of list at integer time k on the \
infinite time axis. ListFourierSequenceTransform[list, {\[Omega]1, \[Omega]2, \
\[Ellipsis]}, {k1, k2, \[Ellipsis]}] gives the multidimensional discrete-time \
Fourier transform "}, {"ListInterpolation", "ListInterpolation[array] \
constructs an InterpolatingFunction object that represents an approximate \
function that interpolates the array of values given. \
ListInterpolation[array, {{xmin, xmax}, {ymin, ymax}, \[Ellipsis]}] specifies \
the domain of the grid from which the values in array are assumed to come."}, 
 {"ListLineIntegralConvolutionPlot", "ListLineIntegralConvolutionPlot[{array, \
image}] generates a line integral convolution plot of image convolved with \
the vector field defined by an array of vector field values. \
ListLineIntegralConvolutionPlot[array] generates a line integral convolution \
plot of white noise convolved with the vector field defined by array. \
ListLineIntegralConvolutionPlot[{{{{x1, y1}, {vx1, vy1}}, \[Ellipsis]}, \
image}] generates a line integral convolution plot of image convolved with \
the vector field defined by vectors {vxi, vyi} at specified points {xi, yi}. \
ListLineIntegralConvolutionPlot[{{{x1, y1}, {vx1, vy1}}, \[Ellipsis]}] \
generates a line integral convolution plot of white noise convolved with the \
vector field defined by {vxi, vyi}."}, {"ListLinePlot", "ListLinePlot[{y1, \
y2, \[Ellipsis]}] plots a line through the points {1, y1}, {2, y2}, \
\[Ellipsis]. ListLinePlot[{{x1, y1}, {x2, y2}, \[Ellipsis]}] plots a line \
through a list of points with specific x and y positions. \
ListLinePlot[{data1, data2, \[Ellipsis]}] plots data from all the datai. \
ListLinePlot[{\[Ellipsis], w[datai, \[Ellipsis]], \[Ellipsis]}] plots datai \
with features defined by the symbolic wrapper w."}, 
 {"ListLinePlot3D", "ListLinePlot3D[{{x1, y1, z1}, {x2, y2, z2}, \[Ellipsis], \
{xn, yn, zn}}] plots a curve through the 3D points {xi, yi, zi}. \
ListLinePlot3D[{{z11, z12, \[Ellipsis], z1n}, \[Ellipsis], {zm1, zm2, \
\[Ellipsis], zmn}}] plots each row {zi1, zi2, \[Ellipsis], zin} as a curve in \
the x direction, with successive curves stacked in the y direction. \
ListLinePlot3D[{data1, data2, \[Ellipsis]}] plots curves through multiple \
sets of {x, y, z} points."}, {"ListLogLinearPlot", "ListLogLinearPlot[{y1, \
y2, \[Ellipsis]}] makes a log-linear plot of the yi, assumed to correspond to \
x coordinates 1, 2, \[Ellipsis]. ListLogLinearPlot[{{x1, y1}, {x2, y2}, \
\[Ellipsis]}] makes a log-linear plot of the specified list of x and y \
values. ListLogLinearPlot[{list1, list2, \[Ellipsis]}] plots several lists of \
values. ListLogLinearPlot[{\[Ellipsis], w[datai, \[Ellipsis]], \[Ellipsis]}] \
plots datai with features defined by the symbolic wrapper w."}, 
 {"ListLogLogPlot", "ListLogLogPlot[{y1, y2, \[Ellipsis]}] makes a log-log \
plot of the yi, assumed to correspond to x coordinates 1, 2, \[Ellipsis]. \
ListLogLogPlot[{{x1, y1}, {x2, y2}, \[Ellipsis]}] makes a log-log plot of the \
specified list of x and y values. ListLogLogPlot[{data1, data2, \[Ellipsis]}] \
plots data from all the datai. ListLogLogPlot[{\[Ellipsis], w[datai, \
\[Ellipsis]], \[Ellipsis]}] plots datai with features defined by the symbolic \
wrapper w."}, {"ListLogPlot", "ListLogPlot[{y1, y2, \[Ellipsis]}] makes a log \
plot of the yi, assumed to correspond to x coordinates 1, 2, \[Ellipsis]. \
ListLogPlot[{{x1, y1}, {x2, y2}, \[Ellipsis]}] makes a log plot of the \
specified list of x and y values. ListLogPlot[{data1, data2, \[Ellipsis]}] \
plots data from all the datai. ListLogPlot[{\[Ellipsis], w[datai, \
\[Ellipsis]], \[Ellipsis]}] plots datai with features defined by the symbolic \
wrapper w."}, {"ListPicker", "ListPicker[list, {val1, val2, \[Ellipsis]}] \
represents a list pane with setting list that can contain possible values \
vali. ListPicker[Dynamic[list], {val1, \[Ellipsis]}] takes the setting to be \
the dynamically updated current value of list, with members added or removed \
each time an item is selected or deselected. ListPicker[list, {val1->lbl1, \
val2->lbl2, \[Ellipsis]}] represents a list pane in which the possible value \
vali is indicated by lbli."}, {"ListPickerBox", "ListPickerBox[list, \
{val1->lbl1, val2->lbl2, \[Ellipsis]}] is a low-level box structure that \
represents a list pane control."}, {"ListPickerBoxOptions", "ListPickerBoxOpt\
ions is an option that specifies settings for ListPickerBox objects."}, 
 {"ListPlay", "ListPlay[{a1, a2, \[Ellipsis]}] creates an object that plays \
as a sound whose amplitude is given by the sequence of levels ai."}, 
 {"ListPlot", "ListPlot[{y1, \[Ellipsis], yn}] plots points {1, y1}, {2, y2}, \
\[Ellipsis]. ListPlot[{{x1, y1}, \[Ellipsis], {xn, yn}}] plots a list of \
points with specified x and y coordinates. ListPlot[{data1, data2, \
\[Ellipsis]}] plots data from all the datai. ListPlot[{\[Ellipsis], w[datai, \
\[Ellipsis]], \[Ellipsis]}] plots datai with features defined by the symbolic \
wrapper w."}, {"ListPlot3D", "ListPlot3D[{{z11, \[Ellipsis], z1n}, \
\[Ellipsis], {zm1, \[Ellipsis], zmn}}] generates a three-dimensional plot of \
a surface representing an array of height values zij. ListPlot3D[{{x1, y1, \
z1}, \[Ellipsis], {xk, yk, zk}}] generates a plot of the surface with heights \
zi at positions {xi, yi}. ListPlot3D[{data1, data2, \[Ellipsis]}] plots the \
surfaces corresponding to each of the datai."}, 
 {"ListPointPlot3D", "ListPointPlot3D[{{x1, y1, z1}, {x2, y2, z2}, \
\[Ellipsis]}] generates a 3D scatter plot of points with coordinates {xi, yi, \
zi}. ListPointPlot3D[array] generates a 3D scatter plot of points with a 2D \
array of height values. ListPointPlot3D[{data1, data2, \[Ellipsis]}] plots \
several collections of points, by default in different colors."}, 
 {"ListPolarPlot", "ListPolarPlot[{r1, r2, \[Ellipsis]}] plots points equally \
spaced in angle at radii ri. ListPolarPlot[{{\[Theta]1, r1}, {\[Theta]2, r2}, \
\[Ellipsis]}] plots points at polar coordinates \[Theta]i, ri. \
ListPolarPlot[{list1, list2, \[Ellipsis]}] plots several lists of values."}, 
 {"ListQ", 
  "ListQ[expr] gives True if the head of expr is List, and False otherwise."}\
, {"ListSliceContourPlot3D", "ListSliceContourPlot3D[array, surf] generates a \
contour plot of the three-dimensional array of values sliced to the surface \
surf. ListSliceContourPlot3D[{{x1, y1, z1, f1}, {x2, y2, z2, f2}, \
\[Ellipsis]}, surf] generates a slice contour plot for the values fi at \
points {xi, yi, zi}. ListSliceContourPlot3D[\[Ellipsis], {surf1, surf2, \
\[Ellipsis]}] generates slice contour plots over several slices surf1, surf2, \
\[Ellipsis]."}, {"ListSliceDensityPlot3D", "ListSliceDensityPlot3D[array, \
surf] generates a density plot of the three-dimensional array of values \
sliced to the surface surf. ListSliceDensityPlot3D[{{x1, y1, z1, f1}, {x2, \
y2, z2, f2}, \[Ellipsis]}, surf] generates a slice density plot for the \
values fi at points {xi, yi, zi}. ListSliceDensityPlot3D[\[Ellipsis], {surf1, \
surf2, \[Ellipsis]}] generates slice density plots over several slices surf1, \
surf2, \[Ellipsis]."}, {"ListSliceVectorPlot3D", "ListSliceVectorPlot3D[array\
, surf] generates a vector plot from a 3D array of vector field values over \
the slice surface surf. ListSliceVectorPlot3D[\[Ellipsis], {surf1, surf2, \
\[Ellipsis]}] generates a slice vector plot over several surfaces surf1, \
surf2, \[Ellipsis]."}, {"ListStepPlot", "ListStepPlot[{y1, y2, \[Ellipsis]}] \
plots the values y1, y2, \[Ellipsis] in steps at points 1, 2, \[Ellipsis]. \
ListStepPlot[{{x1, y1}, {x2, y2}, \[Ellipsis]}] plots the values y1, y2, \
\[Ellipsis] in steps at points x1, x2, \[Ellipsis]. ListStepPlot[{data1, \
data2, \[Ellipsis]}] plots data from all the datai. ListStepPlot[data, step] \
plots using steps specified by step. ListStepPlot[{\[Ellipsis], w[datai, \
\[Ellipsis]], \[Ellipsis]}] plots datai with features defined by the symbolic \
wrapper w."}, {"ListStreamDensityPlot", "ListStreamDensityPlot[array] \
generates a stream density plot from a 2D array of vector and scalar field \
values {{vxij, vyij}, sij}. ListStreamDensityPlot[{{{x1, y1}, {{vx1, vy1}, \
s1}}, \[Ellipsis]}] generates a stream density plot from vector and scalar \
field values {{vxi, vyi}, si} given at specified points {xi, yi}. \
ListStreamDensityPlot[{data1, data2, \[Ellipsis]}] plots data for several \
vector and scalar fields."}, {"ListStreamPlot", "ListStreamPlot[array] \
generates a stream plot from an array of vector field values. \
ListStreamPlot[{{{x1, y1}, {vx1, vy1}}, \[Ellipsis]}] generates a stream plot \
from vector field values {vxi, vyi} given at specified points {xi, yi}. \
ListStreamPlot[{data1, data2, \[Ellipsis]}] plots data for several vector \
fields."}, {"ListStreamPlot3D", "ListStreamPlot3D[array] plots streamlines \
for the vector field given as an array of vectors."}, 
 {"ListSurfacePlot3D", "ListSurfacePlot3D[{{x1, y1, z1}, {x2, y2, z2}, \
\[Ellipsis]}] plots a three-dimensional surface constructed to fit the \
specified points."}, {"ListVectorDensityPlot", "ListVectorDensityPlot[array] \
generates a vector plot from a 2D array of vector and scalar field values \
{{vxij, vyij}, sij}. ListVectorDensityPlot[{{{x1, y1}, {{vx1, vy1}, s1}}, \
\[Ellipsis]}] generates a vector plot from vector and scalar field values \
{{vxi, vyi}, si} given at specified points {xi, yi}. \
ListVectorDensityPlot[{data1, data2, \[Ellipsis]}] plots data for several \
vector and scalar fields."}, {"ListVectorPlot", "ListVectorPlot[array] \
generates a vector plot from an array of vector field values. \
ListVectorPlot[{{{x1, y1}, {vx1, vy1}}, \[Ellipsis]}] generates a vector plot \
from vector field values {vxi, vyi} given at specified points {xi, yi}. \
ListVectorPlot[{data1, data2, \[Ellipsis]}] plots data for several vector \
fields."}, {"ListVectorPlot3D", "ListVectorPlot3D[array] generates a 3D \
vector plot from a 3D array of vector field values. ListVectorPlot3D[{data1, \
data2, \[Ellipsis]}] plots data for several vector fields."}, 
 {"ListZTransform", "ListZTransform[list, z] gives the Z transform of list as \
a function of z. ListZTransform[list, z, k] places the first element of list \
at integer time k on the infinite time axis. ListZTransform[list, {z1, z2, \
\[Ellipsis]}, {k1, k2, \[Ellipsis]}] gives the multidimensional Z transform."}\
, {"Listable", "Listable is an attribute that can be assigned to a symbol f \
to indicate that the function f should automatically be threaded over lists \
that appear as its arguments."}, {"LocalAdaptiveBinarize", "LocalAdaptiveBina\
rize[image, r] creates a binary image from image by replacing values above \
the mean of the range-r neighborhood with 1 and others with 0. \
LocalAdaptiveBinarize[image, r, {\[Alpha], \[Beta], \[Gamma]}] replaces \
values above \[Alpha] \[Mu] + \[Beta] \[Sigma] + \[Gamma] with 1 and others \
with 0, where \[Mu] and \[Sigma] are the local mean and standard deviation."}\
, {"LocalCache", "LocalCache[CloudObject[uri]] caches a cloud object in a \
local object. LocalCache[URL[url]] caches the contents of a url in a local \
object. LocalCache[obj, LocalObject[name]] caches the contents of obj in the \
specified local object."}, {"LocalClusteringCoefficient", "LocalClusteringCoe\
fficient[g] gives the list of local clustering coefficients of all vertices \
in the graph g. LocalClusteringCoefficient[g, v] gives the local clustering \
coefficient of the vertex v in the graph g. LocalClusteringCoefficient[{v->w, \
\[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify the graph g."}, 
 {"LocalObject", "LocalObject[] represents a new anonymous local object. \
LocalObject[\"\\!\\(\\*StyleBox[RowBox[{RowBox[{\"file\", \":\"}], \
RowBox[{\"//\", \"/\"}]}],AutoSpacing->False] \\*\[Ellipsis]\"] represents a \
local object with a given file path. LocalObject[\"\\!\\(\\*relpath\"] \
represents a local object with the given relative path. \
LocalObject[\"\\!\\(\\*relpath\", \"\\!\\(\\*lbase\"] represents a local \
object relative to the base lbase."}, {"LocalObjects", "LocalObjects[] gives \
a list of local objects in your current local base directory. \
LocalObjects[dir] gives a list of local objects in the local directory dir."}\
, {"LocalResponseNormalizationLayer", "LocalResponseNormalizationLayer[] \
represents a net layer that normalizes its input by averaging across \
neighboring input channels."}, {"LocalSubmit", "LocalSubmit[expr] submits a \
task to evaluate expr in a separate kernel. LocalSubmit[ScheduledTask[expr, \
spec]] submits a task to evaluate expr in a separate kernel on the schedule \
defined by spec."}, {"LocalSymbol", "LocalSymbol[\"\\!\\(\\*name\"] \
represents a symbol whose value is persistently stored in the local file \
system. LocalSymbol[obj] represents a persistent symbol corresponding to the \
local object obj."}, {"LocalTime", "LocalTime[] gives a DateObject \
corresponding to the current local time at the current geo location. \
LocalTime[loc] gives the current local time at the geo location specified by \
loc. LocalTime[loc, time] gives the local time corresponding to the date \
object time at the geo location loc. LocalTime[loc, time, func] uses func to \
determine what to return for extended geographic regions."}, 
 {"LocalTimeZone", "LocalTimeZone[] gives the current time zone for the \
current geo location. LocalTimeZone[loc] gives the current time zone for the \
geo location specified by loc. LocalTimeZone[loc, date] gives the time zone \
for the geo location loc on the specified date. LocalTimeZone[loc, date, \
\"\\!\\(\\*prop\"] gives the specified property of the time zone."}, 
 {"LocalizeVariables", "LocalizeVariables is an option to Manipulate that \
determines whether the values of variables associated with controls should be \
localized."}, {"LocationEquivalenceTest", "LocationEquivalenceTest[{data1, \
data2, \[Ellipsis]}] tests whether the means or medians of the datai are \
equal. LocationEquivalenceTest[{data1, \[Ellipsis]}, \"\\!\\(\\*property\"] \
returns the value of \"\\!\\(\\*property\"."}, 
 {"LocationTest", "LocationTest[data] tests whether the mean or median of the \
data is zero. LocationTest[{data1, data2}] tests whether the means or medians \
of data1 and data2 are equal. LocationTest[dspec, \[Mu]0] tests a location \
measure against \[Mu]0. LocationTest[dspec, \[Mu]0, \"\\!\\(\\*property\"] \
returns the value of \"\\!\\(\\*property\"."}, 
 {"Locator", "Locator[{x, y}] represents a locator object at position {x, y} \
in a graphic. Locator[Dynamic[pos]] takes the position to be the dynamically \
updated current value of pos, with this value being reset if the locator \
object is moved. Locator[{x, y}, obj] displays obj as the locator object. \
Locator[{x, y}, None] displays nothing visible as the locator object."}, 
 {"LocatorAutoCreate", "LocatorAutoCreate is an option for LocatorPane, \
Manipulate, and related functions that specifies whether new locators should \
be created when clicking away from existing locators."}, 
 {"LocatorPane", "LocatorPane[{x, y}, back] represents a pane with a locator \
at position {x, y} and background back. LocatorPane[Dynamic[pt], back] takes \
the locator position to be the dynamically updated current value of pt, with \
the value of pt being reset if the locator is moved. LocatorPane[{pt1, pt2, \
\[Ellipsis]}, back] sets up multiple locators at positions pt1, pt2, \
\[Ellipsis]. LocatorPane[Dynamic[{pt1, pt2, \[Ellipsis]}], back] takes the \
locator positions to be dynamically updated current values of the pti. \
LocatorPane[pts, back, {{xmin, ymin}, {xmax, ymax}}] specifies the range of \
coordinates for the locator. LocatorPane[pts, back, {{xmin, ymin}, {xmax, \
ymax}, {dx, dy}}] uses jumps dx, dy."}, {"LocatorRegion", "LocatorRegion is \
an option for Locator that specifies where the locator object should by \
default be allowed to go when it is dragged."}, 
 {"Locked", "Locked is an attribute that, once assigned, prevents \
modification of any attributes of a symbol."}, 
 {"Log", "Log[z] gives the natural logarithm of z (logarithm to base e ). \
Log[b, z] gives the logarithm to base b."}, 
 {"Log10", "Log10[x] gives the base-10 logarithm of x."}, 
 {"Log2", "Log2[x] gives the base-2 logarithm of x."}, 
 {"LogBarnesG", 
  "LogBarnesG[z] gives the logarithm of the Barnes G-function logG(z)."}, 
 {"LogGamma", "LogGamma[z] gives the logarithm of the gamma function log \
\[CapitalGamma](z)."}, {"LogGammaDistribution", "LogGammaDistribution[\
\[Alpha], \[Beta], \[Mu]] represents a log-gamma distribution with shape \
parameters \[Alpha] and \[Beta] and location parameter \[Mu]."}, 
 {"LogIntegral", 
  "LogIntegral[z] is the logarithmic integral function li(z)."}, 
 {"LogLikelihood", "LogLikelihood[dist, {x1, x2, \[Ellipsis]}] gives the \
log-likelihood function for observations x1, x2, \[Ellipsis] from the \
distribution dist. LogLikelihood[proc, {{t1, x1}, {t2, x2}, \[Ellipsis]] \
gives the log-likelihood function for the observations xi at time ti from the \
process proc. LogLikelihood[proc, {path1, path2, \[Ellipsis]}] gives the \
log-likelihood function for the observations from path1, path2, \[Ellipsis] \
from the process proc."}, {"LogLinearPlot", "LogLinearPlot[f, {x, xmin, \
xmax}] generates a log-linear plot of f as a function of x from xmin to xmax. \
LogLinearPlot[{f1, f2, \[Ellipsis]}, {x, xmin, xmax}] plots several functions \
fi. LogLinearPlot[{\[Ellipsis], w[fi], \[Ellipsis]}, \[Ellipsis]] plots fi \
with features defined by the symbolic wrapper w. LogLinearPlot[\[Ellipsis], \
{x}\[Element]reg] takes the variable x to be in the geometric region reg."}, 
 {"LogLogPlot", "LogLogPlot[f, {x, xmin, xmax}] generates a log-log plot of f \
as a function of x from xmin to xmax. LogLogPlot[{f1, f2, \[Ellipsis]}, {x, \
xmin, xmax}] plots several functions fi. LogLogPlot[{\[Ellipsis], w[fi], \
\[Ellipsis]}, \[Ellipsis]] plots fi with features defined by the symbolic \
wrapper w. LogLogPlot[\[Ellipsis], {x}\[Element]reg] takes the variable x to \
be in the geometric region reg."}, {"LogLogisticDistribution", "LogLogisticDi\
stribution[\[Gamma], \[Sigma]] represents a log-logistic distribution with \
shape parameter \[Gamma] and scale parameter \[Sigma]."}, 
 {"LogMultinormalDistribution", "LogMultinormalDistribution[\[Mu], \
\[CapitalSigma]] represents a log-multinormal distribution with parameters \
\[Mu] and \[CapitalSigma]."}, {"LogNormalDistribution", "LogNormalDistributio\
n[\[Mu], \[Sigma]] represents a lognormal distribution derived from a normal \
distribution with mean \[Mu] and standard deviation \[Sigma]."}, 
 {"LogPlot", "LogPlot[f, {x, xmin, xmax}] generates a log plot of f as a \
function of x from xmin to xmax. LogPlot[{f1, f2, \[Ellipsis]}, {x, xmin, \
xmax}] plots several functions fi. LogPlot[{\[Ellipsis], w[fi], \[Ellipsis]}, \
\[Ellipsis]] plots fi with features defined by the symbolic wrapper w. \
LogPlot[\[Ellipsis], {x}\[Element]reg] takes the variable x to be in the \
geometric region reg."}, {"LogRankTest", "LogRankTest[{data1, data2, \
\[Ellipsis]}] tests for equal hazard rates among the datai using a log-rank \
type test. LogRankTest[{data1, data2, \[Ellipsis]}, wspec] performs a \
weighted log-rank test with weights wspec. LogRankTest[{data1, \[Ellipsis]}, \
wspec, \"\\!\\(\\*property\"] returns the value of \"\\!\\(\\*property\"."}, 
 {"LogSeriesDistribution", "LogSeriesDistribution[\[Theta]] represents a \
logarithmic series distribution with parameter \[Theta]."}, 
 {"LogicalExpand", "LogicalExpand[expr] expands out logical combinations of \
equations, inequalities, and other functions."}, 
 {"LogisticDistribution", "LogisticDistribution[\[Mu], \[Beta]] represents a \
logistic distribution with mean \[Mu] and scale parameter \[Beta]. \
LogisticDistribution[] represents a logistic distribution with mean 0 and \
scale parameter 1."}, {"LogisticSigmoid", 
  "LogisticSigmoid[z] gives the logistic sigmoid function."}, 
 {"LogitModelFit", "LogitModelFit[{y1, y2, \[Ellipsis]}, {f1, f2, \
\[Ellipsis]}, x] constructs a binomial logistic regression model of the form \
1 / (1 + E^ - (\[Beta]0 + \[Beta]1f1 + \[Beta]2f2 + \[Ellipsis])) that fits \
the yi for successive x values 1, 2, \[Ellipsis]. LogitModelFit[{{x11, x12, \
\[Ellipsis], y1}, {x21, x22, \[Ellipsis], y2}, \[Ellipsis]}, {f1, \
\[Ellipsis]}, {x1, x2, \[Ellipsis]}] constructs a binomial logistic \
regression model of the form 1 / (1 + E^ - (\[Beta]0 + \[Beta]1f1 + \
\[Beta]2f2 + \[Ellipsis])) where the fi depend on the variables xk. \
LogitModelFit[{m, v}] constructs a binomial logistic regression model from \
the design matrix m and response vector v."}, 
 {"LongLeftArrow", 
  "LongLeftArrow[x, y, \[Ellipsis]] displays as x<--y<--\[Ellipsis]."}, 
 {"LongLeftRightArrow", 
  "LongLeftRightArrow[x, y, \[Ellipsis]] displays as x<-->y<-->\[Ellipsis]."}\
, {"LongRightArrow", 
  "LongRightArrow[x, y, \[Ellipsis]] displays as x-->y-->\[Ellipsis]."}, 
 {"LongShortTermMemoryLayer", "LongShortTermMemoryLayer[n] represents a \
trainable recurrent layer that takes a sequence of vectors and produces a \
sequence of vectors, each of size n. LongShortTermMemoryLayer[n, opts] \
includes options for weights and other parameters."}, 
 {"Longest", "Longest[p] is a pattern object that matches the longest \
sequence consistent with the pattern p."}, {"LongestCommonSequence", "Longest\
CommonSequence[s1, s2] finds the longest sequence of contiguous or disjoint \
elements common to the strings or lists s1 and s2. LongestCommonSequence[s1, \
s2] finds the longest sequence of contiguous or disjoint elements common to \
the strings, lists or biomolecular sequences s1 and s2."}, 
 {"LongestCommonSequencePositions", "LongestCommonSequencePositions[s1, s2] \
finds the longest sequence of contiguous or disjoint elements common to the \
strings or lists s1 and s2 and returns their positions. \
LongestCommonSequencePositions[s1, s2] finds the longest sequence of \
contiguous or disjoint elements common to the strings, lists or biomolecular \
sequences s1 and s2 and returns their positions."}, 
 {"LongestCommonSubsequence", "LongestCommonSubsequence[s1, s2] finds the \
longest contiguous subsequence of elements common to the strings or lists s1 \
and s2. LongestCommonSubsequence[s1, s2] finds the longest contiguous \
subsequence of elements common to the strings, biomolecular sequences or \
lists s1 and s2."}, {"LongestCommonSubsequencePositions", "LongestCommonSubse\
quencePositions[s1, s2] finds the longest contiguous subsequence of elements \
common to the strings or lists s1 and s2 and returns their positions {pos1, \
pos2} in s1 and s2. LongestCommonSubsequencePositions[s1, s2] finds the \
longest contiguous subsequence of elements common to the strings, \
biomolecular sequences or lists s1 and s2 and returns their positions {pos1, \
pos2} in s1 and s2."}, {"LongestOrderedSequence", "LongestOrderedSequence[lis\
t] finds the longest ordered sequence of contiguous or disjoint elements in \
list. LongestOrderedSequence[list, p] finds the longest ordered sequence \
using the ordering function p."}, {"Longitude", "Longitude[pos] gives the \
longitude in degrees of a geographic position specified by pos. \
Longitude[pos, datum] gives the longitude referring to the specified geodetic \
datum."}, {"Lookup", "Lookup[assoc, key] looks up the value associated with \
key in the association assoc ; if the key is not present, \
Missing[\"KeyAbsent\", key] is returned. Lookup[assoc, {key1, key2, \
\[Ellipsis]}] gives a list of the values associated with the keyi. \
Lookup[{assoc1, assoc2, \[Ellipsis]}, key] gives a list corresponding to the \
value of key in each associ. Lookup[assoc, key, default] gives default if the \
key is not present. Lookup[assoc, keys, default, h] looks up the values \
associated with keys, wrapping each of then with head h before evaluation \
Lookup[key] represents an operator form of Lookup that can be applied to an \
expression."}, {"LoopFreeGraphQ", "LoopFreeGraphQ[g] yields True if the graph \
g has no self-loops, and False otherwise."}, {"Looping", "Looping is an \
option for VideoStream, AudioStream and related functions to specify the \
playback looping."}, {"LossFunction", "LossFunction is an option for NetTrain \
that specifies how to compare actual and requested outputs from a neural \
net."}, {"LowerCaseQ", "LowerCaseQ[string] yields True if all the characters \
in the string are lowercase letters, and yields False otherwise."}, 
 {"LowerLeftArrow", "LowerLeftArrow[x, y, \[Ellipsis]] displays as \
x\[LowerLeftArrow]y\[LowerLeftArrow]\[Ellipsis]."}, 
 {"LowerRightArrow", "LowerRightArrow[x, y, \[Ellipsis]] displays as \
x\[LowerRightArrow]y\[LowerRightArrow]\[Ellipsis]."}, 
 {"LowerTriangularMatrixQ", "LowerTriangularMatrixQ[m] gives True if m is \
lower triangular, and False otherwise. LowerTriangularMatrixQ[m, k] gives \
True if m is lower triangular starting down from the k^th diagonal, and False \
otherwise."}, {"LowerTriangularize", "LowerTriangularize[m] gives a matrix in \
which all but the lower triangular elements of m are replaced with zeros. \
LowerTriangularize[m, k] replaces with zeros only the elements above the k^th \
subdiagonal of m."}, {"LowpassFilter", "LowpassFilter[data, \[Omega]c] \
applies a lowpass filter with a cutoff frequency \[Omega]c to an array of \
data. LowpassFilter[data, \[Omega]c, n] uses a filter kernel of length n. \
LowpassFilter[data, \[Omega]c, n, wfun] applies a smoothing window wfun to \
the filter kernel."}, {"LucasL", "LucasL[n] gives the Lucas number Ln. \
LucasL[n, x] gives the Lucas polynomial Ln(x)."}, 
 {"LuccioSamiComponents", "LuccioSamiComponents[g] gives the Luccio-Sami \
components of the graph g. LuccioSamiComponents[g, {v1, v2, \[Ellipsis]}] \
gives the components that include at least one of the vertices v1, v2, \
\[Ellipsis]. LuccioSamiComponents[{v->w, \[Ellipsis]}, \[Ellipsis]] uses \
rules v->w to specify the graph g."}, {"LunarEclipse", "LunarEclipse[] gives \
the time of the next lunar eclipse. LunarEclipse[datespec] gives the time for \
the next lunar eclipse after the specified date. LunarEclipse[propertyspec] \
gives the specified property value for the next lunar eclipse. \
LunarEclipse[datespec, propertyspec] gives the specified property value for \
the next lunar eclipse after the specified date."}, 
 {"LyapunovSolve", "LyapunovSolve[a, c] finds a solution x of the matrix \
Lyapunov equation a.x + x.a\[ConjugateTranspose]==c. LyapunovSolve[a, b, c] \
solves a.x + x.b==c. LyapunovSolve[{a, d}, c] solves \
a.x.d\[ConjugateTranspose] + d.x.a\[ConjugateTranspose]==c. LyapunovSolve[{a, \
d}, {b, e}, c] solves a.x.e + d.x.b==c."}, 
 {"LyonsGroupLy", 
  "LyonsGroupLy[] represents the sporadic simple Lyons group Ly."}, 
 {"MAProcess", "MAProcess[{b1, \[Ellipsis], bq}, v] represents a \
moving-average process of order q with normal white noise variance v. \
MAProcess[{b1, \[Ellipsis], bq}, \[CapitalSigma]] represents a vector MA \
process with multinormal white noise covariance matrix \[CapitalSigma]. \
MAProcess[{b1, \[Ellipsis], bq}, v, init] represents an MA process with \
initial data init. MAProcess[c, \[Ellipsis]] represents an MA process with a \
constant c."}, {"MachineNumberQ", "MachineNumberQ[expr] returns True if expr \
is a machine-precision real or complex number, and returns False otherwise."}\
, {"MachinePrecision", 
  "MachinePrecision is a symbol used to indicate machine-number precision."}, 
 {"Magenta", 
  "Magenta represents the color magenta in graphics or style specifications."}\
, {"Magnification", "Magnification is an option for Style and Cell that \
specifies what magnification to use for display."}, 
 {"Magnify", "Magnify[expr, r] represents an object to be displayed with \
magnification r. Magnify[expr] displays with expr magnified by a fixed \
factor."}, {"MailAddressValidation", "MailAddressValidation is an option for \
SendMail that specifies whether and how to validate email addresses."}, 
 {"MailExecute", "MailExecute[cmd, target] executes the mail command cmd on \
the target mail server connection, folder, file or item(s)."}, 
 {"MailFolder", "MailFolder[\[Ellipsis]] represents a mail folder associated \
with an active mail server connection."}, {"MailItem", "MailItem[\[Ellipsis]] \
represents an item of mail associated with an active mail server connection."}\
, {"MailReceiverFunction", "MailReceiverFunction[fun] represents a mail \
receiver function that applies fun to any mail message it receives."}, 
 {"MailResponseFunction", "MailResponseFunction is an option for \
MailReceiverFunction that specifies what function to apply to respond to the \
sender of mail received by a MailReceiverFunction."}, 
 {"MailSearch", "MailSearch[folder, assoc] searches the specified mail folder \
for messages with properties matching elements in assoc. MailSearch[assoc] \
searches the current default mail inbox. MailSearch[] gives the list of \
unread messages in the current default mail inbox."}, 
 {"MailServerConnect", "MailServerConnect[] connects to your default incoming \
mail server. MailServerConnect[\"\\!\\(\\*server\"] connects to the specified \
incoming mail server \"\\!\\(\\*server\". \
MailServerConnect[\"\\!\\(\\*server\", userid] connects using the specified \
user ID userid. MailServerConnect[\"\\!\\(\\*server\", userid, password] \
connects using userid and password."}, {"MailServerConnection", "MailServerCo\
nnection[\[Ellipsis]] is a symbolic representation of a connection to an \
incoming mail server."}, {"MailSettings", "MailSettings is an option for \
SendMail and MailServerConnect to specify mail settings."}, 
 {"Majority", "Majority[e1, e2, \[Ellipsis]] gives True if the majority of \
the ei are True, and False if the majority are False."}, 
 {"MakeBoxes", "MakeBoxes[expr, form] is the low-level function used in \
Wolfram System sessions to convert expressions into boxes. MakeBoxes[expr] is \
the function to convert expr to StandardForm boxes."}, 
 {"MakeExpression", "MakeExpression[boxes, form] is the low-level function \
used in Wolfram System sessions to construct expressions from boxes."}, 
 {"ManagedLibraryExpressionID", "ManagedLibraryExpressionID[expr] returns the \
positive integer ID associated with expr if it is a managed library \
expression and $Failed otherwise. ManagedLibraryExpressionID[expr, mname] \
only returns the ID if expr is associated with the registered manager having \
name mname."}, {"ManagedLibraryExpressionQ", "ManagedLibraryExpressionQ[expr] \
returns True if expr is a managed library expression and False otherwise. \
ManagedLibraryExpressionQ[expr, mname] only returns True if expr is \
associated with the registered manager having name mname."}, 
 {"MandelbrotSetBoettcher", "MandelbrotSetBoettcher[z] gives the \
B\[ODoubleDot]ttcher coordinate of z with respect to the Mandelbrot set."}, 
 {"MandelbrotSetDistance", "MandelbrotSetDistance[c] estimates the distance \
from c to the nearest point in the Mandelbrot set. \
MandelbrotSetDistance[c,\"Interior\"] estimates the distance from c to the \
nearest point in the complement of the Mandelbrot set."}, 
 {"MandelbrotSetIterationCount", "MandelbrotSetIterationCount[c] returns the \
number of iterations of the function f(z)==z^2 + c, beginning with z==0, that \
are needed to determine whether c is in the Mandelbrot set."}, 
 {"MandelbrotSetMemberQ", "MandelbrotSetMemberQ[z] returns True if z is in \
the Mandelbrot set, and False otherwise."}, {"MandelbrotSetPlot", "Mandelbrot\
SetPlot[{zmin, zmax}] plots the portion of the Mandelbrot set inside the \
rectangle with corners zmin and zmax. MandelbrotSetPlot[] plots the \
Mandelbrot set over a default rectangle."}, 
 {"MangoldtLambda", 
  "MangoldtLambda[n] gives the von Mangoldt function \[CapitalLambda](n)."}, 
 {"ManhattanDistance", "ManhattanDistance[u, v] gives the Manhattan or \"city \
block\" distance between vectors u and v."}, {"Manipulate", "Manipulate[expr, \
{u, umin, umax}] generates a version of expr with controls added to allow \
interactive manipulation of the value of u. Manipulate[expr, {u, umin, umax, \
du}] allows the value of u to vary between umin and umax in steps du. \
Manipulate[expr, {{u, uinit}, umin, umax, \[Ellipsis]}] takes the initial \
value of u to be uinit. Manipulate[expr, {{u, uinit, ulbl}, \[Ellipsis]}] \
labels the controls for u with ulbl. Manipulate[expr, {u, {u1, u2, \
\[Ellipsis]}}] allows u to take on discrete values u1, u2, \[Ellipsis]. \
Manipulate[expr, {u, \[Ellipsis]}, {v, \[Ellipsis]}, \[Ellipsis]] provides \
controls to manipulate each of the u, v, \[Ellipsis]. Manipulate[expr, \
\"\\!\\(\\*c_u\"->{u, \[Ellipsis]}, \"\\!\\(\\*c_v\"->{v, \[Ellipsis]}, \
\[Ellipsis]] links the controls to the specified controllers on an external \
device."}, {"Manipulator", "Manipulator[x] represents a manipulator with \
setting x in the range 0 to 1. Manipulator[Dynamic[x]] takes the setting to \
be the dynamically updated current value of x, with the value of x being \
reset if the manipulator is moved. Manipulator[x, {xmin, xmax}] represents a \
manipulator with range xmin to xmax. Manipulator[x, {xmin, xmax, dx}] \
represents a manipulator that jumps in steps dx."}, 
 {"MannWhitneyTest", "MannWhitneyTest[{data1, data2}] tests whether the \
medians of data1 and data2 are equal. MannWhitneyTest[dspec, \[Mu]0] tests \
the median difference against \[Mu]0. MannWhitneyTest[dspec, \[Mu]0, \
\"\\!\\(\\*property\"] returns the value of \"\\!\\(\\*property\"."}, 
 {"MannedSpaceMissionData", "MannedSpaceMissionData[entity, property] gives \
the value of the specified property for the manned space mission entity. \
MannedSpaceMissionData[{entity1, entity2, \[Ellipsis]}, property] gives a \
list of property values for the specified manned space mission entities. \
MannedSpaceMissionData[name, property, annotation] gives the specified \
annotation associated with the given property."}, 
 {"MantissaExponent", "MantissaExponent[x] gives a list containing the \
mantissa and exponent of a number x. MantissaExponent[x, b] gives the base-b \
mantissa and exponent of x."}, {"Manual", "Manual represents an option or \
other value that is to be selected manually, usually by some form of \
interactive manipulation."}, {"Map", "Map[f, expr] or f/@expr applies f to \
each element on the first level in expr. Map[f, expr, levelspec] applies f to \
parts of expr specified by levelspec. Map[f] represents an operator form of \
Map that can be applied to an expression."}, 
 {"MapAll", 
  "MapAll[f, expr] or f//@expr applies f to every subexpression in expr."}, 
 {"MapAt", "MapAt[f, expr, n] applies f to the element at position n in expr. \
If n is negative, the position is counted from the end. MapAt[f, expr, {i, j, \
\[Ellipsis]}] applies f to the part of expr at position {i, j, \[Ellipsis]}. \
MapAt[f, expr, {{i1, j1, \[Ellipsis]}, {i2, j2, \[Ellipsis]}, \[Ellipsis]}] \
applies f to parts of expr at several positions. MapAt[f, pos] represents an \
operator form of MapAt that can be applied to an expression."}, 
 {"MapIndexed", "MapIndexed[f, expr] applies f to the elements of expr, \
giving the part specification of each element as a second argument to f. \
MapIndexed[f, expr, levelspec] applies f to all parts of expr on levels \
specified by levelspec. MapIndexed[f] represents an operator form of \
MapIndexed that can be applied to an expression."}, 
 {"MapThread", "MapThread[f, {{a1, a2, \[Ellipsis]}, {b1, b2, \[Ellipsis]}, \
\[Ellipsis]}] gives {f[a1, b1, \[Ellipsis]], f[a2, b2, \[Ellipsis]], \
\[Ellipsis]}. MapThread[f, {expr1, expr2, \[Ellipsis]}, n] applies f to the \
parts of the expri at level n. MapThread[f] represents an operator form of \
MapThread that can be applied to an expression."}, 
 {"MarchenkoPasturDistribution", "MarchenkoPasturDistribution[\[Lambda], \
\[Sigma]] represents a Marchenko-Pastur distribution with asymptotic ratio \
\[Lambda] and scale parameter \[Sigma]. \
MarchenkoPasturDistribution[\[Lambda]] represents a Marchenko-Pastur \
distribution with unit scale parameter."}, {"MarcumQ", "MarcumQ[m, a, b] \
gives Marcum's Q function Qm(a, b). MarcumQ[m, a, b0, b1] gives Marcum's Q \
function Qm(a, b0) - Qm(a, b1)."}, {"MardiaCombinedTest", "MardiaCombinedTest\
[data] tests whether data follows a MultinormalDistribution using the Mardia \
combined test. MardiaCombinedTest[data, \"\\!\\(\\*property\"] returns the \
value of \"\\!\\(\\*property\"."}, {"MardiaKurtosisTest", "MardiaKurtosisTest\
[data] tests whether data follows a MultinormalDistribution using the Mardia \
kurtosis test. MardiaKurtosisTest[data, \"\\!\\(\\*property\"] returns the \
value of \"\\!\\(\\*property\"."}, {"MardiaSkewnessTest", "MardiaSkewnessTest\
[data] tests whether data follows a MultinormalDistribution using the Mardia \
skewness test. MardiaSkewnessTest[data, \"\\!\\(\\*property\"] returns the \
value of \"\\!\\(\\*property\"."}, {"MarginalDistribution", "MarginalDistribu\
tion[dist, k] represents a univariate marginal distribution of the k^th \
coordinate from the multivariate distribution dist. \
MarginalDistribution[dist, {k1, k2, \[Ellipsis]}] represents a multivariate \
marginal distribution of the {k1, k2, \[Ellipsis]} coordinates."}, 
 {"MarkovProcessProperties", "MarkovProcessProperties[mproc] gives a summary \
of properties for the finite state Markov process mproc. \
MarkovProcessProperties[mproc, \"\\!\\(\\*property\"] gives the specified \
\"\\!\\(\\*property\" for the process mproc."}, 
 {"Masking", "Masking is an option for various image and signal processing \
functions that specifies on which regions they should operate."}, 
 {"MassConcentrationCondition", "MassConcentrationCondition[pred, vars, pars] \
represents a mass concentration boundary condition for PDEs with predicate \
pred indicating where it applies, with model variables vars and global \
parameters pars. MassConcentrationCondition[pred, vars, pars, lkey] \
represents a thermal surface boundary condition with local parameters \
specified in pars[lkey]."}, {"MassFluxValue", "MassFluxValue[pred, vars, \
pars] represents a mass flux boundary condition for PDEs with predicate pred \
indicating where it applies, with model variables vars and global parameters \
pars. MassFluxValue[pred, vars, pars, lkey] represents a mass flux boundary \
condition with local parameters specified in pars[lkey]."}, 
 {"MassImpermeableBoundaryValue", "MassImpermeableBoundaryValue[pred, vars, \
pars] represents a mass impermeable boundary condition for PDEs with \
predicate pred indicating where it applies, with model variables vars and \
global parameters pars. MassImpermeableBoundaryValue[pred, vars, pars, lkey] \
represents a mass impermeable boundary condition with local parameters \
specified in pars[lkey]."}, {"MassOutflowValue", "MassOutflowValue[pred, \
vars, pars] represents a mass outflow boundary condition for PDEs with \
predicate pred indicating where it applies, with model variables vars and \
global parameters pars. MassOutflowValue[pred, vars, pars, lkey] represents a \
mass outflow boundary condition with local parameters specified in \
pars[lkey]."}, {"MassSymmetryValue", "MassSymmetryValue[pred, vars, pars] \
represents a mass symmetry boundary condition for PDEs with predicate pred \
indicating where it applies, with model variables vars and global parameters \
pars. MassSymmetryValue[pred, vars, pars, lkey] represents a mass symmetry \
boundary condition with local parameters specified in pars[lkey]."}, 
 {"MassTransferValue", "MassTransferValue[pred, vars, pars] represents a mass \
transfer boundary condition for PDEs with predicate pred indicating where it \
applies, with model variables vars and global parameters pars. \
MassTransferValue[pred, vars, pars, lkey] represents a mass transfer boundary \
condition with local parameters specified in pars[lkey]."}, 
 {"MassTransportPDEComponent", "MassTransportPDEComponent[vars, pars] yields \
a mass transport PDE term with variables vars and parameters pars."}, 
 {"MatchLocalNames", "MatchLocalNames is an option for Trace and related \
functions that specifies whether symbols such as x should match symbols with \
local names of the form x$nnn."}, {"MatchQ", "MatchQ[expr, form] returns True \
if the pattern form matches expr, and returns False otherwise. MatchQ[form] \
represents an operator form of MatchQ that can be applied to an expression."}\
, {"MatchingDissimilarity", "MatchingDissimilarity[u, v] gives the matching \
dissimilarity between Boolean vectors u and v."}, 
 {"MaterialShading", "MaterialShading[\"\\!\\(\\*material\"] is a \
three-dimensional graphics directive specifying that surfaces that follow are \
to be drawn with the material \"\\!\\(\\*material\" appearance. \
MaterialShading[{\"\\!\\(\\*material\", col}] uses the specified color col as \
the base color. MaterialShading[\[LeftAssociation]parm1->val1, parm2->val2, \
\[Ellipsis]\[RightAssociation]] uses the specified parameters parms."}, 
 {"MaternPointProcess", "MaternPointProcess[\[Mu], \[Lambda], rm, d] \
represents a Mat\[EAcute]rn cluster point process with density \[Mu], cluster \
mean \[Lambda] and radius rm in \[DoubleStruckCapitalR]^d."}, 
 {"MathMLForm", "MathMLForm[expr] prints as a MathML form of expr."}, 
 {"MathematicalFunctionData", "MathematicalFunctionData[entity, property] \
gives data corresponding to property for the mathematical function specified \
by entity. MathematicalFunctionData[entprop, annotation] gives data \
corresponding to the given entity or property in the format specified by \
annotation. MathematicalFunctionData[entity, property, annotation] gives data \
for the given entity -property pair in the format specified by annotation. \
MathematicalFunctionData[entity, property, {qual1->val1, qual2->val2, \
\[Ellipsis]}] gives data for the given entity -property pair with property \
qualifiers qual1, qual2, \[Ellipsis] set to the given values. \
MathematicalFunctionData[entity, property, annotation, {qual1->val1, \
qual2->val2, \[Ellipsis]}] gives data corresponding to the given entity, \
property and annotation format, with property qualifiers qual1, qual2, \
\[Ellipsis] set to the given values."}, {"MathieuC", "MathieuC[a, q, z] gives \
the even Mathieu function with characteristic value a and parameter q."}, 
 {"MathieuCPrime", "MathieuCPrime[a, q, z] gives the derivative with respect \
to z of the even Mathieu function with characteristic value a and parameter \
q."}, {"MathieuCharacteristicA", "MathieuCharacteristicA[r, q] gives the \
characteristic value ar for even Mathieu functions with characteristic \
exponent r and parameter q."}, {"MathieuCharacteristicB", "MathieuCharacteris\
ticB[r, q] gives the characteristic value br for odd Mathieu functions with \
characteristic exponent r and parameter q."}, 
 {"MathieuCharacteristicExponent", "MathieuCharacteristicExponent[a, q] gives \
the characteristic exponent r for Mathieu functions with characteristic value \
a and parameter q."}, {"MathieuGroupM11", 
  "MathieuGroupM11[] represents the sporadic simple Mathieu group M11."}, 
 {"MathieuGroupM12", 
  "MathieuGroupM12[] represents the sporadic simple Mathieu group M12."}, 
 {"MathieuGroupM22", 
  "MathieuGroupM22[] represents the sporadic simple Mathieu group M22."}, 
 {"MathieuGroupM23", 
  "MathieuGroupM23[] represents the sporadic simple Mathieu group M23."}, 
 {"MathieuGroupM24", 
  "MathieuGroupM24[] represents the sporadic simple Mathieu group M24."}, 
 {"MathieuS", "MathieuS[a, q, z] gives the odd Mathieu function with \
characteristic value a and parameter q."}, {"MathieuSPrime", "MathieuSPrime[a\
, q, z] gives the derivative with respect to z of the odd Mathieu function \
with characteristic value a and parameter q."}, 
 {"Matrices", "Matrices[{d1, d2}] represents the domain of matrices of \
dimensions d1 \[Times]d2. Matrices[{d1, d2}, dom] represents the domain of \
matrices of dimensions d1 \[Times]d2, with components in the domain dom. \
Matrices[{d1, d2}, dom, sym] represents the subdomain of matrices d1 \
\[Times]d2 with symmetry sym."}, {"MatrixExp", "MatrixExp[m] gives the matrix \
exponential of m. MatrixExp[m, v] gives the matrix exponential of m applied \
to the vector v."}, {"MatrixForm", "MatrixForm[list] prints with the elements \
of list arranged in a regular array."}, {"MatrixFunction", "MatrixFunction[f, \
m] gives the matrix generated by the scalar function f at the matrix argument \
m."}, {"MatrixLog", 
  "MatrixLog[m] gives the matrix logarithm of a matrix m."}, 
 {"MatrixNormalDistribution", "MatrixNormalDistribution[\[CapitalSigma]row, \
\[CapitalSigma]col] represents zero mean matrix normal distribution with row \
covariance matrix \[CapitalSigma]row and column covariance matrix \
\[CapitalSigma]col. MatrixNormalDistribution[\[Mu], \[CapitalSigma]row, \
\[CapitalSigma]col] represents matrix normal distribution with mean matrix \
\[Mu]."}, {"MatrixPlot", "MatrixPlot[m] generates a plot that gives a visual \
representation of the values of elements in a matrix."}, 
 {"MatrixPower", "MatrixPower[m, n] gives the n^th matrix power of the matrix \
m. MatrixPower[m, n, v] gives the n^th matrix power of the matrix m applied \
to the vector v."}, {"MatrixPropertyDistribution", "MatrixPropertyDistributio\
n[expr, x\[Distributed]mdist] represents the distribution of the matrix \
property expr where the matrix-valued random variable x follows the matrix \
distribution mdist. MatrixPropertyDistribution[expr, {x1\[Distributed]mdist1, \
x2\[Distributed]mdist2, \[Ellipsis]}] represents the distribution where x1, \
x2, \[Ellipsis] are independent and follow the matrix distributions mdist1, \
mdist2, \[Ellipsis]."}, {"MatrixQ", "MatrixQ[expr] gives True if expr is a \
list of lists or a two-dimensional SparseArray object that can represent a \
matrix, and gives False otherwise. MatrixQ[expr, test] gives True only if \
test yields True when applied to each of the matrix elements in expr."}, 
 {"MatrixRank", "MatrixRank[m] gives the rank of the matrix m."}, 
 {"MatrixTDistribution", "MatrixTDistribution[\[CapitalSigma]row, \
\[CapitalSigma]col, \[Nu]] represents zero mean matrix t distribution with \
row covariance matrix \[CapitalSigma]row, column covariance matrix \
\[CapitalSigma]col, and degrees of freedom parameter \[Nu]. \
MatrixTDistribution[\[Mu], \[CapitalSigma]row, \[CapitalSigma]col, \[Nu]] \
represents matrix t distribution with mean matrix \[Mu]."}, 
 {"Max", "Max[x1, x2, \[Ellipsis]] yields the numerically largest of the xi. \
Max[{x1, x2, \[Ellipsis]}, {y1, \[Ellipsis]}, \[Ellipsis]] yields the largest \
element of any of the lists."}, {"MaxCellMeasure", "MaxCellMeasure is an \
option for DiscretizeRegion and related functions that specifies the maximum \
cell measure for the result."}, {"MaxColorDistance", "MaxColorDistance is an \
option to specify the maximum distance allowed between colors."}, 
 {"MaxDate", "MaxDate[{date1, date2, \[Ellipsis]}] gives the latest date of \
the datei. MaxDate[interval] gives the endpoint of the date interval \
interval. MaxDate[interval, gran] gives the endpoint of interval as specified \
by granularity gran."}, {"MaxDetect", "MaxDetect[image] gives a binary image \
in which white pixels correspond to constant extended maxima in image. \
MaxDetect[image, h] finds extended maxima where the range of values is not \
greater than h. MaxDetect[data, \[Ellipsis]] applies maxima detection to an \
array of data."}, {"MaxDuration", "MaxDuration is an option that specifies \
the maximum duration for audio playback or capture."}, 
 {"MaxExtraBandwidths", "MaxExtraBandwidths is an option to \
SmoothKernelDistribution that controls the behavior outside that data range."}\
, {"MaxExtraConditions", "MaxExtraConditions is an option to Solve and \
related functions that specifies how many extra equational conditions on \
continuous parameters to allow in solutions that are given."}, 
 {"MaxFeatureDisplacement", "MaxFeatureDisplacement is an option that \
specifies the maximum displacement allowed for any feature."}, 
 {"MaxFeatures", "MaxFeatures is an option that specifies the maximum number \
of features that will be returned from feature detection algorithms."}, 
 {"MaxFilter", "MaxFilter[data, r] filters data by replacing every value by \
the maximum value in its range-r neighborhood. MaxFilter[data, {r1, r2, \
\[Ellipsis]}] uses ri for filtering the i^th dimension in data."}, 
 {"MaxItems", "MaxItems is an option that specifies the maximum number of \
items to be used or shown."}, {"MaxIterations", "MaxIterations is an option \
that specifies the maximum number of iterations that should be tried in \
various built-in functions and algorithms."}, 
 {"MaxLimit", "MaxLimit[f, x->x^*] gives the max limit \
\[Backslash][MaxLimit]x->x^*f(x). MaxLimit[f, {x1->x1*, \[Ellipsis], \
xn->xn*}] gives the nested max limit \
\[Backslash][MaxLimit]x1->x1*\[CenterEllipsis] \
\[Backslash][MaxLimit]xn->xn*f\[InvisibleApplication](x1, \[Ellipsis], xn). \
MaxLimit[f, {x1, \[Ellipsis], xn}->{x1*, \[Ellipsis], xn*}] gives the \
multivariate max limit \[Backslash][MaxLimit]{x1, \[Ellipsis], xn}->{x1*, \
\[Ellipsis], xn*}f\[InvisibleApplication](x1, \[Ellipsis], xn)."}, 
 {"MaxMemoryUsed", "MaxMemoryUsed[] gives the maximum number of bytes used to \
store all data for the current Wolfram System session. MaxMemoryUsed[expr] \
gives the maximum number of bytes used during the evaluation of expr."}, 
 {"MaxMixtureKernels", "MaxMixtureKernels is an option for \
SmoothKernelDistribution and related functions that specifies the maximum \
number and location of kernel functions to use in the estimation."}, 
 {"MaxOverlapFraction", "MaxOverlapFraction is an option that specifies the \
maximum acceptable overlap between different identifications."}, 
 {"MaxPlotPoints", "MaxPlotPoints is an option for plotting functions like \
ArrayPlot and ListPlot3D that specifies the maximum number of points that \
will explicitly be included in the output."}, {"MaxRecursion", "MaxRecursion \
is an option for functions like NIntegrate and Plot that specifies how many \
recursive subdivisions can be made."}, {"MaxStableDistribution", "MaxStableDi\
stribution[\[Mu], \[Sigma], \[Xi]] represents a generalized maximum extreme \
value distribution with location parameter \[Mu], scale parameter \[Sigma], \
and shape parameter \[Xi]."}, {"MaxStepFraction", "MaxStepFraction is an \
option to functions like NDSolve that specifies the maximum fraction of the \
total range to cover in a single step."}, {"MaxStepSize", "MaxStepSize is an \
option to functions like NDSolve that specifies the maximum size of a single \
step used in generating a result."}, {"MaxSteps", "MaxSteps is an option to \
functions like NDSolve that specifies the maximum number of steps to take in \
generating a result."}, {"MaxTrainingRounds", "MaxTrainingRounds is an option \
for NetTrain and related functions that specifies the maximum number of \
rounds of training to do."}, {"MaxValue", "MaxValue[f, x] gives the maximum \
value of f with respect to x. MaxValue[f, {x, y, \[Ellipsis]}] gives the \
maximum value of f with respect to x, y, \[Ellipsis]. MaxValue[{f, cons}, {x, \
y, \[Ellipsis]}] gives the maximum value of f subject to the constraints \
cons. MaxValue[\[Ellipsis], x\[Element]rdom] constrains x to be in the region \
or domain rdom. MaxValue[\[Ellipsis], \[Ellipsis], dom] constrains variables \
to the domain dom, typically Reals or Integers."}, 
 {"MaxWordGap", "MaxWordGap is an option for SearchAdjustment that specifies \
the number of words that can occur between the terms of a phrase."}, 
 {"MaximalBy", "MaximalBy[{e1, e2, \[Ellipsis]}, f] returns a list of the ei \
for which the value of f[ei] is maximal. MaximalBy[{e1, e2, \[Ellipsis]}, f, \
n] returns a list of the ei corresponding to the n largest f[ei]. \
MaximalBy[f] represents an operator form of MaximalBy that can be applied to \
an expression."}, {"Maximize", "Maximize[f, x] maximizes f exactly with \
respect to x. Maximize[f, {x, y, \[Ellipsis]}] maximizes f exactly with \
respect to x, y, \[Ellipsis]. Maximize[{f, cons}, {x, y, \[Ellipsis]}] \
maximizes f exactly subject to the constraints cons. Maximize[\[Ellipsis], \
x\[Element]rdom] constrains x to be in the region or domain rdom. \
Maximize[\[Ellipsis], \[Ellipsis], dom] constrains variables to the domain \
dom, typically Reals or Integers."}, {"MaxwellDistribution", "MaxwellDistribu\
tion[\[Sigma]] represents a Maxwell distribution with scale parameter \
\[Sigma]."}, {"McLaughlinGroupMcL", 
  "McLaughlinGroupMcL[] represents the sporadic simple McLaughlin group McL."}\
, {"Mean", "Mean[list] gives the statistical mean of the elements in list. \
Mean[dist] gives the mean of the distribution dist."}, 
 {"MeanAbsoluteLossLayer", "MeanAbsoluteLossLayer[] represents a loss layer \
that computes the mean absolute loss between the \"Input\" port and \
\"Target\" port."}, {"MeanAround", "MeanAround[{x1, x2, x3, \[Ellipsis]}] \
gives an Around object describing the mean of the xi and its uncertainty. \
MeanAround[{{x11, x12, \[Ellipsis]}, {x21, \[Ellipsis]}, \[Ellipsis]}] gives \
a VectorAround object describing the means of the vectors xi and their \
covariance."}, {"MeanClusteringCoefficient", "MeanClusteringCoefficient[g] \
gives the mean clustering coefficient of the graph g. \
MeanClusteringCoefficient[{v->w, \[Ellipsis]}] uses rules v->w to specify the \
graph g."}, {"MeanDegreeConnectivity", "MeanDegreeConnectivity[g] gives a \
list of k-mean degree connectivity for the graph g for successive k = 0, 1, \
2\[Ellipsis]. MeanDegreeConnectivity[g, \"In\"] gives a list of k-mean \
in-degree connectivity for the graph g. MeanDegreeConnectivity[g, \"Out\"] \
gives a list of k-mean out-degree connectivity for the graph g. \
MeanDegreeConnectivity[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to \
specify the graph g."}, {"MeanDeviation", "MeanDeviation[list] gives the mean \
absolute deviation from the mean of the elements in list."}, 
 {"MeanFilter", "MeanFilter[data, r] filters data by replacing every value by \
the mean value in its range-r neighborhood. MeanFilter[data, {r1, r2, \
\[Ellipsis]}] uses ri for filtering the i^th dimension in data."}, 
 {"MeanGraphDistance", "MeanGraphDistance[g] gives the mean distance between \
all pairs of vertices in the graph g. MeanGraphDistance[{v->w, \[Ellipsis]}] \
uses rules v->w to specify the graph g."}, {"MeanNeighborDegree", "MeanNeighb\
orDegree[g] gives a list of mean neighbor degrees of vertices for the graph \
g. MeanNeighborDegree[g, \"In\"] gives a list of mean neighbor in-degrees. \
MeanNeighborDegree[g, \"Out\"] gives a list of mean neighbor out-degrees. \
MeanNeighborDegree[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to \
specify the graph g."}, {"MeanPointDensity", "MeanPointDensity[pdata] \
estimates the mean point density \[Lambda] from point data pdata in the \
observation region reg. MeanPointDensity[bdata] estimates the mean point \
density \[Lambda] from binned data bdata. MeanPointDensity[pproc] computes \
the mean point density \[Lambda] for point process pproc."}, 
 {"MeanShift", "MeanShift[list, d] replaces each element in list by the mean \
of the values of all elements that differ by less than d. MeanShift[list, d, \
{p1, p2, \[Ellipsis]}] returns the list where only the specified parts pi are \
replaced with mean-shifted values. MeanShift[image, \[Ellipsis]] mean shift \
of the pixel values in image."}, {"MeanShiftFilter", "MeanShiftFilter[data, \
r, d] filters data by replacing every value by the mean of the pixels in a \
range-r neighborhood and whose value is within a distance d. \
MeanShiftFilter[data, {r1, r2, \[Ellipsis]}, d] uses ri for filtering the \
i^th dimension in data."}, {"MeanSquaredLossLayer", "MeanSquaredLossLayer[] \
represents a loss layer that computes the mean squared loss between its \
\"Input\" port and \"Target\" port."}, {"Median", "Median[list] gives the \
median of the elements in list. Median[dist] gives the median of the \
distribution dist."}, {"MedianDeviation", "MedianDeviation[list] gives the \
median absolute deviation from the median of the elements in list."}, 
 {"MedianFilter", "MedianFilter[image, r] filters image by replacing every \
value by the median in its range-r neighborhood. MedianFilter[data, {r1, r2, \
\[Ellipsis]}] uses ri for filtering the i^th dimension in data."}, 
 {"MedicalTestData", "MedicalTestData[entity, property] gives the value of \
the specified property for the medical test entity. MedicalTestData[{entity1, \
entity2, \[Ellipsis]}, property] gives a list of property values for the \
specified medical test entities. MedicalTestData[entity, property, \
annotation] gives the specified annotation associated with the given \
property."}, {"Medium", "Medium is a style or option setting that specifies \
that objects should be medium sized."}, {"MeijerG", "MeijerG[{{a1, \
\[Ellipsis], an}, {an + 1, \[Ellipsis], ap}}, {{b1, \[Ellipsis], bm}, {bm + \
1, \[Ellipsis], bq}}, z] is the Meijer G function Gpqmn(z|a1, \[Ellipsis], ap \
b1, \[Ellipsis], bq )."}, {"MeijerGReduce", "MeijerGReduce[expr, x] attempts \
to reduce expr to a single MeijerG object as a function of x."}, 
 {"MeixnerDistribution", "MeixnerDistribution[a, b, m, d] represents a \
Meixner distribution with location parameter m, scale parameter a, skew \
parameter b, and shape parameter d."}, {"MellinConvolve", "MellinConvolve[f, \
g, x, y] gives the Mellin convolution with respect to x of the expressions f \
and g. MellinConvolve[f, g, {x1, x2, \[Ellipsis]}, {y1, y2, \[Ellipsis]}] \
gives the multidimensional Mellin convolution."}, 
 {"MellinTransform", "MellinTransform[expr, x, s] gives the Mellin transform \
of expr. MellinTransform[expr, {x1, x2, \[Ellipsis]}, {s1, s2, \[Ellipsis]}] \
gives the multidimensional Mellin transform of expr."}, 
 {"MemberQ", "MemberQ[list, form] returns True if an element of list matches \
form, and False otherwise. MemberQ[list, form, levelspec] tests all parts of \
list specified by levelspec. MemberQ[form] represents an operator form of \
MemberQ that can be applied to an expression."}, 
 {"MemoryAvailable", "MemoryAvailable[] gives the estimated number of bytes \
readily available for storing additional data in the current Wolfram Language \
kernel session."}, {"MemoryConstrained", "MemoryConstrained[expr, b] \
evaluates expr, stopping if more than b bytes of memory are requested. \
MemoryConstrained[expr, b, failexpr] returns failexpr if the memory \
constraint is not met."}, {"MemoryConstraint", "MemoryConstraint is an option \
for TestReport and VerificationTest that specifies how much memory (in bytes) \
the test is allowed to use."}, {"MemoryInUse", "MemoryInUse[] gives the \
number of bytes currently being used to store all data in the current Wolfram \
Language kernel session. MemoryInUse[$FrontEnd] gives the number of bytes \
used in the Wolfram System front end."}, {"MengerMesh", "MengerMesh[n] gives \
a mesh region representing the n^th -step Menger sponge. MengerMesh[n, d] \
gives the n^th -step Menger sponge in dimension d."}, 
 {"MenuCommandKey", "MenuCommandKey is an option for cells that specifies the \
keyboard shortcut to be associated with a style listed in the Format \
\[FilledRightTriangle] Style <Format \[FilledRightTriangle] Style> submenu."}\
, {"MenuPacket", "MenuPacket[integer, string] is a WSTP packet indicating a \
menu request with title string."}, {"MenuSortingValue", "MenuSortingValue is \
an option for cells and notebooks that specifies where a cell style, \
stylesheet, or palette is listed in the Format \[FilledRightTriangle] Style \
<Format \[FilledRightTriangle] Style> submenu, Format \[FilledRightTriangle] \
Stylesheet <Format \[FilledRightTriangle] Stylesheet> submenu, or Palettes \
menu respectively."}, {"MenuStyle", "MenuStyle is an option for \
menu-generating constructs that specifies the style to use in displaying menu \
items."}, {"MenuView", "MenuView[{lbl1->expr1, lbl2->expr2, \[Ellipsis]}] \
represents an object in which selecting the menu item with label lbli \
displays expri. MenuView[{lbl1->expr1, lbl2->expr2, \[Ellipsis]}, i] makes \
the i^th item be the one currently selected. MenuView[{{v1, lbl1->expr1}, \
{v2, lbl2->expr2}, \[Ellipsis]}, v] associates values vi with successive menu \
items, and makes the item with value v be the one currently selected. \
MenuView[{expr1, expr2, \[Ellipsis]}] takes the menu items' labels to be \
successive integers."}, {"Merge", "Merge[{assoc1, assoc2, \[Ellipsis]}, f] \
merges the associations associ, using the function f to combine values with \
the same key. Merge[{key1->val1, key2->val2, \[Ellipsis]}, f] gives an \
association in which values corresponding to identical keys are combined \
using f. Merge[f] represents an operator form of Merge that can be applied to \
an expression."}, {"MergingFunction", "MergingFunction is an option for \
functions such as PersistentSymbol that specifies a function to apply to the \
list of values found."}, {"MersennePrimeExponent", 
  "MersennePrimeExponent[n] gives the n^th Mersenne prime exponent."}, 
 {"MersennePrimeExponentQ", "MersennePrimeExponentQ[n] returns True if n is a \
Mersenne prime exponent, and False otherwise."}, 
 {"Mesh", "Mesh is an option for Plot3D, DensityPlot, and other plotting \
functions that specifies what mesh should be drawn."}, 
 {"MeshCellCentroid", "MeshCellCentroid is an annotation of MeshRegion and \
BoundaryMeshRegion objects that gives the centroids of mesh cells."}, 
 {"MeshCellCount", "MeshCellCount[mreg] gives a list {c0, c1, \[Ellipsis]} of \
counts cd of cells of dimension d in the mesh region mreg. \
MeshCellCount[mreg, d] gives the total count of cells of dimension d. \
MeshCellCount[mreg, cellspec] gives the total count of cells specified by \
cellspec."}, {"MeshCellHighlight", "MeshCellHighlight is an option and \
annotation of MeshRegion, BoundaryMeshRegion, and related functions that \
specifies mesh cells to highlight."}, {"MeshCellIndex", "MeshCellIndex[mreg, \
d] gives the cell indices for cells of dimension d in the mesh region mreg. \
MeshCellIndex[mreg, cellspec] gives the cell indices for the cells specified \
by cellspec."}, {"MeshCellLabel", "MeshCellLabel is an option to MeshRegion, \
BoundaryMeshRegion and related functions that specifies labels and placements \
for mesh cells."}, {"MeshCellMarker", "MeshCellMarker is an option to \
MeshRegion and BoundaryMeshRegion that specifies integer markers to associate \
with mesh cells."}, {"MeshCellMeasure", "MeshCellMeasure is an annotation of \
MeshRegion and BoundaryMeshRegion objects that gives the measures of mesh \
cells."}, {"MeshCellQuality", "MeshCellQuality is an annotation of MeshRegion \
and BoundaryMeshRegion objects that gives a quality measure for mesh cells."}\
, {"MeshCellShapeFunction", "MeshCellShapeFunction is an option and \
annotation for MeshRegion, BoundaryMeshRegion, and related functions that \
specifies functions to use to generate primitives for rendering mesh cells."}\
, {"MeshCellStyle", "MeshCellStyle is an option and annotation of MeshRegion, \
BoundaryMeshRegion, and related functions that specifies styles to use for \
mesh cells."}, {"MeshCells", "MeshCells[mreg, d] gives the cells of dimension \
d in the mesh region mreg. MeshCells[mreg, cellspec] gives the cells \
specified by cellspec."}, {"MeshConnectivityGraph", "MeshConnectivityGraph[mr\
, 0] gives a graph of points connected by lines. MeshConnectivityGraph[mr, d] \
gives a graph between cells of dimension d that share a cell of dimension d - \
1. MeshConnectivityGraph[mr, {d, e}, r] gives a graph from cells of dimension \
d to cells of dimension e that share a cell of dimension r."}, 
 {"MeshCoordinates", 
  "MeshCoordinates[mreg] gives a list of coordinates in the mesh region \
mreg."}, {"MeshFunctions", "MeshFunctions is an option for plotting functions \
that specifies functions to use to determine the placement of mesh \
divisions."}, {"MeshPrimitives", "MeshPrimitives[mreg, d] gives the graphics \
primitives for cells of dimension d in the mesh region mreg. \
MeshPrimitives[mreg, cellspec] gives the primitives specified by cellspec."}, 
 {"MeshQualityGoal", "MeshQualityGoal is an option for DiscretizeRegion and \
related functions that specifies a mesh cell quality goal for the result."}, 
 {"MeshRefinementFunction", "MeshRefinementFunction is an option for \
DiscretizeRegion and related functions that specifies a function to indicate \
whether mesh cells should be refined or not."}, 
 {"MeshRegion", "MeshRegion[{p1, p2, \[Ellipsis]}, {mcell1[{i1, \
\[Ellipsis]}], mcell2[{j1, \[Ellipsis]}], \[Ellipsis]}] yields a mesh with \
cells mcellj, where coordinates given as integer i are taken to be pi. \
MeshRegion[\[Ellipsis], {\[Ellipsis], wi[mcelli[\[Ellipsis]]], \[Ellipsis]}] \
yields a mesh with cell properties defined by the symbolic wrapper wi."}, 
 {"MeshRegionQ", "MeshRegionQ[reg] yields True if the region reg is a valid \
MeshRegion object and False otherwise."}, {"MeshShading", "MeshShading is an \
option for plotting functions that gives lists of colors to use for regions \
between mesh divisions."}, {"MeshStyle", "MeshStyle is an option for Plot3D, \
DensityPlot, and other plotting functions that specifies the style in which \
to draw a mesh."}, {"Message", "Message[symbol::tag] prints the message \
symbol::tag unless it has been switched off. Message[symbol::tag, e1, e2, \
\[Ellipsis]] prints a message, inserting the values of the ei as needed."}, 
 {"MessageDialog", "MessageDialog[expr] puts up a standard message dialog \
that displays expr together with an OK button. MessageDialog[expr, \
{lbl1:>act1, lbl2:>act2, \[Ellipsis]}] includes buttons with labels lbli that \
evaluate the corresponding acti if clicked."}, 
 {"MessageList", "MessageList[n] is a global object assigned to be a list of \
the names of messages generated during the processing of the n^th input \
line."}, {"MessageName", "symbol::tag is a name for a message."}, 
 {"MessagePacket", "MessagePacket[symbol, string] is a WSTP packet containing \
a Wolfram Language message identifier of the form symbol::string."}, 
 {"Messages", 
  "Messages[symbol] gives all the messages assigned to a particular symbol."}\
, {"MetaInformation", "MetaInformation is an option giving meta-information \
for Image, CloudObject, and other objects."}, {"MeteorShowerData", "MeteorSho\
werData[entity, property] gives the value of the specified property for the \
meteor shower entity. MeteorShowerData[{entity1, entity2, \[Ellipsis]}, \
property] gives a list of property values for the specified meteor shower \
entities. MeteorShowerData[name, property, annotation] gives the specified \
annotation associated with the given property."}, 
 {"Method", "Method is an option for various algorithm-intensive functions \
that specifies what internal methods they should use."}, 
 {"MexicanHatWavelet", "MexicanHatWavelet[] represents the Mexican hat \
wavelet of width 1. MexicanHatWavelet[\[Sigma]] represents the Mexican hat \
wavelet of width \[Sigma]."}, {"MeyerWavelet", "MeyerWavelet[] represents the \
Meyer wavelet of order 3. MeyerWavelet[n] represents the Meyer wavelet of \
order n evaluated on the equally spaced interval { - 10, 10}. MeyerWavelet[n, \
lim] represents the Meyer wavelet of order n evaluated on the equally spaced \
interval { - lim, lim}."}, {"Midpoint", "Midpoint[{p1, p2}] gives the \
midpoint of the line segment connecting the points p1 and p2. \
Midpoint[Line[{p1, p2}]] gives the midpoint of a line."}, 
 {"Min", "Min[x1, x2, \[Ellipsis]] yields the numerically smallest of the xi. \
Min[{x1, x2, \[Ellipsis]}, {y1, \[Ellipsis]}, \[Ellipsis]] yields the \
smallest element of any of the lists."}, {"MinColorDistance", "MinColorDistan\
ce is an option for DominantColors that specifies the minimum distance \
between returned colors."}, {"MinDate", "MinDate[{date1, date2, \[Ellipsis]}] \
gives the earliest date of the datei. MinDate[interval] gives the beginning \
of the date interval interval. MinDate[interval, gran] gives the beginning of \
interval as specified by granularity gran."}, {"MinDetect", "MinDetect[image] \
gives a binary image in which white pixels correspond to constant extended \
minima in image. MinDetect[image, h] finds extended minima where the range of \
values is not greater than h. MinDetect[data, \[Ellipsis]] applies minima \
detection to an array of data."}, {"MinFilter", "MinFilter[data, r] filters \
data by replacing every value by the minimum value in its range-r \
neighborhood. MinFilter[data, {r1, r2, \[Ellipsis]}] uses ri for filtering \
the i^th dimension in data."}, {"MinIntervalSize", "MinIntervalSize is an \
option for IntervalSlider that specifies the minimum size of the interval \
during interactive editing."}, {"MinLimit", "MinLimit[f, x->x^*] gives the \
min limit \[Backslash][MinLimit]x->x^*f(x). MinLimit[f, {x1->x1*, \
\[Ellipsis], xn->xn*}] gives the nested min limit \
\[Backslash][MinLimit]x1->x1*\[CenterEllipsis] \
\[Backslash][MinLimit]xn->xn*f\[InvisibleApplication](x1, \[Ellipsis], xn). \
MinLimit[f, {x1, \[Ellipsis], xn}->{x1*, \[Ellipsis], xn*}] gives the \
multivariate min limit \[Backslash][MinLimit]{x1, \[Ellipsis], xn}->{x1*, \
\[Ellipsis], xn*}f\[InvisibleApplication](x1, \[Ellipsis], xn)."}, 
 {"MinMax", "MinMax[list] gives the list {Min[list], Max[list]}. MinMax[list, \
\[Delta]] gives {Min[list] - \[Delta], Max[list] + \[Delta]}. MinMax[list, \
Scaled[s]] gives {Min[list] - \[Delta], Max[list] + \[Delta]} where \[Delta] \
= s\[Times](Max[list] - Min[list]). MinMax[list, {\[Delta]min, \[Delta]max}] \
gives {Min[list] - \[Delta]min, Max[list] + \[Delta]max}."}, 
 {"MinStableDistribution", "MinStableDistribution[\[Mu], \[Sigma], \[Xi]] \
represents a generalized minimum extreme value distribution with location \
parameter \[Mu], scale parameter \[Sigma], and shape parameter \[Xi]."}, 
 {"MinValue", "MinValue[f, x] gives the minimum value of f with respect to x. \
MinValue[f, {x, y, \[Ellipsis]}] gives the exact minimum value of f with \
respect to x, y, \[Ellipsis]. MinValue[{f, cons}, {x, y, \[Ellipsis]}] gives \
the minimum value of f subject to the constraints cons. MinValue[\[Ellipsis], \
x\[Element]rdom] constrains x to be in the region or domain rdom. \
MinValue[\[Ellipsis], \[Ellipsis], dom] constrains variables to the domain \
dom, typically Reals or Integers."}, {"MineralData", "MineralData[entity, \
property] gives the value of the specified property for the mineral entity. \
MineralData[{entity1, entity2, \[Ellipsis]}, property] gives a list of \
property values for the specified mineral entities. MineralData[entity, \
property, annotation] gives the specified annotation associated with the \
given property."}, {"MinimalBy", "MinimalBy[{e1, e2, \[Ellipsis]}, f] returns \
a list of the ei for which the value of f[ei] is minimal. MinimalBy[{e1, e2, \
\[Ellipsis]}, f, n] returns a list of the ei corresponding to the n smallest \
f[ei]. MinimalBy[f] represents an operator form of MinimalBy that can be \
applied to an expression."}, {"MinimalPolynomial", "MinimalPolynomial[s, x] \
gives the minimal polynomial in x for which the algebraic number s is a \
root."}, {"MinimalStateSpaceModel", "MinimalStateSpaceModel[sys] gives the \
minimal state-space model of the state-space model sys. \
MinimalStateSpaceModel[sys, {z1, \[Ellipsis]}] specifies the new coordinates \
zi."}, {"Minimize", "Minimize[f, x] minimizes f exactly with respect to x. \
Minimize[f, {x, y, \[Ellipsis]}] minimizes f exactly with respect to x, y, \
\[Ellipsis]. Minimize[{f, cons}, {x, y, \[Ellipsis]}] minimizes f exactly \
subject to the constraints cons. Minimize[\[Ellipsis], x\[Element]rdom] \
constrains x to be in the region or domain rdom. Minimize[\[Ellipsis], \
\[Ellipsis], dom] constrains variables to the domain dom, typically Reals or \
Integers."}, {"MinimumTimeIncrement", "MinimumTimeIncrement[tseries] gives \
the minimum time increment in the time series tseries."}, 
 {"MinkowskiQuestionMark", 
  "MinkowskiQuestionMark[x] gives Minkowski's question mark function ?(x)."}, 
 {"MinorPlanetData", "MinorPlanetData[entity, property] gives the value of \
the specified property for the minor planet entity. MinorPlanetData[{entity1, \
entity2, \[Ellipsis]}, property] gives a list of property values for the \
specified minor planet entities. MinorPlanetData[entity, property, \
annotation] gives the specified annotation associated with the given \
property."}, {"Minors", "Minors[m] gives the minors of a matrix m. Minors[m, \
k] gives the k^th minors."}, 
 {"Minus", "- x is the arithmetic negation of x."}, 
 {"MinusPlus", "MinusPlus[x] displays as \[MinusPlus]x. MinusPlus[x, y, \
\[Ellipsis]] displays as x\[MinusPlus]y\[MinusPlus]\[Ellipsis]."}, 
 {"Missing", "Missing[] represents data that is missing. \
Missing[\"\\!\\(\\*reason\"] specifies a reason for the data's being missing. \
Missing[\"\\!\\(\\*reason\", expr] associates the expression expr with the \
missing data."}, {"MissingBehavior", "MissingBehavior is an option to Query \
and related functions that specifies how expressions with head Missing should \
be interpreted in the context of other functions."}, 
 {"MissingDataMethod", "MissingDataMethod is an option to TemporalData and \
other functions that controls how to process missing data."}, 
 {"MissingDataRules", "MissingDataRules is an option for SemanticImport and \
related functions that specifies what should be considered \"missing\" and \
what to replace it with."}, {"MissingQ", 
  "MissingQ[expr] gives True if expr has head Missing."}, 
 {"MissingString", "MissingString is an option for TextString and related \
functions that indicates how an expression with head Missing should be \
converted to a string."}, {"MissingStyle", "MissingStyle is an option for \
GeoRegionValuePlot that specifies how locations with missing data should be \
displayed."}, {"MissingValuePattern", "MissingValuePattern is an option for \
SynthesizeMissingValues to specify which elements are considered missing."}, 
 {"MissingValueSynthesis", "MissingValueSynthesis is an option for functions \
such as Classify that specifies how missing values should be replaced."}, 
 {"MittagLefflerE", "MittagLefflerE[\[Alpha], z] gives the Mittag-Leffler \
function E\[Alpha](z). MittagLefflerE[\[Alpha], \[Beta], z] gives the \
generalized Mittag-Leffler function E\[Alpha], \[Beta](z)."}, 
 {"MixedFractionParts", "MixedFractionParts[expr] gives the list \
{IntegerPart[expr], FractionalPart[expr]}."}, {"MixedGraphQ", "MixedGraphQ[g] \
yields True if the graph g is a mixed graph and False otherwise."}, 
 {"MixedMagnitude", "MixedMagnitude[{val1, val2, \[Ellipsis], valn}] \
represents a mixed-magnitude expression consisting of values val1 through \
valn."}, {"MixedRadix", "MixedRadix[{b1, \[Ellipsis], bn}] represents the \
list of bases of a numerical system in which different digits have different \
bases."}, {"MixedRadixQuantity", "MixedRadixQuantity[{value1, \[Ellipsis], \
valuen}, {unit1, \[Ellipsis], unitn}] represents a single Quantity expressed \
using an additive sequence of compatible units with magnitude values."}, 
 {"MixedUnit", "MixedUnit[{unit1, unit2, \[Ellipsis], unitn}] represents a \
mixed-unit expression consisting of units unit1 through unitn."}, 
 {"MixtureDistribution", "MixtureDistribution[{w1, \[Ellipsis], wn}, {dist1, \
\[Ellipsis], distn}] represents a mixture distribution whose CDF is given as \
a sum of the CDFs of the component distributions disti, each with weight wi."}\
, {"Mod", "Mod[m, n] gives the remainder on division of m by n. Mod[m, n, d] \
uses an offset d."}, {"Modal", "Modal is an option to functions such as \
CreateDialog that specifies whether the dialog that is created should be \
modal to the Wolfram System front end."}, {"ModularInverse", 
  "ModularInverse[k, n] gives the modular inverse of k modulo n."}, 
 {"ModularLambda", "ModularLambda[\[Tau]] gives the modular lambda elliptic \
function \[Lambda](\[Tau])."}, {"Module", "Module[{x, y, \[Ellipsis]}, expr] \
specifies that occurrences of the symbols x, y, \[Ellipsis] in expr should be \
treated as local. Module[{x = x0, \[Ellipsis]}, expr] defines initial values \
for x, \[Ellipsis]."}, {"Modulus", "Modulus->n is an option that can be given \
in certain algebraic functions to specify that integers should be treated \
modulo n."}, {"MoebiusMu", 
  "MoebiusMu[n] gives the M\[ODoubleDot]bius function \[Mu](n)."}, 
 {"Molecule", "Molecule[{atom1, atom2, \[Ellipsis]}, {bond1, bond2, \
\[Ellipsis]}] represents a molecule with atoms atomi and bonds bondi. \
Molecule[name] gives the molecule corresponding to the input name."}, 
 {"MoleculeAlign", "MoleculeAlign[ref, mol] returns a version of mol that is \
aligned with reference molecule ref. MoleculeAlign[ref, mol, {r1->m1, r2->m2, \
\[Ellipsis]}] aligns atoms in mol with index mi to the atoms in ref with \
index ri. MoleculeAlign[ref, mol, patt] uses the molecule pattern patt to \
find an atom mapping between ref and mol. MoleculeAlign[ref, {mol1, mol2, \
\[Ellipsis]}, patt] aligns each of the moli with ref. MoleculeAlign[ref, \
mols, patt, prop] aligns the molecules and returns the property prop of the \
alignment."}, {"MoleculeContainsQ", "MoleculeContainsQ[molecule, patt] \
returns True if patt is a substructure of molecule, and False otherwise. \
MoleculeContainsQ[patt] represents an operator form of MoleculeContainsQ that \
can be applied to a molecule."}, {"MoleculeDraw", "MoleculeDraw[] displays a \
window with interactive tools for drawing a Molecule, and returns the result. \
MoleculeDraw[mol] displays a window that initially contains the Molecule \
mol."}, {"MoleculeEquivalentQ", "MoleculeEquivalentQ[mol1, mol2] gives True \
if mol1 and mol2 represent equivalent molecules and gives False otherwise."}, 
 {"MoleculeGraph", 
  "MoleculeGraph[mol] returns a graph constructed from the molecule mol."}, 
 {"MoleculeMaximumCommonSubstructure", "MoleculeMaximumCommonSubstructure[{mo\
l1, mol2, \[Ellipsis]}] returns a molecule pattern representing the largest \
common substructure for the input molecules. \
MoleculeMaximumCommonSubstructure[{mol1, mol2, \[Ellipsis]}, params] uses \
params to determine equivalence between atoms and bonds."}, 
 {"MoleculeModify", "MoleculeModify[mol, \"\\!\\(\\*mod\"] gives a molecule \
or list of molecules derived from the molecule mol by applying the \
modification \"\\!\\(\\*mod\". MoleculeModify[mol, {\"\\!\\(\\*mod\", specs}] \
gives a molecule or list of molecules derived from the molecule mol by \
applying the modification \"\\!\\(\\*mod\" with additional specifications \
specs. MoleculeModify[\"\\!\\(\\*mod\"] represents an operator form of \
MoleculeModify that can be applied to a molecule."}, 
 {"MoleculeName", "MoleculeName[mol] attempts to return the systematic \
chemical name for the given molecule. MoleculeName[mol, \"\\!\\(\\*source\"] \
uses the given source to find the molecule name."}, 
 {"MoleculePattern", "MoleculePattern[{atom1, atom2, \[Ellipsis] }, { bond1, \
bond2, \[Ellipsis] }] represents a molecule pattern with atoms atomi and \
bonds bondi for use in substructure searching. \
MoleculePattern[\"\\!\\(\\*smarts\"] represents a molecule pattern from the \
input SMARTS pattern."}, {"MoleculePlot", "MoleculePlot[mol] creates a \
two-dimensional structure diagram of the molecule mol. MoleculePlot[mol, \
patt] creates a diagram of mol where all atoms and bonds matching the pattern \
patt are highlighted."}, {"MoleculePlot3D", "MoleculePlot3D[mol] creates a \
three-dimensional model of the molecule mol. MoleculePlot3D[mol, patt] \
creates a model of mol where all atoms and bonds matching the pattern patt \
are highlighted."}, {"MoleculeProperty", "MoleculeProperty[pname] represents \
a property identified by pname for use in MoleculeValue. \
MoleculeProperty[{pname, item}] represents a property that applies to item \
within a molecule."}, {"MoleculeQ", "MoleculeQ[mol] returns True if mol is a \
valid Molecule expression, and False otherwise."}, 
 {"MoleculeRecognize", "MoleculeRecognize[image] recognizes a molecule in \
image and returns it as a Molecule object."}, {"MoleculeSubstructureCount", "\
MoleculeSubstructureCount[mol, patt] gives a count of the number of times \
patt appears as a substructure in mol. MoleculeSubstructureCount[patt] \
represents an operator form of MoleculeSubstructureCount that can be applied \
to a molecule."}, {"MoleculeValue", "MoleculeValue[molecule, property] gives \
the value of the specified property for the given molecule. \
MoleculeValue[{molecule1, molecule2, \[Ellipsis]}, property] gives the list \
of values for the specified property for each of the moleculei. \
MoleculeValue[molecule, {property1, property2, \[Ellipsis]}] gives the list \
of values of the propertyi for the specified molecule. \
MoleculeValue[molecule, {property, item}] gives the value of the specified \
property for item in molecule. MoleculeValue[{molecule1, molecule2, \
\[Ellipsis]}, {property1, property2, \[Ellipsis]}] gives the list of values \
of the propertyi for each of the moleculei."}, 
 {"Moment", "Moment[list, r] gives the r^th sample moment of the elements in \
list. Moment[dist, r] gives the r^th moment of the distribution dist. \
Moment[\[Ellipsis], {r1, r2, \[Ellipsis]}] gives the {r1, r2, \[Ellipsis]}^th \
multivariate moment. Moment[r] represents the r^th formal moment."}, 
 {"MomentConvert", "MomentConvert[mexpr, form] converts the moment expression \
mexpr to the specified form."}, {"MomentEvaluate", "MomentEvaluate[mexpr, \
dist] evaluates formal moments in the moment expression mexpr on the \
distribution dist. MomentEvaluate[mexpr, list] evaluates formal moments and \
formal sample moments in mexpr on the data list. MomentEvaluate[mexpr, dist, \
list] evaluates formal moments on the distribution dist and formal sample \
moments on the data list."}, {"MomentGeneratingFunction", "MomentGeneratingFu\
nction[dist, t] gives the moment-generating function for the distribution \
dist as a function of the variable t. MomentGeneratingFunction[dist, {t1, t2, \
\[Ellipsis]}] gives the moment-generating function for the multivariate \
distribution dist as a function of the variables t1, t2, \[Ellipsis]."}, 
 {"MomentOfInertia", "MomentOfInertia[reg, pt, v] computes the moment of \
inertia for the region reg rotating around an axis through the point pt in \
direction v. MomentOfInertia[reg] computes the moment of inertia matrix for \
the region reg relative to the center of mass. MomentOfInertia[reg, pt] \
computes the moment of inertia matrix relative to the point pt."}, 
 {"Monday", "Monday is a day of the week."}, {"Monitor", "Monitor[expr, mon] \
generates a temporary monitor cell in which the continually updated current \
value of mon is displayed during the course of evaluation of expr."}, 
 {"MonomialList", "MonomialList[poly] gives the list of all monomials in the \
polynomial poly. MonomialList[poly, {x1, x2, \[Ellipsis]}] gives the list of \
monomials with respect to the variables xi in poly. MonomialList[poly, {x1, \
x2, \[Ellipsis]}, order] puts the monomials in the specified order."}, 
 {"MonsterGroupM", 
  "MonsterGroupM[] represents the sporadic simple monster group M."}, 
 {"MoonPhase", "MoonPhase[] gives moon phase fraction of illumination for the \
current date. MoonPhase[datespec] gives moon phase fraction of illumination \
for the specified date. MoonPhase[property] gives the property of the moon \
phase for the current date. MoonPhase[datespec, property] gives the property \
of the moon phase for the specified date."}, {"MoonPosition", "MoonPosition[] \
gives the position of the Moon for the current date and location. \
MoonPosition[datespec] gives the position of the Moon for the specified date. \
MoonPosition[locationspec] gives the position of the Moon for the specified \
location. MoonPosition[locationspec, datespec] gives the position of the Moon \
for the specified date and location. MoonPosition[{{location1, date1}, \
{location2, date2}, \[Ellipsis]}] gives the positions of the Moon for all \
specified locations on the specified dates. MoonPosition[locationspec, \
datespec, func] uses func to determine what to return for extended \
locations."}, {"MorletWavelet", 
  "MorletWavelet[] represents a Morlet wavelet."}, 
 {"MorphologicalBinarize", "MorphologicalBinarize[image,{t1, t2}] creates a \
binary image from image by replacing all values above the upper threshold t2 \
with 1, also including pixels with intensities above the lower threshold t1 \
that are connected to the foreground. MorphologicalBinarize[image, t] uses t \
as the upper threshold, automatically choosing a suitable value for the lower \
threshold. MorphologicalBinarize[image] chooses the lower and the upper \
threshold automatically."}, {"MorphologicalBranchPoints", "MorphologicalBranc\
hPoints[image] gives a version of a binary image image in which white pixels \
represent the morphological branch points."}, {"MorphologicalComponents", "Mo\
rphologicalComponents[image] gives an array in which each pixel of image is \
replaced by an integer index representing the connected foreground image \
component in which the pixel lies. MorphologicalComponents[image, t] treats \
values above t as foreground."}, {"MorphologicalEulerNumber", "MorphologicalE\
ulerNumber[image] computes the morphological Euler number of regions in a \
binary image. MorphologicalEulerNumber[image, t] treats values above t as \
foreground."}, {"MorphologicalGraph", "MorphologicalGraph[image] gives a \
graph object that represents the connectivity of the morphological branch \
points and endpoints of the objects in image after applying morphological \
thinning."}, {"MorphologicalPerimeter", "MorphologicalPerimeter[image] picks \
out the morphological perimeter of regions of foreground in image. \
MorphologicalPerimeter[image, t] treats values above t as foreground."}, 
 {"MorphologicalTransform", "MorphologicalTransform[image, f] applies the \
function f to the 3\[Times]3 neighborhood of each pixel in a binary image \
image. MorphologicalTransform[image, rule] applies a morphological \
transformation specified by a rule number rule. MorphologicalTransform[image, \
\"\\!\\(\\*name\"] uses a named transformation \"\\!\\(\\*name\". \
MorphologicalTransform[image, transformation, n] applies n iterations of \
transformation on image."}, {"MortalityData", "MortalityData[spec] gives the \
values of all properties for the specified demographic. MortalityData[spec, \
property] gives the value of the specified property for the specified \
demographic."}, {"Most", 
  "Most[expr] gives expr with the last element removed."}, 
 {"MountainData", "MountainData[entity, property] gives the value of the \
specified property for the mountain entity. MountainData[{entity1, entity2, \
\[Ellipsis]}, property] gives a list of property values for the specified \
mountain entities. MountainData[entity, property, annotation] gives the \
specified annotation associated with the given property."}, 
 {"MouseAnnotation", "MouseAnnotation[] gives any mouse annotation associated \
with the expression at the current mouse position."}, 
 {"MouseAppearance", "MouseAppearance[expr, graphic] changes the mouse cursor \
to appear as graphic when the mouse pointer is in the area where expr is \
displayed. MouseAppearance[expr, graphic, {x, y}] uses the coordinates {x, y} \
in the graphic as the hotspot for the mouse cursor. MouseAppearance[expr, \
graphic, Scaled[{x, y}]] uses the scaled coordinates {x, y} as the hotspot \
for the mouse cursor. MouseAppearance[expr, \"\\!\\(\\*cursorname\"] uses the \
named cursor \"\\!\\(\\*cursorname\" as the mouse cursor. \
MouseAppearance[expr, Automatic] reverts to normal mouse cursor behavior."}, 
 {"MousePosition", "MousePosition[] gives the current mouse position in the \
notebook front end. MousePosition[\"\\!\\(\\*coords\"] gives the mouse \
position with respect to the specified coordinate system. \
MousePosition[\"\\!\\(\\*coords\", def] returns def if the mouse is not over \
an object that defines the specified coordinate system."}, 
 {"Mouseover", "Mouseover[expr, over] represents an object that displays as \
over when the mouse pointer is over it, and as expr otherwise."}, 
 {"MovieData", "MovieData[entity, property] gives the value of the specified \
property for the movie entity. MovieData[{entity1, entity2, \[Ellipsis]}, \
property] gives a list of property values for the specified movie entities. \
MovieData[entity, property, annotation] gives the specified annotation \
associated with the given property."}, {"MovingAverage", "MovingAverage[list, \
r] gives the moving average of list, computed by averaging runs of r \
elements. MovingAverage[list, {w1, w2, \[Ellipsis], wr}] gives the moving \
average of list, computed with weights wi."}, {"MovingMap", "MovingMap[f, \
data, w] applies f to size w windows in the specified data. MovingMap[f, \
data, wspec] uses windows specified by wspec. MovingMap[f, data, wspec, \
padding] pads data using padding."}, {"MovingMedian", "MovingMedian[list, r] \
gives the moving median of list, computed using spans of r elements."}, 
 {"MoyalDistribution", "MoyalDistribution[\[Mu], \[Sigma]] represents a Moyal \
distribution with location parameter \[Mu] and scale parameter \[Sigma]. \
MoyalDistribution[] represents a Moyal distribution with location parameter 0 \
and scale parameter 1."}, {"Multicolumn", "Multicolumn[list, cols] is an \
object that formats with the elements of list arranged in a grid with the \
indicated number of columns. Multicolumn[list, {rows, Automatic}] formats as \
a grid with the indicated number of rows. Multicolumn[list, {rows, cols}] \
formats as a grid with the indicated number of rows and columns. \
Multicolumn[list] formats with the elements of list in a roughly square \
arrangement."}, {"MultiedgeStyle", "MultiedgeStyle is an option for GraphPlot \
and related functions that specifies how to draw multiple edges."}, 
 {"MultigraphQ", "MultigraphQ[g] yields True if the graph g is a multigraph \
and False otherwise."}, {"Multinomial", "Multinomial[n1, n2, \[Ellipsis]] \
gives the multinomial coefficient (n1 + n2 + \[Ellipsis])! / (n1! n2! \
\[Ellipsis])."}, {"MultinomialDistribution", "MultinomialDistribution[n, {p1, \
p2, \[Ellipsis], pm}] represents a multinomial distribution with n trials and \
probabilities pi."}, {"MultinormalDistribution", "MultinormalDistribution[\
\[Mu], \[CapitalSigma]] represents a multivariate normal (Gaussian) \
distribution with mean vector \[Mu] and covariance matrix \[CapitalSigma]. \
MultinormalDistribution[\[CapitalSigma]] represents a multivariate normal \
distribution with zero mean and covariance matrix \[CapitalSigma]."}, 
 {"MultiplicativeOrder", "MultiplicativeOrder[k, n] gives the multiplicative \
order of k modulo n, defined as the smallest integer m such that \
k^m\[Congruent]1mod n. MultiplicativeOrder[k, n, {r1, r2, \[Ellipsis]}] gives \
the generalized multiplicative order of k modulo n, defined as the smallest \
integer m such that k^m\[Congruent]rimod n for some i."}, 
 {"MultiplySides", "MultiplySides[rel, x] multiplies each side of the \
equation or inequality rel by x. MultiplySides[rel1, rel2] multiplies the \
corresponding sides of two equations or inequalities."}, 
 {"Multiselection", "Multiselection is an option to ListPicker that specifies \
whether multiple values may be selected."}, 
 {"MultivariateHypergeometricDistribution", "MultivariateHypergeometricDistri\
bution[n, {m1, m2, \[Ellipsis], mk}] represents a multivariate hypergeometric \
distribution with n draws without replacement from a collection containing mi \
objects of type i."}, {"MultivariatePoissonDistribution", "MultivariatePoisso\
nDistribution[\[Mu]0, {\[Mu]1, \[Mu]2, \[Ellipsis]}] represents a \
multivariate Poisson distribution with mean vector {\[Mu]0 + \[Mu]1, \[Mu]0 + \
\[Mu]2, \[Ellipsis]}."}, {"MultivariateTDistribution", "MultivariateTDistribu\
tion[\[CapitalSigma], \[Nu]] represents the multivariate Student t \
distribution with scale matrix \[CapitalSigma] and degrees of freedom \
parameter \[Nu]. MultivariateTDistribution[\[Mu], \[CapitalSigma], \[Nu]] \
represents the multivariate Student t distribution with location \[Mu], scale \
matrix \[CapitalSigma], and \[Nu] degrees of freedom."}, 
 {"N", "N[expr] gives the numerical value of expr. N[expr, n] attempts to \
give a result with n -digit precision."}, {"NArgMax", "NArgMax[f, x] gives a \
position xmax at which f is numerically maximized. NArgMax[f, {x, y, \
\[Ellipsis]}] gives a position {xmax, ymax, \[Ellipsis]} at which f is \
numerically maximized. NArgMax[{f, cons}, {x, y, \[Ellipsis]}] gives a \
position at which f is numerically maximized subject to the constraints cons. \
NArgMax[\[Ellipsis], x\[Element]reg] constrains x to be in the region reg."}, 
 {"NArgMin", "NArgMin[f, x] gives a position xmin at which f is numerically \
minimized. NArgMin[f, {x, y, \[Ellipsis]}] gives a position {xmin, ymin, \
\[Ellipsis]} at which f is numerically minimized. NArgMin[{f, cons}, {x, y, \
\[Ellipsis]}] gives a position at which f is numerically minimized subject to \
the constraints cons. NArgMin[\[Ellipsis], x\[Element]reg] constrains x to be \
in the region reg."}, {"NBodySimulation", "NBodySimulation[law, {state1, \
\[Ellipsis], staten}, t] generates a simulation of the motion of a system of \
n bodies with initial states statei, governed by the specified potential or \
force law, over a length of time t. NBodySimulation[law, <|body1->state1, \
\[Ellipsis], bodyn->staten|>, t] generates a simulation of the motion of a \
system of n bodies with names bodyi."}, {"NBodySimulationData", ""}, 
 {"NCache", "NCache[x, xn] represents a numeric cache object for a quantity \
with exact value x and approximate numerical value xn."}, 
 {"NDEigensystem", "NDEigensystem[\[ScriptCapitalL][u[x, y, \[Ellipsis]]], u, \
{x, y, \[Ellipsis]}\[Element]\[CapitalOmega], n] gives the n smallest \
magnitude eigenvalues and eigenfunctions for the linear differential operator \
\[ScriptCapitalL] over the region \[CapitalOmega]. \
NDEigensystem[{\[ScriptCapitalL]1[u[x, y, \[Ellipsis]], v[x, y, \[Ellipsis]], \
\[Ellipsis]], \[ScriptCapitalL]2[u[x, y, \[Ellipsis]], v[x, y, \[Ellipsis]], \
\[Ellipsis]], \[Ellipsis]}, {u, v, \[Ellipsis]}, {x, y, \
\[Ellipsis]}\[Element]\[CapitalOmega], n] gives eigenvalues and \
eigenfunctions for the coupled differential operators {op1, op2, \[Ellipsis]} \
over the region \[CapitalOmega]. NDEigensystem[eqns, {u, \[Ellipsis]}, t, {x, \
y, \[Ellipsis]}\[Element]\[CapitalOmega], n] gives the eigenvalues and \
eigenfunctions in the spatial variables {x, y, \[Ellipsis]} for solutions u, \
\[Ellipsis] of the coupled time-dependent differential equations eqns."}, 
 {"NDEigenvalues", "NDEigenvalues[\[ScriptCapitalL][u[x, y, \[Ellipsis]]], u, \
{x, y, \[Ellipsis]}\[Element]\[CapitalOmega], n] gives the n smallest \
magnitude eigenvalues for the linear differential operator \[ScriptCapitalL] \
over the region \[CapitalOmega]. NDEigenvalues[{\[ScriptCapitalL]1[u[x, y, \
\[Ellipsis]], v[x, y, \[Ellipsis]], \[Ellipsis]], \[ScriptCapitalL]2[u[x, y, \
\[Ellipsis]], v[x, y, \[Ellipsis]], \[Ellipsis]], \[Ellipsis]}, {u, v, \
\[Ellipsis]}, {x, y, \[Ellipsis]}\[Element]\[CapitalOmega], n] gives \
eigenvalues for the coupled differential operators {op1, op2, \[Ellipsis]} \
over the region \[CapitalOmega]. NDEigenvalues[eqns, {u, \[Ellipsis]}, t, {x, \
y, \[Ellipsis]}\[Element]\[CapitalOmega], n] gives the eigenvalues in the \
spatial variables {x, y, \[Ellipsis]} for solutions u, \[Ellipsis] of the \
coupled time-dependent differential equations eqns."}, 
 {"NDSolve", "NDSolve[eqns, u, {x, xmin, xmax}] finds a numerical solution to \
the ordinary differential equations eqns for the function u with the \
independent variable x in the range xmin to xmax. NDSolve[eqns, u, {x, xmin, \
xmax}, {y, ymin, ymax}] solves the partial differential equations eqns over a \
rectangular region. NDSolve[eqns, u, {x, y}\[Element]\[CapitalOmega]] solves \
the partial differential equations eqns over the region \[CapitalOmega]. \
NDSolve[eqns, u, {t, tmin, tmax}, {x, y}\[Element]\[CapitalOmega]] solves the \
time-dependent partial differential equations eqns over the region \
\[CapitalOmega]. NDSolve[eqns, {u1, u2, \[Ellipsis]}, \[Ellipsis]] solves for \
the functions ui."}, {"NDSolveValue", "NDSolveValue[eqns, expr, {x, xmin, \
xmax}] gives the value of expr with functions determined by a numerical \
solution to the ordinary differential equations eqns with the independent \
variable x in the range xmin to xmax. NDSolveValue[eqns, expr, {x, xmin, \
xmax}, {y, ymin, ymax}] solves the partial differential equations eqns over a \
rectangular region. NDSolveValue[eqns, expr, {x, y}\[Element]\[CapitalOmega]] \
solves the partial differential equations eqns over the region \
\[CapitalOmega]. NDSolveValue[eqns, u, {t, tmin, tmax}, {x, \
y}\[Element]\[CapitalOmega]] solves the time-dependent partial differential \
equations eqns over the region \[CapitalOmega]."}, 
 {"NExpectation", "NExpectation[expr, x\[Distributed]dist] gives the \
numerical expectation of expr under the assumption that x follows the \
probability distribution dist. NExpectation[expr, {x1, x2, \
\[Ellipsis]}\[Distributed]dist] gives the numerical expectation of expr under \
the assumption that {x1, x2, \[Ellipsis]} follows the multivariate \
distribution dist. NExpectation[expr, {x1\[Distributed]dist1, \
x2\[Distributed]dist2, \[Ellipsis]}] gives the numerical expectation of expr \
under the assumption that x1, x2, \[Ellipsis] are independent and follow the \
distributions dist1, dist2, \[Ellipsis]. NExpectation[expr\[Conditioned]pred, \
\[Ellipsis]] gives the numerical conditional expectation of expr given pred."}\
, {"NHoldAll", "NHoldAll is an attribute which specifies that none of the \
arguments to a function should be affected by N."}, 
 {"NHoldFirst", "NHoldFirst is an attribute which specifies that the first \
argument to a function should not be affected by N."}, 
 {"NHoldRest", "NHoldRest is an attribute which specifies that all but the \
first argument to a function should not be affected by N."}, 
 {"NIntegrate", "NIntegrate[f, {x, xmin, xmax}] gives a numerical \
approximation to the integral \[Integral]xminxmax f dx. NIntegrate[f, {x, \
xmin, xmax}, {y, ymin, ymax}, \[Ellipsis]] gives a numerical approximation to \
the multiple integral \[Integral]xminxmaxdx\[Integral]yminymaxdy \[Ellipsis] \
f. NIntegrate[f, {x, y, \[Ellipsis]}\[Element]reg] integrates over the \
geometric region reg."}, {"NMaxValue", "NMaxValue[f, x] gives the maximum \
value of f with respect to x. NMaxValue[f, {x, y, \[Ellipsis]}] gives the \
maximum value of f with respect to x, y, \[Ellipsis]. NMaxValue[{f, cons}, \
{x, y, \[Ellipsis]}] gives the maximum value of f subject to the constraints \
cons. NMaxValue[\[Ellipsis], x\[Element]reg] constrains x to be in the region \
reg."}, {"NMaximize", "NMaximize[f, x] maximizes f numerically with respect \
to x. NMaximize[f, {x, y, \[Ellipsis]}] maximizes f numerically with respect \
to x, y, \[Ellipsis]. NMaximize[{f, cons}, {x, y, \[Ellipsis]}] maximizes f \
numerically subject to the constraints cons. NMaximize[\[Ellipsis], \
x\[Element]rdom] constrains x to be in the region or domain rdom."}, 
 {"NMinValue", "NMinValue[f, x] gives the minimum value of f with respect to \
x. NMinValue[f, {x, y, \[Ellipsis]}] gives the minimum value of f with \
respect to x, y, \[Ellipsis]. NMinValue[{f, cons}, {x, y, \[Ellipsis]}] gives \
the minimum value of f subject to the constraints cons. \
NMinValue[\[Ellipsis], x\[Element]reg] constrains x to be in the region reg."}\
, {"NMinimize", "NMinimize[f, x] minimizes f numerically with respect to x. \
NMinimize[f, {x, y, \[Ellipsis]}] minimizes f numerically with respect to x, \
y, \[Ellipsis]. NMinimize[{f, cons}, {x, y, \[Ellipsis]}] minimizes f \
numerically subject to the constraints cons. NMinimize[\[Ellipsis], \
x\[Element]rdom] constrains x to be in the region or domain rdom."}, 
 {"NProbability", "NProbability[pred, x\[Distributed]dist] gives the \
numerical probability for an event that satisfies the predicate pred under \
the assumption that x follows the probability distribution dist. \
NProbability[pred, {x1, x2, \[Ellipsis]}\[Distributed]dist] gives the \
numerical probability that an event satisfies pred under the assumption that \
{x1, x2, \[Ellipsis]} follows the multivariate distribution dist. \
NProbability[pred, {x1\[Distributed]dist1, x2\[Distributed]dist2, \
\[Ellipsis]}] gives the numerical probability that an event satisfies pred \
under the assumption that x1, x2, \[Ellipsis] are independent and follow the \
distributions dist1, dist2, \[Ellipsis]. \
NProbability[pred1\[Conditioned]pred2, \[Ellipsis]] gives the numerical \
conditional probability of pred1 given pred2."}, 
 {"NProduct", "NProduct[f, {i, imin, imax}] gives a numerical approximation \
to the product \[Product]i = iminimaxf. NProduct[f, {i, imin, imax, di}] uses \
a step di in the product."}, {"NRoots", "NRoots[lhs == rhs, var] yields a \
disjunction of equations which represent numerical approximations to the \
roots of a polynomial equation."}, {"NSolve", "NSolve[expr, vars] attempts to \
find numerical approximations to the solutions of the system expr of \
equations or inequalities for the variables vars. NSolve[expr, vars, Reals] \
finds solutions over the domain of real numbers."}, 
 {"NSolveValues", "NSolveValues[expr, vars] attempts to find numerical \
approximations to the values of vars determined by the solutions of the \
system expr. NSolveValues[expr, vars, Reals] finds solutions over the domain \
of real numbers."}, {"NSum", "NSum[f, {i, imin, imax}] gives a numerical \
approximation to the sum \[Sum]i = iminimaxf. NSum[f, {i, imin, imax, di}] \
uses a step di in the sum."}, {"NakagamiDistribution", "NakagamiDistribution[\
\[Mu], \[Omega]] represents a Nakagami distribution with shape parameter \
\[Mu] and spread parameter \[Omega]."}, {"NameQ", "NameQ[\"\\!\\(\\*string\"] \
yields True if there are any symbols whose names match the string pattern \
given, and yields False otherwise."}, {"Names", "Names[\"\\!\\(\\*string\"] \
gives a list of the names of symbols that match the string. Names[patt] gives \
a list of names matching the arbitrary string pattern patt."}, 
 {"Nand", "Nand[e1, e2, \[Ellipsis]] is the logical NAND function. It \
evaluates its arguments in order, giving True immediately if any of them are \
False, and False if they are all True."}, {"Nearest", "Nearest[{elem1, elem2, \
\[Ellipsis]}, x] gives the list of elemi to which x is nearest. \
Nearest[{elem1->v1, elem2->v2, \[Ellipsis]}, x] gives the vi corresponding to \
the elemi to which x is nearest. Nearest[{elem1, elem2, \[Ellipsis]}->{v1, \
v2, \[Ellipsis]}, x] gives the same result. Nearest[{elem1, elem2, \
\[Ellipsis]}->prop, x] gives the property prop for the elemi to which x is \
nearest. Nearest[data, {x1, x2, \[Ellipsis]}] effectively gives \
{Nearest[data, x1], Nearest[data, x2], \[Ellipsis]}. Nearest[data, x, n] \
gives the n nearest elemi to x. Nearest[data, x, {n, r}] gives the n or fewer \
nearest elemi to x that are within radius r of x. Nearest[data] generates a \
NearestFunction[\[Ellipsis]] that can be applied repeatedly to different x."}\
, {"NearestFunction", "NearestFunction[data] represents a function whose \
values give the elements closest to an element that is supplied."}, 
 {"NearestMeshCells", "NearestMeshCells[mr, pt] gives the indices for the \
cells to which the point pt is nearest in the mesh region mr. \
NearestMeshCells[mr, pt, n] gives the n nearest cell indices to pt. \
NearestMeshCells[mr, pt, {n, r}] gives the n or fewer nearest cell indices to \
pt that are within radius r of pt. NearestMeshCells[{mr, d}, \[Ellipsis]] \
gives the indices for the cells of dimension d."}, 
 {"NearestNeighborG", "NearestNeighborG[pdata, r] estimates the nearest \
neighbor function G(r) at radius r in the point data pdata. \
NearestNeighborG[pproc, r] computes G(r) for the point process pproc. \
NearestNeighborG[bdata, r] computes G(r) for binned data bdata. \
NearestNeighborG[pspec] generates the function G that can be applied \
repeatedly to different radii r."}, {"NearestNeighborGraph", "NearestNeighbor\
Graph[{elem1, elem2, \[Ellipsis]}] gives a graph with vertices elem1, elem2, \
\[Ellipsis] and edges connecting each elemi to its nearest neighbors. \
NearestNeighborGraph[{elem1, elem2, \[Ellipsis]}, k] gives a graph connecting \
each elemi to its k nearest neighbors. NearestNeighborGraph[{elem1, elem2, \
\[Ellipsis]}, {k, r}] gives a graph connecting each elemi to at most k \
nearest vertices within radius r of elemi. NearestNeighborGraph[{elem1, \
elem2, \[Ellipsis]}, {All, r}] gives a graph connecting each elemi to all \
vertices within radius r of elemi."}, {"NearestTo", "NearestTo[x] is an \
operator form that yields Nearest[elems, x] when applied to a list elems. \
NearestTo[x, n] is an operator form that yields Nearest[elems, x,n] when \
applied to a list elems. NearestTo[x, {n, r}] is an operator form that yields \
Nearest[elems, x, {n, r}] when applied to a list elems."}, 
 {"NebulaData", "NebulaData[entity, property] gives the value of the \
specified property for the nebula entity. NebulaData[{entity1, entity2, \
\[Ellipsis]}, property] gives a list of property values for the specified \
nebula entities. NebulaData[entity, property, annotation] gives the specified \
annotation associated with the given property."}, 
 {"NeedlemanWunschSimilarity", "NeedlemanWunschSimilarity[u, v] gives a \
number representing the Needleman-Wunsch similarity between strings or \
vectors u and v. NeedlemanWunschSimilarity[u, v] gives a number representing \
the Needleman-Wunsch similarity between strings, vectors or biomolecular \
sequences u and v."}, {"Needs", "Needs[\"\\!\\(\\*StyleBox[\\(\\*context`]\"] \
loads an appropriate file if the specified context is not already in \
$Packages. Needs[\"\\!\\(\\*StyleBox[\\(\\*context`]\", \"\\!\\(\\*file\"] \
loads file if the specified context is not already in $Packages."}, 
 {"Negative", "Negative[x] gives True if x is a negative number."}, 
 {"NegativeBinomialDistribution", "NegativeBinomialDistribution[n, p] \
represents a negative binomial distribution with parameters n and p."}, 
 {"NegativeDefiniteMatrixQ", "NegativeDefiniteMatrixQ[m] gives True if m is \
explicitly negative definite, and False otherwise."}, 
 {"NegativeIntegers", "NegativeIntegers represents the domain of strictly \
negative integers, as in x\[Element]NegativeIntegers."}, 
 {"NegativeMultinomialDistribution", "NegativeMultinomialDistribution[n, p] \
represents a negative multinomial distribution with parameter n and failure \
probability vector p."}, {"NegativeRationals", "NegativeRationals represents \
the domain of strictly negative rational numbers, as in \
x\[Element]NegativeRationals."}, {"NegativeReals", 
  "NegativeReals represents the domain of strictly negative real numbers."}, 
 {"NegativeSemidefiniteMatrixQ", "NegativeSemidefiniteMatrixQ[m] gives True \
if m is explicitly negative semidefinite, and False otherwise."}, 
 {"NegativelyOrientedPoints", "NegativelyOrientedPoints[{p1, p2, p3, \
\[Ellipsis], pn}] tests whether the sequence of points p1, p2, p3, \
\[Ellipsis], pn are negatively oriented."}, {"NeighborhoodData", "Neighborhoo\
dData[entity, property] gives the value of the specified property for the \
neighborhood entity. NeighborhoodData[{entity1, entity2, \[Ellipsis]}, \
property] gives a list of property values for the specified neighborhood \
entities. NeighborhoodData[entity, property, annotation] gives the specified \
annotation associated with the given property."}, 
 {"NeighborhoodGraph", "NeighborhoodGraph[g, v] gives the graph neighborhood \
of a vertex v in the graph g. NeighborhoodGraph[g, {a1, a2, \[Ellipsis]}] \
gives the graph neighborhood of the ai that can be vertices, edges, or \
subgraphs of g. NeighborhoodGraph[g, patt] gives the graph neighborhood of \
the vertices and edges that match the pattern patt. NeighborhoodGraph[g, \
\[Ellipsis], d] gives the neighborhood up to distance d. \
NeighborhoodGraph[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to \
specify the graph g."}, 
 {"Nest", 
  "Nest[f, expr, n] gives an expression with f applied n times to expr."}, 
 {"NestGraph", "NestGraph[f, expr, n] gives the graph obtained by starting \
with expr and applying f successively n times. NestGraph[f, {expr1, expr2, \
\[Ellipsis]}, n] gives the graph obtained by applying f to expr1, expr2, \
\[Ellipsis]. NestGraph[f, graph, n] gives the graph obtained by applying f to \
the vertices of graph and extending the graph."}, 
 {"NestList", "NestList[f, expr, n] gives a list of the results of applying f \
to expr 0 through n times."}, {"NestTree", "NestTree[f, tree] gives the tree \
obtained by applying f to the data in the leaves of tree and extending the \
tree. NestTree[f, tree, n] applies f at most n times, adding at most n \
additional levels to each leaf. NestTree[f, tree, n, h] applies h to the data \
of the added subtrees."}, {"NestWhile", "NestWhile[f, expr, test] starts with \
expr, then repeatedly applies f until applying test to the result no longer \
yields True. NestWhile[f, expr, test, m] supplies the most recent m results \
as arguments for test at each step. NestWhile[f, expr, test, All] supplies \
all results so far as arguments for test at each step. NestWhile[f, expr, \
test, m, max] applies f at most max times. NestWhile[f, expr, test, m, max, \
n] applies f an extra n times. NestWhile[f, expr, test, m, max, - n] returns \
the result found when f had been applied n fewer times."}, 
 {"NestWhileList", "NestWhileList[f, expr, test] generates a list of the \
results of applying f repeatedly, starting with expr, and continuing until \
applying test to the result no longer yields True. NestWhileList[f, expr, \
test, m] supplies the most recent m results as arguments for test at each \
step. NestWhileList[f, expr, test, All] supplies all results so far as \
arguments for test at each step. NestWhileList[f, expr, test, m, max] applies \
f at most max times."}, {"NestedGreaterGreater", "NestedGreaterGreater[x, y, \
\[Ellipsis]] displays as \
x\[NestedGreaterGreater]y\[NestedGreaterGreater]\[Ellipsis]."}, 
 {"NestedLessLess", "NestedLessLess[x, y, \[Ellipsis]] displays as \
x\[NestedLessLess]y\[NestedLessLess]\[Ellipsis]."}, 
 {"NetAppend", "NetAppend[chain, layer] appends a layer onto a NetChain. \
NetAppend[chain, {layer1, layer2, \[Ellipsis]}] appends several layers to a \
NetChain."}, {"NetArray", "NetArray[] represents an array in a net. \
NetArray[\"\\!\\(\\*name\"] uses \"\\!\\(\\*name\" as an identifier to share \
the array in more than one layer. NetArray[prop->value] specifies the \
property prop for the array. NetArray[\[LeftAssociation]\"Name\"->name, \
\"Array\"->array, \[Ellipsis]\[RightAssociation]] specifies several \
properties for the array."}, {"NetArrayLayer", "NetArrayLayer[] represents a \
layer that has no input and produces as output a constant array. \
NetArrayLayer[opts] includes options for the initial value of the array or \
output size."}, {"NetBidirectionalOperator", "NetBidirectionalOperator[net] \
represents a net that applies net to a sequence and to its reverse, \
concatenating both results into one output sequence. \
NetBidirectionalOperator[{fnet, bnet}] uses fnet on the normal input and bnet \
on the reversed input. NetBidirectionalOperator[nets, agg] aggregates the two \
output sequences using the specified aggregation function."}, 
 {"NetChain", "NetChain[{layer1, layer2, \[Ellipsis]}] specifies a neural net \
in which the output of layeri is connected to the input of layeri+1. \
NetChain[\[LeftAssociation]\"\\!\\(\\*name_1\"->layer1, \
\"\\!\\(\\*name_2\"->layer2, \[Ellipsis]\[RightAssociation]] specifies a net \
consisting of a chain of explicitly named layers."}, 
 {"NetDecoder", "NetDecoder[\"name\"] represents a decoder that takes a net \
representation and decodes it into an expression of a given form. \
NetDecoder[{\"\\!\\(\\*name\", \[Ellipsis]}] represents a decoder with \
additional parameters specified."}, {"NetDelete", "NetDelete[net, n] deletes \
the n^th layer from a NetChain or NetGraph. NetDelete[net, \"\\!\\(\\*name\"] \
deletes a named layer. NetDelete[net, {spec1, spec2, \[Ellipsis]}] deletes \
several layers simultaneously."}, {"NetDrop", "NetDrop[chain, n] removes the \
first n layers from a NetChain. NetDrop[chain, - n] removes the last n layers \
from a NetChain. NetDrop[chain, {start, end}] drops the layers between start \
and end in a NetChain."}, {"NetEncoder", "NetEncoder[\"\\!\\(\\*name\"] \
represents an encoder that takes a given form of input and encodes it as an \
array for use in a net. NetEncoder[{\"\\!\\(\\*name\", \[Ellipsis]}] \
represents an encoder with additional parameters specified."}, 
 {"NetEvaluationMode", "NetEvaluationMode is an option that can be given when \
applying neural net functions to input data, specifying whether the net \
should use training-specific behavior."}, {"NetExtract", "NetExtract[layer, \
\"\\!\\(\\*param\"] extracts the value of a parameter for the specified net \
layer. NetExtract[net, lspec] extracts the layer identified by lspec from \
within the NetGraph or NetChain object net. NetExtract[net, {lspec, \
\"\\!\\(\\*param\"}] extracts the value of the parameter param from the layer \
identified by lspec in net. NetExtract[net, NetArray[spec]] extracts the \
value of a shared array within a network or layer. NetExtract[coder, \
\"\\!\\(\\*param\"] extracts the value of a parameter for the specified \
NetEncoder or NetDecoder. NetExtract[\[Ellipsis], {spec1, spec2, \
\[Ellipsis]}] extracts a set of elements, where each speci is a list."}, 
 {"NetFlatten", "NetFlatten[net] collapses nested NetChain and NetGraph \
objects within net. NetFlatten[net, n] collapses up to nesting level n."}, 
 {"NetFoldOperator", "NetFoldOperator[net] represents a net in which net is \
folded over a sequence of inputs, maintaining a recurrent state. \
NetFoldOperator[net, {\"\\!\\(\\*out_i\"->\"\\!\\(\\*in_1\", \[Ellipsis]}] \
represents a net in which net is folded over its inputs, maintaining a \
recurrent state by feeding the outi of each step back to the ini of the next \
step. NetFoldOperator[net, feedback, {\"\\!\\(\\*const_1\", \
\"\\!\\(\\*const_2\", \[Ellipsis]}] treats the inputs consti to net as being \
constant instead of mapped over. NetFoldOperator[net, feedback, constants, \
{\"\\!\\(\\*out_1\", \[Ellipsis]}] returns the sequence of values for the \
specific outputs outi."}, {"NetGANOperator", "NetGANOperator[{generator, \
discriminator}] represents a network to perform generative adversarial \
network (GAN) training with a generative net generator and a classification \
net discriminator. NetGANOperator[{generator, discriminator}, loss] specifies \
the loss type to be used."}, {"NetGraph", "NetGraph[{layer1, layer2, \
\[Ellipsis]}, {m1->n1, m2->n2, \[Ellipsis]}] specifies a neural net defined \
by a graph in which the output of layer mi is given as input to layer ni. \
NetGraph[\[LeftAssociation]\"\\!\\(\\*name_1\"->layer1, \
\"\\!\\(\\*name_2\"->layer2, \[Ellipsis]\[RightAssociation], \
{\"\\!\\(\\*name_m1\"->\"\\!\\(\\*name_n1\", \[Ellipsis]}] specifies a net \
with explicitly named layers. NetGraph[layer] converts a layer or a NetChain \
into an equivalent minimal NetGraph."}, {"NetInitialize", "NetInitialize[net] \
gives a net in which all uninitialized learnable parameters in net have been \
given initial values. NetInitialize[net, All] gives a net in which all \
learnable parameters have been given initial values."}, 
 {"NetInsert", "NetInsert[chain, layer, i] inserts a layer into a NetChain \
before the layer at position i. NetInsert[chain, \"\\!\\(\\*name\"->layer, \
\"\\!\\(\\*pos\"] inserts a named layer into a NetChain before the layer at \
the given position."}, {"NetInsertSharedArrays", "NetInsertSharedArrays[net] \
converts all ordinary arrays in net into NetSharedArray objects. \
NetInsertSharedArrays[net, \"\\!\\(\\*prefix\"] uses a prefix for the names \
of all newly shared arrays."}, {"NetJoin", "NetJoin[chain1, chain2, \
\[Ellipsis]] connects a series of NetChain objects to form a single \
NetChain."}, {"NetMapOperator", "NetMapOperator[net] represents a net in \
which net is mapped over a sequence of inputs to give a sequence of outputs."}\
, {"NetMapThreadOperator", "NetMapThreadOperator[mapnet] represents a net in \
which mapnet is mapped over one or more inputs to give one or more outputs. \
NetMapThreadOperator[mapnet, n] represents a net in which mapnet is mapped \
over its inputs at depth n. NetMapThreadOperator[mapnet, \
\[LeftAssociation]\"\\!\\(\\*input_1\"->n1, \"\\!\\(\\*input_2\"->n2, \
\[Ellipsis]\[RightAssociation]] represents a net in which mapnet is mapped \
over the input named inputi at depth ni, and all other inputs are \
replicated."}, {"NetMeasurements", "NetMeasurements[net, data, measurement] \
computes the requested measurement for the net evaluated on data. \
NetMeasurements[net, data, {mspec1, mspec2, \[Ellipsis]}] computes a list of \
measurements for the net evaluated on data."}, 
 {"NetModel", "NetModel[\"\\!\\(\\*name\"] obtains a neural net model with \
the specified name from the Neural Net Repository. \
NetModel[{\"\\!\\(\\*name\", \"\\!\\(\\*param_1\"->setting1, \[Ellipsis]}] \
obtains a specified model from a parameterized family of models. \
NetModel[model, \"\\!\\(\\*prop\"] gives property prop of the model. \
NetModel[] gives a dataset of available pre-trained neural net models."}, 
 {"NetNestOperator", "NetNestOperator[net, n] represents a net in which net \
is applied n times to the input."}, {"NetPairEmbeddingOperator", "NetPairEmbe\
ddingOperator[net] represents a net that takes a pair of arrays, embeds them \
into a vector space using net, and outputs the distance under the embedding. \
NetPairEmbeddingOperator[net, opts] includes options for distance function to \
use and other parameters."}, {"NetPort", "NetPort[{n, \"\\!\\(\\*port\"}] \
represents the specified port for layer number n in a NetGraph or similar \
construct. NetPort[{\"\\!\\(\\*name\", \"\\!\\(\\*port\"}] represents the \
specified port for the layer with the specified name. NetPort[spec, port] is \
treated as equivalent to NetPort[{spec, port}]. NetPort[\"\\!\\(\\*port\"] \
represents the specified input or output port for a complete net. \
NetPort[All, \"States\"] represents the set of all states in a net associated \
with recurrent layers such as LongShortTermMemoryLayer."}, 
 {"NetPortGradient", "NetPortGradient[\"\\!\\(\\*port\"] represents the \
gradient of the output of a net with respect to the value of the specified \
input port. NetPortGradient[\"\\!\\(\\*param\"] represents the gradient of \
the output with respect to a learned parameter named param. \
NetPortGradient[{layer1, layer2, \[Ellipsis], \"\\!\\(\\*param\"}] represents \
the gradient with respect to a parameter at a specific position in a net."}, 
 {"NetPrepend", "NetPrepend[chain, layer] prepends a layer onto a NetChain. \
NetPrepend[chain, {layer1, layer2, \[Ellipsis]}] prepends several layers to a \
NetChain."}, {"NetRename", "NetRename[net, \
\"\\!\\(\\*old\"->\"\\!\\(\\*new\"] gives a net in which the name old for a \
layer is replaced with new. NetRename[net, {rule1, rule2, \[Ellipsis]}] \
performs all renamings specified by the rulei. NetRename[net, f] use a \
function f to map existing layer names to new names."}, 
 {"NetReplace", "NetReplace[net, patt->layer] gives a net in which all layers \
matching patt are replaced with layer. NetReplace[net, {rule1, rule2, \
\[Ellipsis]}] performs all replacements specified by the rulei."}, 
 {"NetReplacePart", "NetReplacePart[layer, \"\\!\\(\\*array\"->value] \
replaces an array within a layer, returning a new layer. NetReplacePart[net, \
\"\\!\\(\\*port\"->type] returns a new layer or network in which an input or \
output port has the specified type. NetReplacePart[net, \
\"\\!\\(\\*input\"->encoder] attaches a NetEncoder[\[Ellipsis]] to a \
specified input port. NetReplacePart[net, \"\\!\\(\\*output\"->decoder] \
attaches a NetDecoder[\[Ellipsis]] to a specified output port. \
NetReplacePart[net, lspec->layer] returns a new NetChain or NetGraph in which \
the layer identified by lspec has been replaced. NetReplacePart[net, \
NetArray[name]->value] sets a shared array within a network or layer to a \
specified value. NetReplacePart[coder, \"\\!\\(\\*param\"->value] returns a \
new NetEncoder[\[Ellipsis]] or NetDecoder[\[Ellipsis]] in which a parameter \
has been replaced. NetReplacePart[net, {lspec, pspec}->value] makes a \
replacement of a part pspec of a layer or coder lspec within a NetGraph or \
NetChain. NetReplacePart[\[Ellipsis], {spec1->val1, spec2->val2, \
\[Ellipsis]}] makes multiple simultaneous replacements."}, 
 {"NetStateObject", "NetStateObject[net] creates an object derived from net \
that represents a neural net with additional stored state information that is \
updated when the net is applied to data. NetStateObject[net, seed] creates an \
object in which additional stored state information is initialized using \
seed."}, {"NetTake", "NetTake[net, end] takes only those layers up to end in \
a NetChain or NetGraph. NetTake[net, {start, end}] takes only those layers \
between start and end in a NetChain or NetGraph."}, 
 {"NetTrain", "NetTrain[net, {input1->output1, input2->output2, \[Ellipsis]}] \
trains the specified neural net by giving the inputi as input and minimizing \
the discrepancy between the outputi and the actual output of the net, using \
an automatically chosen loss function. NetTrain[net, \
\[LeftAssociation]port1->{data11, data12, \[Ellipsis]}, port2->{\[Ellipsis]}, \
\[Ellipsis]\[RightAssociation]] trains the specified net by supplying \
training data at the specified ports. NetTrain[net, \"\\!\\(\\*dataset\"] \
trains on a named dataset from the Wolfram Data Repository. NetTrain[net, f] \
calls the function f during training to produce batches of training data. \
NetTrain[net, data, \"\\!\\(\\*prop\"] gives data associated with a specific \
property prop of the training session. NetTrain[net, data, All] gives a \
NetTrainResultsObject[\[Ellipsis]] that summarizes information about the \
training session."}, {"NetTrainResultsObject", "NetTrainResultsObject[\
\[Ellipsis]] represents an object generated by NetTrain that contains the \
trained net and other information about the training process."}, 
 {"NetworkPacketCapture", "NetworkPacketCapture[] creates a temporary \
interactive interface for capturing information on network packets \
transmitted or received through all network interfaces on your computer. \
NetworkPacketCapture[service] captures only packets associated with the \
specified network service. NetworkPacketCapture[port] captures only packets \
associated with the specified port. NetworkPacketCapture[spec] captures only \
packets matching the specification spec."}, {"NetworkPacketRecording", "Netwo\
rkPacketRecording[t] records information on network packets transmitted or \
received through all network interfaces on your computer for t seconds. \
NetworkPacketRecording[t, service] records only packets associated with the \
specified network service. NetworkPacketRecording[t, port] records only \
packets associated with the specified port. NetworkPacketRecording[t, {port1, \
port2, \[Ellipsis]}] records only packets associated with any of the ports \
porti. NetworkPacketRecording[t, spec] records only packets matching the \
specification spec."}, {"NetworkPacketTrace", "NetworkPacketTrace[expr] \
evaluates expr and returns information on network packets transmitted or \
received through all network interfaces on your computer during the time of \
the evaluation, together with the result of the evaluation. \
NetworkPacketTrace[expr, service] records only packets associated with the \
specified network service. NetworkPacketTrace[expr, port] records only \
packets associated with the specified port. NetworkPacketTrace[expr, {port1, \
port2, \[Ellipsis]}] records only packets associated with any of the ports \
porti. NetworkPacketTrace[expr, spec] records only packets matching the \
specification spec."}, {"NeumannValue", "NeumannValue[val, pred] represents a \
Neumann boundary value val, specified on the part of the boundary of the \
region given to NDSolve and related functions where pred is True."}, 
 {"NevilleThetaC", 
  "NevilleThetaC[z, m] gives the Neville theta function \[CurlyTheta]c \
(z|m)."}, {"NevilleThetaD", 
  "NevilleThetaD[z, m] gives the Neville theta function \[CurlyTheta]d \
(z|m)."}, {"NevilleThetaN", 
  "NevilleThetaN[z, m] gives the Neville theta function \[CurlyTheta]n \
(z|m)."}, {"NevilleThetaS", 
  "NevilleThetaS[z, m] gives the Neville theta function \[CurlyTheta]s \
(z|m)."}, {"NextCell", "NextCell[] returns the CellObject corresponding to \
the cell directly below the currently evaluating cell. NextCell[cellobj] \
starts looking from the given cell. NextCell[NotebookSelection[nbobj]] starts \
looking from the bottommost selected item."}, {"NextDate", "NextDate[gran] \
gives the next occurring date of the specified granularity type gran. \
NextDate[daytype] gives the next day corresponding to the specified daytype. \
NextDate[date, gran] gives the next date of the given granularity relative to \
the specified date."}, {"NextPrime", "NextPrime[x] gives the smallest prime \
above x. NextPrime[x, k] gives the k^th -next prime above x."}, 
 {"NeymanScottPointProcess", "NeymanScottPointProcess[\[Mu], \[Lambda], \
rdist, d] represents a Neyman-Scott point process with density function \
\[Mu], cluster mean \[Lambda] and radial cluster point distribution rdist in \
\[DoubleStruckCapitalR]^d. NeymanScottPointProcess[\[Mu], \[Lambda], mdist, \
d] uses a multivariate cluster point distribution mdist in \
\[DoubleStruckCapitalR]^d."}, {"NicholsGridLines", "NicholsGridLines is an \
option to NicholsPlot that specifies contours of constant magnitude and \
constant phase of the closed-loop system."}, {"NicholsPlot", "NicholsPlot[lsy\
s] generates a Nichols plot of the transfer function for the system lsys. \
NicholsPlot[lsys, {\[Omega]min, \[Omega]max}] plots for the frequency range \
\[Omega]min to \[Omega]max. NicholsPlot[expr, {\[Omega], \[Omega]min, \
\[Omega]max}] plots expr using the variable \[Omega]."}, 
 {"NightHemisphere", "NightHemisphere[] is a two-dimensional GeoGraphics \
primitive that represents the half of the Earth currently in darkness. \
NightHemisphere[datespec] represents the night half of the Earth for the \
specified date."}, {"NoWhitespace", "NoWhitespace represents the absence of \
whitespace between elements in a grammar rules pattern."}, 
 {"NominalVariables", "NominalVariables is an option for statistical \
functions such as LinearModelFit that specifies which variables should be \
treated as having discrete values specified by names."}, 
 {"NonCommutativeMultiply", "a**b**c is a general associative, but \
non-commutative, form of multiplication."}, {"NonConstants", "NonConstants is \
an option for D which gives a list of objects to be taken to depend \
implicitly on the differentiation variables."}, 
 {"NonNegative", "NonNegative[x] gives True if x is a non-negative number."}, 
 {"NonNegativeIntegers", "NonNegativeIntegers represents the domain of \
non-negative integers, as in x\[Element]NonNegativeIntegers."}, 
 {"NonNegativeRationals", "NonNegativeRationals represents the domain of \
non-negative rational numbers, as in x\[Element]NonNegativeRationals."}, 
 {"NonNegativeReals", 
  "NonNegativeReals represents the domain of non-negative real numbers."}, 
 {"NonPositive", "NonPositive[x] gives True if x is a non-positive number."}, 
 {"NonPositiveIntegers", "NonPositiveIntegers represents the domain of \
non-positive integers, as in x\[Element]NonPositiveIntegers."}, 
 {"NonPositiveRationals", "NonPositiveRationals represents the domain of \
non-positive rational numbers, as in x\[Element]NonPositiveRationals."}, 
 {"NonPositiveReals", 
  "NonPositiveReals represents the domain of non-positive real numbers."}, 
 {"NoncentralBetaDistribution", "NoncentralBetaDistribution[\[Alpha], \
\[Beta], \[Delta]] represents a noncentral beta distribution with shape \
parameters \[Alpha], \[Beta] and noncentrality parameter \[Delta]."}, 
 {"NoncentralChiSquareDistribution", "NoncentralChiSquareDistribution[\[Nu], \
\[Lambda]] represents a noncentral \[Chi]^2 distribution with \[Nu] degrees \
of freedom and noncentrality parameter \[Lambda]."}, 
 {"NoncentralFRatioDistribution", "NoncentralFRatioDistribution[n, m, \
\[Lambda]] represents a noncentral F-ratio distribution with n numerator \
degrees of freedom, m denominator degrees of freedom, and numerator \
noncentrality parameter \[Lambda]. NoncentralFRatioDistribution[n, m, \
\[Lambda], \[Eta]] represents a doubly noncentral F-ratio distribution with \
numerator noncentrality parameter \[Lambda] and denominator noncentrality \
parameter \[Eta]."}, {"NoncentralStudentTDistribution", "NoncentralStudentTDi\
stribution[\[Nu], \[Delta]] represents a noncentral Student t distribution \
with \[Nu] degrees of freedom and noncentrality parameter \[Delta]."}, 
 {"NondimensionalizationTransform", "NondimensionalizationTransform[eq, \
ovars, fvars] nondimensionalizes eq, replacing original variables ovars with \
the variables fvars. NondimensionalizationTransform[eq, ovars, fvars, prop] \
returns a property associated with the nondimensionalization of eq."}, 
 {"None", "None is a setting used for certain options."}, 
 {"NoneTrue", "NoneTrue[{e1, e2, \[Ellipsis]}, test] yields True if test[ei] \
is False for all of the ei. NoneTrue[expr, test, level] tests parts of expr \
at level level. NoneTrue[test] represents an operator form of NoneTrue that \
can be applied to an expression."}, {"NonlinearModelFit", "NonlinearModelFit[\
{y1, y2, \[Ellipsis]}, form, {\[Beta]1, \[Ellipsis]}, x] constructs a \
nonlinear model with structure form that fits the yi for successive x values \
1, 2, \[Ellipsis] using the parameters \[Beta]1, \[Ellipsis]. \
NonlinearModelFit[{{x11, x12, \[Ellipsis], y1}, {x21, x22, \[Ellipsis], y2}, \
\[Ellipsis]}, form, {\[Beta]1, \[Ellipsis]}, {x1, \[Ellipsis]}] constructs a \
nonlinear model where form depends on the variables xk. \
NonlinearModelFit[data, {form, cons}, {\[Beta]1, \[Ellipsis]}, {x1, \
\[Ellipsis]}] constructs a nonlinear model subject to the parameter \
constraints cons."}, {"NonlinearStateSpaceModel", "NonlinearStateSpaceModel[{\
f, g}, x, u] represents the model x'(t)==f(x(t), u(t)), y(t)==g(x(t), u(t)). \
NonlinearStateSpaceModel[sys] gives a state-space representation \
corresponding to the systems model sys. NonlinearStateSpaceModel[eqns, {{x1, \
x10}, \[Ellipsis]}, {{u1, u10}, \[Ellipsis]}, {g1, \[Ellipsis]}, t] gives the \
state-space model of the differential equations eqns with dependent variables \
xi, input variables ui, operating vaues xi0 and ui0, outputs gi, and \
independent variable t."}, {"NonlocalMeansFilter", "NonlocalMeansFilter[image\
, r] applies a nonlocal means filter to image by comparing a range r \
neighborhood to its nearby neighborhoods. NonlocalMeansFilter[image, r, ns] \
assumes an additive noise power value ns for comparing neighborhoods. \
NonlocalMeansFilter[image, r, ns, w] compares neighborhoods in a range w \
window."}, {"Nor", "Nor[e1, e2, \[Ellipsis]] is the logical NOR function. It \
evaluates its arguments in order, giving False immediately if any of them are \
True, and True if they are all False."}, {"NorlundB", "NorlundB[n, a] gives \
N\[OSlash]rlund polynomials Bn(a) of degree n in a. NorlundB[n, a, x] gives \
generalized Bernoulli polynomials Bn(a)(x)."}, 
 {"Norm", "Norm[expr] gives the norm of a number, vector, or matrix. \
Norm[expr, p] gives the p -norm."}, {"NormFunction", "NormFunction is an \
option for functions such as FindFit and NDSolve which gives a function to be \
minimized in generating results."}, {"Normal", "Normal[expr] converts expr to \
a normal expression from a variety of special forms. Normal[expr, h] converts \
objects with head h in expr to normal expressions. Normal[expr, {h1, h2, \
\[Ellipsis]}] converts objects with head hi to normal expressions."}, 
 {"NormalDistribution", "NormalDistribution[\[Mu], \[Sigma]] represents a \
normal (Gaussian) distribution with mean \[Mu] and standard deviation \
\[Sigma]. NormalDistribution[] represents a normal distribution with zero \
mean and unit standard deviation."}, {"NormalMatrixQ", "NormalMatrixQ[m] \
gives True if m is an explicitly normal matrix, and False otherwise."}, 
 {"NormalizationLayer", "NormalizationLayer[] represents a trainable net \
layer that normalizes its input data across the second and subsequent \
dimensions and applies an independent scaling and bias to each component of \
the first dimension. NormalizationLayer[aggregationlevels] normalizes its \
input data across the specified aggregation levels and applies a learned \
scaling and bias on the remaining levels. \
NormalizationLayer[aggregationlevels, scalinglevels] applies a learned \
scaling and bias at the specified scaling levels."}, 
 {"Normalize", "Normalize[v] gives the normalized form of a vector v. \
Normalize[z] gives the normalized form of a complex number z. Normalize[expr, \
f] normalizes with respect to the norm function f."}, 
 {"Normalized", "Normalized is an option that determines whether to test if \
matrix rows are normalized."}, {"NormalizedSquaredEuclideanDistance", "Normal\
izedSquaredEuclideanDistance[u, v] gives the normalized squared Euclidean \
distance between vectors u and v."}, {"NormalsFunction", "NormalsFunction is \
an option for Plot3D and related functions that specifies a function to apply \
to determine the effective surface normals at every point."}, 
 {"Not", "!expr is the logical NOT function. It gives False if expr is True, \
and True if it is False."}, {"NotCongruent", "NotCongruent[x, y, \[Ellipsis]] \
displays as x\[NotCongruent]y\[NotCongruent]\[Ellipsis]."}, 
 {"NotCupCap", "NotCupCap[x, y, \[Ellipsis]] displays as \
x\[NotCupCap]y\[NotCupCap]\[Ellipsis]."}, {"NotDoubleVerticalBar", "NotDouble\
VerticalBar[x, y, \[Ellipsis]] displays as \
x\[NotDoubleVerticalBar]y\[NotDoubleVerticalBar]\[Ellipsis]."}, 
 {"NotElement", "NotElement[x, dom] or x\[NotElement]dom asserts that x is \
not an element of the domain dom. NotElement[x1|\[Ellipsis]|xn, dom] asserts \
that none of the xi are elements of dom. NotElement[patt, dom] asserts that \
any expression matching the pattern patt is not an element of the domain \
dom."}, {"NotEqualTilde", "NotEqualTilde[x, y, \[Ellipsis]] displays as \
x\[NotEqualTilde]y\[NotEqualTilde]\[Ellipsis]."}, 
 {"NotExists", "NotExists[x, y] displays as \[NotExists]xy."}, 
 {"NotGreater", "NotGreater[x, y, \[Ellipsis]] displays as \
x\[NotGreater]y\[NotGreater]\[Ellipsis]."}, {"NotGreaterEqual", "NotGreaterEq\
ual[x, y, \[Ellipsis]] displays as \
x\[NotGreaterEqual]y\[NotGreaterEqual]\[Ellipsis]."}, 
 {"NotGreaterFullEqual", "NotGreaterFullEqual[x, y, \[Ellipsis]] displays as \
x\[NotGreaterFullEqual]y\[NotGreaterFullEqual]\[Ellipsis]."}, 
 {"NotGreaterGreater", "NotGreaterGreater[x, y, \[Ellipsis]] displays as \
x\[NotGreaterGreater]y\[NotGreaterGreater]\[Ellipsis]."}, 
 {"NotGreaterLess", "NotGreaterLess[x, y, \[Ellipsis]] displays as \
x\[NotGreaterLess]y\[NotGreaterLess]\[Ellipsis]."}, 
 {"NotGreaterSlantEqual", "NotGreaterSlantEqual[x, y, \[Ellipsis]] displays \
as x\[NotGreaterSlantEqual]y\[NotGreaterSlantEqual]\[Ellipsis]."}, 
 {"NotGreaterTilde", "NotGreaterTilde[x, y, \[Ellipsis]] displays as \
x\[NotGreaterTilde]y\[NotGreaterTilde]\[Ellipsis]."}, 
 {"NotHumpDownHump", "NotHumpDownHump[x, y, \[Ellipsis]] displays as \
x\[NotHumpDownHump]y\[NotHumpDownHump]\[Ellipsis]."}, 
 {"NotHumpEqual", "NotHumpEqual[x, y, \[Ellipsis]] displays as \
x\[NotHumpEqual]y\[NotHumpEqual]\[Ellipsis]."}, 
 {"NotLeftTriangle", "NotLeftTriangle[x, y, \[Ellipsis]] displays as \
x\[NotLeftTriangle]y\[NotLeftTriangle]\[Ellipsis]."}, 
 {"NotLeftTriangleBar", "NotLeftTriangleBar[x, y, \[Ellipsis]] displays as \
x\[NotLeftTriangleBar]y\[NotLeftTriangleBar]\[Ellipsis]."}, 
 {"NotLeftTriangleEqual", "NotLeftTriangleEqual[x, y, \[Ellipsis]] displays \
as x\[NotLeftTriangleEqual]y\[NotLeftTriangleEqual]\[Ellipsis]."}, 
 {"NotLess", 
  "NotLess[x, y, \[Ellipsis]] displays as x\[NotLess]y\[NotLess]\[Ellipsis]."}\
, {"NotLessEqual", "NotLessEqual[x, y, \[Ellipsis]] displays as \
x\[NotLessEqual]y\[NotLessEqual]\[Ellipsis]."}, 
 {"NotLessFullEqual", "NotLessFullEqual[x, y, \[Ellipsis]] displays as \
x\[NotLessFullEqual]y\[NotLessFullEqual]\[Ellipsis]."}, 
 {"NotLessGreater", "NotLessGreater[x, y, \[Ellipsis]] displays as \
x\[NotLessGreater]y\[NotLessGreater]\[Ellipsis]."}, 
 {"NotLessLess", "NotLessLess[x, y, \[Ellipsis]] displays as \
x\[NotLessLess]y\[NotLessLess]\[Ellipsis]."}, {"NotLessSlantEqual", "NotLessS\
lantEqual[x, y, \[Ellipsis]] displays as \
x\[NotLessSlantEqual]y\[NotLessSlantEqual]\[Ellipsis]."}, 
 {"NotLessTilde", "NotLessTilde[x, y, \[Ellipsis]] displays as \
x\[NotLessTilde]y\[NotLessTilde]\[Ellipsis]."}, 
 {"NotNestedGreaterGreater", "NotNestedGreaterGreater[x, y, \[Ellipsis]] \
displays as \
x\[NotNestedGreaterGreater]y\[NotNestedGreaterGreater]\[Ellipsis]."}, 
 {"NotNestedLessLess", "NotNestedLessLess[x, y, \[Ellipsis]] displays as \
x\[NotNestedLessLess]y\[NotNestedLessLess]\[Ellipsis]."}, 
 {"NotPrecedes", "NotPrecedes[x, y, \[Ellipsis]] displays as \
x\[NotPrecedes]y\[NotPrecedes]\[Ellipsis]."}, {"NotPrecedesEqual", "NotPreced\
esEqual[x, y, \[Ellipsis]] displays as \
x\[NotPrecedesEqual]y\[NotPrecedesEqual]\[Ellipsis]."}, 
 {"NotPrecedesSlantEqual", "NotPrecedesSlantEqual[x, y, \[Ellipsis]] displays \
as x\[NotPrecedesSlantEqual]y\[NotPrecedesSlantEqual]\[Ellipsis]."}, 
 {"NotPrecedesTilde", "NotPrecedesTilde[x, y, \[Ellipsis]] displays as \
x\[NotPrecedesTilde]y\[NotPrecedesTilde]\[Ellipsis]."}, 
 {"NotReverseElement", "NotReverseElement[x, y, \[Ellipsis]] displays as \
x\[NotReverseElement]y\[NotReverseElement]\[Ellipsis]."}, 
 {"NotRightTriangle", "NotRightTriangle[x, y, \[Ellipsis]] displays as \
x\[NotRightTriangle]y\[NotRightTriangle]\[Ellipsis]."}, 
 {"NotRightTriangleBar", "NotRightTriangleBar[x, y, \[Ellipsis]] displays as \
x\[NotRightTriangleBar]y\[NotRightTriangleBar]\[Ellipsis]."}, 
 {"NotRightTriangleEqual", "NotRightTriangleEqual[x, y, \[Ellipsis]] displays \
as x\[NotRightTriangleEqual]y\[NotRightTriangleEqual]\[Ellipsis]."}, 
 {"NotSquareSubset", "NotSquareSubset[x, y, \[Ellipsis]] displays as \
x\[NotSquareSubset]y\[NotSquareSubset]\[Ellipsis]."}, 
 {"NotSquareSubsetEqual", "NotSquareSubsetEqual[x, y, \[Ellipsis]] displays \
as x\[NotSquareSubsetEqual]y\[NotSquareSubsetEqual]\[Ellipsis]."}, 
 {"NotSquareSuperset", "NotSquareSuperset[x, y, \[Ellipsis]] displays as \
x\[NotSquareSuperset]y\[NotSquareSuperset]\[Ellipsis]."}, 
 {"NotSquareSupersetEqual", "NotSquareSupersetEqual[x, y, \[Ellipsis]] \
displays as x\[NotSquareSupersetEqual]y\[NotSquareSupersetEqual]\[Ellipsis]."}\
, {"NotSubset", "NotSubset[x, y, \[Ellipsis]] displays as \
x\[NotSubset]y\[NotSubset]\[Ellipsis]."}, {"NotSubsetEqual", "NotSubsetEqual[\
x, y, \[Ellipsis]] displays as \
x\[NotSubsetEqual]y\[NotSubsetEqual]\[Ellipsis]."}, 
 {"NotSucceeds", "NotSucceeds[x, y, \[Ellipsis]] displays as \
x\[NotSucceeds]y\[NotSucceeds]\[Ellipsis]."}, {"NotSucceedsEqual", "NotSuccee\
dsEqual[x, y, \[Ellipsis]] displays as \
x\[NotSucceedsEqual]y\[NotSucceedsEqual]\[Ellipsis]."}, 
 {"NotSucceedsSlantEqual", "NotSucceedsSlantEqual[x, y, \[Ellipsis]] displays \
as x\[NotSucceedsSlantEqual]y\[NotSucceedsSlantEqual]\[Ellipsis]."}, 
 {"NotSucceedsTilde", "NotSucceedsTilde[x, y, \[Ellipsis]] displays as \
x\[NotSucceedsTilde]y\[NotSucceedsTilde]\[Ellipsis]."}, 
 {"NotSuperset", "NotSuperset[x, y, \[Ellipsis]] displays as \
x\[NotSuperset]y\[NotSuperset]\[Ellipsis]."}, {"NotSupersetEqual", "NotSupers\
etEqual[x, y, \[Ellipsis]] displays as \
x\[NotSupersetEqual]y\[NotSupersetEqual]\[Ellipsis]."}, 
 {"NotTilde", "NotTilde[x, y, \[Ellipsis]] displays as \
x\[NotTilde]y\[NotTilde]\[Ellipsis]."}, {"NotTildeEqual", "NotTildeEqual[x, \
y, \[Ellipsis]] displays as x\[NotTildeEqual]y\[NotTildeEqual]\[Ellipsis]."}, 
 {"NotTildeFullEqual", "NotTildeFullEqual[x, y, \[Ellipsis]] displays as \
x\[NotTildeFullEqual]y\[NotTildeFullEqual]\[Ellipsis]."}, 
 {"NotTildeTilde", "NotTildeTilde[x, y, \[Ellipsis]] displays as \
x\[NotTildeTilde]y\[NotTildeTilde]\[Ellipsis]."}, 
 {"NotVerticalBar", "NotVerticalBar[x, y, \[Ellipsis]] displays as \
x\[NotVerticalBar]y\[NotVerticalBar]\[Ellipsis]."}, 
 {"Notebook", "Notebook[{cell1, cell2, \[Ellipsis]}] is the low-level \
construct that represents a notebook manipulated by the Wolfram System front \
end."}, {"NotebookApply", "NotebookApply[notebook, data] writes data into a \
notebook at the current selection, replacing the first selection placeholder \
in data by the current selection, and then setting the current selection to \
be just after the data written. NotebookApply[cell, data] writes data into a \
notebook in place of the specified cell. NotebookApply[notebook, data, sel] \
writes data into a notebook and then sets the current selection to be as \
specified by sel."}, {"NotebookAutoSave", "NotebookAutoSave is a notebook \
option that specifies whether the notebook should automatically be saved \
after each piece of output generated by evaluation in it."}, 
 {"NotebookClose", "NotebookClose[notebook] closes the notebook corresponding \
to the specified notebook object. NotebookClose[] closes the current \
evaluation notebook."}, {"NotebookDelete", "NotebookDelete[notebook] deletes \
the current selection in the notebook corresponding to the specified notebook \
object. NotebookDelete[obj] deletes the given cell or box object. \
NotebookDelete[{obj1, obj2, \[Ellipsis]}] deletes all specified objects. \
NotebookDelete[] deletes the current selection in the current evaluation \
notebook."}, {"NotebookDirectory", "NotebookDirectory[] gives the directory \
of the current evaluation notebook. NotebookDirectory[nb] gives the directory \
for the notebook specified by nb."}, {"NotebookDynamicExpression", "NotebookD\
ynamicExpression is an option for notebooks that specifies an expression to \
be dynamically updated whenever that notebook is visible."}, 
 {"NotebookEvaluate", "NotebookEvaluate[notebook] evaluates all the \
evaluatable cells in notebook."}, {"NotebookEventActions", "NotebookEventActi\
ons is a notebook option that gives a list of actions to perform when \
specified events occur in connection with the notebook."}, 
 {"NotebookFileName", "NotebookFileName[] gives the file name of the current \
evaluation notebook. NotebookFileName[nb] gives the file name for the \
notebook specified by nb."}, {"NotebookFind", "NotebookFind[obj, data] sets \
the current selection in the specified notebook object to be the next \
occurrence of data. NotebookFind[obj, data, Previous] sets the current \
selection to be the previous occurrence. NotebookFind[obj, data, All] sets \
the current selection to be all occurrences. NotebookFind[obj, data, dir, \
elems] sets the current selection to be the occurrence in the direction dir \
and searches the elements of cells specified by elems."}, 
 {"NotebookGet", "NotebookGet[obj] gets the raw expression corresponding to \
the notebook represented by the notebook object obj. NotebookGet[] gets the \
raw expression corresponding to the currently selected notebook."}, 
 {"NotebookImport", "NotebookImport[notebook, style] imports cells with the \
given cell style from the specified notebook. NotebookImport[notebook, \
style->form] imports cells in the form specified by form."}, 
 {"NotebookInformation", "NotebookInformation[] gives a list of properties of \
the current evaluation notebook. NotebookInformation[notebook] gives a list \
of properties for the specified notebook."}, {"NotebookLocate", "NotebookLoca\
te[\"\\!\\(\\*tag\"] locates all cells with the specified tag in your current \
input notebook, selecting the cells and scrolling to the position of the \
first one. NotebookLocate[{\"\\!\\(\\*file\", \"\\!\\(\\*tag\"}] if necessary \
opens the notebook stored in file, then locates cells with the specified \
tag."}, {"NotebookObject", "NotebookObject[id] is an object that represents \
an open notebook in the front end."}, {"NotebookOpen", "NotebookOpen[\"\\!\\(\
\\*name\"] opens an existing notebook with the specified name, returning the \
corresponding notebook object. NotebookOpen[\"\\!\\(\\*name\", options] opens \
a notebook using the options given. NotebookOpen[\"http://\\!\\(\\*url\", \
\[Ellipsis]] opens a notebook from any accessible URL."}, 
 {"NotebookPrint", "NotebookPrint[expr] sends a notebook containing expr to \
your default printer. NotebookPrint[notebook] sends the specified notebook to \
your default printer. NotebookPrint[notebook, \"\\!\\(\\*file.\\!\\(\\*ext\"] \
saves a print-ready form of the notebook to a file in the format indicated by \
the file extension ext. NotebookPrint[] sends the current evaluation notebook \
to your default printer."}, {"NotebookPut", "NotebookPut[expr] creates a \
notebook corresponding to expr and makes it the currently selected notebook \
in the front end. NotebookPut[] creates a new empty notebook. \
NotebookPut[expr, obj] replaces the notebook represented by the notebook \
object obj with one corresponding to expr."}, {"NotebookRead", "NotebookRead[\
notebook] gives the expression corresponding to the current selection in the \
specified notebook object. NotebookRead[obj] gives the expression \
corresponding to the given cell or box object. NotebookRead[{obj1, obj2, \
\[Ellipsis]}] gives a list of expressions corresponding to the obji."}, 
 {"NotebookSave", "NotebookSave[notebook] saves the current version of the \
specified notebook. NotebookSave[notebook, \"\\!\\(\\*file\"] saves the \
notebook in the specified file. NotebookSave[] saves the current version of \
the current evaluation notebook in a file."}, {"NotebookSelection", "Notebook\
Selection[] represents the current selection in the current evaluation \
notebook in the front end. NotebookSelection[nb] represents the current \
selection associated with the open notebook nb."}, 
 {"NotebookTemplate", "NotebookTemplate[nb] yields a TemplateObject that \
represents a notebook template to be applied using functions like \
GenerateDocument and FileTemplateApply."}, {"NotebookWrite", "NotebookWrite[n\
otebook, data] writes data into a notebook at the current selection, setting \
the current selection to be just after the data written. NotebookWrite[obj, \
data] replaces the given cell or box object instead of the current selection. \
NotebookWrite[obj, data, sel] writes data into a notebook, setting the \
current selection to be as specified by sel."}, 
 {"Notebooks", 
  "Notebooks[] gives a list of notebooks currently open in the front end."}, 
 {"NotebooksMenu", "NotebooksMenu is a global option that specifies which \
recently opened notebooks are listed under the File menu."}, 
 {"Nothing", "Nothing represents an element of a list that will automatically \
be removed. Nothing[\[Ellipsis]] gives Nothing."}, 
 {"NotificationFunction", "NotificationFunction is an option that specifies \
how notifications should be sent from background tasks."}, 
 {"Now", "Now gives a DateObject representing the current moment in time."}, 
 {"NuclearExplosionData", "NuclearExplosionData[entity, property] gives the \
value of the specified property for the nuclear explosion entity. \
NuclearExplosionData[{entity1, entity2, \[Ellipsis]}, property] gives a list \
of property values for the specified nuclear explosion entities. \
NuclearExplosionData[entity, property, annotation] gives the specified \
annotation associated with the given property."}, 
 {"NuclearReactorData", "NuclearReactorData[entity, property] gives the value \
of the specified property for the nuclear reactor entity. \
NuclearReactorData[{entity1, entity2, \[Ellipsis]}, property] gives a list of \
property values for the specified nuclear reactor entities. \
NuclearReactorData[entity, property, annotation] gives the specified \
annotation associated with the given property."}, 
 {"Null", "Null is a symbol used to indicate the absence of an expression or \
a result. It is not displayed in ordinary output. When Null appears as a \
complete output expression, no output is printed."}, 
 {"NullRecords", "NullRecords is an option for Read and related functions \
which specifies whether null records should be taken to exist between \
repeated record separators."}, {"NullSpace", "NullSpace[m] gives a list of \
vectors that forms a basis for the null space of the matrix m."}, 
 {"NullWords", "NullWords is an option for Read and related functions which \
specifies whether null words should be taken to exist between repeated word \
separators."}, {"Number", 
  "Number represents an exact integer or an approximate real number in Read."}\
, {"NumberCompose", "NumberCompose[{c1, \[Ellipsis], cn}, {u1, \[Ellipsis], \
un}] returns the quantity c1 u1 + \[Ellipsis] + cn un."}, 
 {"NumberDecompose", "NumberDecompose[x, {u1, \[Ellipsis], un}] returns a \
list of coefficients {c1, \[Ellipsis], cn} of a decomposition of the number x \
in the basis {u1, \[Ellipsis], un}."}, {"NumberDigit", "NumberDigit[x, n] \
returns the digit corresponding to 10^n in the real-valued number x. \
NumberDigit[x, n, b] returns the digit corresponding to b^n."}, 
 {"NumberExpand", "NumberExpand[x] gives a list of the decimal digits of x \
multiplied by their corresponding powers of 10. NumberExpand[x, b] expands x \
in base b. NumberExpand[x, b, len] gives a list of length len."}, 
 {"NumberFieldClassNumber", "NumberFieldClassNumber[\[Theta]] gives the class \
number for the algebraic number field \[DoubleStruckCapitalQ][\[Theta]] \
generated by \[Theta]."}, {"NumberFieldDiscriminant", "NumberFieldDiscriminan\
t[a] gives the discriminant of the field \[DoubleStruckCapitalQ][a] generated \
by the algebraic number a."}, {"NumberFieldFundamentalUnits", "NumberFieldFun\
damentalUnits[a] gives a list of fundamental units for the field \
\[DoubleStruckCapitalQ][a] generated by the algebraic number a."}, 
 {"NumberFieldIntegralBasis", "NumberFieldIntegralBasis[a] gives an integral \
basis for the field \[DoubleStruckCapitalQ][a] generated by the algebraic \
number a."}, {"NumberFieldNormRepresentatives", "NumberFieldNormRepresentativ\
es[a, m] gives a list of representatives of classes of algebraic integers of \
norm \[PlusMinus]m in the field \[DoubleStruckCapitalQ][a] generated by the \
algebraic number a."}, {"NumberFieldRegulator", "NumberFieldRegulator[a] \
gives the regulator of the field \[DoubleStruckCapitalQ][a] generated by the \
algebraic number a."}, {"NumberFieldRootsOfUnity", "NumberFieldRootsOfUnity[a\
] gives the roots of unity for the field \[DoubleStruckCapitalQ][a] generated \
by the algebraic number a."}, {"NumberFieldSignature", "NumberFieldSignature[\
a] gives the signature of the field \[DoubleStruckCapitalQ][a] generated by \
the algebraic number a."}, {"NumberForm", "NumberForm[expr, n] prints with \
approximate real numbers in expr given to n -digit precision. \
NumberForm[expr, {n, f}] prints with approximate real numbers having n \
digits, with f digits to the right of the decimal point. NumberForm[expr] \
prints using the default options of NumberForm."}, 
 {"NumberFormat", "NumberFormat is an option for NumberForm and related \
functions that specifies how the mantissa, base, and exponent should be \
assembled into a final print form."}, {"NumberLinePlot", "NumberLinePlot[{v1, \
v2, \[Ellipsis]}] plots the values vi on a number line. NumberLinePlot[pred, \
x] plots a number line illustrating the region pred. NumberLinePlot[pred, {x, \
xmin, xmax}] plots the number to extend over the interval from xmin to xmax. \
NumberLinePlot[{spec1, spec2, \[Ellipsis]}, \[Ellipsis]] plots several number \
lines."}, {"NumberMarks", "NumberMarks is an option for InputForm and related \
functions that specifies whether ` marks should be included in the printed \
forms of approximate numbers."}, {"NumberMultiplier", "NumberMultiplier is an \
option for NumberForm and related functions which gives the string to use as \
a multiplication sign in scientific notation."}, 
 {"NumberPadding", "NumberPadding is an option for NumberForm and related \
functions which gives strings to use as padding on the left- and right-hand \
sides of numbers."}, {"NumberPoint", "NumberPoint is an option for NumberForm \
and related functions that gives the string to use as a decimal point."}, 
 {"NumberQ", 
  "NumberQ[expr] gives True if expr is a number, and False otherwise."}, 
 {"NumberSeparator", "NumberSeparator is an option for NumberForm and related \
functions that gives the string to insert at breaks between digits."}, 
 {"NumberSigns", "NumberSigns is an option for NumberForm and related \
functions which gives strings to use as signs for negative and positive \
numbers."}, {"NumberString", 
  "NumberString represents the characters of a number in StringExpression."}, 
 {"Numerator", "Numerator[expr] gives the numerator of expr."}, 
 {"NumeratorDenominator", "NumeratorDenominator[expr] gives the list \
{Numerator[expr], Denominator[expr]} of expr."}, 
 {"NumericArray", "NumericArray[array, type] creates a numeric array of the \
specified type. NumericArray[array, type, method] uses method to convert \
numbers into type."}, {"NumericArrayQ", "NumericArrayQ[expr] gives True if \
expr is a valid NumericArray object, and False otherwise. NumericArrayQ[expr, \
tpatt] requires additionally that NumericArrayType[expr] match the pattern \
tpatt. NumericArrayQ[expr, tpatt, dpatt] requires additionally that \
ArrayDepth[expr] match the pattern dpatt."}, {"NumericArrayType", "NumericArr\
ayType[array] gives the underlying type of values used for each element in \
the NumericArray object."}, {"NumericFunction", "NumericFunction is an \
attribute that can be assigned to a symbol f to indicate that f[arg1, arg2, \
\[Ellipsis]] should be considered a numeric quantity whenever all the argi \
are numeric quantities."}, {"NumericQ", "NumericQ[expr] gives True if expr is \
a numeric quantity, and False otherwise."}, {"NumericalOrder", "NumericalOrde\
r[e1, e2] gives 1 if e1<e2, - 1 if e1>e2, 0 if e1 and e2 are identical or \
numerically the same and Order[e1, e2] if e1 and e2 are not numerically \
comparable."}, {"NumericalSort", 
  "NumericalSort[list] sorts the elements of list into numerical order."}, 
 {"NuttallWindow", 
  "NuttallWindow[x] represents a Nuttall window function of x."}, 
 {"NyquistGridLines", "NyquistGridLines is an option to NyquistPlot that \
specifies contours of constant magnitude and phase of a closed-loop system."}\
, {"NyquistPlot", "NyquistPlot[lsys] generates a Nyquist plot of the transfer \
function for the system lsys. NyquistPlot[lsys, {\[Omega]min, \[Omega]max}] \
plots for the frequency range \[Omega]min to \[Omega]max. NyquistPlot[expr, \
{\[Omega], \[Omega]min, \[Omega]max}] plots expr using the variable \
\[Omega]."}, {"O", "O[x]^n represents a term of order x^n. O[x]^n is \
generated to represent omitted higher-order terms in power series. O[x, x0]^n \
represents a term of order (x - x0)^n."}, 
 {"ONanGroupON", 
  "ONanGroupON[] represents the sporadic simple O'Nan group O'N."}, 
 {"ObservabilityGramian", "ObservabilityGramian[ssm] gives the observability \
Gramian of the state-space model ssm."}, {"ObservabilityMatrix", "Observabili\
tyMatrix[ssm] gives the observability matrix of the state-space model ssm."}, 
 {"ObservableDecomposition", "ObservableDecomposition[sys] yields the \
observable subsystem of the system sys. ObservableDecomposition[sys, {z1, \
\[Ellipsis]}] specifies the new coordinates zi."}, 
 {"ObservableModelQ", "ObservableModelQ[sys] gives True if the system sys is \
observable, and False otherwise. ObservableModelQ[{sys, sub}] gives True if \
the subsystem sub is observable."}, {"OceanData", "OceanData[entity, \
property] gives the value of the specified property for the ocean entity. \
OceanData[{entity1, entity2, \[Ellipsis]}, property] gives a list of property \
values for the specified ocean entities. OceanData[entity, property, \
annotation] gives the specified annotation associated with the given \
property."}, {"Octahedron", "Octahedron[] represents a regular octahedron \
centered at the origin with unit edge length. Octahedron[l] represents an \
octahedron with edge length l. Octahedron[{\[Theta], \[Phi]}, \[Ellipsis]] \
represents an octahedron rotated by an angle \[Theta] with respect to the z \
axis and angle \[Phi] with respect to the y axis. Octahedron[{x, y, z}, \
\[Ellipsis]] represents an octahedron centered at {x, y, z}."}, 
 {"OddQ", 
  "OddQ[expr] gives True if expr is an odd integer, and False otherwise."}, 
 {"Off", "Off[symbol::tag] switches off a message, so that it is no longer \
printed. Off[\"\\!\\(\\*name\"] switches off a named group of messages. \
Off[s] switches off tracing messages associated with the symbol s. Off[m1, \
m2, \[Ellipsis]] switches off several messages or message groups."}, 
 {"Offset", "Offset[{dx, dy}, position] gives the position of a graphical \
object obtained by starting at the specified position and then moving by \
absolute offset {dx, dy}."}, {"On", "On[symbol::tag] switches on a message, \
so that it can be printed. On[\"\\!\\(\\*name\"] switches on a named group of \
messages. On[s] switches on tracing for the symbol s. On[m1, m2, \[Ellipsis]] \
switches on several messages or message groups."}, 
 {"Once", "Once[expr] evaluates expr once in each Wolfram Language session, \
always returning the result from the first evaluation. Once[expr, loc] \
evaluates expr once and caches the result in persistence location loc."}, 
 {"OneIdentity", "OneIdentity is an attribute that can be assigned to a \
symbol f to indicate that f[x], f[f[x]], etc. are all equivalent to x for the \
purpose of pattern matching."}, {"Opacity", "Opacity[a] is a graphics \
directive that specifies that graphical objects that follow are to be \
displayed, if possible, with opacity a. Opacity[a, color] uses the specified \
color with opacity a."}, {"OpacityFunction", "OpacityFunction is an option \
for graphics functions that specifies a function to apply to determine \
opacity of elements."}, {"OpacityFunctionScaling", "OpacityFunctionScaling is \
an option to visualization functions such as DensityPlot3D that specifies \
whether arguments supplied to OpacityFunction should be scaled to lie between \
0 and 1."}, {"OpenAppend", "OpenAppend[\"\\!\\(\\*file\"] opens a file to \
append output to it, and returns an OutputStream object."}, 
 {"OpenRead", "OpenRead[\"\\!\\(\\*file\"] opens a file to read data from, \
and returns an InputStream object."}, {"OpenWrite", "OpenWrite[\"\\!\\(\\*fil\
e\"] opens a file to write output to it, and returns an OutputStream object. \
OpenWrite[] opens a new file in the default area for temporary files on your \
computer system."}, {"Opener", "Opener[x] represents an opener with setting \
x, displayed as when x is True and when x is False. Opener[Dynamic[x]] takes \
the setting to be the dynamically updated current value of x, with the value \
of x being toggled if the opener is clicked."}, 
 {"OpenerView", "OpenerView[{expr1, expr2}] represents an object which \
displays as an opener, together with expr1 if the opener is closed, and both \
expr1 and expr2 if it is open. OpenerView[{expr1, expr2}, state] specifies \
the state of the opener, with False being closed, and True being open."}, 
 {"Opening", "Opening[image, ker] gives the morphological opening of image \
with respect to the structuring element ker. Opening[image, r] gives the \
opening with respect to a range-r square. Opening[data, \[Ellipsis]] applies \
opening to an array of data."}, {"Operate", "Operate[p, f[x, y]] gives \
p[f][x, y]. Operate[p, expr, n] applies p at level n in the head of expr."}, 
 {"OperatingSystem", "OperatingSystem is an option for file and related \
operations that specifies the type of operating system to use to determine \
file name and other conventions."}, {"OperatorApplied", "OperatorApplied[f, \
n] represents an operator form of the function f of n arguments so that \
OperatorApplied[f, n][x1]\[Ellipsis][xn] is equivalent to f[x1, \[Ellipsis], \
xn]. OperatorApplied[f] represents an operator form of the function f of two \
arguments so that OperatorApplied[f][y][x] is equivalent to f[x, y]. \
OperatorApplied[f, {i1, \[Ellipsis], in}] represents an operator form of the \
function f of n arguments so that OperatorApplied[f, {i1, \[Ellipsis], \
in}][x1]\[Ellipsis][xn] is equivalent to f[xi1, \[Ellipsis], xin]. \
OperatorApplied[f, k->{i1, \[Ellipsis], in}] represents an operator form that \
takes k arguments."}, {"OptimumFlowData", "OptimumFlowData[\[Ellipsis]] \
represents flow data such as generated by FindMaximumFlow, \
FindMinimumCostFlow, etc."}, {"OptionValue", "OptionValue[name] gives the \
value of name in options matched by OptionsPattern. OptionValue[f, name] \
gives the value of name for options associated with the head f. \
OptionValue[f, opts, name] extracts option values from the explicit list of \
rules opts. OptionValue[\[Ellipsis], {name1, name2, \[Ellipsis]}] extracts \
several option values."}, {"Optional", "patt:def or Optional[patt, def] is a \
pattern object that represents an expression of the form patt, which, if \
omitted, should be replaced by the default value def."}, 
 {"OptionalElement", "OptionalElement[patt] is a grammar rules pattern object \
that represents 0 or 1 instances of patt. OptionalElement[patt, default] uses \
default if the element is not present."}, {"Options", "Options[symbol] gives \
the list of default options assigned to a symbol. Options[expr] gives the \
options explicitly specified in a particular expression such as a graphics \
object. Options[stream] or Options[\"\\!\\(\\*sname\"] gives options \
associated with a particular stream. Options[object] gives options associated \
with an external object such as a NotebookObject or CloudObject. Options[obj, \
name] gives the setting for the option name. Options[obj, {name1, name2, \
\[Ellipsis]}] gives a list of the settings for the options namei."}, 
 {"OptionsPattern", "OptionsPattern[] is a pattern object that represents a \
collection of options given as rules, where the values of the options can be \
accessed using OptionValue. OptionsPattern[f] takes default option values \
from Options[f]. OptionsPattern[{opt1->val1, opt2->val2, \[Ellipsis]}] uses \
an explicit list of default option values."}, {"Or", "e1||e2||\[Ellipsis] is \
the logical OR function. It evaluates its arguments in order, giving True \
immediately if any of them are True, and False if they are all False."}, 
 {"Orange", 
  "Orange represents the color orange in graphics or style specifications."}, 
 {"Order", "Order[expr1, expr2] gives 1 if expr1 is before expr2 in canonical \
order, and - 1 if expr1 is after expr2 in canonical order. It gives 0 if \
expr1 is identical to expr2."}, {"OrderDistribution", "OrderDistribution[{dis\
t, n}, k] represents the k^th -order statistics distribution for n \
observations from the distribution dist. OrderDistribution[{dist, n}, {k1, \
k2, \[Ellipsis]}] represents the joint (k1, k2, \[Ellipsis])^th -order \
statistics distribution from n observations from the distribution dist. \
OrderDistribution[{dist1, \[Ellipsis], distn}, \[Ellipsis]] represents the \
order statistics distribution for independent distributions disti. \
OrderDistribution[mdist, \[Ellipsis]] represents the order statistics \
distribution for multivariate distribution mdist."}, 
 {"OrderedQ", "OrderedQ[h[e1, e2, \[Ellipsis]]] gives True if the ei are in \
canonical order, and False otherwise. OrderedQ[h[e1, e2, \[Ellipsis]], p] \
uses the ordering function p to determine whether each pair of elements ei, \
ei + 1 is in order."}, {"Ordering", "Ordering[list] gives the positions in \
list at which each successive element of Sort[list] appears. Ordering[list, \
n] gives the positions in list at which the first n elements of Sort[list] \
appear. Ordering[list, - n] gives the positions of the last n elements of \
Sort[list]. Ordering[list, n, p] gives positions in list of elements of \
Sort[list, p]."}, {"OrderingBy", "OrderingBy[list, f] gives the positions in \
list at which each successive element of SortBy[list, f] appears. \
OrderingBy[list, f, n] gives the positions in list at which the first n \
elements of SortBy[list, f] appear. OrderingBy[list, f, - n] gives the \
positions of the last n elements of SortBy[list, f]. OrderingBy[list, f, n, \
p] gives positions in list of elements of SortBy[list, f, p]."}, 
 {"OrderingLayer", "OrderingLayer[] represents a net layer that effectively \
applies Ordering to its input. OrderingLayer[n] gives the first n elements in \
the ordering of its input. OrderingLayer[ - n] gives the last n elements in \
the ordering of its input."}, {"Orderless", "Orderless is an attribute that \
can be assigned to a symbol f to indicate that the elements ei in expressions \
of the form f[e1, e2, \[Ellipsis]] should automatically be sorted into \
canonical order. This property is accounted for in pattern matching."}, 
 {"OrderlessPatternSequence", "OrderlessPatternSequence[p1, p2, \[Ellipsis]] \
is a pattern object that represents a sequence of arguments matching p1, p2, \
\[Ellipsis] in any order."}, {"OrnsteinUhlenbeckProcess", "OrnsteinUhlenbeckP\
rocess[\[Mu], \[Sigma], \[Theta]] represents a stationary Ornstein-Uhlenbeck \
process with long-term mean \[Mu], volatility \[Sigma], and mean reversion \
speed \[Theta]. OrnsteinUhlenbeckProcess[\[Mu], \[Sigma], \[Theta], x0] \
represents an Ornstein-Uhlenbeck process with initial condition x0."}, 
 {"OrthogonalMatrixQ", "OrthogonalMatrixQ[m] gives True if m is an explicitly \
orthogonal matrix, and False otherwise."}, {"Orthogonalize", "Orthogonalize[{\
v1, v2, \[Ellipsis]}] gives an orthonormal basis found by orthogonalizing the \
vectors vi. Orthogonalize[{e1, e2, \[Ellipsis]}, f] gives an orthonormal \
basis found by orthogonalizing the elements ei with respect to the inner \
product function f."}, {"Out", "%n or Out[n] is a global object that is \
assigned to be the value produced on the n^th output line. % gives the last \
result generated. %% gives the result before last. %%\[Ellipsis]% (k times) \
gives the k^th previous result."}, {"Outer", "Outer[f, list1, list2, \
\[Ellipsis]] gives the generalized outer product of the listi, forming all \
possible combinations of the lowest-level elements in each of them, and \
feeding them as arguments to f. Outer[f, list1, list2, \[Ellipsis], n] treats \
as separate elements only sublists at level n in the listi. Outer[f, list1, \
list2, \[Ellipsis], n1, n2, \[Ellipsis]] treats as separate elements only \
sublists at level ni in the corresponding listi."}, 
 {"OuterPolygon", 
  "OuterPolygon[poly] gives the outer polygon of the polygon poly."}, 
 {"OuterPolyhedron", 
  "OuterPolyhedron[poly] gives the outer polyhedron of the polyhedron poly."}\
, {"OutputControllabilityMatrix", "OutputControllabilityMatrix[ssm] gives the \
output controllability matrix of the state-space model ssm."}, 
 {"OutputControllableModelQ", "OutputControllableModelQ[ssm] gives True if \
the state-space model ssm is output controllable, and False otherwise."}, 
 {"OutputForm", "OutputForm[expr] prints as a two-dimensional representation \
of expr using only keyboard characters."}, {"OutputNamePacket", "OutputNamePa\
cket[string] is a WSTP packet that contains in string the name assigned to \
the next output."}, {"OutputPorts", "OutputPorts is an option to specify the \
number, names or shapes of output ports for some neural net layers."}, 
 {"OutputResponse", "OutputResponse[sys, u, {t, tmin, tmax}] gives the \
numeric output response of systems model sys to the input u for \
tmin<=t<=tmax. OutputResponse[sys, {u[0], u[1], \[Ellipsis]}] gives the \
output response of the discrete-time system sys to the input sequence u[i]. \
OutputResponse[sys, u, t] gives the symbolic output response of system sys to \
the input u as a function of time t. OutputResponse[sys, {u1, \[Ellipsis], \
um}, \[Ellipsis]] gives the output response for multiple inputs ui."}, 
 {"OutputSizeLimit", "OutputSizeLimit is an option for notebooks that \
specifies the maximum size in bytes of expressions that will automatically be \
output in their entirety."}, {"OutputStream", "OutputStream[\"\\!\\(\\*name\"\
, n] is an object that represents an output stream for functions such as \
Write."}, {"OverBar", "OverBar[expr] displays with a bar over expr."}, 
 {"OverDot", "OverDot[expr] displays with a dot over expr."}, 
 {"OverHat", "OverHat[expr] displays with a hat over expr."}, 
 {"OverTilde", "OverTilde[expr] displays with a tilde over expr."}, 
 {"OverVector", "OverVector[expr] displays with a right vector over expr."}, 
 {"Overflow", "Overflow[] represents a number too large to represent \
explicitly on your computer system."}, {"Overlaps", "Overlaps is an option to \
string and sequence functions that specifies how to treat overlapping \
substrings."}, {"Overlay", "Overlay[{expr1, expr2, \[Ellipsis]}] displays as \
an overlay of all the expri. Overlay[{expr1, expr2, \[Ellipsis]}, {i, j, \
\[Ellipsis]}] displays as an overlay of expri, exprj, \[Ellipsis]. \
Overlay[{expr1, expr2, \[Ellipsis]}, {i, j, \[Ellipsis]}, s] allows \
selections to be made and controls to be clicked in exprs."}, 
 {"Overscript", "Overscript[x, y] is an object that formats as xy."}, 
 {"OverscriptBox", "OverscriptBox[x, y] is the low-level box representation \
for xy in notebook expressions."}, {"OverscriptBoxOptions", "OverscriptBoxOpt\
ions is an option that specifies the style and display of OverscriptBox \
constructs."}, {"OverwriteTarget", "OverwriteTarget is an option for \
functions like CopyFile that specifies whether to overwrite if target files \
already exist."}, {"OwenT", "OwenT[x, a] gives Owen's T function T(x, a)."}, 
 {"OwnValues", "OwnValues[x] gives the rule corresponding to any ownvalue \
defined for the symbol x."}, {"PDF", "PDF[dist, x] gives the probability \
density function for the distribution dist evaluated at x. PDF[dist, {x1, x2, \
\[Ellipsis]}] gives the multivariate probability density function for a \
distribution dist evaluated at {x1, x2, \[Ellipsis]}. PDF[dist] gives the PDF \
as a pure function."}, {"PERTDistribution", "PERTDistribution[{min, max}, c] \
represents a PERT distribution with range min to max and mode at c. \
PERTDistribution[{min, max}, c, \[Lambda]] represents a modified PERT \
distribution with shape parameter \[Lambda]."}, 
 {"PIDDerivativeFilter", "PIDDerivativeFilter is an option to PIDTune that \
controls the filtering used for derivative terms."}, 
 {"PIDFeedforward", "PIDFeedforward is an option to PIDTune that controls the \
reference weights used for the feedforward filter."}, 
 {"PIDTune", "PIDTune[sys] gives a feedback PID controller for the system \
sys. PIDTune[sys, \"\\!\\(\\*carch\"] gives a controller of architecture \
\"\\!\\(\\*carch\" (\"P\", \"PI\", \"PID\", etc). PIDTune[sys, \
{\"\\!\\(\\*carch\", \"\\!\\(\\*trule\"}] gives a controller using the tuning \
rule \"\\!\\(\\*trule\". PIDTune[sys, \[Ellipsis], \"\\!\\(\\*prop\"] returns \
the value for the property \"\\!\\(\\*prop\"."}, 
 {"PacletDataRebuild", "PacletDataRebuild[] rescans all the installed paclets \
to rebuild the internal cache of paclet data."}, 
 {"PacletDirectoryLoad", "PacletDirectoryLoad[dir] makes paclets in dir \
visible in the current session. PacletDirectoryLoad[{dir1, dir2, \
\[Ellipsis]}] makes paclets in all the diri visible in the current session."}\
, {"PacletDirectoryUnload", "PacletDirectoryUnload[dir] makes paclets in dir \
no longer visible in the current session. PacletDirectoryUnload[{dir1, dir2, \
\[Ellipsis]}] makes paclets in all the diri no longer visible in the current \
session."}, {"PacletDisable", 
  "PacletDisable[paclet] disables an installed paclet."}, 
 {"PacletEnable", "PacletEnable[paclet] enables a previously disabled \
paclet."}, {"PacletFind", "PacletFind[\"\\!\\(\\*name\"] gives a list of \
installed paclets that match \"\\!\\(\\*name\". \
PacletFind[\"\\!\\(\\*name\"->\"\\!\\(\\*version\"] gives a list of installed \
paclets that match \"\\!\\(\\*name\" and \"\\!\\(\\*version\". \
PacletFind[\"\\!\\(\\*name\", <|prop1->val1, prop2->val2, \[Ellipsis]|>] \
gives a list of installed paclets that match \"\\!\\(\\*name\" and criteria \
given by the propi->vali."}, {"PacletFindRemote", "PacletFindRemote[\"\\!\\(\
\\*name\"] gives a list of paclets that match \"\\!\\(\\*name\" available on \
known paclet sites. PacletFindRemote[\"\\!\\(\\*name\"->\"\\!\\(\\*version\"] \
gives a list of paclets that match \"\\!\\(\\*name\" and \"\\!\\(\\*version\" \
available on known paclet sites. PacletFindRemote[\"\\!\\(\\*name\", \
\[LeftAssociation]prop1->val1, prop2->val2, \[Ellipsis]\[RightAssociation]] \
gives a list of paclets that match \"\\!\\(\\*name\" and criteria given by \
the propi->vali available on known paclet sites."}, 
 {"PacletInstall", "PacletInstall[paclet] installs or updates paclet. \
PacletInstall[task] waits for completion of the task started by a call to \
PacletInstallSubmit."}, {"PacletInstallSubmit", 
  "PacletInstallSubmit[paclet] asynchronously installs or updates paclet."}, 
 {"PacletNewerQ", "PacletNewerQ[paclet1, paclet2] returns True if paclet1 has \
a higher version number than paclet2, and False otherwise."}, 
 {"PacletObject", "PacletObject[assoc] represents a paclet on the local \
machine or on a remote paclet site. PacletObject[\"\\!\\(\\*name\"] \
represents an installed paclet with the given name. \
PacletObject[\"\\!\\(\\*name\"->\"\\!\\(\\*version\"] represents an installed \
paclet with the given name and version. PacletObject[File[\[Ellipsis]]] \
represents a paclet in a given directory or paclet archive file."}, 
 {"PacletSite", "PacletSite is an option for PacletInstall and \
PacletInstallSubmit that specifies the URL of a paclet site on which to look \
for the paclet."}, {"PacletSiteObject", "PacletSiteObject[assoc] represents a \
site from which paclets can be automatically downloaded."}, 
 {"PacletSiteRegister", "PacletSiteRegister[url] registers url as a known \
paclet site. PacletSiteRegister[url, name] registers url as a known paclet \
site with name. PacletSiteRegister[PacletSiteObject[\[Ellipsis]]] registers \
the given PacletSiteObject as a known paclet site."}, 
 {"PacletSiteUnregister", "PacletSiteUnregister[url] removes url from the \
list of registered paclet sites. PacletSiteUnregister[name] removes the site \
named name from the list of registered paclet sites. \
PacletSiteUnregister[PacletSiteObject[\[Ellipsis]]] removes the given \
PacletSiteObject from the list of registered paclet sites."}, 
 {"PacletSiteUpdate", "PacletSiteUpdate[site] acquires and caches current \
information about the available paclets on the given paclet site."}, 
 {"PacletSites", 
  "PacletSites[] gives the list of all paclet sites known to your system."}, 
 {"PacletUninstall", "PacletUninstall[paclet] uninstalls a paclet."}, 
 {"PadLeft", "PadLeft[list, n] makes a list of length n by padding list with \
zeros on the left. PadLeft[list, n, x] pads by repeating the element x. \
PadLeft[list, n, {x1, x2, \[Ellipsis]}] pads by cyclically repeating the \
elements xi. PadLeft[list, n, padding, m] leaves a margin of m elements of \
padding on the right. PadLeft[list, {n1, n2, \[Ellipsis]}] makes a nested \
list with length ni at level i. PadLeft[list] pads a ragged array list with \
zeros to make it full."}, {"PadRight", "PadRight[list, n] makes a list of \
length n by padding list with zeros on the right. PadRight[list, n, x] pads \
by repeating the element x. PadRight[list, n, {x1, x2, \[Ellipsis]}] pads by \
cyclically repeating the elements xi. PadRight[list, n, padding, m] leaves a \
margin of m elements of padding on the left. PadRight[list, {n1, n2, \
\[Ellipsis]}] makes a nested list with length ni at level i. PadRight[list] \
pads a ragged array list with zeros to make it full."}, 
 {"PaddedForm", "PaddedForm[expr, n] prints with all numbers in expr padded \
to leave room for a total of n digits. PaddedForm[expr, {n, f}] prints with \
approximate real numbers having exactly f digits to the right of the decimal \
point."}, {"Padding", "Padding is an option to various array and image \
operations that specifies what padding to use when extending beyond the \
original data specified."}, {"PaddingLayer", "PaddingLayer[{{m1, n1}, {m2, \
n2}, \[Ellipsis]}] represents a net layer that pads an input array with mi \
elements at the beginning and ni elements at the end at level i of the \
array."}, {"PaddingSize", "PaddingSize is an option in AudioDelay and other \
functions that specifies the amount of padding."}, 
 {"PadeApproximant", "PadeApproximant[expr, {x, x0, {m, n}}] gives the \
Pad\[EAcute] approximant to expr about the point x = x0, with numerator order \
m and denominator order n. PadeApproximant[expr, {x, x0, n}] gives the \
diagonal Pad\[EAcute] approximant to expr about the point x = x0 of order n."}\
, {"PageBreakAbove", "PageBreakAbove is an option for Cell which specifies \
whether a page break should be made immediately above the cell if the \
notebook that contains the cell is printed."}, 
 {"PageBreakBelow", "PageBreakBelow is an option for Cell which specifies \
whether a page break should be made immediately below the cell if the \
notebook that contains the cell is printed."}, 
 {"PageBreakWithin", "PageBreakWithin is an option for Cell which specifies \
whether a page break should be allowed within the cell if the notebook that \
contains the cell is printed."}, {"PageFooters", "PageFooters is an option \
for notebooks that specifies what should be inserted as the footer of each \
page of a notebook when it is printed."}, {"PageHeaders", "PageHeaders is an \
option for notebooks that specifies what should be inserted as the header of \
each page of a notebook when it is printed."}, 
 {"PageRankCentrality", "PageRankCentrality[g, \[Alpha]] gives a list of \
page-rank centralities for the vertices in the graph g and weight \[Alpha]. \
PageRankCentrality[g, \[Alpha], \[Beta]] gives a list of page-rank \
centralities, using weight \[Alpha] and initial centralities \[Beta]. \
PageRankCentrality[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to \
specify the graph g."}, {"PageTheme", "PageTheme is an option for FormObject, \
GalleryView, and related functions that specifies an overall theme for a \
webpage and its elements."}, {"PageWidth", "PageWidth is an option for output \
streams and for cells that specifies how wide each line of text is allowed to \
be."}, {"Pagination", "Pagination is an option for GalleryView and related \
functions that specifies how pagination should be done in displayed output."}\
, {"PairCorrelationG", "PairCorrelationG[pdata, r] estimates the pair \
correlation function g(r) for point data pdata at radius r. \
PairCorrelationG[pproc, r] computes g(r) for the point process pproc. \
PairCorrelationG[bdata, r] computes g(r) for binned data bdata. \
PairCorrelationG[pspec] generates the function g that can be applied \
repeatedly to different radii r."}, {"PairedBarChart", "PairedBarChart[{y1, \
y2, \[Ellipsis]}, {z1, z2, \[Ellipsis]}] makes a paired bar chart with bar \
lengths y1, y2, \[Ellipsis] and z1, z2, \[Ellipsis], respectively. \
PairedBarChart[{\[Ellipsis], wi[yi, \[Ellipsis]], \[Ellipsis]}, {\[Ellipsis], \
wj[zj, \[Ellipsis]], \[Ellipsis]}] makes a paired bar chart with bar features \
defined by the symbolic wrappers wk. PairedBarChart[{data11, \[Ellipsis]}, \
{data21, \[Ellipsis]}] makes a paired bar chart from multiple datasets data1i \
and data2j."}, {"PairedHistogram", "PairedHistogram[{x1, x2, \[Ellipsis]}, \
{y1, y2, \[Ellipsis]}] plots a paired histogram of the values xi and yi. \
PairedHistogram[{x1, x2, \[Ellipsis]}, {y1, y2, \[Ellipsis]}, bspec] plots a \
paired histogram with bin width specification bspec. PairedHistogram[{x1, x2, \
\[Ellipsis]}, {y1, y2, \[Ellipsis]}, bspec, hspec] plots a paired histogram \
with bin heights computed according to the specification hspec. \
PairedHistogram[{data11, \[Ellipsis]}, {data21, \[Ellipsis]}, \[Ellipsis]] \
plots paired histograms for multiple datasets data1i and data2j."}, 
 {"PairedSmoothHistogram", "PairedSmoothHistogram[{x1, x2, \[Ellipsis]}, {y1, \
y2, \[Ellipsis]}] plots a paired smooth histogram of the values xi and yi. \
PairedSmoothHistogram[{x1, x2, \[Ellipsis]}, {y1, y2, \[Ellipsis]}, espec] \
plots a paired smooth histogram with estimator specification espec. \
PairedSmoothHistogram[{x1, x2, \[Ellipsis]}, {y1, y2, \[Ellipsis]}, espec, \
dfun] plots a paired smooth histogram with distribution function dfun. \
PairedSmoothHistogram[{data11, \[Ellipsis]}, {data21, \[Ellipsis]}, \
\[Ellipsis]] plots paired smooth histograms for multiple datasets data1i and \
data2j."}, {"PairedTTest", "PairedTTest[data] tests whether the mean of data \
is zero. PairedTTest[{data1, data2}] tests whether the mean of data1- data2 \
is zero. PairedTTest[dspec, \[Mu]0] tests a location measure against \[Mu]0. \
PairedTTest[dspec, \[Mu]0, \"\\!\\(\\*property\"] returns the value of \
\"\\!\\(\\*property\"."}, {"PairedZTest", "PairedZTest[data] tests whether \
the mean of the data is zero. PairedZTest[{data1, data2}] tests whether the \
means of data1 and data2 are equal. PairedZTest[dspec, \[Sigma]] tests for \
zero or equal means assuming a population variance \[Sigma]. \
PairedZTest[dspec, \[Sigma], \[Mu]0] tests the mean against \[Mu]0. \
PairedZTest[dspec, \[Sigma], \[Mu]0, \"\\!\\(\\*property\"] returns the value \
of \"\\!\\(\\*property\"."}, {"PaletteNotebook", "PaletteNotebook[{cell1, \
cell2, \[Ellipsis]}] represents a palette notebook that can be manipulated by \
the Wolfram System front end."}, {"PalindromeQ", "PalindromeQ[list] returns \
True if the given list is identical to Reverse[list], and False otherwise. \
PalindromeQ[n] returns True if the integer n is identical to \
IntegerReverse[n], and False otherwise. PalindromeQ[string] returns True if \
the given string is identical to StringReverse[string], and False otherwise."}\
, {"Pane", "Pane[expr] displays as a pane containing expr. Pane[expr, w] \
makes the pane be w printer's points wide, linewrapping the contents if \
necessary. Pane[expr, {w, h}] makes the pane be w points wide and h points \
high, shrinking the contents if necessary."}, {"PaneSelector", "PaneSelector[\
{val1->expr1, val2->expr2, \[Ellipsis]}, x] represents an object that \
displays as a pane containing the expri for which vali is equal to x. \
PaneSelector[{val1->expr1, val2->expr2, \[Ellipsis]}, Dynamic[x]] takes the \
setting to be the dynamically updated current value of v \
PaneSelector[{val1->expr1, \[Ellipsis]}, x, default] displays default if x is \
none of the vali."}, {"Panel", "Panel[expr] displays as a panel containing \
expr. Panel[expr, title] gives the panel the specified title. Panel[expr, \
title, pos] places title at a position specified by pos. Panel[expr, {title1, \
title2, \[Ellipsis]}, {pos1, \[Ellipsis]}] places titlei at position posi. \
Panel[] displays an empty panel."}, {"Paneled", "Paneled is an option for \
Manipulate and related functions that specifies whether to give the output \
inside a panel."}, {"ParabolicCylinderD", "ParabolicCylinderD[\[Nu], z] gives \
the parabolic cylinder function D\[Nu](z)."}, {"ParagraphIndent", "ParagraphI\
ndent is an option for Cell which specifies how far in printer's points to \
indent the first line of each paragraph of text."}, 
 {"ParagraphSpacing", "ParagraphSpacing is an option for Cell, StyleBox, and \
Style that specifies how much extra space to leave between successive \
paragraphs of text."}, {"ParallelArray", "ParallelArray[f, n] generates in \
parallel a list of length n, with elements f[i], evaluated. ParallelArray[f, \
{n1, n2, \[Ellipsis]}] generates in parallel an n1xn2x\[Ellipsis] array of \
nested lists, with elements f[i1, i2, \[Ellipsis]]. ParallelArray[f, {n1, n2, \
\[Ellipsis]}, {r1, r2, \[Ellipsis]}] generates in parallel a list using the \
index origins ri (default 1 ). ParallelArray[f, dims, origin, h] uses head h, \
rather than List, for each level of the array."}, 
 {"ParallelAxisPlot", "ParallelAxisPlot[{{y11, \[Ellipsis], y1n}, \
\[Ellipsis], {ym1, \[Ellipsis], ymn}}] generates a parallel axis plot for the \
points {yi1, \[Ellipsis], yin} using equally spaced axes. \
ParallelAxisPlot[{data1, data2, \[Ellipsis]}] plots several sets of points."}\
, {"ParallelCombine", "ParallelCombine[f, h[e1, e2, \[Ellipsis]], comb] \
evaluates f[h[e1, e2, \[Ellipsis]]] in parallel by distributing parts of the \
computation to all parallel kernels and combining the partial results with \
comb. ParallelCombine[f, h[e1, e2, \[Ellipsis]]] is equivalent to \
ParallelCombine[f, h[e1, e2, \[Ellipsis]], h] if h has attribute Flat, and \
ParallelCombine[f, h[e1, e2, \[Ellipsis]], Join] otherwise."}, 
 {"ParallelDo", "ParallelDo[expr, {imax}] evaluates expr in parallel imax \
times. ParallelDo[expr, {i, imax}] evaluates expr in parallel with the \
variable i successively taking on the values 1 through imax (in steps of 1). \
ParallelDo[expr, {i, imin, imax}] starts with i = imin. ParallelDo[expr, {i, \
imin, imax, di}] uses steps di. ParallelDo[expr, {i, {i1, i2, \[Ellipsis]}}] \
uses the successive values i1, i2, \[Ellipsis]. ParallelDo[expr, {i, imin, \
imax}, {j, jmin, jmax}, \[Ellipsis]] evaluates expr looping in parallel over \
different values of j, etc. for each i."}, {"ParallelEvaluate", "ParallelEval\
uate[expr] evaluates the expression expr on all available parallel kernels \
and returns the list of results obtained. ParallelEvaluate[expr, kernel] \
evaluates expr on the parallel kernel specified. ParallelEvaluate[expr, \
{ker1, ker2, \[Ellipsis]}] evaluates expr on the parallel kernels keri. \
ParallelEvaluate[expr, kernels, h] wraps the head h around the results before \
returning them."}, {"ParallelMap", "ParallelMap[f, expr] applies f in \
parallel to each element on the first level in expr. ParallelMap[f, expr, \
levelspec] applies f in parallel to parts of expr specified by levelspec."}, 
 {"ParallelNeeds", "ParallelNeeds[\"\\!\\(\\*context`\"] evaluates \
Needs[\"\\!\\(\\*context`\"] on all available parallel kernels."}, 
 {"ParallelProduct", "ParallelProduct[expr, {i, imax}] evaluates the product \
\[Product]i = 1imaxLimitsPositioningTrueexpr in parallel. \
ParallelProduct[expr, {i, imin, imax}] starts with i = imin. \
ParallelProduct[expr, {i, imin, imax, di}] uses steps di. \
ParallelProduct[expr, {i, {i1, i2, \[Ellipsis]}}] uses successive values i1, \
i2, \[Ellipsis]. ParallelProduct[expr, {i, imin, imax}, {j, jmin, jmax}, \
\[Ellipsis]] evaluates the multiple product \[Product]i = \
iminimaxLimitsPositioningTrue\[Product]j = \
jminjmaxLimitsPositioningTrue\[Ellipsis] expr in parallel."}, 
 {"ParallelSubmit", "ParallelSubmit[expr] submits expr for evaluation on the \
next available parallel kernel and returns an EvaluationObject expression \
representing the submitted evaluation. ParallelSubmit[{var1, var2, \
\[Ellipsis]}, expr] builds a closure for the variables given before \
submitting expr."}, {"ParallelSum", "ParallelSum[expr, {i, imax}] evaluates \
in parallel the sum \[Sum]i = 1imaxLimitsPositioningTrueexpr. \
ParallelSum[expr, {i, imin, imax}] starts with i = imin. ParallelSum[expr, \
{i, imin, imax, di}] uses steps di. ParallelSum[expr, {i, {i1, i2, \
\[Ellipsis]}}] uses successive values i1, i2, \[Ellipsis].. ParallelSum[expr, \
{i, imin, imax}, {j, jmin, jmax}, \[Ellipsis]] evaluates in parallel the \
multiple sum \[Sum]i = iminimaxLimitsPositioningTrue\[Sum]j = \
jminjmaxLimitsPositioningTrue\[Ellipsis] expr."}, 
 {"ParallelTable", "ParallelTable[expr, {imax}] generates in parallel a list \
of imax copies of expr. ParallelTable[expr, {i, imax}] generates in parallel \
a list of the values of expr when i runs from 1 to imax. ParallelTable[expr, \
{i, imin, imax}] starts with i = imin. ParallelTable[expr, {i, imin, imax, \
di}] uses steps di. ParallelTable[expr, {i, {i1, i2, \[Ellipsis]}}] uses the \
successive values i1, i2, \[Ellipsis]. ParallelTable[expr, {i, imin, imax}, \
{j, jmin, jmax}, \[Ellipsis]] gives a nested list. The list associated with i \
is outermost."}, {"ParallelTry", "ParallelTry[f, {arg1, arg2, \[Ellipsis]}] \
evaluates f[argi] in parallel, returning the first result received. \
ParallelTry[f, {arg1, arg2, \[Ellipsis]}, k] returns a list of the first k \
results."}, {"Parallelepiped", "Parallelepiped[p, {v1, \[Ellipsis], vk}] \
represents a parallelepiped with origin p and directions vi."}, 
 {"Parallelization", "Parallelization is an option for Compile that specifies \
whether it should create a compiled function that could run in parallel."}, 
 {"Parallelize", 
  "Parallelize[expr] evaluates expr using automatic parallelization."}, 
 {"Parallelogram", "Parallelogram[p, {v1, v2}] represents a parallelogram \
with origin p and directions v1 and v2."}, {"ParameterEstimator", "ParameterE\
stimator is an option to EstimatedDistribution and FindDistributionParameters \
that specifies what parameter estimator to use."}, 
 {"ParameterMixtureDistribution", "ParameterMixtureDistribution[dist[\[Theta]\
], \[Theta]\[Distributed]wdist] represents a parameter mixture distribution \
where the parameter \[Theta] is distributed according to the weight \
distribution wdist. ParameterMixtureDistribution[dist[\[Theta]1, \[Theta]2, \
\[Ellipsis]], {\[Theta]1\[Distributed]wdist1, \[Theta]2\[Distributed]wdist2, \
\[Ellipsis]}] represents a parameter mixture distribution where the parameter \
\[Theta]1 has weight distribution wdist1, \[Theta]2 has weight distribution \
wdist2, etc."}, {"ParametricConvexOptimization", "ParametricConvexOptimizatio\
n[f, cons, vars, pars] gives a ParametricFunction object that finds values of \
variables vars that minimize the convex objective function f subject to \
convex constraints cons with parameters pars. \
ParametricConvexOptimization[\[Ellipsis], \"\\!\\(\\*prop\"] specifies what \
solution property \"\\!\\(\\*prop\" should be returned by the \
ParametricFunction object."}, {"ParametricFunction", "ParametricFunction[pars\
, \[Ellipsis]] represents a function that computes a solution when evaluated \
with numerical values for the parameters pars."}, 
 {"ParametricNDSolve", "ParametricNDSolve[eqns, u, {x, xmin, xmax}, pars] \
finds a numerical solution to the ordinary differential equations eqns for \
the function u with the independent variable x in the range xmin to xmax with \
parameters pars. ParametricNDSolve[eqns, u, {x, xmin, xmax}, {y, ymin, ymax}, \
pars] solves the partial differential equations eqns over a rectangular \
region. ParametricNDSolve[eqns, u, {x, y}\[Element]\[CapitalOmega],pars] \
solves the partial differential equations eqns over the region \
\[CapitalOmega]. ParametricNDSolve[eqns, u, {t, tmin, tmax}, {x, \
y}\[Element]\[CapitalOmega], pars] solves the time-dependent partial \
differential equations eqns over the region \[CapitalOmega]. \
ParametricNDSolve[eqns, {u1, u2, \[Ellipsis]}, \[Ellipsis]] solves for the \
functions ui."}, {"ParametricNDSolveValue", "ParametricNDSolveValue[eqns, \
expr, {x, xmin, xmax}, pars] gives the value of expr with functions \
determined by a numerical solution to the ordinary differential equations \
eqns with the independent variable x in the range xmin to xmax with \
parameters pars. ParametricNDSolveValue[eqns, expr, {x, xmin, xmax}, {y, \
ymin, ymax}, pars] solves the partial differential equations eqns over a \
rectangular region. ParametricNDSolveValue[eqns, expr, {x, \
y}\[Element]\[CapitalOmega], pars] solves the partial differential equations \
eqns over the region \[CapitalOmega]. ParametricNDSolveValue[eqns, expr, {t, \
tmin, tmax}, {x, y}\[Element]\[CapitalOmega], pars] solves the time-dependent \
partial differential equations eqns over the region \[CapitalOmega]."}, 
 {"ParametricPlot", "ParametricPlot[{fx, fy}, {u, umin, umax}] generates a \
parametric plot of a curve with x and y coordinates fx and fy as a function \
of u. ParametricPlot[{{fx, fy}, {gx, gy}, \[Ellipsis]}, {u, umin, umax}] \
plots several parametric curves. ParametricPlot[{fx, fy}, {u, umin, umax}, \
{v, vmin, vmax}] plots a parametric region. ParametricPlot[{{fx, fy}, {gx, \
gy}, \[Ellipsis]}, {u, umin, umax}, {v, vmin, vmax}] plots several parametric \
regions. ParametricPlot[{\[Ellipsis], w[{fx, fy}], \[Ellipsis]}, \[Ellipsis]] \
plots the curve {fx, fy} with features defined by the symbolic wrapper w. \
ParametricPlot[\[Ellipsis], {u, v}\[Element]reg] takes parameters {u, v} to \
be in the geometric region reg."}, {"ParametricPlot3D", "ParametricPlot3D[{fx\
, fy, fz}, {u, umin, umax}] produces a three-dimensional space curve \
parametrized by a variable u which runs from umin to umax. \
ParametricPlot3D[{fx, fy, fz}, {u, umin, umax}, {v, vmin, vmax}] produces a \
three-dimensional surface parametrized by u and v. ParametricPlot3D[{{fx, fy, \
fz}, {gx, gy, gz}, \[Ellipsis]}, \[Ellipsis]] plots several objects together. \
ParametricPlot3D[\[Ellipsis], {u, v}\[Element]reg] takes parameters {u, v} to \
be in the geometric region reg."}, {"ParametricRampLayer", "ParametricRampLay\
er[] represents a net layer that computes a leaky ReLU activation with a \
slope that can be learned. ParametricRampLayer[levels] specifies the levels \
on which each dimension has a specific slope."}, 
 {"ParametricRegion", "ParametricRegion[{f1, \[Ellipsis], fn}, {u1, \
\[Ellipsis], um}] represents a region in \[DoubleStruckCapitalR]^n given by \
the points {f1, \[Ellipsis], fn} for parameters \
ui\[Element]\[DoubleStruckCapitalR]. ParametricRegion[{f1, \[Ellipsis], fn}, \
{{u1, a1, b1}, \[Ellipsis]}] constrains parameters to an interval a1<=u1<=b1 \
etc. ParametricRegion[{{f1, \[Ellipsis], fn}, cond}, \[Ellipsis]] constrains \
parameters to satisfy the condition cond."}, 
 {"ParentBox", "ParentBox[obj] returns the BoxObject that contains obj."}, 
 {"ParentCell", "ParentCell[obj] returns the CellObject that contains obj."}, 
 {"ParentDirectory", "ParentDirectory[] gives the parent of the current \
working directory. ParentDirectory[\"\\!\\(\\*dir\"] gives the parent of the \
directory dir. ParentDirectory[\"\\!\\(\\*dir\", n] gives the directory n \
levels up from dir."}, {"ParentNotebook", 
  "ParentNotebook[obj] returns the NotebookObject that contains obj."}, 
 {"ParetoDistribution", "ParetoDistribution[k, \[Alpha]] represents a Pareto \
distribution with minimum value parameter k and shape parameter \[Alpha]. \
ParetoDistribution[k, \[Alpha], \[Mu]] represents a Pareto type II \
distribution with location parameter \[Mu]. ParetoDistribution[k, \[Alpha], \
\[Gamma], \[Mu]] represents a Pareto type IV distribution with shape \
parameter \[Gamma]."}, {"ParetoPickandsDistribution", "ParetoPickandsDistribu\
tion[\[Mu], \[Sigma], \[Xi]] gives a Pareto-Pickands distribution with \
location parameter \[Mu], scale parameter \[Sigma] and shape parameter \[Xi]. \
ParetoPickandsDistribution[\[Xi]] gives the standard Pareto-Pickands \
distribution with zero location and unit scale parameters."}, 
 {"ParkData", "ParkData[entity, property] gives the value of the specified \
property for the park entity. ParkData[{entity1, entity2, \[Ellipsis]}, \
property] gives a list of property values for the specified park entities. \
ParkData[entity, property, annotation] gives the specified annotation \
associated with the given property."}, {"Part", "expr[[i]] or Part[expr, i] \
gives the i^th part of expr. expr[[ - i]] counts from the end. expr[[i, j, \
\[Ellipsis]]] or Part[expr, i, j, \[Ellipsis]] is equivalent to \
expr[[i]][[j]]\[Ellipsis]. expr[[{i1, i2, \[Ellipsis]}]] gives a list of the \
parts i1, i2, \[Ellipsis] of expr. expr[[m;;n]] gives parts m through n. \
expr[[m;;n;;s]] gives parts m through n in steps of s. \
expr[[\"\\!\\(\\*key\"]] gives the value associated with the key \
\"\\!\\(\\*key\" in an association expr. expr[[Key[k]]] gives the value \
associated with an arbitrary key k in the association expr."}, 
 {"PartBehavior", "PartBehavior is an option to Query and related functions \
that specifies how nonexistent parts should be resolved."}, 
 {"PartLayer", "PartLayer[i] represents a net layer that gives the i^th part \
of the input. PartLayer[m;;n] gives parts m through n. PartLayer[{spec1, \
spec2, \[Ellipsis]}] takes part speci at level i in the input."}, 
 {"PartOfSpeech", "PartOfSpeech[\"\\!\\(\\*word\"] returns the possible parts \
of speech for the specified word."}, {"PartProtection", "PartProtection is an \
option for cloud expressions that controls which parts of their structure can \
be changed."}, {"PartialCorrelationFunction", "PartialCorrelationFunction[dat\
a, hspec] estimates the partial correlation function at lags hspec from data. \
PartialCorrelationFunction[tproc, hspec] represents the partial correlation \
function at lags hspec for the time series process tproc."}, 
 {"ParticleAcceleratorData", "ParticleAcceleratorData[entity, property] gives \
the value of the specified property for the particle accelerator entity. \
ParticleAcceleratorData[{entity1, entity2, \[Ellipsis]}, property] gives a \
list of property values for the specified particle accelerator entities. \
ParticleAcceleratorData[entity, property, annotation] gives the specified \
annotation associated with the given property."}, 
 {"ParticleData", "ParticleData[name, \"\\!\\(\\*property\"] gives the \
specified property for a subatomic particle or family of particles with the \
specified name. ParticleData[{name, q}, \"\\!\\(\\*property\"] gives the \
specified property for a version of the particle with charge q."}, 
 {"Partition", "Partition[list, n] partitions list into nonoverlapping \
sublists of length n. Partition[list, n, d] generates sublists with offset d. \
Partition[list, {n1, n2, \[Ellipsis]}] partitions a nested list into blocks \
of size n1 \[Times]n2 \[Times]\[Ellipsis]. Partition[list, {n1, n2, \
\[Ellipsis]}, {d1, d2, \[Ellipsis]}] uses offset di at level i in list. \
Partition[list, n, d, {kL, kR}] specifies that the first element of list \
should appear at position kL in the first sublist, and the last element of \
list should appear at or after position kR in the last sublist. If additional \
elements are needed, Partition fills them in by treating list as cyclic. \
Partition[list, n, d, {kL, kR}, x] pads if necessary by repeating the element \
x. Partition[list, n, d, {kL, kR}, {x1, x2, \[Ellipsis]}] pads if necessary \
by cyclically repeating the elements xi. Partition[list, n, d, {kL, kR}, {}] \
uses no padding, and so can yield sublists of different lengths. \
Partition[list, nlist, dlist, {klistL, klistR}, padlist] specifies alignments \
and padding in a nested list."}, {"PartitionGranularity", "PartitionGranulari\
ty is an option for audio analysis functions that specifies the partitioning \
of the audio."}, {"PartitionsP", "PartitionsP[n] gives the number p(n) of \
unrestricted partitions of the integer n."}, {"PartitionsQ", "PartitionsQ[n] \
gives the number q(n) of partitions of the integer n into distinct parts."}, 
 {"ParzenWindow", 
  "ParzenWindow[x] represents a Parzen window function of x."}, 
 {"PascalDistribution", "PascalDistribution[n, p] represents a Pascal \
distribution with parameters n and p."}, {"PassEventsDown", "PassEventsDown \
is an option to EventHandler which specifies whether events handled by a \
particular event handler should be passed down to event handlers nested \
inside."}, {"PassEventsUp", "PassEventsUp is an option to EventHandler that \
specifies whether events handled by a particular event handler should be \
passed up to event handlers in outer expressions."}, 
 {"Paste", "Paste[expr] pastes expr at the current insertion point in the \
input notebook. Paste[notebook, expr] pastes expr to the specified notebook. \
Paste[] pastes the contents of the system clipboard in the input notebook."}, 
 {"PasteButton", "PasteButton[expr] represents a button that pastes expr \
whenever it is pressed. PasteButton[label, expr] displays with label on the \
button."}, {"Path", "Path is an option for Get and related functions which \
gives a list of directories to search in attempting to find an external \
file."}, {"PathGraph", "PathGraph[{v1, v2, \[Ellipsis]}] yields a path with \
vertices vi and edges between vi and vi+ 1. PathGraph[{e1, e2, \[Ellipsis]}] \
yields a path with edges ej. PathGraph[{v1, v2, \[Ellipsis]}, {e1, e2, \
\[Ellipsis]}] yields a path with vertices vi and edges ej. \
PathGraph[{\[Ellipsis], wi[vi, \[Ellipsis]], \[Ellipsis]}, {\[Ellipsis], \
wj[ej, \[Ellipsis]], \[Ellipsis]}] yields a path with vertex and edge \
properties defined by the symbolic wrappers wk. PathGraph[{vi->vj, \
\[Ellipsis]}] uses rules vi->vj to specify a path."}, 
 {"PathGraphQ", 
  "PathGraphQ[g] yields True if the graph g is a path and False otherwise."}, 
 {"Pattern", "sym:obj or Pattern[sym, obj] represents the pattern object obj, \
assigned the name sym."}, {"PatternFilling", "PatternFilling[obj] is a \
two-dimensional graphics directive specifying that obj should be used to fill \
faces of polygons and other filled graphics objects. \
PatternFilling[\"\\!\\(\\*name\"] uses the specified pattern \
\"\\!\\(\\*name\". PatternFilling[obj, size] specifies the size of the object \
obj. PatternFilling[obj, size, {dx, dy}] moves the object obj by the offset \
{dx, dy}."}, {"PatternSequence", "PatternSequence[p1, p2, \[Ellipsis]] is a \
pattern object that represents a sequence of arguments matching p1, p2, \
\[Ellipsis]."}, {"PatternTest", "p?test is a pattern object that stands for \
any expression that matches p, and on which the application of test gives \
True."}, {"PaulWavelet", "PaulWavelet[] represents a Paul wavelet of order 4. \
PaulWavelet[n] represents a Paul wavelet of order n."}, 
 {"PauliMatrix", 
  "PauliMatrix[k] gives the k^th Pauli spin matrix \[Sigma]k."}, 
 {"Pause", "Pause[n] pauses for at least n seconds."}, 
 {"PeakDetect", "PeakDetect[list] gives a binary list in which 1s correspond \
to peak positions in list. PeakDetect[list, \[Sigma]] detects peaks that \
survive Gaussian blurring up to scale \[Sigma]. PeakDetect[list, \[Sigma], s] \
detects peaks with minimum sharpness s. PeakDetect[list, \[Sigma], s, t] \
detects only peaks with values greater than t. PeakDetect[list, \[Sigma], {s, \
\[Sigma]s}, {t, \[Sigma]t}] uses different scales for thresholding sharpness \
and value."}, {"PeanoCurve", "PeanoCurve[n] gives the line segments \
representing the n^th -step Peano curve."}, {"PearsonChiSquareTest", "Pearson\
ChiSquareTest[data] tests whether data is normally distributed using the \
Pearson \[Chi]^2 test. PearsonChiSquareTest[data, dist] tests whether data is \
distributed according to dist using the Pearson \[Chi]^2 test. \
PearsonChiSquareTest[data, dist, \"\\!\\(\\*property\"] returns the value of \
\"\\!\\(\\*property\"."}, {"PearsonCorrelationTest", "PearsonCorrelationTest[\
v1, v2] tests whether the vectors v1 and v2 are linearly independent. \
PearsonCorrelationTest[\[Ellipsis], \"\\!\\(\\*property\"] returns the value \
of \"\\!\\(\\*property\"."}, {"PearsonDistribution", "PearsonDistribution[a1, \
a0, b2, b1, b0] represents a distribution of the Pearson family with \
parameters a1, a0, b2, b1, and b0. PearsonDistribution[type, a1, a0, b2, b1, \
b0] represents a Pearson distribution of given type."}, 
 {"PenttinenPointProcess", "PenttinenPointProcess[\[Mu], \[Gamma], rp, d] \
represents a Penttinen point process with constant intensity \[Mu], \
interaction parameter \[Gamma] and interaction radius rp in \
\[DoubleStruckCapitalR]^d."}, {"PercentForm", "PercentForm[expr] prints with \
numbers in expr given as percentages. PercentForm[expr, n] prints with \
approximate real numbers in expr given as percentages to n -digit precision."}\
, {"PerfectNumber", "PerfectNumber[n] gives the n^th perfect number."}, 
 {"PerfectNumberQ", "PerfectNumberQ[n] returns True if n is a perfect number, \
and False otherwise."}, {"PerformanceGoal", "PerformanceGoal is an option for \
various algorithmic and presentational functions that specifies what aspect \
of performance to try to optimize with Automatic settings for options."}, 
 {"Perimeter", "Perimeter[reg] gives the perimeter of the two-dimensional \
region reg. Perimeter[{x1, x2}, {s, smin, smax}, {t, tmin, tmax}] gives the \
perimeter of the parametrized region whose Cartesian coordinates xi are \
functions of s and t. Perimeter[{x1, x2}, {s, smin, smax}, {t, tmin, tmax}, \
chart] interprets the xi as coordinates in the specified coordinate chart."}, 
 {"PeriodicBoundaryCondition", "PeriodicBoundaryCondition[u[x1, \[Ellipsis]], \
pred, f] represents a periodic boundary condition = u(xtarget) = \
u(f(xtarget)) for all xtarget on the boundary of the region given to NDSolve \
where pred is True. PeriodicBoundaryCondition[a + b u[x1, \[Ellipsis]], pred, \
f] represents a generalized periodic boundary condition a + b u(xtarget) = \
u(f(xtarget))."}, {"Periodogram", "Periodogram[list] plots the squared \
magnitude of the discrete Fourier transform (power spectrum) of list. \
Periodogram[list, n] plots the mean of power spectra of non-overlapping \
partitions of length n. Periodogram[list, n, d] uses partitions with offset \
d. Periodogram[list, n, d, wfun] applies a smoothing window wfun to each \
partition. Periodogram[list, n, d, wfun, m] pads partitions with zeros to \
length m prior to the computation of the transform. Periodogram[{list1, \
list2, \[Ellipsis]}, n, d, wfun, m] plots power spectra of several lists. \
Periodogram[audio, \[Ellipsis]] plots the power spectrum of audio. \
Periodogram[{audio1, audio2, \[Ellipsis]}, \[Ellipsis]] plots the power \
spectra of all audioi."}, {"PeriodogramArray", "PeriodogramArray[list] \
returns the squared magnitude of the discrete Fourier transform (power \
spectrum) of list. PeriodogramArray[list, n] averages the power spectra of \
non-overlapping partitions of length n. PeriodogramArray[list, n, d] uses \
partitions with offset d. PeriodogramArray[list, n, d, wfun] applies a \
smoothing window wfun to each partition. PeriodogramArray[list, n, d, wfun, \
m] pads partitions with zeros to length m prior to the computation of the \
transform. PeriodogramArray[image, \[Ellipsis]] returns the squared power \
spectrum of image. PeriodogramArray[audio, \[Ellipsis]] returns the squared \
power spectrum of audio."}, {"Permanent", 
  "Permanent[m] gives the permanent of the square matrix m."}, 
 {"Permissions", "Permissions is an option for CloudObject and related cloud \
functions that specifies permissions for classes of users to access or \
perform operations."}, {"PermissionsGroup", "PermissionsGroup[\"\\!\\(\\*name\
\"] represents a permissions group with the specified name, owned by the \
current user. PermissionsGroup[user, \"\\!\\(\\*name\"] represents a \
permissions group owned by the specified user."}, 
 {"PermissionsGroupMemberQ", "PermissionsGroupMemberQ[group, user] returns \
True if user is a member of the permissions group group, and False \
otherwise."}, {"PermissionsGroups", "PermissionsGroups[] gives a list of \
permissions groups belonging to the current user."}, 
 {"PermissionsKey", "PermissionsKey[\"\\!\\(\\*key\"] represents a \
permissions key that can be used to authorize access to cloud resources."}, 
 {"PermissionsKeys", "PermissionsKeys[] gives a list of all valid permissions \
keys created by the currently authenticated user."}, 
 {"PermutationCycles", "PermutationCycles[perm] gives a disjoint cycle \
representation of permutation perm."}, {"PermutationCyclesQ", "PermutationCyc\
lesQ[expr] returns True if expr is a permutation in disjoint cyclic form, and \
False otherwise."}, {"PermutationGroup", "PermutationGroup[{perm1, \
\[Ellipsis], permn}] represents the group generated by multiplication of the \
permutations perm1, \[Ellipsis], permn."}, {"PermutationLength", "Permutation\
Length[perm] returns the number of integers moved by the permutation perm."}, 
 {"PermutationList", "PermutationList[perm] returns a permutation list \
representation of permutation perm. PermutationList[perm, len] returns a \
permutation list of length len."}, {"PermutationListQ", "PermutationListQ[exp\
r] returns True if expr is a valid permutation list and False otherwise."}, 
 {"PermutationMax", "PermutationMax[perm] returns the largest integer moved \
by the permutation perm."}, {"PermutationMin", "PermutationMin[perm] returns \
the smallest integer moved by the permutation perm."}, 
 {"PermutationOrder", 
  "PermutationOrder[perm] gives the order of permutation perm."}, 
 {"PermutationPower", "PermutationPower[perm, n] gives the n^th permutation \
power of the permutation perm."}, {"PermutationProduct", 
  "PermutationProduct[a, b, c] gives the product of permutations a, b, c."}, 
 {"PermutationReplace", "PermutationReplace[expr, perm] replaces each part in \
expr by its image under the permutation perm. PermutationReplace[expr, gr] \
returns the list of images of expr under all elements of the permutation \
group gr."}, {"PermutationSupport", 
  "PermutationSupport[perm] returns the support of the permutation perm."}, 
 {"Permutations", "Permutations[list] generates a list of all possible \
permutations of the elements in list. Permutations[list, n] gives all \
permutations containing at most n elements. Permutations[list, {n}] gives all \
permutations containing exactly n elements."}, 
 {"Permute", "Permute[expr, perm] permutes the positions of the elements of \
expr according to the permutation perm. Permute[expr, gr] returns the list of \
permuted forms of expr under the elements of the permutation group gr."}, 
 {"PeronaMalikFilter", "PeronaMalikFilter[image] applies a Perona-Malik \
diffusion filter to image. PeronaMalikFilter[image, t] specifies the amount \
of diffusion time t to be applied. PeronaMalikFilter[image, t, k] uses a \
conductance parameter k. PeronaMalikFilter[image, t, k, \[Sigma]] applies a \
Gaussian regularization of width \[Sigma] to the image gradient in the \
conductance function."}, {"PerpendicularBisector", "PerpendicularBisector[{p1\
, p2}] gives the perpendicular bisector of the line segment connecting p1 and \
p2. PerpendicularBisector[Line[{p1, p2}]] gives the perpendicular bisector of \
a line segment."}, {"PersistenceLocation", "PersistenceLocation[\"\\!\\(\\*ty\
pe\"] represents a persistence location of the given type. \
PersistenceLocation[\"\\!\\(\\*type\", base] includes the base address for a \
location type that allows multiple locations."}, 
 {"PersistenceTime", "PersistenceTime is an option for various functions that \
specifies when a persistent value should be treated as expired."}, 
 {"PersistentObject", "PersistentObject[\"\\!\\(\\*name\", loc] represents a \
persistent object stored at persistence location loc."}, 
 {"PersistentObjects", "PersistentObjects[] gives all persistent objects in \
all locations in $PersistencePath. PersistentObjects[patt] gives all \
persistent objects whose names match the string pattern patt. \
PersistentObjects[patt, loc] gives all matching persistent objects in \
persistence location loc. PersistentObjects[patt, {loc1, \[Ellipsis]}] gives \
all matching persistent objects in all the loci."}, 
 {"PersistentSymbol", "PersistentSymbol[\"\\!\\(\\*name\"] represents the \
persistent symbol associated with the key \"\\!\\(\\*name\". \
PersistentSymbol[\"\\!\\(\\*name\", loc] represents the persistent symbol \
associated with name stored in persistence location loc. \
PersistentSymbol[\"\\!\\(\\*name\", {loc1, \[Ellipsis]}] represents the \
persistent symbol associated with name at the first of the locations loci at \
which it occurs."}, {"PersonData", "PersonData[entity, property] gives the \
value of the specified property for the person entity. PersonData[{entity1, \
entity2, \[Ellipsis]}, property] gives a list of property values for the \
specified person entities. PersonData[entity, property, annotation] gives the \
specified annotation associated with the given property."}, 
 {"PetersenGraph", 
  "PetersenGraph[n, k] gives the generalized Petersen graph Pn, k."}, 
 {"PhaseMargins", "PhaseMargins[lsys] gives the phase margins of the linear \
time-invariant system lsys."}, {"PhaseRange", "PhaseRange is an option to \
BodePlot and NicholsPlot that specifies the phase range."}, 
 {"PhysicalSystemData", "PhysicalSystemData[entity, property] gives the value \
of the specified property for the physical system entity. \
PhysicalSystemData[{entity1, entity2, \[Ellipsis]}, property] gives a list of \
property values for the specified physical system entities. \
PhysicalSystemData[entity, property, annotation] gives the specified \
annotation associated with the given property."}, 
 {"Pi", "Pi is \[Pi], with numerical value \[TildeEqual]3.14159."}, 
 {"Pick", "Pick[list, sel] picks out those elements of list for which the \
corresponding element of sel is True. Pick[list, sel, patt] picks out those \
elements of list for which the corresponding element of sel matches patt."}, 
 {"PieChart", "PieChart[{y1, y2, \[Ellipsis], yn}] makes a pie chart with \
sector angle proportional to y1, y2, \[Ellipsis]. PieChart[{\[Ellipsis], \
wi[yi, \[Ellipsis]], \[Ellipsis], wj[yj, \[Ellipsis]], \[Ellipsis]}] makes a \
pie chart with sector features defined by the symbolic wrappers wk. \
PieChart[{data1, data2, \[Ellipsis]}] makes a pie chart from multiple \
datasets datai."}, {"PieChart3D", "PieChart3D[{y1, y2, \[Ellipsis]}] makes a \
3D pie chart with sector angle proportional to y1, y2, \[Ellipsis]. \
PieChart3D[{\[Ellipsis], wi[yi, \[Ellipsis]], \[Ellipsis], wj[yj, \
\[Ellipsis]], \[Ellipsis]}] makes a 3D pie chart with sector features defined \
by the symbolic wrappers wk. PieChart3D[{data1, data2, \[Ellipsis]}] makes a \
3D pie chart from multiple datasets datai."}, {"Piecewise", "Piecewise[{{val1\
, cond1}, {val2, cond2}, \[Ellipsis]}] represents a piecewise function with \
values vali in the regions defined by the conditions condi. Piecewise[{{val1, \
cond1}, \[Ellipsis]}, val] uses default value val if none of the condi apply. \
The default for val is 0."}, {"PiecewiseExpand", "PiecewiseExpand[expr] \
expands nested piecewise functions in expr to give a single piecewise \
function. PiecewiseExpand[expr, assum] expands piecewise functions using \
assumptions. PiecewiseExpand[expr, assum, dom] does the expansion over the \
domain dom."}, {"PillaiTrace", 
  "PillaiTrace[m1, m2] gives Pillai's trace for the matrices m1 and m2."}, 
 {"PillaiTraceTest", "PillaiTraceTest[m1, m2] tests whether the matrices m1 \
and m2 are independent. PillaiTraceTest[\[Ellipsis], \"\\!\\(\\*property\"] \
returns the value of \"\\!\\(\\*property\"."}, 
 {"PingTime", "PingTime[host] gives the round-trip ping time for the \
specified network host. PingTime[host, n] gives a list of times for n \
successive pings."}, 
 {"Pink", 
  "Pink represents the color pink in graphics or style specifications."}, 
 {"PitchRecognize", "PitchRecognize[audio] recognizes the main pitch in \
audio, returning it as a TimeSeries object. PitchRecognize[audio, spec] \
returns the main pitch processed according to the specified spec."}, 
 {"PixelValue", "PixelValue[image, ppos] gives the pixel value of image at \
position pos. PixelValue[image, ppos, \"\\!\\(\\*type\"] gives the pixel \
value converted to the specified type."}, {"PixelValuePositions", "PixelValue\
Positions[image, val] returns a list of pixel positions in image that exactly \
match the value val. PixelValuePositions[image, val, d] returns all pixel \
positions that have values within a distance d from val."}, 
 {"Placed", "Placed[expr, pos] represents an expression expr placed at \
relative position pos in a chart or other display. Placed[{e1, e2, \
\[Ellipsis]}, pos] places each of the ei at a relative position specified by \
pos. Placed[{e1, e2, \[Ellipsis]}, pos, f] applies the function f to each of \
the ei before displaying it."}, {"Placeholder", "Placeholder[name] represents \
a placeholder labeled with name that indicates a place to type. Placeholder[] \
gives the empty placeholder _."}, {"PlaceholderLayer", "PlaceholderLayer[] \
represents a net layer whose operation is undefined. \
PlaceholderLayer[\"\\!\\(\\*tag\", assoc] indicates a tag and information \
given by the association assoc."}, {"PlaceholderReplace", "PlaceholderReplace \
is an option to Paste that determines whether to replace a selection \
placeholder with the selected contents."}, 
 {"Plain", 
  "Plain represents a font that is not bold, italic, or underlined."}, 
 {"PlanarAngle", "PlanarAngle[p->{q1, q2}] gives the angle between the \
half-lines from p through q1 and q2. PlanarAngle[{q1, p, q2}] gives the angle \
at p formed by the triangle with vertex points p, q1 and q2. \
PlanarAngle[\[Ellipsis], \"\\!\\(\\*spec\"] gives the angle specified by \
\"spec\"."}, {"PlanarGraph", "PlanarGraph[{e1, e2, \[Ellipsis]}] yields a \
planar graph with edges ej. PlanarGraph[{v1, v2, \[Ellipsis]}, {e1, e2, \
\[Ellipsis]}] yields a planar graph with vertices vi and edges ej. \
PlanarGraph[{\[Ellipsis], wi[vi], \[Ellipsis]}, {\[Ellipsis], wj[ej], \
\[Ellipsis]}] yields a planar graph with vertex and edge properties defined \
by the symbolic wrappers wk. PlanarGraph[{vi->vj, \[Ellipsis]}] uses rules \
vi->vj to specify a planar graph."}, {"PlanarGraphQ", 
  "PlanarGraphQ[g] yields True if g is a planar graph and False otherwise."}, 
 {"PlanckRadiationLaw", "PlanckRadiationLaw[temperature, \[Lambda]] returns \
the spectral radiance for the specified temperature and wavelength \[Lambda]. \
PlanckRadiationLaw[temperature, f] returns the spectral radiance for the \
specified temperature and frequency f. PlanckRadiationLaw[temperature, \
property] returns the value of the property for the specified temperature. \
PlanckRadiationLaw[temperature, {\[Lambda]1, \[Lambda]2}] returns the \
integrated result of the spectral radiance over the wavelength range \
\[Lambda]1 to \[Lambda]2. PlanckRadiationLaw[temperature, {f1, f2}] returns \
the integrated result of the spectral radiance over the frequency range f1 to \
f2."}, {"PlaneCurveData", "PlaneCurveData[entity, property] gives the value \
of the specified property for the plane curve entity. \
PlaneCurveData[{entity1, entity2, \[Ellipsis]}, property] gives a list of \
property values for the specified plane curve entities. \
PlaneCurveData[entity, property, annotation] gives the specified annotation \
associated with the given property."}, {"PlanetData", "PlanetData[entity, \
property] gives the value of the specified property for the planet entity. \
PlanetData[{entity1, entity2, \[Ellipsis]}, property] gives a list of \
property values for the specified planet entities. PlanetData[entity, \
property, annotation] gives the specified annotation associated with the \
property."}, {"PlanetaryMoonData", "PlanetaryMoonData[entity, property] gives \
the value of the specified property for the moon entity of a planet or minor \
planet. PlanetaryMoonData[{entity1, entity2, \[Ellipsis]}, property] gives a \
list of property values for the specified moon entities. \
PlanetaryMoonData[entity, property, annotation] gives the specified \
annotation associated with the property."}, {"PlantData", "PlantData[entity, \
property] gives the value of the specified property for the plant entity. \
PlantData[{entity1, entity2, \[Ellipsis]}, property] gives a list of property \
values for the specified plant entities. PlantData[entity, property, \
annotation] gives the specified annotation associated with the property."}, 
 {"Play", "Play[f, {t, tmin, tmax}] creates an object that plays as a sound \
whose amplitude is given by f as a function of time t in seconds between tmin \
and tmax."}, {"PlayRange", "PlayRange is an option for Play and related \
functions which specifies what range of sound amplitude levels should be \
included."}, {"Plot", "Plot[f, {x, xmin, xmax}] generates a plot of f as a \
function of x from xmin to xmax. Plot[{f1, f2, \[Ellipsis]}, {x, xmin, xmax}] \
plots several functions fi. Plot[{\[Ellipsis], w[fi], \[Ellipsis]}, \
\[Ellipsis]] plots fi with features defined by the symbolic wrapper w. \
Plot[\[Ellipsis], {x}\[Element]reg] takes the variable x to be in the \
geometric region reg."}, {"Plot3D", "Plot3D[f, {x, xmin, xmax}, {y, ymin, \
ymax}] generates a three-dimensional plot of f as a function of x and y. \
Plot3D[{f1, f2, \[Ellipsis]}, {x, xmin, xmax}, {y, ymin, ymax}] plots several \
functions. Plot3D[{\[Ellipsis], w[fi], \[Ellipsis]}, \[Ellipsis]] plots fi \
with features defined by the symbolic wrapper w. Plot3D[\[Ellipsis], {x, \
y}\[Element]reg] takes variables {x, y} to be in the geometric region reg."}, 
 {"PlotLabel", "PlotLabel is an option for graphics functions that specifies \
an overall label for a plot."}, {"PlotLabels", "PlotLabels is an option for \
visualization functions that specifies what labels to use for each data \
source."}, {"PlotLayout", "PlotLayout is an option for plotting functions \
that specifies the layout of multiple components in a plot."}, 
 {"PlotLegends", "PlotLegends is an option for plot functions that specifies \
what legends to use."}, {"PlotMarkers", "PlotMarkers is an option for \
graphics functions like ListPlot and ListLinePlot that specifies what markers \
to draw at the points plotted."}, {"PlotPoints", "PlotPoints is an option for \
plotting functions that specifies how many initial sample points to use."}, 
 {"PlotRange", "PlotRange is an option for graphics functions that specifies \
what range of coordinates to include in a plot."}, 
 {"PlotRangeClipping", "PlotRangeClipping is an option for graphics functions \
that specifies whether graphics objects should be clipped at the edge of the \
region defined by PlotRange, or should be allowed to extend to the actual \
edge of the image."}, {"PlotRangePadding", "PlotRangePadding is an option for \
graphics functions that specifies how much further axes etc. should extend \
beyond the range of coordinates specified by PlotRange."}, 
 {"PlotRegion", "PlotRegion is an option for graphics functions that \
specifies what region of the final display area a plot should fill."}, 
 {"PlotStyle", "PlotStyle is an option for plotting and related functions \
that specifies styles in which objects are to be drawn."}, 
 {"PlotTheme", "PlotTheme is an option for plotting and related functions \
that specifies an overall theme for visualization elements and styles."}, 
 {"Pluralize", "Pluralize[\"\\!\\(\\*noun\"] gives the plural form of the \
English word \"noun\". Pluralize[\"\\!\\(\\*noun\", n] gives the inflected \
form of \"\\!\\(\\*noun\" for n instances. Pluralize[{\"\\!\\(\\*singular\", \
\"\\!\\(\\*plural\"}, n] inflects using the specified forms. Pluralize[spec, \
list] uses the length of list to determine the inflection to use."}, 
 {"Plus", "x + y + z represents a sum of terms."}, 
 {"PlusMinus", "PlusMinus[x] displays as \[PlusMinus]x. PlusMinus[x, y, \
\[Ellipsis]] displays as x\[PlusMinus]y\[PlusMinus]\[Ellipsis]."}, 
 {"Pochhammer", "Pochhammer[a, n] gives the Pochhammer symbol (a)n."}, 
 {"PodStates", "PodStates is an option for WolframAlpha that determines \
information about the states of the pods."}, {"PodWidth", "PodWidth is an \
option for WolframAlpha that determines the width parameters of the content \
returned by the Wolfram|Alpha API."}, {"Point", "Point[p] is a graphics and \
geometry primitive that represents a point at p. Point[{p1, p2, \[Ellipsis]}] \
represents a collection of points."}, {"PointCountDistribution", "PointCountD\
istribution[pproc, reg] represents the distribution of point counts for the \
point process pproc in the region reg. PointCountDistribution[pproc, {reg1, \
\[Ellipsis], regn}] represents the joint distribution of point counts in \
regions regi."}, {"PointDensity", "PointDensity[pdata] estimates the point \
density function \[Mu](x) from point data pdata. PointDensity[pdata, pmethod] \
estimates the point density function \[Mu](x) with the partition method \
pmethod. PointDensity[bdata, \[Ellipsis]] estimates the point density \
function \[Mu](x) from binned data bdata. PointDensity[pproc, \[Ellipsis]] \
computes the density function \[Mu](x) for point process pproc."}, 
 {"PointDensityFunction", "PointDensityFunction[\[Ellipsis]] represents a \
function whose values give the density at a given location."}, 
 {"PointFigureChart", "PointFigureChart[{{date1, p1}, {date2, p2}, \
\[Ellipsis]}] makes a point and figure chart with prices pi at date datei. \
PointFigureChart[{\"\\!\\(\\*name\", daterange}] makes a point and figure \
chart of closing prices for the financial entity \"\\!\\(\\*name\" over the \
date range daterange. PointFigureChart[{\[Ellipsis]}, s, n] makes a point and \
figure chart with point and figure height s and n reversals."}, 
 {"PointLegend", "PointLegend[{col1, \[Ellipsis]}, {lbl1, \[Ellipsis]}] \
generates a legend that associates points of colors coli with labels lbli. \
PointLegend[{col1, \[Ellipsis]}, Automatic] generates a legend with \
placeholder labels for the colors coli. PointLegend[{lbl1, \[Ellipsis]}] \
represents a legend with inherited colors within visualization functions."}, 
 {"PointProcessEstimator", "PointProcessEstimator[] is an option to \
EstimatedPointProcess and FindPointProcessParameters that specifies what \
point process parameter estimator to use."}, {"PointProcessFitTest", "PointPr\
ocessFitTest[pdata] tests whether the point collection pdata could be modeled \
by a Poisson point process. PointProcessFitTest[pdata, pproc] tests whether \
the point collection could be modeled by the point process pproc. \
PointProcessFitTest[pdata, pproc, \"\\!\\(\\*property\"] returns the value of \
\"\\!\\(\\*property\"."}, {"PointProcessParameterAssumptions", "PointProcessP\
arameterAssumptions[proc] gives a logical expression for assumptions on \
parameters in the point process proc."}, {"PointProcessParameterQ", "PointPro\
cessParameterQ[proc] yields True if proc is a valid random point process, and \
yields False otherwise."}, {"PointSize", "PointSize[d] is a graphics \
directive which specifies that points which follow are to be shown if \
possible as circular regions with diameter d. The diameter d is given as a \
fraction of the total width of the plot."}, {"PointStatisticFunction", "Point\
StatisticFunction[\[Ellipsis]] represents a function whose values give the \
statistic of a points collection pdata at a supplied radius."}, 
 {"PointValuePlot", "PointValuePlot[{pt1->val1, pt2->val2, \[Ellipsis]}] \
plots the points pti styled according to the values vali. \
PointValuePlot[pts->vals] uses a collection of points pti from pts with \
corresponding values vali from val. PointValuePlot[\[Ellipsis], enc] uses the \
visual encoding enc to represent the values vali in the plot. \
PointValuePlot[data, \[Ellipsis]] plots the locations and values from data."}\
, {"PoissonConsulDistribution", "PoissonConsulDistribution[\[Mu], \[Lambda]] \
represents a Poisson-Consul distribution with parameters \[Mu] and \
\[Lambda]."}, {"PoissonDistribution", "PoissonDistribution[\[Mu]] represents \
a Poisson distribution with mean \[Mu]."}, {"PoissonPDEComponent", "PoissonPD\
EComponent[vars, pars] yields a Poisson PDE term \[Del]^2{x1, \[Ellipsis], \
xn}u-f with model variables vars and model parameters pars."}, 
 {"PoissonPointProcess", "PoissonPointProcess[\[Mu], d] represents a \
homogeneous Poisson point process with constant intensity \[Mu] in \
\[DoubleStruckCapitalR]^d."}, {"PoissonProcess", 
  "PoissonProcess[\[Mu]] represents a Poisson process with rate \[Mu]."}, 
 {"PoissonWindow", "PoissonWindow[x] represents a Poisson window function of \
x. PoissonWindow[x, \[Alpha]] uses the parameter \[Alpha]."}, 
 {"PolarAxes", "PolarAxes is an option for sector charts and polar plots that \
specifies whether polar axes should be drawn."}, 
 {"PolarAxesOrigin", "PolarAxesOrigin is an option for sector charts and \
polar plots that specifies where polar axes should be drawn."}, 
 {"PolarGridLines", "PolarGridLines is an option for sector charts and polar \
plots that specifies polar grid lines."}, {"PolarPlot", "PolarPlot[r, \
{\[Theta], \[Theta]min, \[Theta]max}] generates a polar plot of a curve with \
radius r as a function of angle \[Theta]. PolarPlot[{r1, r2, \[Ellipsis]}, \
{\[Theta], \[Theta]min, \[Theta]max}] makes a polar plot of curves with \
radius functions r1, r2, \[Ellipsis]."}, {"PolarTicks", "PolarTicks is an \
option for sector charts and polar plots that specifies tick marks for polar \
axes."}, {"PoleZeroMarkers", "PoleZeroMarkers is an option for RootLocusPlot \
that specifies the markers to be drawn on the complex plane at the open-loop \
poles, closed-loop poles, and open-loop zeros."}, 
 {"PolyGamma", "PolyGamma[z] gives the digamma function \[Psi](z). \
PolyGamma[n, z] gives the n^th derivative of the digamma function \
\[Psi]^(n)(z)."}, {"PolyLog", "PolyLog[n, z] gives the polylogarithm function \
Lin(z). PolyLog[n, p, z] gives the Nielsen generalized polylogarithm function \
Sn, p(z)."}, {"PolyaAeppliDistribution", "PolyaAeppliDistribution[\[Theta], \
p] represents a P\[OAcute]lya-Aeppli distribution with shape parameters \
\[Theta] and p."}, {"Polygon", "Polygon[{p1, \[Ellipsis], pn}] represents a \
filled polygon with points pi. Polygon[{p1, \[Ellipsis], pn}->{{q1, \
\[Ellipsis], qm}, \[Ellipsis]}] represents a polygon with holes {q1, \
\[Ellipsis], qm}, \[Ellipsis]. Polygon[{poly1, poly2, \[Ellipsis]}] \
represents a collection of polygons polyi. Polygon[{p1, \[Ellipsis], pn}, \
data] represents a polygon in which coordinates given as integers i in data \
are taken to be pi."}, {"PolygonAngle", "PolygonAngle[poly] gives a list of \
angles at the vertex points of poly. PolygonAngle[poly, p] gives the angle at \
the vertex point p of a polygon poly. PolygonAngle[poly, i] gives the angle \
at the point pi of poly in canonical form Polygon[{p1, \[Ellipsis], pn}, \
data]. PolygonAngle[\[Ellipsis], \"\\!\\(\\*spec\"] gives the angle specified \
by \"\\!\\(\\*spec\"."}, {"PolygonCoordinates", 
  "PolygonCoordinates[poly] gives a list of coordinates in the polygon poly."}\
, {"PolygonDecomposition", "PolygonDecomposition[poly] decomposes the polygon \
poly into a disjoint union of simpler polygons. PolygonDecomposition[poly, \
\"\\!\\(\\*type\"] decomposes into polygons of the specified \
\"\\!\\(\\*type\"."}, {"PolygonalNumber", "PolygonalNumber[n] gives the n^th \
triangular number Tn. PolygonalNumber[r, n] gives the n^th r -gonal number Pn \
r."}, {"Polyhedron", "Polyhedron[{f1, \[Ellipsis], fn}] represents a filled \
polyhedron inside the closed surfaces with polygon faces fi. Polyhedron[{f1, \
\[Ellipsis], fn}->{{g1, \[Ellipsis], gm}, \[Ellipsis]}] represents a \
polyhedron with voids {g1, \[Ellipsis], gm}, \[Ellipsis]. Polyhedron[{poly1, \
poly2, \[Ellipsis]}] represents a collection of polyhedra polyi. \
Polyhedron[{p1, \[Ellipsis], pn}, data] represents a polyhedron in which \
coordinates given as integers i in data are taken to be pi."}, 
 {"PolyhedronAngle", "PolyhedronAngle[poly, p] gives the solid angle at the \
point p and spanned by edges with common point p. PolyhedronAngle[poly, e] \
gives the dihedral angle between the two faces with common edge e."}, 
 {"PolyhedronCoordinates", "PolyhedronCoordinates[poly] gives a list of \
coordinates in the polyhedron poly."}, {"PolyhedronData", "PolyhedronData[pol\
y, \"\\!\\(\\*property\"] gives the value of the specified property for the \
polyhedron named poly. PolyhedronData[poly] gives an image of the polyhedron \
named poly. PolyhedronData[\"\\!\\(\\*class\"] gives a list of the polyhedra \
in the specified class."}, {"PolyhedronDecomposition", "PolyhedronDecompositi\
on[poly] decomposes the polyhedron poly into a union of simpler polyhedra."}, 
 {"PolyhedronGenus", 
  "PolyhedronGenus[poly] gives the genus of the polyhedron poly."}, 
 {"PolynomialExpressionQ", "PolynomialExpressionQ[expr, x] gives True if expr \
is structurally a polynomial expression in x, and False otherwise. \
PolynomialExpressionQ[expr, {x, y, \[Ellipsis]}] gives True if expr is \
structurally a polynomial expression in x, y, \[Ellipsis], and False \
otherwise. PolynomialExpressionQ[expr, {x, y, \[Ellipsis]}, test] gives True \
if expr is structurally a polynomial expression in x, y, \[Ellipsis] with \
coefficients satisfying test, and False otherwise."}, 
 {"PolynomialExtendedGCD", "PolynomialExtendedGCD[poly1, poly2, x] gives the \
extended GCD of poly1 and poly2 treated as univariate polynomials in x. \
PolynomialExtendedGCD[poly1, poly2, x, Modulus->p] gives the extended GCD \
over the integers mod prime p."}, {"PolynomialGCD", "PolynomialGCD[poly1, \
poly2, \[Ellipsis]] gives the greatest common divisor of the polynomials \
polyi. PolynomialGCD[poly1, poly2, \[Ellipsis], Modulus->p] evaluates the GCD \
modulo the prime p."}, {"PolynomialLCM", "PolynomialLCM[poly1, poly2, \
\[Ellipsis]] gives the least common multiple of the polynomials polyi. \
PolynomialLCM[poly1, poly2, \[Ellipsis], Modulus->p] evaluates the LCM modulo \
the prime p."}, {"PolynomialMod", "PolynomialMod[poly, m] gives the \
polynomial poly reduced modulo m. PolynomialMod[poly, {m1, m2, \[Ellipsis]}] \
reduces modulo all of the mi."}, {"PolynomialQ", "PolynomialQ[expr, var] \
yields True if expr is a polynomial in var, and yields False otherwise. \
PolynomialQ[expr, {var1, \[Ellipsis]}] tests whether expr is a polynomial in \
the vari."}, {"PolynomialQuotient", "PolynomialQuotient[p, q, x] gives the \
quotient of p and q, treated as polynomials in x, with any remainder \
dropped."}, {"PolynomialQuotientRemainder", "PolynomialQuotientRemainder[p, \
q, x] gives a list of the quotient and remainder of p and q, treated as \
polynomials in x."}, {"PolynomialReduce", "PolynomialReduce[poly, {poly1, \
poly2, \[Ellipsis]}, {x1, x2, \[Ellipsis]}] yields a list representing a \
reduction of poly in terms of the polyi. The list has the form {{a1, a2, \
\[Ellipsis]}, b}, where b is minimal and a1 poly1 + a2 poly2 + \[Ellipsis] + \
b is exactly poly."}, {"PolynomialRemainder", "PolynomialRemainder[p, q, x] \
gives the remainder from dividing p by q, treated as polynomials in x."}, 
 {"PoolingLayer", "PoolingLayer[sz] represents a pooling net layer using \
kernels of size sz. PoolingLayer[{w}] represents a layer performing \
one-dimensional pooling with kernels of size w. PoolingLayer[{h, w}] \
represents a layer performing two-dimensional pooling with kernels of size \
h\[Times]w. PoolingLayer[{h, w, d}] represents a layer performing \
three-dimensional pooling with kernels of size h\[Times]w\[Times]d. \
PoolingLayer[kernel, stride] represents a layer that uses stride as the step \
size between kernel applications. PoolingLayer[kernel, opts] includes options \
for other pooling methods, padding and other parameters."}, 
 {"PopupMenu", "PopupMenu[x, {val1, val2, \[Ellipsis]}] represents a popup \
menu with setting x and possible values vali. PopupMenu[Dynamic[x], {val1, \
\[Ellipsis]}] takes the setting to be the dynamically updated current value \
of x, with the value of x being reset every time an item is selected from the \
menu. PopupMenu[x, {val1->lbl1, val2->lbl2, \[Ellipsis]}] represents a popup \
menu in which possible value vali is indicated by lbli. PopupMenu[x, \
{val1->lbl1, \[Ellipsis]}, dlbl] displays the menu item as dlbl if x is none \
of the vali. PopupMenu[x, {\[Ellipsis]}, dlbl, base] displays as base when it \
is not being clicked."}, {"PopupView", "PopupView[{expr1, expr2, \
\[Ellipsis]}] represents an object which displays as a popup menu whose items \
are the expri. PopupView[{expr1, expr2, \[Ellipsis]}, i] makes the i^th entry \
be the one currently chosen. PopupView[{expr1, expr2, \[Ellipsis]}, i, base] \
displays as base if it is not being clicked."}, 
 {"PopupWindow", "PopupWindow[expr, contents] displays as expr, but pops up a \
window containing contents when clicked."}, {"Position", "Position[expr, \
pattern] gives a list of the positions at which objects matching pattern \
appear in expr. Position[expr, pattern, levelspec] finds only objects that \
appear on levels specified by levelspec. Position[expr, pattern, levelspec, \
n] gives the positions of the first n objects found. Position[pattern] \
represents an operator form of Position that can be applied to an \
expression."}, {"PositionIndex", "PositionIndex[list] gives an association \
between unique elements in list and the positions at which they occur. \
PositionIndex[assoc] gives an association whose keys are the distinct values \
in assoc, and whose values are lists of the keys with which they are \
associated."}, {"Positive", 
  "Positive[x] gives True if x is a positive number."}, 
 {"PositiveDefiniteMatrixQ", "PositiveDefiniteMatrixQ[m] gives True if m is \
explicitly positive definite, and False otherwise."}, 
 {"PositiveIntegers", "PositiveIntegers represents the domain of strictly \
positive integers, as in x\[Element]PositiveIntegers."}, 
 {"PositiveRationals", "PositiveRationals represents the domain of strictly \
positive rational numbers, as in x\[Element]PositiveRationals."}, 
 {"PositiveReals", 
  "PositiveReals represents the domain of strictly positive real numbers."}, 
 {"PositiveSemidefiniteMatrixQ", "PositiveSemidefiniteMatrixQ[m] gives True \
if m is explicitly positive semidefinite, and False otherwise."}, 
 {"PositivelyOrientedPoints", "PositivelyOrientedPoints[{p1, p2, p3, \
\[Ellipsis], pd + 1}] tests whether the sequence of points p1, p2, p3, \
\[Ellipsis], pd + 1 is positively oriented."}, 
 {"PossibleZeroQ", "PossibleZeroQ[expr] gives True if basic symbolic and \
numerical methods suggest that expr has value zero, and gives False \
otherwise."}, {"Postfix", "Postfix[f[expr]] prints with f[expr] given in \
default postfix form: expr//f. Postfix[f[expr], h] prints as exprh."}, 
 {"Power", "x^y gives x to the power y."}, {"PowerDistribution", "PowerDistri\
bution[k, a] represents a power distribution with domain parameter k and \
shape parameter a."}, {"PowerExpand", "PowerExpand[expr] expands all powers \
of products and powers. PowerExpand[expr, {x1, x2, \[Ellipsis]}] expands only \
with respect to the variables xi."}, {"PowerMod", "PowerMod[a, b, m] gives \
a^b mod m. PowerMod[a, - 1, m] finds the modular inverse of a modulo m. \
PowerMod[a, 1 / r, m] finds a modular r^th root of a."}, 
 {"PowerModList", "PowerModList[a, s / r, m] gives a list of all x modulo m \
for which x^r\[Congruent]a^s mod m."}, {"PowerRange", "PowerRange[b] \
generates the list {1, 10, 100, \[Ellipsis], max}, where max is the largest \
power of 10 that does not exceed b. PowerRange[a, b] generates the list {a, \
10a, 100a, \[Ellipsis], max}, with successive elements increasing by factors \
of 10. PowerRange[a, b, r] uses factors of r instead of 10."}, 
 {"PowerSpectralDensity", "PowerSpectralDensity[data, \[Omega]] estimates the \
power spectral density for data. PowerSpectralDensity[data, \[Omega], sspec] \
estimates the power spectral density for data with smoothing specification \
sspec. PowerSpectralDensity[tproc, \[Omega]] represents the power spectral \
density of a time series process tproc."}, {"PowerSymmetricPolynomial", "Powe\
rSymmetricPolynomial[r] represents a formal power symmetric polynomial with \
exponent r. PowerSymmetricPolynomial[{r1, r2, \[Ellipsis]}] represents a \
multivariate formal power symmetric polynomial with exponents r1, r2, \
\[Ellipsis]. PowerSymmetricPolynomial[rspec, data] gives the power symmetric \
polynomial in data."}, {"PowersRepresentations", "PowersRepresentations[n, k, \
p] gives the distinct representations of the integer n as a sum of k \
non-negative p^th integer powers."}, {"PreDecrement", 
  "--x decreases the value of x by 1, returning the new value of x."}, 
 {"PreIncrement", 
  "++x increases the value of x by 1, returning the new value of x."}, 
 {"PrecedenceForm", "PrecedenceForm[expr, prec] prints with expr \
parenthesized as it would be if it contained an operator with precedence \
prec."}, {"Precedes", "Precedes[x, y, \[Ellipsis]] displays as \
x\[Precedes]y\[Precedes]\[Ellipsis]."}, {"PrecedesEqual", "PrecedesEqual[x, \
y, \[Ellipsis]] displays as x\[PrecedesEqual]y\[PrecedesEqual]\[Ellipsis]."}, 
 {"PrecedesSlantEqual", "PrecedesSlantEqual[x, y, \[Ellipsis]] displays as \
x\[PrecedesSlantEqual]y\[PrecedesSlantEqual]\[Ellipsis]."}, 
 {"PrecedesTilde", "PrecedesTilde[x, y, \[Ellipsis]] displays as \
x\[PrecedesTilde]y\[PrecedesTilde]\[Ellipsis]."}, 
 {"Precision", "Precision[x] gives the effective number of digits of \
precision in the number x."}, {"PrecisionGoal", "PrecisionGoal is an option \
for various numerical operations which specifies how many effective digits of \
precision should be sought in the final result."}, 
 {"Predict", "Predict[{in1->out1, in2->out2, \[Ellipsis]}] generates a \
PredictorFunction[\[Ellipsis]] based on the example input-output pairs given. \
Predict[{in1, in2, \[Ellipsis]}->{out1, out2, \[Ellipsis]}] generates the \
same result. Predict[training, input] attempts to predict the output \
associated with input from the training examples given. \
Predict[\"\\!\\(\\*name\", input] uses the built-in predictor function \
represented by \"\\!\\(\\*name\". Predict[predictor, opts] takes an existing \
predictor function and modifies it with the new options given."}, 
 {"PredictorFunction", "PredictorFunction[\[Ellipsis]] represents a function \
generated by Predict that predicts numerical values from data."}, 
 {"PredictorMeasurements", "PredictorMeasurements[predictor, testset, prop] \
gives measurements associated with the property prop when predictor is \
evaluated on testset. PredictorMeasurements[predictor, testset] yields a \
measurement report that can be applied to any property. \
PredictorMeasurements[data, \[Ellipsis]] use predictions data instead of a \
predictor. PredictorMeasurements[\[Ellipsis], {prop1, prop2, \[Ellipsis]}] \
gives properties prop1, prop2, etc."}, {"PredictorMeasurementsObject", "Predi\
ctorMeasurementsObject[\[Ellipsis]] represents an object generated by \
PredictorMeasurements that can be applied to properties."}, 
 {"PreemptProtect", "PreemptProtect[expr] evaluates expr, without any \
interruption from preemptive evaluations."}, {"Prefix", "Prefix[f[expr]] \
prints with f[expr] given in default prefix form: f@expr. Prefix[f[expr], h] \
prints as hexpr."}, {"Prepend", "Prepend[expr, elem] gives expr with elem \
prepended. Prepend[elem] represents an operator form of Prepend that can be \
applied to an expression."}, {"PrependLayer", "PrependLayer[] represents a \
net layer that takes an input array and prepends another array to it."}, 
 {"PrependTo", "PrependTo[x, elem] prepends elem to the value of x, and \
resets x to the result."}, {"PreprocessingRules", "PreprocessingRules is an \
option that specifies how the input should be preprocessed."}, 
 {"PreserveColor", "PreserveColor is an option for ImageRestyle and related \
functions that specifies whether to preserve colors in the original image."}, 
 {"PreserveImageOptions", "PreserveImageOptions is an option to graphics and \
related functions that specifies whether image size and certain other options \
should be preserved from the previous version of a graphic if the graphic is \
replaced by a new one in output."}, {"PreviousCell", "PreviousCell[] returns \
the CellObject corresponding to the cell directly above the currently \
evaluating cell. PreviousCell[cellobj] starts looking from the given cell. \
PreviousCell[NotebookSelection[nbobj]] starts looking from the topmost \
selected item."}, {"PreviousDate", "PreviousDate[gran] gives the previously \
occurring date of the specified granularity type gran. PreviousDate[daytype] \
gives the previous day corresponding to the specified daytype. \
PreviousDate[date, gran] gives the previous date of the given granularity \
relative to the specified date."}, {"PriceGraphDistribution", "PriceGraphDist\
ribution[n, k, a] represents a de Solla Price graph distribution for n \
-vertex graphs where a new vertex with k edges is added at each step, using \
attractiveness parameter a."}, 
 {"Prime", "Prime[n] gives the n^th prime number n."}, 
 {"PrimeNu", 
  "PrimeNu[n] gives the number of distinct primes \[Nu](n) in n."}, 
 {"PrimeOmega", "PrimeOmega[n] gives the number of prime factors counting \
multiplicities \[CapitalOmega](n) in n."}, 
 {"PrimePi", 
  "PrimePi[x] gives the number of primes x less than or equal to x."}, 
 {"PrimePowerQ", "PrimePowerQ[expr] yields True if expr is a power of a prime \
number, and yields False otherwise."}, 
 {"PrimeQ", 
  "PrimeQ[n] yields True if n is a prime number, and yields False otherwise."}\
, {"PrimeZetaP", "PrimeZetaP[s] gives prime zeta function P(s)."}, 
 {"Primes", 
  "Primes represents the domain of prime numbers, as in x\[Element]Primes."}, 
 {"PrimitivePolynomialQ", "PrimitivePolynomialQ[poly, p] tests whether poly \
is a primitive polynomial modulo a prime p."}, 
 {"PrimitiveRoot", "PrimitiveRoot[n] gives a primitive root of n. \
PrimitiveRoot[n, k] gives the smallest primitive root of n greater than or \
equal to k."}, {"PrimitiveRootList", 
  "PrimitiveRootList[n] gives a list of primitive roots of n."}, 
 {"PrincipalComponents", "PrincipalComponents[matrix] transforms elements of \
matrix into unscaled principal components."}, {"PrincipalValue", "PrincipalVa\
lue is an option for Integrate that specifies whether the Cauchy principal \
value should be found for a definite integral."}, 
 {"Print", "Print[expr] prints expr as output."}, 
 {"PrintTemporary", "PrintTemporary[expr] prints expr as a temporary cell in \
a notebook, removing it when the evaluation of the current input line is \
complete."}, {"PrintableASCIIQ", "PrintableASCIIQ[string] yields True if the \
string contains only printable ASCII characters, and yields False otherwise."}\
, {"PrintingStyleEnvironment", "PrintingStyleEnvironment is an option for \
notebooks that specifies the style environment to be used in printing the \
notebook on paper."}, {"Printout3D", "Printout3D[model] prints out the 3D \
model using a 3D print previewer. Printout3D[model, service] prints out the \
3D model using the specified 3D printing service. Printout3D[model, \
\"\\!\\(\\*file.\\!\\(\\*ext\"] saves a print-ready form of the model to a \
file in the format indicated by the file extension ext."}, 
 {"Printout3DPreviewer", "Printout3DPreviewer is an option for Printout3D \
that specifies a previewer for generating outputs to print."}, 
 {"Prism", "Prism[{p1, \[Ellipsis], p6}] represents a filled prism connecting \
the triangles {p1, p2, p3} and {p4, p5, p6}."}, 
 {"PrivateCellOptions", "PrivateCellOptions is an option for cells that \
specifies various low-level cell settings."}, {"PrivateFontOptions", "Private\
FontOptions is an option for selections that specifies settings for various \
font suboptions."}, {"PrivateKey", "PrivateKey[assoc] represents the private \
part of a key pair for a public-key cryptographic system."}, 
 {"PrivateNotebookOptions", "PrivateNotebookOptions is an option for \
notebooks that specifies various low-level notebook settings."}, 
 {"Probability", "Probability[pred, x\[Distributed]dist] gives the \
probability for an event that satisfies the predicate pred under the \
assumption that x follows the probability distribution dist. \
Probability[pred, x\[Distributed]data] gives the probability for an event \
that satisfies the predicate pred under the assumption that x follows the \
probability distribution given by data. Probability[pred, {x1, x2, \
\[Ellipsis]}\[Distributed]dist] gives the probability that an event satisfies \
pred under the assumption that {x1, x2, \[Ellipsis]} follows the multivariate \
distribution dist. Probability[pred, {x1\[Distributed]dist1, \
x2\[Distributed]dist2, \[Ellipsis]}] gives the probability that an event \
satisfies pred under the assumption that x1, x2, \[Ellipsis] are independent \
and follow the distributions dist1, dist2, \[Ellipsis]. \
Probability[pred1\[Conditioned]pred2, \[Ellipsis]] gives the conditional \
probability of pred1 given pred2."}, {"ProbabilityDistribution", "Probability\
Distribution[pdf, {x, xmin, xmax}] represents the continuous distribution \
with PDF pdf in the variable x where the pdf is taken to be zero for x<xmin \
and x>xmax. ProbabilityDistribution[pdf, {x, xmin, xmax, 1}] represents the \
discrete distribution with PDF pdf in the variable x where the pdf is taken \
to be zero for x<xmin and x>xmax. ProbabilityDistribution[pdf, {x, \
\[Ellipsis]}, {y, \[Ellipsis]}, \[Ellipsis]] represents a multivariate \
distribution with PDF pdf in the variables x, y, \[Ellipsis], etc. \
ProbabilityDistribution[{\"CDF\", cdf}, \[Ellipsis]] represents a probability \
distribution with CDF given by cdf. ProbabilityDistribution[{\"SF\", sf}, \
\[Ellipsis]] represents a probability distribution with survival function \
given by sf. ProbabilityDistribution[{\"HF\", hf}, \[Ellipsis]] represents a \
probability distribution with hazard function given by hf."}, 
 {"ProbabilityPlot", "ProbabilityPlot[list] generates a plot of the CDF of \
list against the CDF of a normal distribution. ProbabilityPlot[dist] \
generates a plot of the CDF of the distribution dist against the CDF of a \
normal distribution. ProbabilityPlot[data, rdata] generates a plot of the CDF \
of data against the CDF of rdata. ProbabilityPlot[data, rdist] generates a \
plot of the CDF of data against the CDF of symbolic distribution rdist. \
ProbabilityPlot[{data1, data2, \[Ellipsis]}, ref] generates a plot of the CDF \
of datai against the CDF of a reference distribution ref."}, 
 {"ProbabilityScalePlot", "ProbabilityScalePlot[{x1, x2, \[Ellipsis]}] \
generates a normal probability plot of the samples xi. \
ProbabilityScalePlot[{x1, x2, \[Ellipsis]}, \"\\!\\(\\*dist\"] generates a \
probability plot scaled for the distribution \"\\!\\(\\*dist\". \
ProbabilityScalePlot[{data1, data2, \[Ellipsis]}, \"\\!\\(\\*dist\"] \
generates several scaled probability plots for data1, data2, \[Ellipsis]."}, 
 {"ProbitModelFit", "ProbitModelFit[{y1, y2, \[Ellipsis]}, {f1, f2, \
\[Ellipsis]}, x] constructs a binomial probit regression model of the form \
1/2 (1 + erf((\[Beta]0 + \[Beta]1f1 + \[Beta]2f2 + \[CenterEllipsis]) / \
\[Sqrt]2)) that fits the yi for successive x values 1, 2, \[Ellipsis]. \
ProbitModelFit[{{x11, x12, \[Ellipsis], y1}, {x21, x22, \[Ellipsis], y2}, \
\[Ellipsis]}, {f1, f2, \[Ellipsis]}, {x1, x2, \[Ellipsis]}] constructs a \
binomial probit regression model of the form 1/2 (1 + erf((\[Beta]0 + \
\[Beta]1f1 + \[Beta]2f2 + \[CenterEllipsis]) / \[Sqrt]2)) where the fi depend \
on the variables xk. ProbitModelFit[{m, v}] constructs a binomial probit \
regression model from the design matrix m and response vector v."}, 
 {"ProcessConnection", "ProcessConnection[proc, \"\\!\\(\\*stream\"] returns \
the stream object for a given stream."}, {"ProcessDirectory", "ProcessDirecto\
ry is an option specifying the initial working directory to use when \
executing a process in functions like StartProcess and RunProcess."}, 
 {"ProcessEnvironment", "ProcessEnvironment is an option specifying the \
initial settings of environment variables to use when executing a process in \
functions like StartProcess and RunProcess."}, 
 {"ProcessEstimator", "ProcessEstimator is an option to EstimatedProcess and \
FindProcessParameters that specifies what process parameter estimator to \
use."}, {"ProcessInformation", "ProcessInformation[proc] gives information \
about an external process proc. ProcessInformation[proc, \"\\!\\(\\*prop\"] \
gives information about the property \"\\!\\(\\*prop\"."}, 
 {"ProcessObject", "ProcessObject[\[Ellipsis]] is an object that represents a \
runnable external process. ProcessObject[pid] represents the running external \
process with PID pid on your computer system."}, 
 {"ProcessParameterAssumptions", "ProcessParameterAssumptions[proc] gives a \
logical expression for assumptions on parameters in the random process proc."}\
, {"ProcessParameterQ", "ProcessParameterQ[proc] yields True if proc is a \
valid random process, and yields False otherwise."}, 
 {"ProcessStatus", "ProcessStatus[proc] gives the current status of the \
external process represented by the ProcessObject proc. ProcessStatus[proc, \
\"\\!\\(\\*status\"] returns True if the process has the status given and \
returns False otherwise."}, {"Processes", "Processes[] returns a list of \
currently running external processes started in this Wolfram Language \
session."}, {"Product", "Product[f, {i, imax}] evaluates the product \
\[Product]i = 1imaxf. Product[f, {i, imin, imax}] starts with i = imin. \
Product[f, {i, imin, imax, di}] uses steps di. Product[f, {i, {i1, i2, \
\[Ellipsis]}}] uses successive values i1, i2, \[Ellipsis]. Product[f, {i, \
imin, imax}, {j, jmin, jmax}, \[Ellipsis]] evaluates the multiple product \
\[Product]i = iminimax\[Product]j = jminjmax\[Ellipsis] f. Product[f, i] \
gives the indefinite product \[Product]if."}, {"ProductDistribution", "Produc\
tDistribution[dist1, dist2, \[Ellipsis]] represents the joint distribution \
with independent component distributions dist1, dist2, \[Ellipsis]."}, 
 {"ProductLog", "ProductLog[z] gives the principal solution for w in z==we^w. \
ProductLog[k, z] gives the k^th solution."}, {"ProgressIndicator", "ProgressI\
ndicator[x] represents a progress indicator with setting x in the range 0 to \
1. ProgressIndicator[Dynamic[x]] takes the setting to be the dynamically \
updated current value of x. ProgressIndicator[x, {xmin, xmax}] represents a \
progress indicator with range xmin to xmax. ProgressIndicator[x, \
Indeterminate] represents a progress indicator with indeterminate range."}, 
 {"ProgressReporting", "ProgressReporting is an option for various \
algorithmic functions that specifies whether to report the progress of the \
computation."}, {"Projection", "Projection[u, v] finds the projection of the \
vector u onto the vector v. Projection[u, v, f] finds projections with \
respect to the inner product function f."}, {"Prolog", "Prolog is an option \
for graphics functions which gives a list of graphics primitives to be \
rendered before the main part of the graphics is rendered."}, 
 {"ProofObject", "ProofObject[\[Ellipsis]] represents a proof object \
generated by FindEquationalProof."}, {"Proportion", "Proportion[x, y, \
\[Ellipsis]] displays as x\[Proportion]y\[Proportion]\[Ellipsis]."}, 
 {"Proportional", "Proportional[x, y, \[Ellipsis]] displays as \
x\[Proportional]y\[Proportional]\[Ellipsis]."}, 
 {"Protect", "Protect[s1, s2, \[Ellipsis]] sets the attribute Protected for \
the symbols si. Protect[\"\\!\\(\\*form_1\", \"\\!\\(\\*form_2\", \
\[Ellipsis]] protects all symbols whose names match any of the string \
patterns formi."}, {"Protected", "Protected is an attribute that prevents any \
values associated with a symbol from being modified."}, 
 {"ProteinData", "ProteinData[entity] gives the reference amino acid sequence \
for the protein entity. ProteinData[entity, property] gives the value of the \
specified property for the protein entity. ProteinData[entity, property, \
annotation] gives the specified annotation associated with the given \
property."}, {"Pruning", "Pruning[image] removes the outermost branches of \
thin objects in image by setting their values to black. Pruning[image, n] \
removes branches that are at most n pixels long. Pruning[image,{n}] removes n \
pixels from each branch. Pruning[image, n, t] treats values above t as \
foreground."}, {"PseudoInverse", 
  "PseudoInverse[m] finds the pseudoinverse of a rectangular matrix."}, 
 {"PsychrometricPropertyData", "PsychrometricPropertyData[spec] returns the \
psychrometric properties of moist air for the specified parameters. \
PsychrometricPropertyData[spec, property] returns the specified property for \
the given parameters."}, {"PublicKey", "PublicKey[assoc] represents the \
public part of a key pair for a public-key cryptographic system. \
PublicKey[PrivateKey[\[Ellipsis]]] creates a matching public key for the \
given private key."}, {"PublisherID", "PublisherID is an option for \
ResourceSubmit that specifies the ID used to submit a resource for \
publication in the resource system."}, {"PulsarData", "PulsarData[entity, \
property] gives the value of the specified property for the pulsar entity. \
PulsarData[{entity1, entity2, \[Ellipsis]}, property] gives a list of \
property values for the specified pulsar entities. PulsarData[entity, \
property, annotation] gives the specified annotation associated with the \
given property."}, {"PunctuationCharacter", "PunctuationCharacter represents \
a punctuation character in StringExpression."}, 
 {"Purple", 
  "Purple represents the color purple in graphics or style specifications."}, 
 {"Put", "expr>>filename writes expr to a file. Put[expr1, expr2, \
\[Ellipsis], \"\\!\\(\\*filename\"] writes a sequence of expressions expri to \
a file. Put[\"\\!\\(\\*filename\"] creates an empty file with the specified \
name."}, {"PutAppend", "expr>>>filename appends expr to a file. \
PutAppend[expr1, expr2, \[Ellipsis], \"\\!\\(\\*filename\"] appends a \
sequence of expressions expri to a file."}, {"Pyramid", "Pyramid[{p1, \
\[Ellipsis], p5}] represents a filled pyramid with base {p1, \[Ellipsis], p4} \
and top p5."}, {"QBinomial", 
  "QBinomial[n, m, q] gives the q -binomial coefficient (n m )q."}, 
 {"QFactorial", "QFactorial[n, q] gives the q -factorial [n]q!."}, 
 {"QGamma", 
  "QGamma[z, q] gives the q -gamma function \[CapitalGamma]q (z)."}, 
 {"QHypergeometricPFQ", "QHypergeometricPFQ[{a1, \[Ellipsis], ar}, {b1, \
\[Ellipsis], bs}, q, z] gives the basic hypergeometric series \
\[Null]r\[Phi]s(a;b;q;z)."}, {"QPochhammer", "QPochhammer[a, q, n] gives the \
q -Pochhammer symbol (a;q) n. QPochhammer[a, q] gives the q -Pochhammer \
symbol (a;q)\[Infinity]. QPochhammer[q] gives the q -Pochhammer symbol \
(q;q)\[Infinity]."}, {"QPolyGamma", "QPolyGamma[z, q] gives the q -digamma \
function \[Psi]q(z). QPolyGamma[n, z, q] gives the n^th derivative of the q \
-digamma function \[Psi]q(n)(z)."}, {"QRDecomposition", "QRDecomposition[m] \
yields the QR decomposition for a numerical matrix m. The result is a list \
{q, r}, where q is a unitary matrix and r is an upper-triangular matrix."}, 
 {"QnDispersion", "QnDispersion[list] gives the Qn statistic of the elements \
in list. QnDispersion[list, c] gives the Qn statistic with a scaling factor \
c."}, {"QuadraticIrrationalQ", "QuadraticIrrationalQ[x] gives True if x is a \
quadratic irrational and False otherwise."}, {"QuadraticOptimization", "Quadr\
aticOptimization[f, cons, vars] finds values of variables vars that minimize \
the quadratic objective f subject to linear constraints cons. \
QuadraticOptimization[{q, c}, {a, b}] finds a vector x that minimizes the \
quadratic objective 1 / 2x.q.x + c.x subject to the linear inequality \
constraints a.x + b\[SucceedsEqual]0. QuadraticOptimization[{q, c}, {a, b}, \
{aeq, beq}] includes the linear equality constraints aeq.x + beq==0. \
QuadraticOptimization[{q, c}, \[Ellipsis], {dom1, dom2, \[Ellipsis]}] takes \
xi to be in the domain domi, where domi is Integers or Reals. \
QuadraticOptimization[\[Ellipsis], \"\\!\\(\\*prop\"] specifies what solution \
property \"\\!\\(\\*prop\" should be returned."}, 
 {"Quantile", "Quantile[list, q] gives the q^th quantile of list. \
Quantile[list, {q1, q2, \[Ellipsis]}] gives a list of quantiles q1, q2, \
\[Ellipsis]. Quantile[list, q, {{a, b}, {c, d}}] uses the quantile definition \
specified by parameters a, b, c, d. Quantile[dist, q] gives a quantile of the \
distribution dist."}, {"QuantilePlot", "QuantilePlot[list] generates a plot \
of quantiles of list against the quantiles of a normal distribution. \
QuantilePlot[dist] generates a plot of quantiles of the distribution dist \
against the quantiles of a normal distribution. QuantilePlot[data, rdata] \
generates a plot of the quantiles of data against the quantiles of rdata. \
QuantilePlot[data, rdist] generates a plot of the quantiles of data against \
the quantiles of a symbolic distribution rdist. QuantilePlot[{data1, data2, \
\[Ellipsis]}, ref] generates a plot of quantiles of datai against the \
quantiles of a reference distribution ref."}, {"Quantity", "Quantity[magnitud\
e, unit] represents a quantity with size magnitude and unit specified by \
unit. Quantity[unit] assumes the magnitude of the specified unit to be 1."}, 
 {"QuantityArray", "QuantityArray[mags, unit] represents an array of \
quantities with magnitudes mags and common unit. QuantityArray[mags, {unit1, \
unit2, \[Ellipsis]}] represents an array of lists of quantities with units \
{unit1, unit2, \[Ellipsis]}. QuantityArray[quants] converts an array of \
Quantity objects into a single QuantityArray object."}, 
 {"QuantityDistribution", "QuantityDistribution[dist, unit] represents a \
distribution dist of quantities with unit specified by unit. \
QuantityDistribution[dist, {unit1, unit2, \[Ellipsis]}] represents a \
multivariate distribution with units {unit1, unit2, \[Ellipsis]}."}, 
 {"QuantityForm", "QuantityForm[expr, form] prints expr with all Quantity \
expressions using the specified unit display form form. QuantityForm[expr, \
{forms}] prints expr using the appropriate combination of the specified unit \
display forms forms."}, {"QuantityMagnitude", "QuantityMagnitude[quantity] \
gives the amount of the specified quantity. QuantityMagnitude[quantity, unit] \
gives the value corresponding to quantity when converted to unit."}, 
 {"QuantityQ", "QuantityQ[expr] gives True if expr is a Quantity with valid \
arguments, and False otherwise."}, {"QuantityUnit", "QuantityUnit[quantity] \
returns the unit associated with the specified quantity."}, 
 {"QuantityVariable", "QuantityVariable[var, \"\\!\\(\\*pq\"] represents a \
variable with the label var and the corresponding physical quantity \
\"\\!\\(\\*pq\". QuantityVariable[\"\\!\\(\\*pq\"] represents the unlabeled \
physical quantity \"\\!\\(\\*pq\"."}, {"QuantityVariableCanonicalUnit", "Quan\
tityVariableCanonicalUnit[quantityvariable] returns the canonical unit \
associated with the specified quantityvariable."}, 
 {"QuantityVariableDimensions", "QuantityVariableDimensions[quantityvariable] \
returns a list of base dimensions associated with the specified \
quantityvariable."}, {"QuantityVariableIdentifier", "QuantityVariableIdentifi\
er[quantityvariable] returns the identifier associated with the specified \
quantityvariable."}, {"QuantityVariablePhysicalQuantity", "QuantityVariablePh\
ysicalQuantity[var] returns the physical quantity associated with the \
quantity variable var."}, {"Quartics", "Quartics is an option for functions \
that involve solving algebraic equations that specifies whether explicit \
forms for solutions to quartic equations should be given."}, 
 {"QuartileDeviation", "QuartileDeviation[list] gives the quartile deviation \
or semi-interquartile range of the elements in list. QuartileDeviation[dist] \
gives the quartile deviation or semi-interquartile range of the distribution \
dist."}, {"QuartileSkewness", "QuartileSkewness[list] gives the coefficient \
of quartile skewness for the elements in list. QuartileSkewness[dist] gives \
the coefficient of quartile skewness for the distribution dist."}, 
 {"Quartiles", "Quartiles[list] gives a list of the 1/4, 1/2 and 3/4 \
quantiles of the elements in list. Quartiles[dist] gives a list of the 1/4, \
1/2 and 3/4 quantiles of the distribution dist."}, 
 {"Query", "Query[operator1, operator2, \[Ellipsis]] represents a query that \
can be applied to a Dataset object, in which the successive operatori are \
applied at successively deeper levels."}, {"QuestionObject", "QuestionObject[\
q, assess] represents the question q and the corresponding assessment assess. \
QuestionObject[assess] derives a question from the assessment."}, 
 {"QueueProperties", "QueueProperties[qproc] gives a summary of properties \
for the queueing process qproc. QueueProperties[{qproc, i}] gives a summary \
of properties for the i^th node in the queueing network process qproc. \
QueueProperties[data] gives a summary of properties for queueing simulation \
data. QueueProperties[\[Ellipsis], \"\\!\\(\\*property\"] gives the specified \
\"\\!\\(\\*property\"."}, {"QueueingNetworkProcess", "QueueingNetworkProcess[\
\[Gamma], r, \[Mu], c] represents an open (Jackson) queueing network process \
with arrival vector \[Gamma], routing probability matrix r, service vector \
\[Mu], and service channel vector c. QueueingNetworkProcess[\[Gamma], r, \
\[Mu], c, k] represents a closed (Gordon-Newell) queueing network process \
with k jobs in the system."}, {"QueueingProcess", "QueueingProcess[\[Lambda], \
\[Mu]] represents an M/M/1 queue with arrival rate \[Lambda] and service rate \
\[Mu]. QueueingProcess[\[Lambda], sdist] represents an M/G/1 queue with \
arrival rate \[Lambda] and service distribution sdist. QueueingProcess[adist, \
\[Mu]] represents a G/M/1 queue with arrival distribution adist and service \
rate \[Mu]. QueueingProcess[adist, sdist] represents a G/G/1 queue with \
arrival distribution adist and service distribution sdist. \
QueueingProcess[\[Ellipsis], \[Ellipsis], c] represents a queueing process \
with c service channels. QueueingProcess[\[Ellipsis], \[Ellipsis], c, k] \
represents a queueing process with system capacity k. \
QueueingProcess[\[Ellipsis], \[Ellipsis], c, k, x0] represents a queueing \
process with initial state x0."}, {"Quiet", "Quiet[expr] evaluates expr \
\"quietly\", without actually outputting any messages generated. Quiet[expr, \
{s1::t1, s2::t2, \[Ellipsis]}] quietens only the specified messages during \
the evaluation of expr. Quiet[expr, \"\\!\\(\\*name\"] quietens only the \
named group of messages."}, {"QuietEcho", "QuietEcho[expr] evaluates expr \
without letting Echo and related functions inside expr print any result."}, 
 {"Quit", "Quit[] terminates a Wolfram Language kernel session."}, 
 {"Quotient", "Quotient[m, n] gives the integer quotient of m and n. \
Quotient[m, n, d] uses an offset d."}, {"QuotientRemainder", "QuotientRemaind\
er[m, n] gives a list of the quotient and remainder from division of m by n."}\
, {"RGBColor", "RGBColor[r, g, b] represents a color in the RGB color space \
with red, blue and green components. RGBColor[r, g, b, a] specifies opacity \
a. RGBColor[\"\\!\\(\\*string\"] returns a color from an HTML color name, \
etc. RGBColor[color] returns the RGB representation of color."}, 
 {"RSolve", "RSolve[eqn, a[n], n] solves a recurrence equation for a[n]. \
RSolve[{eqn1, eqn2, \[Ellipsis]}, {a1[n], a2[n], \[Ellipsis]}, n] solves a \
system of recurrence equations. RSolve[eqn, a[n1, n2, \[Ellipsis]], {n1, n2, \
\[Ellipsis]}] solves a partial recurrence equation."}, 
 {"RSolveValue", "RSolveValue[eqn, expr, n] gives the value of expr \
determined by a symbolic solution to the ordinary difference equation eqn \
with independent variable n. RSolveValue[{eqn1, eqn2, \[Ellipsis]}, expr, \
\[Ellipsis]] uses a symbolic solution for a list of difference equations. \
RSolveValue[eqn, expr, {n1, n2, \[Ellipsis]}] uses a solution for the partial \
recurrence equation eqn."}, {"RadialAxisPlot", "RadialAxisPlot[{y1, y2, \
\[Ellipsis], yn}] generates a radial axis plot where the yi are displayed on \
radial axes equally spaced around the origin. RadialAxisPlot[{data1, data2, \
\[Ellipsis]}] plots several datasets datai on the axes."}, 
 {"RadialGradientFilling", "RadialGradientFilling[{col1, col2, \[Ellipsis], \
coln}] is a two-dimensional graphics directive specifying that faces of \
polygons and other filled graphics objects are to be drawn using concentric \
circles of colors coli. RadialGradientFilling[{r1, r2, \[Ellipsis], \
rn}->{col1, col2, \[Ellipsis], coln}] uses the colors coli at radii ri. \
RadialGradientFilling[{r1, r2, \[Ellipsis], rn}->{col1, col2, \[Ellipsis], \
coln}, {x, y}] radiates from the center point {x, y}. \
RadialGradientFilling[{r1, r2, \[Ellipsis], rn}->{col1, col2, \[Ellipsis], \
coln}, {{x, y}, {r1, r2}}] radiates from the center point {x, y} in \
concentric axis-aligned ellipsoids with semiaxes length proportional to ri. \
RadialGradientFilling[{r1, r2, \[Ellipsis], rn}->{col1, col2, \[Ellipsis], \
coln}, {{x, y}, {r1, r2}}, padding] uses the specified padding when drawing \
beyond the boundary radii r1 and rn."}, {"RadialGradientImage", "RadialGradie\
ntImage[gcol] returns an image with values radially changing from center to \
corners based on gradient color gcol. RadialGradientImage[{pos1, pos2}->gcol] \
returns an image where the gradient starts at pos1 and ends at pos2. \
RadialGradientImage[\[Ellipsis], size] returns a radial gradient image of the \
specified size. RadialGradientImage[\[Ellipsis], size, \"type\"] gives an \
image converted to the specified type."}, {"RadialityCentrality", "RadialityC\
entrality[g] gives a list of radiality centralities for the vertices in the \
graph g. RadialityCentrality[g, \"In\"] gives a list of in-centralities for a \
directed graph g. RadialityCentrality[g, \"Out\"] gives a list of \
out-centralities for a directed graph g. RadialityCentrality[{v->w, \
\[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify the graph g."}, 
 {"RadicalBox", "RadicalBox[x, n] is a low-level box construct that \
represents the displayed object (x)^(1/n) in notebook expressions."}, 
 {"RadicalBoxOptions", "RadicalBoxOptions is an option for selections that \
specifies settings for RadicalBox objects."}, {"RadioButton", "RadioButton[x, \
val] represents a radio button whose setting x is set to val when the button \
is clicked. RadioButton[x, val] is displayed as (*) when x is val, and as ( ) \
otherwise. RadioButton[Dynamic[x], val] takes the setting to be the \
dynamically updated current value of x, with the value of x being reset if \
the button is clicked."}, {"RadioButtonBar", "RadioButtonBar[x, {val1, val2, \
\[Ellipsis]}] represents a radio button bar with setting x and with labeled \
radio buttons for values vali. RadioButtonBar[Dynamic[x], {val1, val2, \
\[Ellipsis]}] takes the setting to be the dynamically updated current value \
of x, with the value of x being reset every time a radio button is pressed. \
RadioButtonBar[x, {val1->lbl1, val2->lbl2, \[Ellipsis]}] represents a radio \
button bar in which the radio button giving value vali is given label lbli."}\
, {"Radon", "Radon[image] gives an image representing the discrete Radon \
transform of image. Radon[image, {w, h}] specifies the width w and the height \
h of the resulting image. Radon[image, {w, h}, {\[Theta]1, \[Theta]2}] \
computes the Radon transform only for angles from \[Theta]1 to \[Theta]2."}, 
 {"RadonTransform", "RadonTransform[expr, {x, y}, {p, \[Phi]}] gives the \
Radon transform of expr."}, {"RamanujanTau", 
  "RamanujanTau[n] gives the Ramanujan \[Tau] function \[Tau](n)."}, 
 {"RamanujanTauL", 
  "RamanujanTauL[s] gives the Ramanujan tau Dirichlet L-function L(s)."}, 
 {"RamanujanTauTheta", 
  "RamanujanTauTheta[t] gives the Ramanujan tau theta function \[Theta](t)."}\
, {"RamanujanTauZ", 
  "RamanujanTauZ[t] gives the Ramanujan tau Z-function Z(t)."}, 
 {"Ramp", "Ramp[x] gives x if x>=0 and 0 otherwise."}, 
 {"RandomArrayLayer", "RandomArrayLayer[dist] represents a net layer that has \
no input and produces a random array from the univariate distribution dist. \
RandomArrayLayer[dfunc] uses the univariate distribution dfunc[input] for \
each input value."}, {"RandomChoice", "RandomChoice[{e1, e2, \[Ellipsis]}] \
gives a pseudorandom choice of one of the ei. RandomChoice[list, n] gives a \
list of n pseudorandom choices. RandomChoice[list, {n1, n2, \[Ellipsis]}] \
gives an n1 \[Times]n2 \[Times]\[Ellipsis] array of pseudorandom choices. \
RandomChoice[{w1, w2, \[Ellipsis]}->{e1, e2, \[Ellipsis]}] gives a \
pseudorandom choice weighted by the wi. RandomChoice[wlist->elist, n] gives a \
list of n weighted choices. RandomChoice[wlist->elist, {n1, n2, \[Ellipsis]}] \
gives an n1 \[Times]n2 \[Times]\[Ellipsis] array of weighted choices."}, 
 {"RandomColor", "RandomColor[] gives a pseudorandom color directive in the \
RGBColor space. RandomColor[n] gives n pseudorandom colors. \
RandomColor[model] gives a color from the specified model. RandomColor[model, \
n] gives n colors. RandomColor[model, {n1, n2, \[Ellipsis]}] gives an array \
of colors."}, {"RandomComplex", "RandomComplex[] gives a pseudorandom complex \
number with real and imaginary parts in the range 0 to 1. \
RandomComplex[{zmin, zmax}] gives a pseudorandom complex number in the \
rectangle with corners given by the complex numbers zmin and zmax. \
RandomComplex[zmax] gives a pseudorandom complex number in the rectangle \
whose corners are the origin and zmax. RandomComplex[range, n] gives a list \
of n pseudorandom complex numbers. RandomComplex[range, {n1, n2, \
\[Ellipsis]}] gives an n1 \[Times]n2 \[Times]\[Ellipsis] array of \
pseudorandom complex numbers."}, {"RandomEntity", "RandomEntity[spec] gives a \
pseudorandom entity with a type determined by the specification spec. \
RandomEntity[spec, n] gives a list of n pseudorandom entities."}, 
 {"RandomFunction", "RandomFunction[proc, {tmin, tmax}] generates a \
pseudorandom function from the process proc from tmin to tmax. \
RandomFunction[proc, {tmin, tmax, dt}] generates a pseudorandom function from \
tmin to tmax in steps of dt. RandomFunction[proc, \[Ellipsis], n] generates \
an ensemble of n pseudorandom functions."}, {"RandomGeneratorState", "RandomG\
eneratorState[\[Ellipsis]] gives a representation of the internal state of a \
pseudorandom generator."}, {"RandomGeoPosition", "RandomGeoPosition[] gives a \
pseudorandom geo position uniformly distributed on the surface of the Earth. \
RandomGeoPosition[{{latmin, lonmin}, {latmax, lonmax}}] gives a pseudorandom \
geo position uniformly distributed in the given geo bounding box. \
RandomGeoPosition[g] gives a pseudorandom geo position uniformly distributed \
in the geo region g. RandomGeoPosition[g, n] gives a list of n pseudorandom \
geo positions uniformly distributed in the geo region g. RandomGeoPosition[g, \
{n1, n2, \[Ellipsis]}] gives an n1\[Times] n2\[Times]\[Ellipsis] pseudorandom \
geo position array."}, {"RandomGraph", "RandomGraph[{n, m}] gives a \
pseudorandom graph with n vertices and m edges. RandomGraph[{n, m}, k] gives \
a list of k pseudorandom graphs. RandomGraph[gdist, \[Ellipsis]] samples from \
the random graph distribution gdist."}, {"RandomImage", "RandomImage[max] \
gives an image with pseudorandom pixel values in the range 0 to max. \
RandomImage[{min, max}] generates pseudorandom pixel values in the range min \
to max. RandomImage[dist] generates pixel values using a symbolic \
distribution dist. RandomImage[\[Ellipsis], size] generates a random image of \
the specified size. RandomImage[\[Ellipsis], size, \"type\"] gives an image \
converted to the specified type."}, {"RandomInstance", "RandomInstance[expr] \
finds a random instance of an expression such as a geometric scene. \
RandomInstance[expr] finds a random instance of an expression such as a \
geometric scene or biomolecular sequence. RandomInstance[expr, n] finds n \
instances."}, {"RandomInteger", "RandomInteger[{imin, imax}] gives a \
pseudorandom integer in the range {imin, imax}. RandomInteger[imax] gives a \
pseudorandom integer in the range {0, \[Ellipsis], imax}. RandomInteger[] \
pseudorandomly gives 0 or 1. RandomInteger[range, n] gives a list of n \
pseudorandom integers. RandomInteger[range, {n1, n2, \[Ellipsis]}] gives an \
n1 \[Times]n2 \[Times]\[Ellipsis] array of pseudorandom integers."}, 
 {"RandomPermutation", "RandomPermutation[gr] gives a pseudorandom \
permutation in the permutation group gr. RandomPermutation[gr, n] gives a \
list of n pseudorandom permutations in the permutation group gr."}, 
 {"RandomPoint", "RandomPoint[reg] gives a pseudorandom point uniformly \
distributed in the region reg. RandomPoint[reg, n] gives a list of n \
pseudorandom points uniformly distributed in the region reg. RandomPoint[reg, \
{n1, n2, \[Ellipsis]}] gives an n1\[Times] n2\[Times]\[Ellipsis] array of \
pseudorandom points. RandomPoint[reg, \[Ellipsis], {{xmin, xmax}, \
\[Ellipsis]}] restricts to the bounds [xmin, xmax]\[Times]\[CenterEllipsis]."}\
, {"RandomPointConfiguration", "RandomPointConfiguration[pproc, reg] \
generates a pseudorandom spatial point configuration from the spatial point \
process pproc in the observation region reg. RandomPointConfiguration[pproc, \
reg, n] generates an ensemble of n spatial point configurations."}, 
 {"RandomPolygon", "RandomPolygon[n] gives a pseudorandom simple polygon with \
n vertex points. RandomPolygon[spec] gives a pseudorandom polygon with the \
specified specification spec. RandomPolygon[spec, k] gives a list of k \
pseudorandom polygons. RandomPolygon[d->spec, \[Ellipsis]] gives a \
pseudorandom polygon in dimension d."}, {"RandomPolyhedron", "RandomPolyhedro\
n[spec] gives a pseudorandom polyhedron with the specified specification \
spec. RandomPolyhedron[spec, k] gives a list of k pseudorandom polyhedra."}, 
 {"RandomPrime", "RandomPrime[{imin, imax}] gives a pseudorandom prime number \
in the range imin to imax. RandomPrime[imax] gives a pseudorandom prime \
number in the range 2 to imax. RandomPrime[range, n] gives a list of n \
pseudorandom primes."}, {"RandomReal", "RandomReal[] gives a pseudorandom \
real number in the range 0 to 1. RandomReal[{xmin, xmax}] gives a \
pseudorandom real number in the range xmin to xmax. RandomReal[xmax] gives a \
pseudorandom real number in the range 0 to xmax. RandomReal[range, n] gives a \
list of n pseudorandom reals. RandomReal[range, {n1, n2, \[Ellipsis]}] gives \
an n1 \[Times]n2 \[Times]\[Ellipsis] array of pseudorandom reals."}, 
 {"RandomSample", "RandomSample[{e1, e2, \[Ellipsis]}, n] gives a \
pseudorandom sample of n of the ei. RandomSample[{w1, w2, \[Ellipsis]}->{e1, \
e2, \[Ellipsis]}, n] gives a pseudorandom sample of n of the ei chosen using \
weights wi. RandomSample[{e1, e2, \[Ellipsis]}] gives a pseudorandom \
permutation of the ei."}, {"RandomSeeding", "RandomSeeding is an option that \
specifies what seeding of pseudorandom generators should be done inside the \
operation of a function."}, {"RandomTree", "RandomTree[n] gives a \
pseudorandom tree with n nodes. RandomTree[n, k] gives a list of k \
pseudorandom trees. RandomTree[n, {k1, k2, \[Ellipsis]}] gives a k1 \[Times] \
k2 \[Times]\[Ellipsis] array of trees."}, {"RandomVariate", "RandomVariate[di\
st] gives a pseudorandom variate from the symbolic distribution dist. \
RandomVariate[dist, n] gives a list of n pseudorandom variates from the \
symbolic distribution dist. RandomVariate[dist, {n1, n2, \[Ellipsis]}] gives \
an n1\[Times] n2\[Times]\[Ellipsis] array of pseudorandom variates from the \
symbolic distribution dist."}, {"RandomWalkProcess", "RandomWalkProcess[p] \
represents a random walk on a line with the probability of a positive unit \
step p and the probability of a negative unit step 1 - p. \
RandomWalkProcess[p, q] represents a random walk with the probability of a \
positive unit step p, the probability of a negative unit step q, and the \
probability of a zero step 1 - p - q."}, {"RandomWord", "RandomWord[] gives a \
pseudorandom commonly used word. RandomWord[n] gives a list of n pseudorandom \
words. RandomWord[type] gives a pseudorandom word of the specified type. \
RandomWord[type, n] gives a list of n pseudorandom words of the specified \
type."}, {"Range", "Range[imax] generates the list {1, 2, \[Ellipsis], imax}. \
Range[imin, imax] generates the list {imin, \[Ellipsis], imax}. Range[imin, \
imax, di] uses step di."}, {"RangeFilter", "RangeFilter[data, r] filters data \
by replacing every value by the difference of the maximum and minimum in its \
range-r neighborhood. RangeFilter[data, {r1, r2, \[Ellipsis]}] uses ri for \
filtering the i^th dimension in data."}, {"RankedMax", "RankedMax[list, n] \
gives the n^th largest element in list. RankedMax[list, - n] gives the n^th \
smallest element in list."}, {"RankedMin", "RankedMin[list, n] gives the n^th \
smallest element in list. RankedMin[list, - n] gives the n^th largest element \
in list."}, {"RarerProbability", "RarerProbability[dist, example] computes \
the probability for distribution dist to generate a sample that has a lower \
or equal PDF than example. RarerProbability[dist, {ex1, ex2, \[Ellipsis]}] \
computes the rarer probability for each exi."}, 
 {"Raster", "Raster[{{a11, a12, \[Ellipsis]}, \[Ellipsis]}] is a \
two-dimensional graphics primitive which represents a rectangular array of \
gray cells. Raster[{{{r11, g11, b11}, \[Ellipsis]}, \[Ellipsis]}] represents \
an array of RGB color cells. Raster[{{{r11, g11, b11, \[Alpha]11}, \
\[Ellipsis]}, \[Ellipsis]}] represents an array of color cells with opacity \
\[Alpha]ij. Raster[{{{a11, \[Alpha]11}, \[Ellipsis]}, \[Ellipsis]}] \
represents an array of gray cells with the specified opacities."}, 
 {"Raster3D", "Raster3D[{{{a11, a12, \[Ellipsis]}, \[Ellipsis]}, \
\[Ellipsis]}] is a three-dimensional graphics primitive that represents a \
cubical array of gray cells. Raster3D[{{{{r11, g11, b11}, \[Ellipsis]}, \
\[Ellipsis]}, \[Ellipsis]}] represents an array of RGB color cells. \
Raster3D[{{{{r11, g11, b11, \[Alpha]11}, \[Ellipsis]}, \[Ellipsis]}, \
\[Ellipsis]}] represents an array of color cells with opacity \[Alpha]ij. \
Raster3D[array, {{xmin, ymin, zmin}, {xmax, ymax, zmax}}] represents a \
three-dimensional graphics primitive by giving the coordinates of opposite \
corners. Raster3D[array, coordinates, {amin, amax}] represents a \
three-dimensional graphics primitive whose voxel values should be scaled so \
that amin corresponds to 0 and amax corresponds to 1."}, 
 {"RasterSize", "RasterSize is an option for Rasterize and related functions \
that determines the absolute pixel size of the raster generated."}, 
 {"Rasterize", "Rasterize[expr] returns a rasterized version of the displayed \
form of expr. Rasterize[expr, elem] gives the element elem associated with \
the rasterized form of expr. Rasterize[expr, {elem1, elem2, \[Ellipsis]}] \
gives a list of the specified elemi."}, 
 {"Rational", "Rational is the head used for rational numbers."}, 
 {"RationalExpressionQ", "RationalExpressionQ[expr, x] gives True if expr is \
structurally a rational expression in x, and False otherwise. \
RationalExpressionQ[expr, {x, y, \[Ellipsis]}] gives True if expr is \
structurally a rational expression in x, y, \[Ellipsis], and False otherwise. \
RationalExpressionQ[expr, {x, y, \[Ellipsis]}, test] gives True if expr is \
structurally a rational expression in x, y, \[Ellipsis] with coefficients \
satisfying test, and False otherwise."}, {"Rationalize", "Rationalize[x] \
converts an approximate number x to a nearby rational with small denominator. \
Rationalize[x, dx] yields the rational number with smallest denominator that \
lies within dx of x."}, {"Rationals", "Rationals represents the domain of \
rational numbers, as in x\[Element]Rationals."}, 
 {"Ratios", "Ratios[list] gives the successive ratios of elements in list. \
Ratios[list, n] gives the n^th iterated ratios of list. Ratios[list, {n1, n2, \
\[Ellipsis]}] gives the successive nk^th ratios at level k in a nested list."}\
, {"RawBoxes", "RawBoxes[boxes] is a low-level construct which is formatted \
as boxes without further interpretation."}, {"RawData", "RawData[data] is a \
low-level representation of the contents of a cell in which Show Cell \
Expression <Show Cell Expression> has been toggled."}, 
 {"RayleighDistribution", "RayleighDistribution[\[Sigma]] represents the \
Rayleigh distribution with scale parameter \[Sigma]."}, 
 {"Re", "Re[z] gives the real part of the complex number z."}, 
 {"ReIm", "ReIm[z] gives the list {Re[z], Im[z]} of the number z."}, 
 {"ReImLabels", "ReImLabels is an option for ReImPlot that specifies labels \
to use for the real and imaginary components."}, 
 {"ReImPlot", "ReImPlot[f, {x, xmin, xmax}] generates a plot of Re[f] and \
Im[f] as functions of x\[Element]\[DoubleStruckCapitalR] from xmin to xmax. \
ReImPlot[{f1, f2, \[Ellipsis]}, {x, xmin, xmax}] plots several functions. \
ReImPlot[{\[Ellipsis], w[fi], \[Ellipsis]}, \[Ellipsis]] plots fi with \
features defined by the symbolic wrapper w. ReImPlot[\[Ellipsis], \
{x}\[Element]reg] takes the variable x to be in the geometric region reg."}, 
 {"ReImStyle", "ReImStyle is an option for ReImPlot that specifies styles to \
use for the real and imaginary components."}, {"ReactionPDETerm", "ReactionPD\
ETerm[vars, a] represents a reaction term a u with reaction coefficient a and \
with model variables vars. ReactionPDETerm[{u, {x1, \[Ellipsis], xn}}, a, \
pars] uses model parameters pars."}, {"Read", "Read[stream] reads one \
expression from an input stream and returns the expression. Read[stream, \
type] reads one object of the specified type. Read[stream, {type1, type2, \
\[Ellipsis]}] reads a sequence of objects of the specified types."}, 
 {"ReadByteArray", "ReadByteArray[src] gives the contents of src as a \
ByteArray object. ReadByteArray[src, n] reads the first n bytes from src. \
ReadByteArray[src, term] reads until the termination condition term is \
satisfied."}, {"ReadLine", "ReadLine[\"file\"] reads a line of text from a \
file and returns it as a string. ReadLine[stream] reads a line of text from a \
stream and returns it as a string. ReadLine[proc] reads a line of text \
generated by an external process and returns it as a string."}, 
 {"ReadList", "ReadList[\"\\!\\(\\*file\"] reads all the remaining \
expressions in a file and returns a list of them. ReadList[\"\\!\\(\\*file\", \
type] reads objects of the specified type from a file, until the end of the \
file is reached. The list of objects read is returned. \
ReadList[\"\\!\\(\\*file\", {type1, type2, \[Ellipsis]}] reads objects with a \
sequence of types, until the end of the file is reached. \
ReadList[\"\\!\\(\\*file\", types, n] reads only the first n objects of the \
specified types."}, {"ReadProtected", "ReadProtected is an attribute that \
prevents values associated with a symbol from being seen."}, 
 {"ReadString", "ReadString[\"\\!\\(\\*file\"] reads the complete contents of \
a file and returns it as a string. ReadString[stream] reads everything from a \
stream and returns it as a string. ReadString[proc] reads everything \
generated by an external process and returns it as a string. ReadString[src, \
term] reads until the terminator term is encountered."}, 
 {"Real", "Real is the head used for real (floating-point) numbers."}, 
 {"RealAbs", "RealAbs[x] gives the absolute value of the real number x."}, 
 {"RealBlockDiagonalForm", "RealBlockDiagonalForm is an option for \
SchurDecomposition and related functions which specifies whether 2\[Times]2 \
blocks of real values should be used on matrix diagonals in place of complex \
values."}, {"RealDigits", "RealDigits[x] gives a list of the digits in the \
approximate real number x, together with the number of digits that are to the \
left of the decimal point. RealDigits[x, b] gives a list of base-b digits in \
x. RealDigits[x, b, len] gives a list of len digits. RealDigits[x, b, len, n] \
gives len digits starting with the coefficient of b^n."}, 
 {"RealExponent", "RealExponent[x] gives \
log10(\[LeftBracketingBar]x\[RightBracketingBar]). RealExponent[x, b] gives \
logb(\[LeftBracketingBar]x\[RightBracketingBar])."}, 
 {"RealSign", "RealSign[x] gives - 1, 0 or 1 depending on whether x is \
negative, zero or positive."}, 
 {"Reals", 
  "Reals represents the domain of real numbers, as in x\[Element]Reals."}, 
 {"Reap", "Reap[expr] gives the value of expr together with all expressions \
to which Sow has been applied during its evaluation. Expressions sown using \
Sow[e] or Sow[e, tagi] with different tags are given in different lists. \
Reap[expr, patt] reaps only expressions sown with tags that match patt. \
Reap[expr, {patt1, patt2, \[Ellipsis]}] puts expressions associated with each \
of the patti in a separate list. Reap[expr, patt, f] returns {expr, {f[tag1, \
{e11, e12, \[Ellipsis]}], \[Ellipsis]}}."}, {"RecalibrationFunction", "Recali\
brationFunction is an option for Classify, Predict and related functions that \
specifies how to post-process model predictions."}, 
 {"RecognitionPrior", "RecognitionPrior is an option for recognition \
functions that specifies the prior probability or class for recognition."}, 
 {"Record", 
  "Record represents a record in Read, Find, and related functions."}, 
 {"RecordLists", "RecordLists is an option for ReadList that specifies \
whether objects from separate records should be returned in separate \
sublists."}, {"RecordSeparators", "RecordSeparators is an option for Read, \
Find, and related functions that specifies the list of strings to be taken as \
delimiters for records."}, {"Rectangle", "Rectangle[{xmin, ymin}, {xmax, \
ymax}] represents an axis-aligned filled rectangle from {xmin, ymin} to \
{xmax, ymax}. Rectangle[{xmin, ymin}] corresponds to a unit square with its \
bottom-left corner at {xmin, ymin}."}, {"RectangleChart", "RectangleChart[{{x\
1, y1}, {x2, y2}, \[Ellipsis]}] makes a rectangle chart with bars of width xi \
and height yi. RectangleChart[{\[Ellipsis], wi[{xi, yi}, \[Ellipsis]], \
\[Ellipsis], wj[{xi, yj}, \[Ellipsis]], \[Ellipsis]}] makes a rectangle chart \
with bar features defined by the symbolic wrappers wk. RectangleChart[{data1, \
data2, \[Ellipsis]}] makes a rectangle chart from multiple datasets datai."}, 
 {"RectangleChart3D", "RectangleChart3D[{{x1, y1, z1}, {x2, y2, z2}, \
\[Ellipsis]}] makes a 3D rectangle chart with bars of width xi, depth yi, and \
height zi. RectangleChart3D[{\[Ellipsis], wi[{xi, yi, zi}, \[Ellipsis]], \
\[Ellipsis], wj[{xi, yj, zj}, \[Ellipsis]], \[Ellipsis]}] makes a 3D \
rectangle chart with bar features defined by the symbolic wrappers wk. \
RectangleChart3D[{data1, data2, \[Ellipsis]}] makes a 3D rectangle chart from \
multiple datasets datai."}, {"RectangularRepeatingElement", "RectangularRepea\
tingElement[elem] represents a rectangular array of elements of type spec in \
an interpreter, API or form specification. RectangularRepeatingElement[elem, \
{maxrows, maxcolumns}] represents a rectangular array of elements of maximum \
size maxrows\[Times]maxcolums. RectangularRepeatingElement[elem, {{minrows, \
maxrows}, {mincolumns, maxcolumns}}] represents a rectangular array of \
elements of dimensions between minrows\[Times]mincolumns and \
maxrows\[Times]maxcolums."}, {"RecurrenceFilter", "RecurrenceFilter[{\[Alpha]\
, \[Beta]}, x] filters x using a linear recurrence equation with coefficients \
\[Alpha] and \[Beta]. RecurrenceFilter[tf, x] uses a discrete-time filter \
defined by the TransferFunctionModel tf. RecurrenceFilter[\[Ellipsis], x, \
{y0, y - 1, \[Ellipsis]}] uses a specified list {y0, y - 1, \[Ellipsis]} as \
the initial condition. RecurrenceFilter[\[Ellipsis], image] filters image. \
RecurrenceFilter[\[Ellipsis], sound] filters sampled sound object."}, 
 {"RecurrenceTable", "RecurrenceTable[eqns, expr, {n, nmax}] generates a list \
of values of expr for successive n based on solving the recurrence equations \
eqns. RecurrenceTable[eqns, expr, nspec] generates a list of values of expr \
over the range of n values specified by nspec. RecurrenceTable[eqns, expr, \
{n1, \[Ellipsis]}, {n2, \[Ellipsis]}, \[Ellipsis]] generates an array of \
values of expr for successive n1, n2, \[Ellipsis]."}, 
 {"Red", 
  "Red represents the color red in graphics or style specifications."}, 
 {"Reduce", "Reduce[expr, vars] reduces the statement expr by solving \
equations or inequalities for vars and eliminating quantifiers. Reduce[expr, \
vars, dom] does the reduction over the domain dom. Common choices of dom are \
Reals, Integers, and Complexes."}, {"ReferenceLineStyle", "ReferenceLineStyle \
is an option for QuantilePlot and similar functions that specifies the style \
used for the reference line."}, {"Refine", "Refine[expr, assum] gives the \
form of expr that would be obtained if symbols in it were replaced by \
explicit numerical expressions satisfying the assumptions assum. Refine[expr] \
uses default assumptions specified by any enclosing Assuming constructs."}, 
 {"ReflectionMatrix", "ReflectionMatrix[v] gives the matrix that represents \
reflection of points in a mirror normal to the vector v."}, 
 {"ReflectionTransform", "ReflectionTransform[v] gives a \
TransformationFunction that represents a reflection in a mirror through the \
origin, normal to the vector v. ReflectionTransform[v, p] gives a reflection \
in a mirror through the point p, normal to the vector v."}, 
 {"Refresh", "Refresh[expr, opts] represents an object whose value in a \
Dynamic should be refreshed at times specified by the options opts. \
Refresh[expr, None] specifies that the value of expr should never \
automatically be refreshed."}, {"RefreshRate", "RefreshRate is an option to \
Animate and related functions which specifies the refresh rate for frames in \
animations."}, {"Region", "Region[reg] represents a geometric region. \
Region[reg, options] gives a region that uses the specified options."}, 
 {"RegionBinarize", "RegionBinarize[image, marker, d] gives a binary version \
of image that includes the foreground pixels of marker and also connected \
regions whose pixel values are within a distance d. RegionBinarize[image, \
marker, d, {t1, t2}] grows regions in marker by adding pixels whose average \
intensity is also constrained within an interval {t1, t2}."}, 
 {"RegionBoundary", 
  "RegionBoundary[reg] represents the boundary of the region reg."}, 
 {"RegionBoundaryStyle", "RegionBoundaryStyle is an option for plotting \
functions that specifies the boundary style for the region over which the \
plot is being drawn."}, {"RegionBounds", "RegionBounds[reg] gives the bounds \
for the region reg. RegionBounds[reg, \"\\!\\(\\*type\"] gives region bounds \
of the specified \"\\!\\(\\*type\"."}, {"RegionCentroid", 
  "RegionCentroid[reg] gives the centroid of the region reg."}, 
 {"RegionConvert", "RegionConvert[reg, form] converts the region \
representation reg to the specified form."}, {"RegionDifference", "RegionDiff\
erence[reg1, reg2] gives the difference of the regions reg1 and reg2."}, 
 {"RegionDilation", "RegionDilation[reg, r] gives the dilation of the region \
reg by a disk of radius r centered at the origin. RegionDilation[reg1, reg2] \
gives the dilation of the region reg1 by the region reg2. \
RegionDilation[reg1, reg2, {u, v}] gives the dilation of reg1 scaled by a \
factor u and reg2 scaled by a factor v."}, 
 {"RegionDimension", 
  "RegionDimension[reg] gives the geometric dimension of the region reg."}, 
 {"RegionDisjoint", "RegionDisjoint[reg1, reg2] returns True if the regions \
reg1 and reg2 are disjoint. RegionDisjoint[reg1, reg2, reg3, \[Ellipsis]] \
returns True if the regions reg1, reg2, reg3, \[Ellipsis] are pairwise \
disjoint."}, {"RegionDistance", "RegionDistance[reg, p] gives the minimum \
distance from the point p to the region reg. RegionDistance[reg] gives a \
RegionDistanceFunction[\[Ellipsis]] that can be applied repeatedly to \
different points."}, {"RegionDistanceFunction", "RegionDistanceFunction[reg, \
\[Ellipsis]] represents a function whose values give the distance from a \
point to the region reg."}, {"RegionEmbeddingDimension", "RegionEmbeddingDime\
nsion[reg] gives the dimension of the space in which the region reg is \
embedded."}, {"RegionEqual", "RegionEqual[reg1, reg2] returns True if the \
regions reg1 and reg2 are equal. RegionEqual[reg1, reg2, reg3, \[Ellipsis]] \
returns True if the regions reg1, reg2, reg3, \[Ellipsis] are all equal."}, 
 {"RegionErosion", "RegionErosion[reg, r] gives the erosion of the region reg \
by a disk of radius r centered at the origin. RegionErosion[reg1, reg2] gives \
the erosion of the region reg1 by the region reg2. RegionErosion[reg1, reg2, \
{u, v}] gives the erosion of reg1 scaled by a factor u and reg2 scaled by a \
factor v."}, {"RegionFillingStyle", "RegionFillingStyle is an option for \
plotting functions that specifies the style for the filled region over which \
the plot is being drawn."}, {"RegionFunction", "RegionFunction is an option \
for plotting functions that specifies the region to include in the plot \
drawn."}, {"RegionImage", "RegionImage[reg] returns a rasterized grayscale 2D \
or 3D image of reg. RegionImage[reg, {{xmin, xmax}, \[Ellipsis]}] restricts \
to the bounds [xmin, xmax]\[Times]\[CenterEllipsis]."}, 
 {"RegionIntersection", "RegionIntersection[reg1, reg2, \[Ellipsis]] gives \
the intersection of the regions reg1, reg2, \[Ellipsis]."}, 
 {"RegionMeasure", "RegionMeasure[reg] gives the measure of the region reg. \
RegionMeasure[reg, d] gives the d -dimensional measure of the region reg. \
RegionMeasure[{x1, \[Ellipsis], xn}, {{t1, a1, b1}, \[Ellipsis], {tk, ak, \
bk}}] gives the k -measure of the parametric formula whose Cartesian \
coordinates xi are functions of tj. RegionMeasure[{x1, \[Ellipsis], xn}, \
{{t1, a1, b1}, \[Ellipsis], {tk, ak, bk}}, chart] interprets the xi as \
coordinates in the specified coordinate chart."}, 
 {"RegionMember", "RegionMember[reg, {x, y, \[Ellipsis]}] gives True if the \
numeric point {x, y, \[Ellipsis]} is a member of the constant region reg and \
False otherwise. RegionMember[reg, {x, y, \[Ellipsis]}] gives conditions for \
the point {x, y, \[Ellipsis]} to be a member of reg. RegionMember[reg] \
returns a RegionMemberFunction[\[Ellipsis]] that can be applied repeatedly to \
different points."}, {"RegionMemberFunction", "RegionMemberFunction[reg, \
\[Ellipsis]] represents a function whose values give whether a point is in a \
region reg or not."}, {"RegionMoment", "RegionMoment[reg, {i1, i2, \
\[Ellipsis], in}] computes the polynomial moment \
\[Integral]x\[Element]regx1i1 x2i2 \[CenterEllipsis] xnin for the region \
reg."}, {"RegionNearest", "RegionNearest[reg, p] gives a point in the region \
reg that is nearest the point p. RegionNearest[reg] gives a \
RegionNearestFunction[\[Ellipsis]] that can be repeatedly applied to points."}\
, {"RegionNearestFunction", "RegionNearestFunction[reg, \[Ellipsis]] \
represents a function whose values give the nearest point in the region reg."}\
, {"RegionPlot", "RegionPlot[pred, {x, xmin, xmax}, {y, ymin, ymax}] makes a \
plot showing the region in which pred is True. RegionPlot[{pred1, pred2, \
\[Ellipsis]}, \[Ellipsis]] plots several regions corresponding to the predi. \
RegionPlot[{\[Ellipsis], w[predi, \[Ellipsis]], \[Ellipsis]}, \[Ellipsis]] \
plots predi with features defined by the symbolic wrapper w."}, 
 {"RegionPlot3D", "RegionPlot3D[pred, {x, xmin, xmax}, {y, ymin, ymax}, {z, \
zmin, zmax}] makes a plot showing the three-dimensional region in which pred \
is True. RegionPlot3D[{pred1, pred2, \[Ellipsis]}, \[Ellipsis]] plots several \
regions corresponding to the predi."}, {"RegionProduct", "RegionProduct[reg1, \
reg2] represents the Cartesian product of the regions reg1 and reg2. \
RegionProduct[reg1, reg2, \[Ellipsis]] represents the Cartesian product of \
the regions reg1, reg2, \[Ellipsis]."}, 
 {"RegionQ", 
  "RegionQ[reg] gives True if reg is a valid region and False otherwise."}, 
 {"RegionResize", "RegionResize[reg, l] resize the region reg to have the \
first side length l preserving side length ratios. RegionResize[reg, {lmax}] \
resize into a box with maximum side length lmax preserving side length \
ratios. RegionResize[reg, {l1, l2, \[Ellipsis]}] resize into a box with side \
lengths li. RegionResize[reg, {{x1, min, x1, max}, {x2, min, x2, max}, \
\[Ellipsis]}] resize into a box with corners {x1, min, x2, min, \[Ellipsis]} \
and {x1, max, x2, max, \[Ellipsis]}."}, {"RegionSize", "RegionSize is an \
option used by Printout3D to specify the overall size of an object to print \
for a region."}, {"RegionSymmetricDifference", "RegionSymmetricDifference[reg\
1, reg2, \[Ellipsis]] represents the symmetric difference of the regions \
reg1, reg2, \[Ellipsis]."}, {"RegionUnion", "RegionUnion[reg1, reg2, \
\[Ellipsis]] gives the union of the regions reg1, reg2, \[Ellipsis]."}, 
 {"RegionWithin", 
  "RegionWithin[reg1, reg2] returns True if reg2 is contained within reg1."}, 
 {"RegisterExternalEvaluator", "RegisterExternalEvaluator[sys, target] \
registers the target for use as an external evaluator with the language or \
system sys."}, {"RegularExpression", "RegularExpression[\"\\!\\(\\*regex\"] \
represents the generalized regular expression specified by the string \
\"\\!\\(\\*regex\"."}, {"RegularPolygon", "RegularPolygon[n] gives the \
regular polygon with n vertices equally spaced around the unit circle. \
RegularPolygon[r, n] gives the regular polygon of radius r. \
RegularPolygon[{r, \[Theta]}, n] starts at angle \[Theta] with respect to the \
x axis. RegularPolygon[{x, y}, rspec, n] centers the polygon at {x, y}."}, 
 {"Regularization", "Regularization is an option for Sum and Product that \
specifies what type of regularization to use."}, 
 {"RegularlySampledQ", "RegularlySampledQ[tseries] gives True if tseries is a \
regular time series, and False otherwise."}, {"RelationGraph", "RelationGraph\
[f, {v1, v2, \[Ellipsis]}] gives the graph with vertices vi and edges from vi \
to vj whenever f[vi, vj] is True. RelationGraph[f, {v1, v2, \[Ellipsis]}, \
{w1, w2, \[Ellipsis]}] gives the graph with vertices vi, wj and edges from vi \
to wj whenever f[vi, wj] is True."}, {"RelationalDatabase", "RelationalDataba\
se[\[Ellipsis]] represents schema information about a relational database. \
RelationalDatabase[db] gives the complete schema of the database referenced \
by db. RelationalDatabase[{table1 table2, \[Ellipsis]}, db] gives schema \
information related to the tables tablei."}, {"ReleaseHold", "ReleaseHold[exp\
r] removes Hold, HoldForm, HoldPattern, and HoldComplete in expr."}, 
 {"ReliabilityDistribution", "ReliabilityDistribution[bexpr, {{x1, dist1}, \
{x2, dist2}, \[Ellipsis]}] represents the reliability distribution for a \
system with components xi having reliability distribution disti, where the \
whole system is working when the Boolean expression bexpr is True, and \
component xi is working when xi is True."}, 
 {"ReliefImage", 
  "ReliefImage[array] generates a relief image of an array of height values."}\
, {"ReliefPlot", 
  "ReliefPlot[array] generates a relief plot of an array of height values."}, 
 {"RemoteAuthorizationCaching", "RemoteAuthorizationCaching is an option for \
RemoteConnect and related functions that determines whether caching of \
authorization information on remote hosts should be used."}, 
 {"RemoteBatchJobAbort", 
  "RemoteBatchJobAbort[job] aborts a remote batch job."}, 
 {"RemoteBatchJobObject", "RemoteBatchJobObject[\[Ellipsis]] represents a \
remote batch job submitted by RemoteBatchSubmit or RemoteBatchMapSubmit."}, 
 {"RemoteBatchJobs", "RemoteBatchJobs[env] gives a list of \
RemoteBatchJobObject expressions representing batch jobs submitted using env. \
RemoteBatchJobs[env, type] returns only jobs of given type. RemoteBatchJobs[] \
gives a list of jobs submitted using \
$DefaultRemoteBatchSubmissionEnvironment."}, {"RemoteBatchMapSubmit", "Remote\
BatchMapSubmit[env, f, list] submits an array batch job in which f is applied \
to each element on the first level of list, using the remote batch submission \
environment env. RemoteBatchMapSubmit[f, list] submits an array job using \
$DefaultRemoteBatchSubmissionEnvironment."}, 
 {"RemoteBatchSubmissionEnvironment", "RemoteBatchSubmissionEnvironment[\"\\!\
\\(\\*provider\", assoc] represents a remote batch job submission environment \
for provider with properties assoc. \
RemoteBatchSubmissionEnvironment[\"\\!\\(\\*provider\"] represents a \
submission environment for provider with default optional properties."}, 
 {"RemoteBatchSubmit", "RemoteBatchSubmit[env, expr] submits expr for \
evaluation using the remote batch submission environment env. \
RemoteBatchSubmit[expr] submits expr for evaluation using \
$DefaultRemoteBatchSubmissionEnvironment."}, {"RemoteConnect", "RemoteConnect\
[\"\\!\\(\\*host\"] connects to the specified remote host. \
RemoteConnect[IPAddress[\"\\!\\(\\*address\"]] connects to the machine with \
the specified IP address. RemoteConnect[\"\\!\\(\\*host\", username] connects \
using the specified username for the remote host. \
RemoteConnect[\"\\!\\(\\*host\", username, password] connects using the \
specified username and password."}, {"RemoteConnectionObject", "RemoteConnect\
ionObject[\[Ellipsis]] is an object that represents a remote connection."}, 
 {"RemoteEvaluate", "RemoteEvaluate[expr] gives the result of evaluating expr \
using your current default remote Wolfram Language kernel. \
RemoteEvaluate[ker, expr] gives the result of evaluating expr using the \
kernel specified by ker. RemoteEvaluate[{ker1, ker2, \[Ellipsis]}, expr] \
gives a list of the results of evaluating expr using each of the kernels \
keri. RemoteEvaluate[ker, expr, h] wraps the head h around the result \
produced before returning it."}, {"RemoteFile", "RemoteFile[URL[\"\\!\\(\\*ur\
i\"]] is a symbolic representation of a file on a remote machine."}, 
 {"RemoteInputFiles", "RemoteInputFiles is an option for RemoteBatchSubmit \
and RemoteBatchMapSubmit that specifies local files to be uploaded and made \
available within remote jobs."}, {"RemoteKernelObject", "RemoteKernelObject[s\
pec] specifies a remote kernel that can be used for RemoteEvaluate."}, 
 {"RemoteProviderSettings", "RemoteProviderSettings is an option for \
RemoteBatchSubmit and RemoteBatchMapSubmit that specifies provider-specific \
settings for a batch job."}, {"RemoteRun", "RemoteRun[\"\\!\\(\\*host\", \
\"\\!\\(\\*command\"] runs the specified operating system command on the \
remote host, returning the exit code obtained. \
RemoteRun[IPAddress[\"\\!\\(\\*address\"], \"\\!\\(\\*command\"] runs the \
command on the machine with the specified IP address. RemoteRun[obj, \
\"\\!\\(\\*command\"] run the command on the remote host specified by the \
RemoteConnectionObject obj."}, {"RemoteRunProcess", "RemoteRunProcess[\"\\!\\\
(\\*host\", \"\\!\\(\\*command\"] runs the specified system command on the \
remote host, returning information on the outcome. \
RemoteRunProcess[IPAddress[\"\\!\\(\\*address\"], \"\\!\\(\\*command\"] runs \
the command on the machine with the specified IP address. \
RemoteRunProcess[obj, \"\\!\\(\\*command\"] run the command on the remote \
host specified by the RemoteConnectionObject obj. \
RemoteRunProcess[\"\\!\\(\\*host\", {\"\\!\\(\\*command\", arg1, arg2, \
\[Ellipsis]}] runs the specified command, with command-line arguments argi. \
RemoteRunProcess[\"\\!\\(\\*host\", command, \"prop\"] returns only the \
specified property. RemoteRunProcess[\"\\!\\(\\*host\", command, prop, input] \
feeds the specified initial input to the command."}, 
 {"RemovalConditions", "RemovalConditions is an option for AttachCell that \
specifies conditions under which to remove the attached cell."}, 
 {"Remove", "Remove[symbol1, \[Ellipsis]] removes symbols completely, so that \
their names are no longer recognized by the Wolfram Language. \
Remove[\"\\!\\(\\*form_1\", \"\\!\\(\\*form_2\", \[Ellipsis]] removes all \
symbols whose names match any of the string patterns formi."}, 
 {"RemoveAlphaChannel", "RemoveAlphaChannel[image] removes all opacity \
information from image. RemoveAlphaChannel[image, c] removes opacity by \
blending all pixels with the background color c."}, 
 {"RemoveAudioStream", "RemoveAudioStream[] deletes all AudioStream objects. \
RemoveAudioStream[stream] deletes the AudioStream object stream. \
RemoveAudioStream[audio] deletes all the AudioStream objects stemming from \
audio."}, {"RemoveBackground", "RemoveBackground[image] returns an image with \
an alpha channel where the background is transparent. RemoveBackground[image, \
model] uses foreground or background model specification."}, 
 {"RemoveChannelListener", "RemoveChannelListener[obj] removes obj from the \
list of currently active channel listeners. RemoveChannelListener[{obj1, \
obj2, \[Ellipsis]}] removes all the obji. RemoveChannelListener[] removes all \
currently active channel listeners."}, {"RemoveChannelSubscribers", "RemoveCh\
annelSubscribers[channel] removes all subscribers from the specified channel. \
RemoveChannelSubscribers[channel, user] removes the specified user from the \
subscriber list. RemoveChannelSubscribers[channel, {user1, user2, \
\[Ellipsis]}] removes the specified subscribers useri."}, 
 {"RemoveDiacritics", "RemoveDiacritics[string] replaces characters in string \
that have diacritics by their base ASCII characters, when possible."}, 
 {"RemoveInputStreamMethod", "RemoveInputStreamMethod[\"\\!\\(\\*name\"] \
removes a custom input stream method."}, {"RemoveOutputStreamMethod", "Remove\
OutputStreamMethod[\"\\!\\(\\*name\"] removes a custom output stream method."}\
, {"RemoveUsers", "RemoveUsers[group, {user1, \[Ellipsis]}] removes the users \
useri from the permissions group group."}, {"RemoveVideoStream", "RemoveVideo\
Stream[] deletes all VideoStream objects. RemoveVideoStream[stream] deletes \
the VideoStream object stream."}, {"RenameDirectory", "RenameDirectory[\"\\!\
\\(\\*dir_1\", \"\\!\\(\\*dir_2\"] renames the directory dir1 to dir2."}, 
 {"RenameFile", "RenameFile[file1, file2] renames file1 to file2."}, 
 {"RenderingOptions", "RenderingOptions is an option for Style, Cell and \
related constructs that specifies options related to 3D rendering."}, 
 {"RenewalProcess", "RenewalProcess[rdist] represents a renewal process with \
interarrival times distributed according to rdist."}, 
 {"RenkoChart", "RenkoChart[{{date1, p1}, {date2, p2}, \[Ellipsis]}] makes a \
Renko chart with prices pi at date datei. RenkoChart[{\"\\!\\(\\*name\", \
daterange}] makes a Renko chart of closing prices for the financial entity \
\"\\!\\(\\*name\" over the date range daterange. RenkoChart[{\[Ellipsis]}, s] \
makes a Renko chart with brick height of fraction s of the average price."}, 
 {"RepairMesh", "RepairMesh[mreg] repairs defects in the mesh region mreg. \
RepairMesh[mreg, {def1, \[Ellipsis]}] repairs only the specified defects \
def1, \[Ellipsis]."}, {"Repeated", "p.. or Repeated[p] is a pattern object \
that represents a sequence of one or more expressions, each matching p. \
Repeated[p, max] represents from 1 to max expressions matching p. Repeated[p, \
{min, max}] represents between min and max expressions matching p. \
Repeated[p, {n}] represents exactly n expressions matching p."}, 
 {"RepeatedNull", "p... or RepeatedNull[p] is a pattern object that \
represents a sequence of zero or more expressions, each matching p. \
RepeatedNull[p, max] represents from 0 to max expressions matching p. \
RepeatedNull[p, {min, max}] represents between min and max expressions \
matching p. RepeatedNull[p, {n}] represents exactly n expressions matching \
p."}, {"RepeatedTiming", "RepeatedTiming[expr] evaluates expr repeatedly and \
returns a list of the average time in seconds used, together with the result \
obtained. RepeatedTiming[expr, t] does repeated evaluation for at least t \
seconds."}, {"RepeatingElement", "RepeatingElement[spec] represents an \
arbitrarily repeated type of element in an interpreter, API or form \
specification. RepeatingElement[spec, max] represents an element that can \
appear at most max times. RepeatingElement[spec, {min, max}] represents an \
element that can appear between min and max times. RepeatingElement[spec, {n, \
{min, max}}] represents an element that initially appears n times in a form. \
RepeatingElement[spec, {{i, n}, {min, max}}] represents an element where i \
takes successive values."}, {"Replace", "Replace[expr, rules] applies a rule \
or list of rules in an attempt to transform the entire expression expr. \
Replace[expr, rules, levelspec] applies rules to parts of expr specified by \
levelspec. Replace[rules] represents an operator form of Replace that can be \
applied to an expression."}, {"ReplaceAll", "expr/.rules or ReplaceAll[expr, \
rules] applies a rule or list of rules in an attempt to transform each \
subpart of an expression expr. ReplaceAll[rules] represents an operator form \
of ReplaceAll that can be applied to an expression."}, 
 {"ReplaceImageValue", "ReplaceImageValue[image, pos->val] changes the pixel \
values at position pos in image to val. ReplaceImageValue[image, pos->val, \
\"\\!\\(\\*type\"] assumes val to be of the specified type."}, 
 {"ReplaceList", "ReplaceList[expr, rules] attempts to transform the entire \
expression expr by applying a rule or list of rules in all possible ways, and \
returns a list of the results obtained. ReplaceList[expr, rules, n] gives a \
list of at most n results. ReplaceList[rules] is an operator form of \
ReplaceList that can be applied to an expression."}, 
 {"ReplacePart", "ReplacePart[expr, i->new] yields an expression in which the \
i^th part of expr is replaced by new. ReplacePart[expr, {i1->new1, i2->new2, \
\[Ellipsis]}] replaces parts at positions in by newn. ReplacePart[expr, {i, \
j, \[Ellipsis]}->new] replaces the part at position {i, j, \[Ellipsis]}. \
ReplacePart[expr, {{i1, j1, \[Ellipsis]}->new1, \[Ellipsis]}] replaces parts \
at positions {in, jn, \[Ellipsis]} by newn. ReplacePart[expr, {{i1, j1, \
\[Ellipsis]}, \[Ellipsis]}->new] replaces all parts at positions {in, jn, \
\[Ellipsis]} by new. ReplacePart[i->new] represents an operator form of \
ReplacePart that can be applied to an expression."}, 
 {"ReplacePixelValue", "ReplacePixelValue[image, ppos->val] changes the pixel \
values at pixel position ppos in image to val. ReplacePixelValue[image, \
ppos->val, \"\\!\\(\\*type\"] assumes val to be of the specified type."}, 
 {"ReplaceRepeated", "expr//.rules repeatedly performs replacements until \
expr no longer changes. ReplaceRepeated[rules] represents an operator form of \
ReplaceRepeated that can be applied to an expression."}, 
 {"ReplicateLayer", "ReplicateLayer[n] represents a net layer that takes an \
input of dimensions {d1, d2, \[Ellipsis]} and replicates it n times to \
produce an output of dimensions {n, d1, d2, \[Ellipsis]}. ReplicateLayer[{n1, \
n2, \[Ellipsis], nm}] represents a net layer that takes an input of \
dimensions {d1, d2, \[Ellipsis]} and replicates it to produce an output of \
dimensions {n1, n2, \[Ellipsis], nm, d1, d2, \[Ellipsis]}. \
ReplicateLayer[dims, m] replicates so that dims appears at position m in the \
list of output dimensions."}, {"RequiredPhysicalQuantities", "RequiredPhysica\
lQuantities is an option for FormulaLookup that specifies physical quantities \
that must be used by the formulas returned."}, 
 {"Resampling", "Resampling is an option that specifies the method to be used \
for resampling images or arrays."}, {"ResamplingAlgorithmData", "ResamplingAl\
gorithmData[rs, \"\\!\\(\\*prop\"] gives the specified property \
\"\\!\\(\\*prop\" for the resampling rs."}, {"ResamplingMethod", "ResamplingM\
ethod is an option for functions such as TemporalData and MovingMap that \
specifies how values in between given times should be computed."}, 
 {"Rescale", "Rescale[x, {min, max}] gives x rescaled to run from 0 to 1 over \
the range min to max. Rescale[x, {min, max}, {ymin, ymax}] gives x rescaled \
to run from ymin to ymax over the range min to max. Rescale[list] rescales \
each element of list to run from 0 to 1 over the range Min[list] to \
Max[list]."}, {"RescalingTransform", "RescalingTransform[{{xmin, xmax}, \
{ymin, ymax}, \[Ellipsis]}, {{xpmin, xpmax}, \[Ellipsis]}] gives a \
TransformationFunction that rescales the region with coordinate ranges xmin \
to xmax, etc. to the region with coordinate ranges xpmin to xpmax, etc. \
RescalingTransform[{{xmin, xmax}, {ymin, ymax}, \[Ellipsis]}] gives a \
TransformationFunction that rescales to the unit square, cube, etc."}, 
 {"ResetDirectory", "ResetDirectory[] resets the current working directory to \
its previous value."}, {"ReshapeLayer", "ReshapeLayer[dims] represents a net \
layer that reinterprets the input to be an array of dimensions dims."}, 
 {"Residue", 
  "Residue[expr, {z, z0}] finds the residue of expr at the point z = z0."}, 
 {"ResizeLayer", "ResizeLayer[{n}] resizes a matrix of size c0\[Times]n0 to \
be size c0\[Times]n. ResizeLayer[{h, w}] resizes an array of dimensions \
c0\[Times]h0\[Times]w0 to be size c0\[Times]h\[Times]w."}, 
 {"Resolve", "Resolve[expr] attempts to resolve expr into a form that \
eliminates ForAll and Exists quantifiers. Resolve[expr, dom] works over the \
domain dom. Common choices of dom are Complexes, Reals, and Booleans."}, 
 {"ResourceData", "ResourceData[resource] gives the primary content of the \
specified resource. ResourceData[resource, elem] gives element elem of the \
content of the resource."}, {"ResourceFunction", "ResourceFunction[resource] \
represents the function associated with the specified resource. \
ResourceFunction[resource, prop] gives the specified property of the \
resource."}, {"ResourceObject", "ResourceObject[\"\\!\\(\\*name\"] represents \
a resource with the specified name. ResourceObject[\"\\!\\(\\*uuid\"] \
represents a resource with the specified UUID. ResourceObject[loc] imports a \
resource from the specified location. ResourceObject[assoc] gives a resource \
with content and metadata specified by the association assoc."}, 
 {"ResourceRegister", "ResourceRegister[resource] creates a persistent cache \
of a resource object that can be referenced by name. \
ResourceRegister[resource, loc] stores the resource in persistence location \
loc. ResourceRegister[resource, {loc1, \[Ellipsis]}] stores the resource in \
multiple persistence locations."}, {"ResourceRemove", "ResourceRemove[resourc\
e] removes the specified resource from the system on which it is run."}, 
 {"ResourceSearch", "ResourceSearch[form] gives a dataset of resources that \
contain text matching form. ResourceSearch[form, prop] returns the property \
prop of the search results."}, {"ResourceSubmit", "ResourceSubmit[resource] \
submits the specified resource object to be reviewed for publication. \
ResourceSubmit[new, old] submits the resource new as the updated version of \
the resource old."}, {"ResourceSystemBase", "ResourceSystemBase is an option \
for ResourceObject, ResourceSearch and related functions specifying the \
location of the public resource system."}, {"ResourceSystemPath", "ResourceSy\
stemPath is an option for ResourceObject, ResourceSearch and related \
functions for specifying locations at which to look for resources."}, 
 {"ResourceUpdate", "ResourceUpdate[resource] updates to the latest version \
of the specified resource object. ResourceUpdate[\"\\!\\(\\*name\"] updates \
the resource with the specified name."}, {"ResourceVersion", "ResourceVersion \
is an option for ResourceObject, ResourceFunction and related functions for \
specifying the version of a resource."}, {"ResponseForm", "ResponseForm[expr, \
\"\\!\\(\\*fmt\"] represents a response record to be given in a specified \
format when requested during the execution of a function specified by \
APIFunction, FormFunction, etc. ResponseForm[expr, \"\\!\\(\\*fmt\", \
{\"\\!\\(\\*elem_1\", \"\\!\\(\\*elem_2\", \[Ellipsis]}] includes only the \
response record elements elemi."}, 
 {"Rest", "Rest[expr] gives expr with the first element removed."}, 
 {"RestartInterval", "RestartInterval is an option controlling the restart \
behavior of functions such as ContinuousTask."}, 
 {"Restricted", "Restricted[form, cond, \[Ellipsis]] represents a form for \
Interpreter and related functions restricted according to the conditions \
cond."}, {"Resultant", "Resultant[poly1, poly2, var] computes the resultant \
of the polynomials poly1 and poly2 with respect to the variable var. \
Resultant[poly1, poly2, var, Modulus->p] computes the resultant modulo the \
prime p."}, {"Return", "Return[expr] returns the value expr from a function. \
Return[] returns the value Null."}, {"ReturnExpressionPacket", "ReturnExpress\
ionPacket[expr] is a WSTP packet that contains the expression expr, the \
result of an EnterExpressionPacket evaluation."}, 
 {"ReturnPacket", "ReturnPacket[expr] is a WSTP packet that contains the \
expression expr, the result of an EvaluatePacket evaluation."}, 
 {"ReturnReceiptFunction", "ReturnReceiptFunction is an option for \
MailReceiverFunction that specifies what function to apply if a return \
receipt is requested for mail received by a MailReceiverFunction."}, 
 {"ReturnTextPacket", "ReturnTextPacket[string] is a WSTP packet containing \
string, the result of an EnterTextPacket evaluation."}, 
 {"Reverse", "Reverse[expr] reverses the order of the elements in expr. \
Reverse[expr, n] reverses elements at level n in expr. Reverse[expr, {n1, n2, \
\[Ellipsis]}] reverses elements at levels n1, n2, \[Ellipsis] in expr."}, 
 {"ReverseApplied", "ReverseApplied[f] represents a form of f that takes \
arguments in reverse order so that ReverseApplied[f][x1, \[Ellipsis], xn] is \
equivalent to f[xn, \[Ellipsis], x1]. ReverseApplied[f, n] represents a form \
of f that reverses the first n arguments before evaluation."}, 
 {"ReverseBiorthogonalSplineWavelet", "ReverseBiorthogonalSplineWavelet[] \
represents a reverse biorthogonal spline wavelet of order 4 and dual order 2. \
ReverseBiorthogonalSplineWavelet[n, m] represents a reverse biorthogonal \
spline wavelet of order n and dual order m."}, 
 {"ReverseElement", "ReverseElement[x, y, \[Ellipsis]] displays as \
x\[ReverseElement]y\[ReverseElement]\[Ellipsis]."}, 
 {"ReverseEquilibrium", "ReverseEquilibrium[x, y, \[Ellipsis]] displays as \
x\[ReverseEquilibrium]y\[ReverseEquilibrium]\[Ellipsis]."}, 
 {"ReverseGraph", "ReverseGraph[g] gives the reverse graph of the directed \
graph g. ReverseGraph[{v->w, \[Ellipsis]}] uses rules v->w to specify the \
graph g."}, {"ReverseSort", "ReverseSort[list] sorts the elements of list \
into reverse canonical order. ReverseSort[list, p] sorts using the ordering \
function p."}, {"ReverseSortBy", "ReverseSortBy[list, f] sorts the elements \
of list using the reverse canonical order defined by applying f to each of \
them. ReverseSortBy[list, f, p] sorts the elements of list using the function \
p to compare pairs of results of applying f to each element. ReverseSortBy[f] \
represents an operator form of ReverseSortBy that can be applied to an \
expression."}, {"ReverseUpEquilibrium", "ReverseUpEquilibrium[x, y, \
\[Ellipsis]] displays as \
x\[ReverseUpEquilibrium]y\[ReverseUpEquilibrium]\[Ellipsis]."}, 
 {"RevolutionAxis", "RevolutionAxis is an option for RevolutionPlot3D which \
specifies the revolution axis around which the curve should be rotated."}, 
 {"RevolutionPlot3D", "RevolutionPlot3D[fz, {t, tmin, tmax}] generates a plot \
of the surface of revolution with height fz at radius t. RevolutionPlot3D[fz, \
{t, tmin, tmax}, {\[Theta], \[Theta]min, \[Theta]max}] takes the azimuthal \
angle \[Theta] to vary between \[Theta]min and \[Theta]max. \
RevolutionPlot3D[{fx, fz}, {t, tmin, tmax}] generates a plot of the surface \
obtained by rotating the parametric curve with x, z coordinates {fx, fz} \
around the z axis. RevolutionPlot3D[{fx, fz}, {t, tmin, tmax}, {\[Theta], \
\[Theta]min, \[Theta]max}] takes the azimuthal angle \[Theta] to vary from \
\[Theta]min to \[Theta]max. RevolutionPlot3D[{fx, fy, fz}, {t, tmin, tmax}, \
\[Ellipsis]] plots the surface obtained by rotating the parametric curve with \
x, y, z coordinates {fx, fy, fz}."}, {"RiccatiSolve", "RiccatiSolve[{a, b}, \
{q, r}] gives the matrix x that is the stabilizing solution of the continuous \
algebraic Riccati equation a.x + x.a - x.b.r.b.x + q==0. RiccatiSolve[{a, b}, \
{q, r, p}] solves the equation a.x + x.a - (x.b + p).r.(b.x + p) + q==0."}, 
 {"RiceDistribution", "RiceDistribution[\[Alpha], \[Beta]] represents a Rice \
distribution with shape parameters \[Alpha] and \[Beta]. RiceDistribution[m, \
\[Alpha], \[Beta]] represents a Norton-Rice distribution with parameters m, \
\[Alpha], and \[Beta]."}, {"RidgeFilter", "RidgeFilter[data] computes a \
measure for the presence of a ridge at every position of data. \
RidgeFilter[data, \[Sigma]] uses the specified ridge scale \[Sigma]."}, 
 {"RiemannR", "RiemannR[x] gives the Riemann prime counting function R(x)."}, 
 {"RiemannSiegelTheta", 
  "RiemannSiegelTheta[t] gives the Riemann-Siegel function \[CurlyTheta](t)."}\
, {"RiemannSiegelZ", 
  "RiemannSiegelZ[t] gives the Riemann-Siegel function Z(t)."}, 
 {"RiemannXi", "RiemannXi[s] gives the Riemann xi function \[Xi](s)."}, 
 {"Riffle", "Riffle[{e1, e2, \[Ellipsis]}, x] gives {e1, x, e2, x, \
\[Ellipsis]}. Riffle[{e1, e2, \[Ellipsis]}, {x1, x2, \[Ellipsis]}] gives {e1, \
x1, e2, x2, \[Ellipsis]}. Riffle[list, x, n] yields a list in which every \
n^th element is x. Riffle[list, x, {imin, imax, n}] yields a list in which x \
appears if possible at positions imin, imin + n, imin + 2n, \[Ellipsis], \
imax."}, {"Right", "Right is a symbol that represents the right-hand side for \
purposes of alignment and positioning."}, 
 {"RightArrow", "RightArrow[x, y, \[Ellipsis]] displays as \
x->y->\[Ellipsis]."}, {"RightArrowBar", 
  "RightArrowBar[x, y, \[Ellipsis]] displays as x->|y->|\[Ellipsis]."}, 
 {"RightArrowLeftArrow", "RightArrowLeftArrow[x, y, \[Ellipsis]] displays as \
x\[RightArrowLeftArrow]y\[RightArrowLeftArrow]\[Ellipsis]."}, 
 {"RightComposition", "RightComposition[f1, f2, f3, \[Ellipsis]] represents a \
composition on the right of the functions f1, f2, f3, \[Ellipsis]."}, 
 {"RightCosetRepresentative", "RightCosetRepresentative[group, g] returns the \
smallest element in the right coset of products of the elements of group by \
g."}, {"RightDownTeeVector", "RightDownTeeVector[x, y, \[Ellipsis]] displays \
as x\[RightDownTeeVector]y\[RightDownTeeVector]\[Ellipsis]."}, 
 {"RightDownVector", "RightDownVector[x, y, \[Ellipsis]] displays as \
x\[RightDownVector]y\[RightDownVector]\[Ellipsis]."}, 
 {"RightDownVectorBar", "RightDownVectorBar[x, y, \[Ellipsis]] displays as \
x\[RightDownVectorBar]y\[RightDownVectorBar]\[Ellipsis]."}, 
 {"RightTee", "RightTee[x, y] displays as x\[RightTee]y."}, 
 {"RightTeeArrow", "RightTeeArrow[x, y, \[Ellipsis]] displays as \
x\[RightTeeArrow]y\[RightTeeArrow]\[Ellipsis]."}, 
 {"RightTeeVector", "RightTeeVector[x, y, \[Ellipsis]] displays as \
x\[RightTeeVector]y\[RightTeeVector]\[Ellipsis]."}, 
 {"RightTriangle", "RightTriangle[x, y, \[Ellipsis]] displays as \
x\[RightTriangle]y\[RightTriangle]\[Ellipsis]."}, 
 {"RightTriangleBar", "RightTriangleBar[x, y, \[Ellipsis]] displays as \
x\[RightTriangleBar]y\[RightTriangleBar]\[Ellipsis]."}, 
 {"RightTriangleEqual", "RightTriangleEqual[x, y, \[Ellipsis]] displays as \
x\[RightTriangleEqual]y\[RightTriangleEqual]\[Ellipsis]."}, 
 {"RightUpDownVector", "RightUpDownVector[x, y, \[Ellipsis]] displays as \
x\[RightUpDownVector]y\[RightUpDownVector]\[Ellipsis]."}, 
 {"RightUpTeeVector", "RightUpTeeVector[x, y, \[Ellipsis]] displays as \
x\[RightUpTeeVector]y\[RightUpTeeVector]\[Ellipsis]."}, 
 {"RightUpVector", "RightUpVector[x, y, \[Ellipsis]] displays as \
x\[RightUpVector]y\[RightUpVector]\[Ellipsis]."}, 
 {"RightUpVectorBar", "RightUpVectorBar[x, y, \[Ellipsis]] displays as \
x\[RightUpVectorBar]y\[RightUpVectorBar]\[Ellipsis]."}, 
 {"RightVector", "RightVector[x, y, \[Ellipsis]] displays as \
x\[RightVector]y\[RightVector]\[Ellipsis]."}, {"RightVectorBar", "RightVector\
Bar[x, y, \[Ellipsis]] displays as \
x\[RightVectorBar]y\[RightVectorBar]\[Ellipsis]."}, 
 {"RipleyK", "RipleyK[pdata, r] estimates Ripley's K function K(r) at radius \
r for point data pdata. RipleyK[pproc, r] computes K(r) for the point process \
pproc. RipleyK[bdata, r] computes K(r) for binned data bdata. RipleyK[pspec] \
generates the function K that can be applied repeatedly at different radii \
r."}, {"RipleyRassonRegion", "RipleyRassonRegion[pdata] gives an estimated \
observation based on the point data pdata."}, {"RiskAchievementImportance", "\
RiskAchievementImportance[rdist, t] gives the risk achievement importances \
for all components in the ReliabilityDistribution rdist at time t. \
RiskAchievementImportance[fdist, t] gives the risk achievement importances \
for all components in the FailureDistribution fdist at time t."}, 
 {"RiskReductionImportance", "RiskReductionImportance[rdist, t] gives the \
risk reduction importances for all components in the ReliabilityDistribution \
rdist at time t. RiskReductionImportance[fdist, t] gives the risk reduction \
importances for all components in the FailureDistribution fdist at time t."}, 
 {"RobustConvexOptimization", "RobustConvexOptimization[f, ForAll[pars, \
pcons, vcons], vars] find values of vars that give the minimum value of f for \
vars that satisfy the constraints vcons for all possible values of the \
parameters pars that satisfy the parametric constraints pcons. \
RobustConvexOptimization[\[Ellipsis], \"\\!\\(\\*prop\"] specifies what \
solution property \"\\!\\(\\*prop\" should be returned."}, 
 {"RogersTanimotoDissimilarity", "RogersTanimotoDissimilarity[u, v] gives the \
Rogers-Tanimoto dissimilarity between Boolean vectors u and v."}, 
 {"RollPitchYawAngles", "RollPitchYawAngles[r] gives the roll-pitch-yaw \
angles {\[Alpha], \[Beta], \[Gamma]} corresponding to the rotation matrix r. \
RollPitchYawAngles[r, {a, b, c}] gives the roll-pitch-yaw angles {\[Alpha], \
\[Beta], \[Gamma]} corresponding to rotation order {a, b, c}."}, 
 {"RollPitchYawMatrix", "RollPitchYawMatrix[{\[Alpha], \[Beta], \[Gamma]}] \
gives the 3D rotation matrix formed by rotating by \[Alpha] around the \
initial z axis, then by \[Beta] around the initial y axis, and then by \
\[Gamma] around the initial x axis. RollPitchYawMatrix[{\[Alpha], \[Beta], \
\[Gamma]}, {a, b, c}] gives the 3D rotation matrix formed by rotating by \
\[Alpha] around the fixed a axis, then by \[Beta] around the fixed b axis, \
and then by \[Gamma] around the fixed c axis."}, 
 {"RomanNumeral", "RomanNumeral[n] gives a string corresponding to the Roman \
numeral form of the integer n."}, {"Root", "Root[{f, c}] represents the exact \
root of the general equation f[x]==0 near x = c. Root[{{f1, \[Ellipsis], fn}, \
{c1, \[Ellipsis], cn}}, j] represents the j^th coordinate of the exact root \
of the system of equations {f1[x1, \[Ellipsis], xn]==0, \[Ellipsis], fn[x1, \
\[Ellipsis], xn]==0} near {x1, \[Ellipsis], xn} = {c1, \[Ellipsis], cn}. \
Root[f, k] represents the exact k^th root of the polynomial equation f[x]==0. \
Root[{f1, f2, \[Ellipsis]}, {k1, k2, \[Ellipsis]}] represents the last \
coordinate of the exact vector {a1, a2, \[Ellipsis]} such that ai is the \
ki^th root of the polynomial equation fi[a1, \[Ellipsis], ai - 1, x]==0."}, 
 {"RootApproximant", "RootApproximant[x] converts the number x to one of the \
\"simplest\" algebraic numbers that approximates it well. RootApproximant[x, \
n] finds an algebraic number of degree at most n that approximates x."}, 
 {"RootIntervals", "RootIntervals[{poly1, poly2, \[Ellipsis]}] gives a list \
of isolating intervals for the real roots of any of the polyi, together with \
a list of which polynomials actually have each successive root. \
RootIntervals[poly] gives isolating intervals for real roots of a single \
polynomial. RootIntervals[polys, Complexes] gives bounding rectangles for \
complex roots."}, {"RootLocusPlot", "RootLocusPlot[lsys, {k, kmin, kmax}] \
generates a root locus plot of a linear time-invariant system lsys as the \
parameter k ranges from kmin to kmax."}, {"RootMeanSquare", "RootMeanSquare[l\
ist] gives the root mean square of values in list. RootMeanSquare[dist] gives \
the root mean square of the distribution dist."}, 
 {"RootOfUnityQ", "RootOfUnityQ[a] yields True if a is a root of unity, and \
yields False otherwise."}, {"RootReduce", 
  "RootReduce[expr] attempts to reduce expr to a single Root object."}, 
 {"RootSum", "RootSum[f, form] represents the sum of form[x] for all x that \
satisfy the polynomial equation f[x]==0."}, {"Roots", "Roots[lhs == rhs, var] \
yields a disjunction of equations which represent the roots of a polynomial \
equation."}, {"Rotate", "Rotate[g, \[Theta]] represents 2D graphics \
primitives or any other objects g rotated counterclockwise by \[Theta] \
radians about the center of their bounding box. Rotate[g, \[Theta], {x, y}] \
rotates about the point {x, y}. Rotate[g, {u, v}] rotates around the origin, \
transforming the 2D or 3D vector u to v. Rotate[g, \[Theta], w] rotates 3D \
graphics primitives by \[Theta] radians around the 3D vector w anchored at \
the origin. Rotate[g, \[Theta], w, p] rotates around the 3D vector w anchored \
at p. Rotate[g, \[Theta], {u, v}] rotates by angle \[Theta] in the plane \
spanned by 3D vectors u and v."}, {"RotateLabel", "RotateLabel is an option \
for graphics and related functions that specifies whether labels on vertical \
frame axes should be rotated to be vertical."}, 
 {"RotateLeft", "RotateLeft[expr, n] cycles the elements in expr n positions \
to the left. RotateLeft[expr] cycles one position to the left. \
RotateLeft[expr, {n1, n2, \[Ellipsis]}] cycles elements at successive levels \
ni positions to the left."}, {"RotateRight", "RotateRight[expr, n] cycles the \
elements in expr n positions to the right. RotateRight[expr] cycles one \
position to the right. RotateRight[expr, {n1, n2, \[Ellipsis]}] cycles \
elements at successive levels ni positions to the right."}, 
 {"RotationAction", "RotationAction is an option for three-dimensional \
graphics functions that specifies how to render 3D objects when they are \
interactively rotated."}, {"RotationMatrix", "RotationMatrix[\[Theta]] gives \
the 2D rotation matrix that rotates 2D vectors counterclockwise by \[Theta] \
radians. RotationMatrix[\[Theta], w] gives the 3D rotation matrix for a \
counterclockwise rotation around the 3D vector w. RotationMatrix[{u, v}] \
gives the matrix that rotates the vector u to the direction of the vector v \
in any dimension. RotationMatrix[\[Theta], {u, v}] gives the matrix that \
rotates by \[Theta] radians in the plane spanned by u and v."}, 
 {"RotationTransform", "RotationTransform[\[Theta]] gives a \
TransformationFunction that represents a rotation in 2D by \[Theta] radians \
about the origin. RotationTransform[\[Theta], p] gives a 2D rotation about \
the 2D point p. RotationTransform[\[Theta], w] gives a 3D rotation around the \
direction of the 3D vector w. RotationTransform[\[Theta], w, p] gives a 3D \
rotation around the axis w anchored at the point p. RotationTransform[{u, v}] \
gives a rotation about the origin that transforms the vector u to the \
direction of the vector v. RotationTransform[{u, v}, p] gives a rotation \
about the point p that transforms u to the direction of v. \
RotationTransform[\[Theta], {u, v}, \[Ellipsis]] gives a rotation by \[Theta] \
radians in the plane spanned by u and v."}, {"Round", "Round[x] gives the \
integer closest to x. Round[x, a] rounds to the nearest multiple of a."}, 
 {"RoundingRadius", "RoundingRadius is an option for Rectangle, Framed, and \
related functions that specifies the radius of the circle to use in rendering \
rounded corners."}, {"Row", "Row[{expr1, expr2, \[Ellipsis]}] is an object \
that formats with the expri arranged in a row, potentially extending over \
several lines. Row[list, s] inserts s as a separator between successive \
elements."}, {"RowAlignments", "RowAlignments is an option for the low-level \
function GridBox that specifies how entries in each row should be aligned."}, 
 {"RowBox", "RowBox[{box1, box2, \[Ellipsis]}] is a low-level box construct \
that represents a row of boxes or strings in a notebook expression."}, 
 {"RowLines", "RowLines is an option for the low-level function GridBox that \
specifies whether lines should be drawn between adjacent rows."}, 
 {"RowMinHeight", "RowMinHeight is an option for the low-level function \
GridBox that specifies the minimum total height in units of font size that \
should be allowed for each row."}, {"RowReduce", 
  "RowReduce[m] gives the row-reduced form of the matrix m."}, 
 {"RowSpacings", "RowSpacings is an option for the low-level function GridBox \
that specifies the spaces in x heights that should be inserted between \
successive rows."}, {"RowsEqual", "RowsEqual is an option for the low-level \
function GridBox that specifies whether all rows in the grid should be \
assigned equal total height."}, {"RudinShapiro", 
  "RudinShapiro[n] gives the n^th term in the Rudin-Shapiro sequence."}, 
 {"RudvalisGroupRu", 
  "RudvalisGroupRu[] represents the sporadic simple Rudvalis group Ru."}, 
 {"Rule", 
  "lhs->rhs or lhs->rhs represents a rule that transforms lhs to rhs."}, 
 {"RuleDelayed", "lhs:>rhs or lhs:>rhs represents a rule that transforms lhs \
to rhs, evaluating rhs only after the rule is used."}, 
 {"RulePlot", "RulePlot[sys] generates a plot representing the rule for the \
computational system sys. RulePlot[sys, init, t] generates a plot of the \
evolution of the system sys from initial condition init for t steps. \
RulePlot[sys, evol] generates a plot of the evolution evol assuming it is \
derived from a system of the form sys."}, {"RulerUnits", "RulerUnits is an \
option for notebooks that specifies the units in the ruler toolbar."}, 
 {"RulesTree", "RulesTree[data->{rule1, rule2, \[Ellipsis]}] gives a tree \
whose root contains data and that has children specified by the rulei."}, 
 {"Run", "Run[\"\\!\\(\\*command\"] runs command as an external operating \
system command, returning the exit code obtained."}, 
 {"RunProcess", "RunProcess[\"\\!\\(\\*command\"] runs the specified external \
command, returning information on the outcome. \
RunProcess[{\"\\!\\(\\*command\", arg1, arg2, \[Ellipsis]}] runs the \
specified command, with command-line arguments argi. RunProcess[command, \
\"\\!\\(\\*prop\"] returns only the specified property. RunProcess[command, \
prop, input] feeds the specified initial input to the command."}, 
 {"RunThrough", "RunThrough[\"\\!\\(\\*command\", expr] executes an external \
command, giving the printed form of expr as input and taking the output, \
reading it as Wolfram Language input, and returning the result."}, 
 {"RuntimeAttributes", "RuntimeAttributes is an option for Compile that \
specifies attributes for the compiled function it creates."}, 
 {"RuntimeOptions", "RuntimeOptions is an option for Compile that specifies \
runtime settings for the compiled function it creates."}, 
 {"RussellRaoDissimilarity", "RussellRaoDissimilarity[u, v] gives the \
Russell-Rao dissimilarity between Boolean vectors u and v."}, 
 {"SARIMAProcess", "SARIMAProcess[{a1, \[Ellipsis], ap}, d, {b1, \[Ellipsis], \
bq}, {s, {\[Alpha]1, \[Ellipsis], \[Alpha]m}, \[Delta], {\[Beta]1, \
\[Ellipsis], \[Beta]r}}, v] represents a seasonal integrated autoregressive \
moving-average process with ARIMA coefficients ai, d, and bj ; seasonal order \
s ; seasonal ARIMA coefficients \[Alpha]i, \[Delta], and \[Beta]j ; seasonal \
integration order \[Delta] ; and normal white noise with variance v. \
SARIMAProcess[{a1, \[Ellipsis], ap}, d, {b1, \[Ellipsis], bq}, {s, \
{\[Alpha]1, \[Ellipsis], \[Alpha]m}, \[Delta], {\[Beta]1, \[Ellipsis], \
\[Beta]r}}, \[CapitalSigma]] represents a vector SARIMA process with \
coefficient matrices ai, bj, \[Alpha]i, and \[Beta]j and covariance matrix \
\[CapitalSigma]. SARIMAProcess[{a1, \[Ellipsis]}, {d1, \[Ellipsis]}, {b1, \
\[Ellipsis]}, {{s1, \[Ellipsis]}, {\[Alpha]1, \[Ellipsis]}, {\[Delta]1, \
\[Ellipsis]}, {\[Beta]1, \[Ellipsis]}}, \[CapitalSigma]] represents a vector \
SARIMA process with multiple integration orders di, seasonal orders sj, and \
seasonal integration orders \[Delta]k. SARIMAProcess[{a1, \[Ellipsis], ap}, \
d, {b1, \[Ellipsis], bq}, {s, {\[Alpha]1, \[Ellipsis], \[Alpha]m}, \[Delta], \
{\[Beta]1, \[Ellipsis], \[Beta]r}}, v, init] represents a SARIMA process with \
initial data init. SARIMAProcess[c, \[Ellipsis]] represents a SARIMA process \
with constant c."}, {"SARMAProcess", "SARMAProcess[{a1, \[Ellipsis], ap}, \
{b1, \[Ellipsis], bq}, {s, {\[Alpha]1, \[Ellipsis], \[Alpha]m}, {\[Beta]1, \
\[Ellipsis], \[Beta]r}}, v] represents a weakly stationary seasonal \
autoregressive moving-average process with ARMA coefficients ai and bj, \
seasonal order s, seasonal ARMA coefficients \[Alpha]i and \[Beta]j, and \
normal white noise with variance v. SARMAProcess[{a1, \[Ellipsis], ap}, {b1, \
\[Ellipsis], bq}, {s, {\[Alpha]1, \[Ellipsis], \[Alpha]m}, {\[Beta]1, \
\[Ellipsis], \[Beta]r}}, \[CapitalSigma]] represents a weakly stationary \
vector SARMA process driven by normal white noise, with covariance matrix \
\[CapitalSigma]. SARMAProcess[{a1, \[Ellipsis], ap}, {b1, \[Ellipsis], bq}, \
{{s1, \[Ellipsis]}, {\[Alpha]1, \[Ellipsis], \[Alpha]m}, {\[Beta]1, \
\[Ellipsis], \[Beta]r}}, \[CapitalSigma]] represents a weakly stationary \
vector SARMA process with multiple seasonal orders si. SARMAProcess[{a1, \
\[Ellipsis], ap}, {b1, \[Ellipsis], bq}, {s, {\[Alpha]1, \[Ellipsis], \
\[Alpha]m}, {\[Beta]1, \[Ellipsis], \[Beta]r}}, v, init] represents a SARMA \
process with initial data init. SARMAProcess[c, \[Ellipsis]] represents a \
SARMA process with a constant c."}, {"SASTriangle", "SASTriangle[a, \[Gamma], \
b] returns a filled triangle with sides of length a and b and angle \[Gamma] \
between them."}, {"SSSTriangle", "SSSTriangle[a, b, c] returns a filled \
triangle with sides of lengths a, b, and c."}, 
 {"SameQ", "lhs === rhs yields True if the expression lhs is identical to \
rhs, and yields False otherwise."}, {"SameTest", "SameTest is an option whose \
setting gives a pairwise comparison function to determine whether expressions \
should be considered the same."}, {"SameTestProperties", "SameTestProperties \
is an option for set operations on entity classes whose setting gives the \
properties that are used to decide whether two given entities are the same."}\
, {"SampleDepth", "SampleDepth is an option for sound primitives that \
specifies how many bits should be used to encode sound amplitude levels."}, 
 {"SampleRate", "SampleRate is an option that specifies the number of samples \
per second for sound and signal processing functions."}, 
 {"SampledEntityClass", "SampledEntityClass[class, n] represents an entity \
class containing n entities from class. SampledEntityClass[class, {m, n}] \
represents an entity class containing entities m through n of class."}, 
 {"SampledSoundFunction", "SampledSoundFunction[f, n, r] is a sound primitive \
that represents a sound whose amplitude sampled r times a second is generated \
by applying the function f to successive integers from 1 to n."}, 
 {"SampledSoundList", "SampledSoundList[{a1, a2, \[Ellipsis]}, r] is a sound \
primitive that represents a sound whose amplitude has levels ai sampled r \
times a second."}, {"SamplingPeriod", "SamplingPeriod is an option to \
StateSpaceModel etc. that specifies the sampling period."}, 
 {"SatelliteData", "SatelliteData[entity, property] gives the value of the \
specified property for the satellite entity. SatelliteData[{entity1, entity2, \
\[Ellipsis]}, property] gives a list of property values for the specified \
satellite entities. SatelliteData[entity, property, annotation] gives the \
specified annotation associated with the given property."}, 
 {"SatisfiabilityCount", "SatisfiabilityCount[bf] counts the number of \
possible combinations of variable values that yield True when supplied as \
arguments to the Boolean function bf. SatisfiabilityCount[expr, {a1, a2, \
\[Ellipsis]}] counts the number of possible combinations of the ai that make \
the Boolean expression expr be true."}, {"SatisfiabilityInstances", "Satisfia\
bilityInstances[bf] attempts to find a choice of variables that makes the \
Boolean function bf yield True. SatisfiabilityInstances[expr, {a1, a2, \
\[Ellipsis]}] attempts to find a choice of the ai that makes the Boolean \
expression expr be True. SatisfiabilityInstances[\[Ellipsis], \[Ellipsis], m] \
attempts to find m choices of variables that yield True."}, 
 {"SatisfiableQ", "SatisfiableQ[bf] gives True if a combination of values of \
variables exists that makes the Boolean function bf yield True. \
SatisfiableQ[expr, {a1, a2, \[Ellipsis]}] gives True if a combination of \
values of the ai exists that makes the Boolean expression expr yield True."}, 
 {"Saturday", "Saturday is a day of the week."}, 
 {"Save", "Save[\"\\!\\(\\*filename\", symbol] appends definitions associated \
with the specified symbol to a file. Save[\"\\!\\(\\*filename\", \
\"\\!\\(\\*patt\"] appends definitions associated with all symbols whose \
names match the string pattern \"\\!\\(\\*patt\". Save[\"\\!\\(\\*filename\", \
\"\\!\\(\\*StyleBox[\\(\\*context`]\"] appends definitions associated with \
all symbols in the specified context. Save[\"\\!\\(\\*filename\", {object1, \
object2, \[Ellipsis]}] appends definitions associated with several objects."}\
, {"SaveConnection", "SaveConnection is an option for ServiceConnect that \
determines whether the connection should be saved in the authenticated user's \
account."}, {"SaveDefinitions", "SaveDefinitions is an option to Manipulate \
and related functions that specifies whether current definitions relevant for \
the evaluation of the expression being manipulated should automatically be \
saved."}, {"SavitzkyGolayMatrix", "SavitzkyGolayMatrix[r, k] gives a matrix \
corresponding to a smoothing kernel of radius r for performing polynomial \
regression of degree k. SavitzkyGolayMatrix[{r1, r2}, {k1, k2}] gives a \
matrix for performing polynomial regression of degree k1 over a window of \
radius r1 along rows, and degree k2 over a window of radius r2 along columns. \
SavitzkyGolayMatrix[r, k, n] gives a matrix for performing the n^th \
derivative of a polynomial regression of degree k. SavitzkyGolayMatrix[{r1, \
r2\[Ellipsis] }, {k1, k2, \[Ellipsis]}, \[Ellipsis]] gives an array using the \
specified parameters for each direction i."}, {"SawtoothWave", "SawtoothWave[\
x] gives a sawtooth wave that varies from 0 to 1 with unit period. \
SawtoothWave[{min, max}, x] gives a sawtooth wave that varies from min to max \
with unit period."}, {"Scale", "Scale[g, s] represents graphics primitives g \
scaled by a factor s. Scale[g, s, {x, y, \[Ellipsis]}] scales with the point \
{x, y, \[Ellipsis]} kept fixed. Scale[g, {sx, sy, \[Ellipsis]}, \[Ellipsis]] \
scales by different factors along different axes."}, 
 {"ScaleDivisions", "ScaleDivisions is an option for gauge functions that \
specifies how many tick marks should be drawn on the scale."}, 
 {"ScaleOrigin", "ScaleOrigin is an option for gauge functions that describes \
how to position the scale on the gauge."}, {"ScalePadding", "ScalePadding is \
an option for gauge functions that specifies how much space to leave around \
the scale."}, {"ScaleRangeStyle", "ScaleRangeStyle is an option for gauge \
functions to describe how to style different sections of the scale."}, 
 {"ScaleRanges", "ScaleRanges is an option for gauge functions that describes \
how to draw sections of the scale."}, {"Scaled", "Scaled[{x, y, \[Ellipsis]}] \
gives the position of a graphical object in terms of coordinates scaled to \
run from 0 to 1 across the whole plot range in each direction. Scaled[{dx, \
dy, \[Ellipsis]}, {x0, y0, \[Ellipsis]}] gives a position obtained by \
starting at ordinary coordinates {x0, y0, \[Ellipsis]}, then moving by a \
scaled offset {dx, dy, \[Ellipsis]}."}, {"ScalingFunctions", "ScalingFunction\
s is an option for ListPlot, BarChart, Histogram, and other plotting \
functions that specifies what scaling functions should be used."}, 
 {"ScalingMatrix", "ScalingMatrix[{sx, sy, \[Ellipsis]}] gives the matrix \
corresponding to scaling by a factor si along each coordinate axis. \
ScalingMatrix[s, v] gives the matrix corresponding to scaling by a factor s \
along the direction of the vector v."}, {"ScalingTransform", "ScalingTransfor\
m[{sx, sy, \[Ellipsis]}] gives a TransformationFunction that represents \
scaling by a factor si along each coordinate axis from the origin. \
ScalingTransform[{sx, sy, \[Ellipsis]}, p] gives scaling centered at the \
point p. ScalingTransform[s, v] gives scaling by a factor s along the \
direction of the vector v. ScalingTransform[s, v, p] gives scaling along the \
direction of v, centered at the point p."}, {"Scan", "Scan[f, expr] evaluates \
f applied to each element of expr in turn. Scan[f, expr, levelspec] applies f \
to parts of expr specified by levelspec. Scan[f] represents an operator form \
of Scan that can be applied to an expression."}, 
 {"ScheduledTask", "ScheduledTask[expr, timespec] represents a scheduled task \
to be evaluated on the schedule defined by timespec."}, 
 {"SchurDecomposition", "SchurDecomposition[m] yields the Schur decomposition \
for a numerical matrix m, given as a list {q, t} where q is an orthonormal \
matrix and t is a block upper-triangular matrix. SchurDecomposition[{m, a}] \
gives the generalized Schur decomposition of m with respect to a."}, 
 {"ScientificForm", "ScientificForm[expr] prints with all real numbers in \
expr given in scientific notation. ScientificForm[expr, n] prints with \
numbers given to n -digit precision."}, {"ScientificNotationThreshold", "Scie\
ntificNotationThreshold is an option for NumberForm and related functions \
that specifies the threshold between the use of decimal notation and \
scientific notation to represent real numbers."}, 
 {"ScorerGi", "ScorerGi[z] gives the Scorer function Gi(z)."}, 
 {"ScorerGiPrime", "ScorerGiPrime[z] gives the derivative of the Scorer \
function Gi^\[Prime](z)."}, {"ScorerHi", 
  "ScorerHi[z] gives the Scorer function Hi(z)."}, 
 {"ScorerHiPrime", "ScorerHiPrime[z] gives the derivative of the Scorer \
function Hi^\[Prime](z)."}, {"ScreenStyleEnvironment", "ScreenStyleEnvironmen\
t is an option for notebooks that specifies the style environment to be used \
in displaying a notebook on the screen."}, {"ScriptBaselineShifts", "ScriptBa\
selineShifts is an option for Style that specifies the minimum distance in x \
-heights to shift subscripts and superscripts."}, 
 {"ScriptMinSize", "ScriptMinSize is an option for Style which specifies the \
minimum font size to use in rendering subscripts, etc."}, 
 {"ScriptSizeMultipliers", "ScriptSizeMultipliers is an option for Style that \
specifies how much smaller to render each successive level of subscripts, \
etc."}, {"ScrollPosition", "ScrollPosition is an option for Pane that \
specifies the scroll position of the contents of the pane."}, 
 {"Scrollbars", "Scrollbars is an option for Pane that specifies whether \
scrollbars should be displayed."}, {"ScrollingOptions", "ScrollingOptions is \
an option for notebooks that specifies settings for scrolling."}, 
 {"SearchAdjustment", "SearchAdjustment[query, w] represents a component of a \
search query that is to be treated as having weight w. \
SearchAdjustment[query, \[Ellipsis], opts] represents a component of a search \
query with certain options."}, {"SearchIndexObject", "SearchIndexObject[loc] \
represents a search index object, as created by CreateSearchIndex. \
SearchIndexObject[\"\\!\\(\\*name\"] represents the search index with the \
specified name in the SearchIndices[] list."}, 
 {"SearchIndices", "SearchIndices[] returns a list with all the locally \
stored instances of SearchIndexObject."}, {"SearchQueryString", "SearchQueryS\
tring[\"\\!\\(\\*query\"] represents a search engine-style query in \
TextSearch and related functions."}, {"SearchResultObject", "SearchResultObje\
ct[\[Ellipsis]] represents a result from TextSearch[\[Ellipsis]] and related \
functions."}, {"Sec", "Sec[z] gives the secant of z."}, 
 {"Sech", "Sech[z] gives the hyperbolic secant of z."}, 
 {"SechDistribution", "SechDistribution[\[Mu], \[Sigma]] represents the \
hyperbolic secant distribution with location parameter \[Mu] and scale \
parameter \[Sigma]. SechDistribution[] represents the hyperbolic secant \
distribution with location parameter 0 and scale parameter 1."}, 
 {"SecondOrderConeOptimization", "SecondOrderConeOptimization[f, cons, vars] \
finds values of variables vars that minimize the linear objective f subject \
to second-order cone and/or linear constraints cons. \
SecondOrderConeOptimization[c, {{a1, b1, \[Alpha]1, \[Beta]1}, \[Ellipsis], \
{ak, bk, \[Alpha]k, \[Beta]k}}] finds a vector x that minimizes c.x subject \
to the constraints ai.x + bi<=\[Alpha]i.x + \[Beta]i. \
SecondOrderConeOptimization[c, \[Ellipsis], {dom1, dom2, \[Ellipsis]}] takes \
xi to be in the domain domi, where domi is Integers or Reals. \
SecondOrderConeOptimization[\[Ellipsis], \"\\!\\(\\*prop\"] specifies what \
solution property \"\\!\\(\\*prop\" should be returned."}, 
 {"SectorChart", "SectorChart[{{x1, y1}, {x1, y2}, \[Ellipsis]}] makes a \
sector chart with sector angles proportional to xi and radii yi. \
SectorChart[{\[Ellipsis], wi[{xi, yi}, \[Ellipsis]], \[Ellipsis], wj[{xj, \
yj}, \[Ellipsis]], \[Ellipsis]}] makes a sector chart with sector features \
defined by the symbolic wrappers wk. SectorChart[{data1, data2, \[Ellipsis]}] \
makes a sector chart from multiple datasets datai."}, 
 {"SectorChart3D", "SectorChart3D[{{x1, y1, z1}, {x2, y2, z2}, \[Ellipsis]}] \
makes a 3D sector chart with sector angle proportional to xi, radius yi, and \
height zi. SectorChart3D[{\[Ellipsis], wi[{xi, yi, zi}, \[Ellipsis]], \
\[Ellipsis], wj[{xj, yj, zj}, \[Ellipsis]], \[Ellipsis]}] makes a 3D sector \
chart with sector features defined by the symbolic wrappers wk. \
SectorChart3D[{data1, data2, \[Ellipsis]}] makes a 3D sector chart from \
multiple datasets datai."}, {"SectorOrigin", "SectorOrigin is an option to \
PieChart and related functions that specifies where sectors should start."}, 
 {"SectorSpacing", "SectorSpacing is an option to PieChart and related \
functions that specifies radial spacing of sectors."}, 
 {"SecuredAuthenticationKey", "SecuredAuthenticationKey[assoc] represents a \
secured authentication key with credentials and details specified by the \
association assoc."}, {"SecuredAuthenticationKeys", "SecuredAuthenticationKey\
s[] retrieves a list of all instances of SecuredAuthenticationKey owned by \
the currently connected user. SecuredAuthenticationKeys[\"\\!\\(\\*name\"] \
retrieves a SecuredAuthenticationKey identified by \"\\!\\(\\*name\" owned by \
the currently connected user, if it exists."}, 
 {"SecurityCertificate", "SecurityCertificate[assoc] represents the security \
certificate issued for a public key."}, {"SeedRandom", "SeedRandom[s] resets \
the pseudorandom generator, using s as a seed. SeedRandom[] resets the \
generator, using as a seed the time of day and certain attributes of the \
current Wolfram System session."}, {"Select", "Select[list, crit] picks out \
all elements ei of list for which crit[ei] is True. Select[list, crit, n] \
picks out the first n elements for which crit[ei] is True. Select[crit] \
represents an operator form of Select that can be applied to an expression."}\
, {"SelectComponents", "SelectComponents[{image, lmat}, crit] selects \
components of image indicated by the label matrix lmat that satisfy crit, \
replacing other parts with black. SelectComponents[image, crit] selects \
connected components of image. SelectComponents[\[Ellipsis], \
\"\\!\\(\\*prop\", n] computes the property \"\\!\\(\\*prop\" and selects the \
first n in sorted order. SelectComponents[\[Ellipsis], \"\\!\\(\\*prop\", n, \
p] sorts computed properties using the ordering function p."}, 
 {"SelectFirst", "SelectFirst[{e1, e2, \[Ellipsis]}, crit] gives the first ei \
for which crit[ei] is True, or Missing[\"NotFound\"] if none is found. \
SelectFirst[{e1, e2, \[Ellipsis]}, crit, default] gives default if there is \
no ei such that crit[ei] is True. SelectFirst[crit] represents an operator \
form of SelectFirst that can be applied to an expression."}, 
 {"Selectable", "Selectable is an option for displayed objects, cells, and \
notebooks that specifies whether their contents can be selected interactively \
using the front end."}, {"SelectedCells", "SelectedCells[notebook] returns a \
list of CellObject expressions corresponding to the currently selected cells \
in notebook. SelectedCells[] returns the currently selected cells in the \
notebook in which this function is being evaluated."}, 
 {"SelectedNotebook", 
  "SelectedNotebook[] gives the currently selected notebook in the front \
end."}, {"SelectionCreateCell", "SelectionCreateCell[notebook] copies the \
contents of the current selection in a notebook into a new cell. \
SelectionCreateCell[notebook, sel] sets the current selection after the copy \
to be as specified by sel."}, {"SelectionEvaluate", "SelectionEvaluate[notebo\
ok] replaces the current selection in a notebook with the result obtained by \
evaluating the contents of the selection in the kernel. \
SelectionEvaluate[notebook, sel] sets the current selection after the \
evaluation to be as specified by sel."}, {"SelectionEvaluateCreateCell", "Sel\
ectionEvaluateCreateCell[notebook] takes the current selection in a notebook \
and creates a new cell containing the result obtained by evaluating the \
contents of the selection using the kernel. \
SelectionEvaluateCreateCell[notebook, sel] sets the current selection after \
the evaluation to be as specified by sel."}, {"SelectionMove", "SelectionMove\
[obj, dir, unit] moves the current selection in an open notebook in the front \
end in the direction dir by the specified unit. SelectionMove[obj, dir, unit, \
n] repeats the move n times."}, {"SelfLoopStyle", "SelfLoopStyle is an option \
for GraphPlot and related functions that specifies how to draw self-loops \
that connect a vertex to itself."}, {"SemanticImport", "SemanticImport[file] \
attempts to import a file semantically to give a Dataset object. \
SemanticImport[file, type] attempts to interpret all elements in the file as \
being of the specified type. SemanticImport[file, {type1, type2, \
\[Ellipsis]}] attempts to interpret elements in successive columns as being \
of the specified types. SemanticImport[file, \[LeftAssociation]col1->type1, \
col2->type2, \[Ellipsis]\[RightAssociation]] keeps only the columns coli \
specified by their positions or names. SemanticImport[file, typespec, form] \
puts the result in the specified form."}, {"SemanticImportString", "SemanticI\
mportString[\"\\!\\(\\*string\"] attempts to import a string semantically to \
give a Dataset object. SemanticImportString[\"\\!\\(\\*string\", type] \
attempts to interpret all elements in the string as being of the specified \
type. SemanticImportString[\"\\!\\(\\*string\", {type1, type2, \[Ellipsis]}] \
attempts to interpret elements in successive columns as being of the \
specified types. SemanticImportString[\"\\!\\(\\*string\", \
\[LeftAssociation]col1->type1, col2->type2, \[Ellipsis]\[RightAssociation]] \
attempts to interpret elements in the named columns as being of the specified \
types. SemanticImportString[\"\\!\\(\\*string\", typespec, form] puts the \
result in the specified form."}, {"SemanticInterpretation", "SemanticInterpre\
tation[\"\\!\\(\\*string\"] attempts to give the best semantic interpretation \
of the specified free-form string as a Wolfram Language expression. \
SemanticInterpretation[\"\\!\\(\\*string\", pattern] filters possible \
semantic interpretations, returning the best one that matches the specified \
pattern. SemanticInterpretation[\"\\!\\(\\*string\", pattern, head] returns \
the semantic interpretation wrapped with the specified head."}, 
 {"SemialgebraicComponentInstances", "SemialgebraicComponentInstances[ineqs, \
{x1, x2, \[Ellipsis]}] gives at least one sample point in each connected \
component of the semialgebraic set defined by the inequalities ineqs in the \
variables x1, x2, \[Ellipsis]."}, {"SemidefiniteOptimization", "SemidefiniteO\
ptimization[f, cons, vars] finds values of variables vars that minimize the \
linear objective f subject to semidefinite constraints cons. \
SemidefiniteOptimization[c, {a0, a1, \[Ellipsis], ak}] finds a vector x that \
minimizes the quantity c.x subject to the linear matrix inequality constraint \
a0 + a1 x1 + \[Ellipsis] + ak xk\[SucceedsEqual]n0. \
SemidefiniteOptimization[\[Ellipsis], \"\\!\\(\\*prop\"] specifies what \
solution property \"\\!\\(\\*prop\" should be returned."}, 
 {"SendMail", "SendMail[body] sends mail consisting of body to the address \
specified by $CloudUserID. SendMail[{\"\\!\\(\\*subject\"}] sends mail with \
the specified subject and no body. SendMail[{\"\\!\\(\\*subject\", body}] \
sends mail with the specified subject and body. \
SendMail[{\"\\!\\(\\*subject\", body, att}] sends mail with the attachment or \
attachments att. SendMail[\"\\!\\(\\*to\", content] sends mail to the \
specified To: address. SendMail[{\"\\!\\(\\*to_1\", \"\\!\\(\\*to_2\", \
\[Ellipsis]}, content] sends mail to multiple To: addresses. \
SendMail[{{\"\\!\\(\\*to_1\", \[Ellipsis]}, {\"\\!\\(\\*cc_1\", \
\[Ellipsis]}}, content] includes the cci as Cc: addresses. \
SendMail[{{\"\\!\\(\\*to_1\", \[Ellipsis]}, {\"\\!\\(\\*cc_1\", \[Ellipsis]}, \
{\"\\!\\(\\*bcc_1\", \[Ellipsis]}}, content] also includes the bcci as Bcc: \
addresses. SendMail[assoc] sends mail with elements specified in the \
association assoc."}, {"SendMessage", "SendMessage[channel, message] sends a \
message to the specified channel. SendMessage[channel->dest, message] sends a \
message to the destination dest through the specified channel."}, 
 {"Sequence", "Sequence[expr1, expr2, \[Ellipsis]] represents a sequence of \
arguments to be spliced automatically into any function."}, 
 {"SequenceAlignment", "SequenceAlignment[s1, s2] finds an optimal alignment \
of sequences of elements in the strings or lists s1 and s2, and yields a list \
of successive matching and differing sequences. SequenceAlignment[s1, s2] \
finds an optimal alignment of sequences of elements in the strings, lists or \
biomolecular sequences s1 and s2, and yields a list of successive matching \
and differing sequences."}, {"SequenceCases", "SequenceCases[list, patt] \
gives a list of the sublists in list that match the sequence pattern patt. \
SequenceCases[list, patt->rhs] gives a list of the values of rhs \
corresponding to sublists that match patt. SequenceCases[list, patt, n] \
includes only the first n matches."}, {"SequenceCount", "SequenceCount[list, \
sub] gives a count of the number of times sub appears as a sublist of list. \
SequenceCount[list, patt] gives the number of sublists in list that match the \
general sequence pattern patt."}, {"SequenceFold", "SequenceFold[f, {x1, \
\[Ellipsis], xn}, {a1, a2, \[Ellipsis]}] gives the last element of \
SequenceFoldList[f, {x1, \[Ellipsis], xn}, {a1, a2, \[Ellipsis]}]. \
SequenceFold[f, {x1, \[Ellipsis], xn}, {a1, a2, \[Ellipsis]}, k] applies f to \
k arguments at each step, with the first n coming from the xi or previous \
results, and the last k - n coming from the ai."}, 
 {"SequenceFoldList", "SequenceFoldList[f, {x1, \[Ellipsis], xn}, {a1, a2, \
\[Ellipsis]}] gives {x1, \[Ellipsis], xn, f[x1, \[Ellipsis], xn, a1], f[x2, \
\[Ellipsis], xn, f[x1, \[Ellipsis], xn, a1], a2], \[Ellipsis]}. \
SequenceFoldList[f, {x1, \[Ellipsis], xn}, {a1, a2, \[Ellipsis]}, k] applies \
f to k arguments at each step, with the first n coming from the xi or \
previous results, and the last k - n coming from the ai."}, 
 {"SequenceHold", "SequenceHold is an attribute that specifies that Sequence \
objects appearing in the arguments of a function should not automatically be \
flattened out."}, {"SequenceLastLayer", "SequenceLastLayer[] represents a net \
that takes a sequence of inputs and returns the last element of the \
sequence."}, {"SequenceMostLayer", "SequenceMostLayer[] represents a net that \
takes a sequence of inputs and removes its last element."}, 
 {"SequencePosition", "SequencePosition[list, sublist] gives a list of the \
starting and ending positions at which sublist appears in list. \
SequencePosition[list, patt] gives all positions at which sequences matching \
patt occur in list. SequencePosition[list, patt, n] includes only the first n \
occurrences of patt."}, {"SequencePredict", "SequencePredict[{seq1, seq2, \
\[Ellipsis]}] generates a SequencePredictorFunction[\[Ellipsis]] based on the \
sequences given. SequencePredict[training, seq] attempts to predict the next \
element in the sequence seq from the training sequences given. \
SequencePredict[training, {seq1, seq2, \[Ellipsis]}] gives predictions for \
each of the sequences seqi. SequencePredict[\"\\!\\(\\*name\", seq] uses the \
built-in sequence predictor represented by \"\\!\\(\\*name\". \
SequencePredict[\[Ellipsis], seq, prop] give the specified property of the \
prediction associated with seq."}, {"SequencePredictorFunction", "SequencePre\
dictorFunction[\[Ellipsis]] represents a function generated by \
SequencePredict that predicts the next elements from a sequence."}, 
 {"SequenceReplace", "SequenceReplace[list, rules] replaces sequences in list \
according to the specified rule or list of rules. SequenceReplace[list, \
rules, n] does only the first n replacements. SequenceReplace[rules] \
represents an operator form of SequenceReplace that can be applied to an \
expression."}, {"SequenceRestLayer", "SequenceRestLayer[] represents a net \
that takes a sequence of inputs and removes its first element."}, 
 {"SequenceReverseLayer", "SequenceReverseLayer[] represents a net that \
reverses the order of an input sequence."}, {"SequenceSplit", "SequenceSplit[\
list, patt] splits list into sublists separated by sequences that match the \
sequence pattern patt. SequenceSplit[list, patt->rhs] inserts rhs at the \
position of each matched sequence. SequenceSplit[list, {patt1->rhs1, \
\[Ellipsis]}] inserts rhsi at the position of each patti. SequenceSplit[list, \
patt, n] splits into at most n sublists."}, {"Series", "Series[f, {x, x0, n}] \
generates a power series expansion for f about the point x = x0 to order (x - \
x0)^n, where n is an explicit integer. Series[f, x->x0] generates the leading \
term of a power series expansion for f about the point x = x0. Series[f, {x, \
x0, nx}, {y, y0, ny}, \[Ellipsis]] successively finds series expansions with \
respect to x, then y, etc."}, {"SeriesCoefficient", "SeriesCoefficient[series\
, n] finds the coefficient of the n^th -order term in a power series in the \
form generated by Series. SeriesCoefficient[f, {x, x0, n}] finds the \
coefficient of (x - x0)^n in the expansion of f about the point x = x0. \
SeriesCoefficient[f, {x, x0, nx}, {y, y0, ny}, \[Ellipsis]] finds a \
coefficient in a multivariate series."}, {"SeriesData", "SeriesData[x, x0, \
{a0, a1, \[Ellipsis]}, nmin, nmax, den] represents a power series in the \
variable x about the point x0. The ai are the coefficients in the power \
series. The powers of (x - x0) that appear are nmin / den, (nmin + 1) / den, \
\[Ellipsis], nmax / den."}, {"SeriesTermGoal", "SeriesTermGoal is an option \
for Asymptotic, DiscreteAsymptotic and similar functions that specifies the \
number of desired terms in an asymptotic approximation."}, 
 {"ServiceConnect", "ServiceConnect[\"\\!\\(\\*service\"] creates a \
connection to an external service. ServiceConnect[\"\\!\\(\\*service\", id] \
uses the specified connection identifier."}, {"ServiceDisconnect", "ServiceDi\
sconnect[service] disconnects from an external service specified by a \
ServiceObject."}, {"ServiceExecute", "ServiceExecute[service, \
\"\\!\\(\\*req\"] executes \"\\!\\(\\*req\" on an external service. \
ServiceExecute[service, \"\\!\\(\\*req\", {par1->val1, \[Ellipsis]}] executes \
\"\\!\\(\\*req\" with the specified settings for parameters. \
ServiceExecute[req] executes ServiceRequest req on an external service."}, 
 {"ServiceObject", "ServiceObject[\"\\!\\(\\*service\", \[Ellipsis]] \
represents an open connection to an external service."}, 
 {"ServiceRequest", "ServiceRequest[service, \"\\!\\(\\*req\"] represents a \
service request built from service, which might be a connected ServiceObject \
or a valid service name, and request \"\\!\\(\\*req\". \
ServiceRequest[service, \"\\!\\(\\*req\", param] represents a service \
request, built from the service service, request \"\\!\\(\\*req\" and \
parameters param. ServiceRequest[assoc] represents a service request, built \
from association assoc."}, {"ServiceSubmit", "ServiceSubmit[ServiceRequest[as\
soc]] submits a request to be executed by an external service specified by \
assoc. ServiceSubmit[ScheduledTask[req, spec]] submits a task to evaluate \
ServiceRequest req on an external service following the schedule defined by \
spec. ServiceSubmit[ContinuousTask[req, spec]] submits a task to evaluate \
ServiceRequest req on an external service; the result of the request is \
updated whenever available."}, {"SessionSubmit", "SessionSubmit[expr] submits \
an asynchronous task to evaluate expr in the current session. \
SessionSubmit[ScheduledTask[expr, spec]] submits a task to evaluate expr in \
the current session on the schedule defined by spec."}, 
 {"SessionTime", "SessionTime[] gives the total number of seconds of real \
time that have elapsed since the beginning of your Wolfram System session."}, 
 {"Set", "lhs = rhs evaluates rhs and assigns the result to be the value of \
lhs. From then on, lhs is replaced by rhs whenever it appears. {l1, l2, \
\[Ellipsis]} = {r1, r2, \[Ellipsis]} evaluates the ri, and assigns the \
results to be the values of the corresponding li."}, 
 {"SetAccuracy", "SetAccuracy[expr, a] yields a version of expr in which all \
numbers have been set to have accuracy a."}, {"SetAlphaChannel", "SetAlphaCha\
nnel[image] adds a fully opaque alpha channel to image. \
SetAlphaChannel[image, a] sets the opacity of all pixels to a. \
SetAlphaChannel[image, aimage] sets the alpha channel of image to aimage."}, 
 {"SetAttributes", "SetAttributes[symbol, attr] adds attr to the list of \
attributes of the symbol symbol. SetAttributes[\"\\!\\(\\*symbol\", attr] \
adds attr to the attributes of the symbol named \"\\!\\(\\*symbol\" if it \
exists. SetAttributes[s, {attr1, attr2, \[Ellipsis]}] sets several attributes \
at a time. SetAttributes[{s1, s2, \[Ellipsis]}, attrs] sets attributes of \
several symbols at a time."}, {"SetCloudDirectory", "SetCloudDirectory[dir] \
sets the current working directory used for cloud objects to dir. \
SetCloudDirectory[] sets the current working directory for cloud objects to \
$CloudRootDirectory."}, {"SetCookies", "SetCookies[assoc] sets cookies with \
attributes specified by the association assoc, to be used by functions such \
as URLExecute. SetCookies[{assoc1, assoc2, \[Ellipsis]}] sets a list of \
cookies."}, {"SetDelayed", "lhs:=rhs assigns rhs to be the delayed value of \
lhs. rhs is maintained in an unevaluated form. When lhs appears, it is \
replaced by rhs, evaluated afresh each time."}, 
 {"SetDirectory", "SetDirectory[\"\\!\\(\\*dir\"] sets the current working \
directory to dir. SetDirectory[] sets the current working directory to your \
\"home\" directory."}, {"SetEnvironment", "SetEnvironment[\"\\!\\(\\*var\"->v\
alue] sets the value of an operating system environment variable. \
SetEnvironment[{\"\\!\\(\\*var\"->value, \[Ellipsis]}] sets values for \
several environment variables."}, {"SetFileDate", "SetFileDate[\"\\!\\(\\*fil\
e\"] sets the modification and access dates for a file to be the current \
date."}, {"SetOptions", "SetOptions[s, name1->value1, name2->value2, \
\[Ellipsis]] sets the specified default options for a symbol s. \
SetOptions[stream, \[Ellipsis]] or SetOptions[\"\\!\\(\\*name\", \[Ellipsis]] \
sets options associated with a particular stream. SetOptions[object, \
\[Ellipsis]] sets options associated with an external object such as a \
NotebookObject or CloudObject."}, {"SetPermissions", "SetPermissions[obj, \
\"\\!\\(\\*pstring\"] sets permissions for the cloud object obj to be as \
specified by the string pstring. SetPermissions[obj, class->per] sets \
permissions for the specified class of users to be per. SetPermissions[pers] \
sets permissions as specified by pers for the cloud object corresponding to \
the current document."}, {"SetPrecision", "SetPrecision[expr, p] yields a \
version of expr in which all numbers have been set to have precision p."}, 
 {"SetSelectedNotebook", "SetSelectedNotebook[obj] makes the notebook \
corresponding to obj be the currently selected one in the front end."}, 
 {"SetSharedFunction", "SetSharedFunction[f1, f2, \[Ellipsis]] declares the \
symbols fi as shared functions whose downvalues are synchronized among all \
parallel kernels."}, {"SetSharedVariable", "SetSharedVariable[s1, s2, \
\[Ellipsis]] declares the symbols si as shared variables whose values are \
synchronized among all parallel kernels."}, {"SetStreamPosition", 
  "SetStreamPosition[stream, n] sets the current point in an open stream."}, 
 {"SetSystemModel", "SetSystemModel[model, spec] changes model parameters, \
initializations or other properties in place."}, 
 {"SetSystemOptions", "SetSystemOptions[\"\\!\\(\\*name\"->value] resets the \
value for the internal system option with the specified name."}, 
 {"SetUsers", "SetUsers[group, {user1, \[Ellipsis]}] sets the members of the \
permissions group group to be {user1, \[Ellipsis]}."}, 
 {"Setter", "Setter[x, val] represents a setter button whose setting x is set \
to val when the button is clicked. The button is labeled with val, and \
appears pressed if the value of x is val, and unpressed otherwise. \
Setter[Dynamic[x], val] takes the setting to be the dynamically updated \
current value of x, with the value of x being reset if the button is clicked. \
Setter[x, val, label] labels the setter button with label. Setter[x, {val1, \
val2, \[Ellipsis]}, label] represents a setter button that sets x to valn if \
multiclicked n times."}, {"SetterBar", "SetterBar[x, {val1, val2, \
\[Ellipsis]}] represents a setter bar with setting x and with setter buttons \
for values vali. SetterBar[Dynamic[x], {val1, val2, \[Ellipsis]}] takes the \
setting to be the dynamically updated current value of x, with the value of x \
being reset every time a setter button is clicked. SetterBar[x, {val1->lbl1, \
val2->lbl2, \[Ellipsis]}] represents a setter bar in which the setter button \
giving value vali has label lbli."}, {"Setting", "Setting[expr] replaces \
forms and control objects such as sliders or popup menus in expr by their \
settings."}, {"Shallow", "Shallow[expr] prints as a shallow form of expr. \
Shallow[expr, depth] prints with all parts of expr below the specified depth \
given in skeleton form. Shallow[expr, {depth, length}] also gives parts whose \
lengths are above the specified limit in skeleton form. Shallow[expr, {depth, \
length}, form] uses skeleton form for any parts that match the pattern form."}\
, {"ShannonWavelet", "ShannonWavelet[] represents the Shannon wavelet \
evaluated on the equally spaced interval { - 10, 10}. ShannonWavelet[lim] \
represents the Shannon wavelet evaluated on the equally spaced interval { - \
lim, lim}."}, {"ShapiroWilkTest", "ShapiroWilkTest[data] tests whether data \
is normally distributed using the Shapiro-Wilk test. ShapiroWilkTest[data, \
\"\\!\\(\\*property\"] returns the value of \"\\!\\(\\*property\"."}, 
 {"Share", "Share[expr] changes the way expr is stored internally, to try and \
minimize the amount of memory used. Share[] tries to minimize the memory used \
to store all expressions."}, {"SharingList", "SharingList is an option for \
CloudObject and related constructs that specifies with whom the object has \
been shared."}, {"Sharpen", "Sharpen[image] gives a sharpened version of \
image. Sharpen[image, r] gives a version of image sharpened over pixel radius \
r."}, {"ShearingMatrix", "ShearingMatrix[\[Theta], v, n] gives the matrix \
corresponding to shearing by \[Theta] radians along the direction of the \
vector v, and normal to the vector n."}, {"ShearingTransform", "ShearingTrans\
form[\[Theta], v, n] gives a TransformationFunction that represents a shear \
by \[Theta] radians along the direction of the vector v, normal to the vector \
n, and keeping the origin fixed. ShearingTransform[\[Theta], v, n, p] gives a \
shear that keeps the point p fixed, rather than the origin."}, 
 {"ShellRegion", "ShellRegion[reg] gives a solid shell of a 3D region reg. \
ShellRegion[reg, t] gives a solid shell of reg with minimal thickness t."}, 
 {"ShenCastanMatrix", "ShenCastanMatrix[r] gives a matrix that corresponds to \
an exponential kernel of radius r. ShenCastanMatrix[{r, \[Sigma]}] gives a \
matrix corresponding to an exponential kernel with radius r and region of \
support specified by \[Sigma]. ShenCastanMatrix[r, {n1, n2}] gives a matrix \
formed from the n1^th derivative of the exponential with respect to rows and \
the n2^th derivative with respect to columns. ShenCastanMatrix[r, {{n11, \
n12}, {n21, n22}, \[Ellipsis]}] gives a matrix formed from the sums of the \
ni1 and ni2 derivatives. ShenCastanMatrix[{{r1, r2, \[Ellipsis]}, \[Sigma]}, \
\[Ellipsis]] gives an array corresponding to an exponential kernel with \
radius ri in the i^th index direction."}, {"ShiftRegisterSequence", "ShiftReg\
isterSequence[n] gives a complete maximum-length sequence for a size n \
linear-feedback shift register. ShiftRegisterSequence[{n, {tap1, tap2, \
\[Ellipsis]}}] gives the complete sequence for a linear-feedback shift \
register with size n and taps at positions tapi. ShiftRegisterSequence[poly] \
gives the sequence for a linear-feedback shift register with feedback \
polynomial poly. ShiftRegisterSequence[{n, {tap1, tap2, \[Ellipsis]}, f}] \
gives the sequence for a shift register with feedback function f. \
ShiftRegisterSequence[spec, s] gives the first s elements of the shift \
register sequence. ShiftRegisterSequence[spec, init, s] gives the shift \
register sequence starting from state init."}, 
 {"ShiftedGompertzDistribution", "ShiftedGompertzDistribution[\[Lambda], \
\[Xi]] represents a shifted Gompertz distribution with scale parameter \
\[Lambda] and shape parameter \[Xi]."}, {"Short", "Short[expr] prints as a \
short form of expr, less than about one line long. Short[expr, n] prints as a \
form of expr about n lines long."}, {"ShortDownArrow", "ShortDownArrow[x, y, \
\[Ellipsis]] displays as x\[ShortDownArrow]y\[ShortDownArrow]\[Ellipsis]."}, 
 {"ShortLeftArrow", 
  "ShortLeftArrow[x, y, \[Ellipsis]] displays as x<-y<-\[Ellipsis]."}, 
 {"ShortRightArrow", 
  "ShortRightArrow[x, y, \[Ellipsis]] displays as x->y->\[Ellipsis]."}, 
 {"ShortTimeFourier", "ShortTimeFourier[data] returns the short-time Fourier \
transform (STFT) of data as a ShortTimeFourierData object. \
ShortTimeFourier[data, n] uses partitions of length n. ShortTimeFourier[data, \
n, d] uses partitions with offset d. ShortTimeFourier[data, n, d, wfun] \
applies a smoothing window wfun to each partition. ShortTimeFourier[data, n, \
d, wfun, m] pads partitions with zeros to length m prior to the computation \
of the transform."}, {"ShortTimeFourierData", "ShortTimeFourierData[assoc] \
represents the result and properties of a short-time Fourier transform (STFT) \
of a signal."}, {"ShortUpArrow", "ShortUpArrow[x, y, \[Ellipsis]] displays as \
x\[ShortUpArrow]y\[ShortUpArrow]\[Ellipsis]."}, 
 {"Shortest", "Shortest[p] is a pattern object that matches the shortest \
sequence consistent with the pattern p."}, {"ShortestPathFunction", "Shortest\
PathFunction[type, data] represents a function that gives the shortest path \
from a source vertex s to target vertex t in a graph."}, 
 {"Show", "Show[graphics, options] shows graphics with the specified options \
added. Show[g1, g2, \[Ellipsis]] shows several graphics combined."}, 
 {"ShowAutoSpellCheck", "ShowAutoSpellCheck is an option for Cell that \
specifies whether to highlight misspelled words."}, 
 {"ShowAutoStyles", "ShowAutoStyles is an option for Cell that specifies \
whether styles that are specified to be automatically used for various \
syntactic and other constructs should be shown."}, 
 {"ShowCellBracket", "ShowCellBracket is an option for Cell that specifies \
whether to display the bracket that indicates the extent of the cell."}, 
 {"ShowCellLabel", "ShowCellLabel is an option for Cell that specifies \
whether to display the label for a cell."}, {"ShowCellTags", "ShowCellTags is \
an option for Cell that specifies whether to display tags for a cell."}, 
 {"ShowCursorTracker", "ShowCursorTracker is an option for Cell that \
specifies whether an elliptical spot should appear momentarily to guide the \
eye if the cursor position jumps."}, {"ShowGroupOpener", "ShowGroupOpener is \
an option for cells that specifies whether an opener icon is displayed next \
to the leading cell in a cell group to indicate whether the cell group is \
open or closed."}, {"ShowPageBreaks", "ShowPageBreaks is a notebook option \
that specifies whether to indicate in the on-screen display of a notebook \
where page breaks would occur if the notebook were printed."}, 
 {"ShowSelection", "ShowSelection is an option to Notebook, Cell, and Style \
that specifies whether to show the current selection highlighted."}, 
 {"ShowSpecialCharacters", "ShowSpecialCharacters is an option for Style and \
Cell that specifies whether to replace \\[Name], \\:nnnn, etc. by explicit \
special characters."}, {"ShowStringCharacters", "ShowStringCharacters is an \
option for Cell that specifies whether to display \" when a string is \
entered."}, {"ShrinkingDelay", "ShrinkingDelay is an option for dynamic \
objects that specifies how long to delay before shrinking the size of the \
region in which the object is displayed to the actual size of the object."}, 
 {"SiderealTime", "SiderealTime[] gives the right ascension of the local \
meridian for the current date and location. SiderealTime[date] gives the \
right ascension of the local meridian for the specified date. \
SiderealTime[loc] gives the right ascension of the local meridian for the \
specified location. SiderealTime[loc, date] gives the right ascension of the \
local meridian for the specified date and location. SiderealTime[{{loc1, \
date1}, {loc2, date2}, \[Ellipsis]}] gives the right ascensions of the local \
meridians for all specified locations on the specified dates. \
SiderealTime[loc, date, func] uses func to determine what to return for \
extended locations. SiderealTime[\"MeanTime\", loc, date, func] gives the \
mean sidereal time for the specified date, location and aggregation \
function."}, {"SiegelTheta", "SiegelTheta[\[CapitalOmega], s] gives the \
Siegel theta function \[CapitalTheta] (\[CapitalOmega], s) with Riemann \
modular matrix \[CapitalOmega] and vector s. SiegelTheta[{\[Nu]1, \[Nu]2}, \
\[CapitalOmega], s] gives the Siegel theta function \[CapitalTheta] [\[Nu]1, \
\[Nu]2]( \[CapitalOmega], s) with characteristics \[Nu]1 and \[Nu]2."}, 
 {"SiegelTukeyTest", "SiegelTukeyTest[{data1, data2}] tests whether the \
variances of data1 and data2 are equal. SiegelTukeyTest[dspec, \[Sigma]02] \
tests a dispersion measure against \[Sigma]02. SiegelTukeyTest[dspec, \
\[Sigma]02, \"\\!\\(\\*property\"] returns the value of \
\"\\!\\(\\*property\"."}, {"SierpinskiCurve", "SierpinskiCurve[n] gives the \
line segments representing the n^th -step Sierpi\\[014]ski curve."}, 
 {"SierpinskiMesh", "SierpinskiMesh[n] gives a mesh region representing the \
n^th -step Sierpi\\[014]ski triangle. SierpinskiMesh[n, d] gives the n^th \
-step Sierpi\\[014]ski sponge in dimension d."}, 
 {"Sign", "Sign[x] gives - 1, 0, or 1 depending on whether x is negative, \
zero, or positive."}, {"SignPadding", "SignPadding is an option for \
NumberForm and related functions that specifies whether padding should be \
inserted after signs."}, {"SignTest", "SignTest[data] tests whether the \
median of data is zero. SignTest[{data1, data2}] tests whether the median of \
data1- data2 is zero. SignTest[dspec, \[Mu]0] tests a location measure \
against \[Mu]0. SignTest[dspec, \[Mu]0, \"\\!\\(\\*property\"] returns the \
value of \"\\!\\(\\*property\"."}, {"Signature", "Signature[list] gives the \
signature of the permutation needed to place the elements of list in \
canonical order."}, {"SignedRankTest", "SignedRankTest[data] tests whether \
the median of data is zero. SignedRankTest[{data1, data2}] tests whether the \
median of data1 - data2 is zero. SignedRankTest[dspec, \[Mu]0] tests a \
location measure against \[Mu]0. SignedRankTest[dspec, \[Mu]0, \
\"\\!\\(\\*property\"] returns the value of \"\\!\\(\\*property\"."}, 
 {"SignedRegionDistance", "SignedRegionDistance[reg, p] gives the minimum \
distance from the point p to the region reg if p is outside the region and \
the minimum distance to the complement of reg if p is inside the region. \
SignedRegionDistance[reg] gives a RegionDistanceFunction[\[Ellipsis]] that \
can be applied repeatedly to different points."}, 
 {"SignificanceLevel", "SignificanceLevel is an option to VarianceTest and \
similar functions that controls cutoffs for diagnostic tests as well as test \
conclusions."}, {"SimilarityRules", "SimilarityRules is an option for \
functions such as SequenceAlignment that gives a list of rules for similarity \
scores to assume between pairs of elements."}, 
 {"SimpleGraph", "SimpleGraph[g] gives the underlying simple graph from the \
graph g. SimpleGraph[{v->w, \[Ellipsis]}] uses rules v->w to specify the \
graph g."}, {"SimpleGraphQ", "SimpleGraphQ[g] yields True if the graph g is a \
simple graph and False otherwise."}, {"SimplePolygonQ", "SimplePolygonQ[poly] \
gives True if the polygon poly is simple and False otherwise."}, 
 {"SimplePolyhedronQ", "SimplePolyhedronQ[poly] gives True if the polyhedron \
poly is simple and False otherwise."}, 
 {"Simplex", "Simplex[{p1, \[Ellipsis], pk}] represents the simplex spanned \
by points pi."}, {"Simplify", "Simplify[expr] performs a sequence of \
algebraic and other transformations on expr and returns the simplest form it \
finds. Simplify[expr, assum] does simplification using assumptions."}, 
 {"Sin", "Sin[z] gives the sine of z."}, 
 {"SinIntegral", "SinIntegral[z] gives the sine integral function Si(z )."}, 
 {"Sinc", "Sinc[z] gives sinc(z)."}, {"SinghMaddalaDistribution", "SinghMadda\
laDistribution[q, a, b] represents the Singh-Maddala distribution with shape \
parameters q and a and scale parameter b."}, {"SingleLetterItalics", "SingleL\
etterItalics is an option for Cell that specifies whether single-letter names \
should be displayed in italics."}, {"SingularValueDecomposition", "SingularVa\
lueDecomposition[m] gives the singular value decomposition for a numerical \
matrix m as a list of matrices {u, w, v}, where w is a diagonal matrix and m \
can be written as u.w.ConjugateTranspose[v]. SingularValueDecomposition[{m, \
a}] gives the generalized singular value decomposition of m with respect to \
a. SingularValueDecomposition[m, k] gives the singular value decomposition \
associated with the k largest singular values of m. \
SingularValueDecomposition[m, UpTo[k]] gives the decomposition for the k \
largest singular values, or as many as are available. \
SingularValueDecomposition[{m, a}, k] gives the generalized singular value \
decomposition associated with the k largest singular values."}, 
 {"SingularValueList", "SingularValueList[m] gives a list of the nonzero \
singular values of a matrix m. SingularValueList[{m, a}] gives the \
generalized singular values of m with respect to a. SingularValueList[m, k] \
gives the k largest singular values of m. SingularValueList[{m, a}, k] gives \
the k largest generalized singular values of m."}, 
 {"SingularValuePlot", "SingularValuePlot[lsys] generates a plot of the \
singular values of the transfer function for the system lsys. \
SingularValuePlot[lsys, {\[Omega]min, \[Omega]max}] plots for the frequency \
range \[Omega]min to \[Omega]max. SingularValuePlot[expr, {\[Omega], \
\[Omega]min, \[Omega]max}] plots expr using the variable \[Omega]."}, 
 {"Sinh", "Sinh[z] gives the hyperbolic sine of z."}, 
 {"SinhIntegral", 
  "SinhIntegral[z] gives the hyperbolic sine integral function Shi(z)."}, 
 {"SixJSymbol", "SixJSymbol[{j1, j2, j3}, {j4, j5, j6}] gives the values of \
the Racah 6-j symbol."}, {"Skeleton", "Skeleton[n] represents a sequence of n \
omitted elements in an expression printed with Short or Shallow. The standard \
print form for Skeleton is <<n>>."}, {"SkeletonTransform", "SkeletonTransform\
[image] gives the skeleton transform of image, in which the value of each \
skeleton pixel is its distance to the nearest background pixel. \
SkeletonTransform[image, t] treats values above t as foreground."}, 
 {"SkellamDistribution", "SkellamDistribution[\[Mu]1, \[Mu]2] represents a \
Skellam distribution with shape parameters \[Mu]1 and \[Mu]2."}, 
 {"SkewNormalDistribution", "SkewNormalDistribution[\[Mu], \[Sigma], \
\[Alpha]] represents a skew-normal distribution with shape parameter \
\[Alpha], location parameter \[Mu], and scale parameter \[Sigma]."}, 
 {"Skewness", "Skewness[list] gives the coefficient of skewness for the \
elements in list. Skewness[dist] gives the coefficient of skewness for the \
distribution dist."}, {"Skip", "Skip[stream, type] skips one object of the \
specified type in an input stream. Skip[stream, type, n] skips n objects of \
the specified type."}, {"SliceContourPlot3D", "SliceContourPlot3D[f, surf, \
{x, xmin, xmax}, {y, ymin, ymax}, {z, zmin, zmax}] generates a contour plot \
of f over the slice surface surf as a function of x, y, and z. \
SliceContourPlot3D[f, surf, {x, y, z}\[Element]reg] restricts the surface to \
be within region reg. SliceContourPlot3D[f, {surf1, surf2, \[Ellipsis]}, \
\[Ellipsis]] generates contour plots over several slices."}, 
 {"SliceDensityPlot3D", "SliceDensityPlot3D[f, surf, {x, xmin, xmax}, {y, \
ymin, ymax}, {z, zmin, zmax}] generates a density plot of f over the slice \
surface surf as a function of x, y, and z. SliceDensityPlot3D[f, surf, {x, y, \
z}\[Element]reg] restricts the surface to be within region reg. \
SliceDensityPlot3D[f, {surf1, surf2, \[Ellipsis]}, \[Ellipsis]] generates \
density plots over several slices."}, {"SliceDistribution", "SliceDistributio\
n[proc, t] represents the distribution of the process state at time t. \
SliceDistribution[proc, {t1, \[Ellipsis], tk}] represents the joint \
distribution of process states at times t1<\[CenterEllipsis]<tk."}, 
 {"SliceVectorPlot3D", "SliceVectorPlot3D[{vx, vy, vz}, surf, {x, xmin, \
xmax}, {y, ymin, ymax}, {z, zmin, zmax}] generates a vector plot of the field \
{vx, vy, vz} over the slice surface surf. SliceVectorPlot3D[{vx, vy, vz}, \
surf, {x, y, z}\[Element]reg] restricts the surface surf to be within the \
region reg. SliceVectorPlot3D[{vx, vy, vz}, {surf1, surf2, \[Ellipsis]}, \
\[Ellipsis]] generates vector plots over several slice surfaces surfi."}, 
 {"SlideShowVideo", "SlideShowVideo[{image1, image2, \[Ellipsis]}] generates \
a video iterating through all imagei. SlideShowVideo[{image1, image2, \
\[Ellipsis]}->dt] shows each of the imagei for the duration dt. \
SlideShowVideo[{{image1, dt1}, {image2, dt2}, \[Ellipsis]}] shows each of the \
imagei for the duration dti. SlideShowVideo[{image1, image2, \
\[Ellipsis]}->{dt1, dt2, \[Ellipsis]}] also shows each of the imagei for the \
duration dti. SlideShowVideo[tseries] shows values of the time series tseries \
at their corresponding times."}, {"SlideView", "SlideView[{expr1, expr2, \
\[Ellipsis]}] represents an object in which the expri are set up to be \
displayed on successive slides. SlideView[{expr1, expr2, \[Ellipsis]}, i] \
makes the i^th slide be the one currently displayed."}, 
 {"Slider", "Slider[x] represents a slider with setting x in the range 0 to \
1. Slider[Dynamic[x]] takes the setting to be the dynamically updated current \
value of x, with the value of x being reset if the slider is moved. Slider[x, \
{xmin, xmax}] represents a slider with range xmin to xmax. Slider[x, {xmin, \
xmax, dx}] represents a slider that jumps in steps dx. Slider[x, {{e1, e2, \
\[Ellipsis]}}] represents a slider in which equally spaced intervals \
correspond to successive settings ei. Slider[x, {{{e1, w1}, {e2, w2}, \
\[Ellipsis]}}] uses intervals of relative widths wi for the ei."}, 
 {"Slider2D", "Slider2D[{x, y}] represents a 2D slider with settings x and y \
in the range 0 to 1. Slider2D[Dynamic[pt]] takes the setting to be the \
dynamically updated current value of pt, with the value of pt being reset if \
the slider is moved. Slider2D[pt, {min, max}] represents a 2D slider with \
range min to max in each direction. Slider2D[pt, {min, max, d}] represents a \
2D slider that jumps in steps d in each direction. Slider2D[pt, {{xmin, \
ymin}, {xmax, ymax}}] specifies different ranges in x and y directions. \
Slider2D[pt, {{xmin, ymin}, {xmax, ymax}, {dx, dy}}] uses jumps dx, dy."}, 
 {"Slot", "# represents the first argument supplied to a pure function. #n \
represents the n^th argument. #name represents the value associated with key \
\"\\!\\(\\*name\" in an association in the first argument."}, 
 {"SlotSequence", "## represents the sequence of arguments supplied to a pure \
function. ## n represents the sequence of arguments supplied to a pure \
function, starting with the n^th argument."}, {"Small", "Small is a style or \
option setting that specifies that objects should be small."}, 
 {"SmallCircle", "SmallCircle[x, y, \[Ellipsis]] displays as \
x\[SmallCircle]y\[SmallCircle]\[Ellipsis]."}, {"Smaller", "Smaller is a style \
or option setting that specifies that objects should be smaller."}, 
 {"SmithDecomposition", "SmithDecomposition[m] gives the Smith normal form \
decomposition of an integer matrix m."}, {"SmithDelayCompensator", "SmithDela\
yCompensator[sys, con] gives the Smith compensator for the time-delay system \
sys and the delay-free controller con."}, {"SmithWatermanSimilarity", "SmithW\
atermanSimilarity[u, v] gives a number representing the Smith-Waterman \
similarity between strings or vectors u and v. SmithWatermanSimilarity[u, v] \
gives a number representing the Smith-Waterman similarity between strings, \
vectors or bio sequences u and v."}, {"SmoothDensityHistogram", "SmoothDensit\
yHistogram[{{x1, y1}, {x2, y2}, \[Ellipsis]}] plots a smooth kernel histogram \
of the values {xi, yi}. SmoothDensityHistogram[{{x1, y1}, {x2, y2}, \
\[Ellipsis]}, espec] plots a smooth kernel histogram with estimator \
specification espec. SmoothDensityHistogram[{{x1, y1}, {x2, y2}, \
\[Ellipsis]}, espec, dfun] plots the distribution function dfun."}, 
 {"SmoothHistogram", "SmoothHistogram[{x1, x2, \[Ellipsis]}] plots a smooth \
kernel histogram of the values xi. SmoothHistogram[{x1, x2, \[Ellipsis]}, \
espec] plots a smooth kernel histogram with estimator specification espec. \
SmoothHistogram[{x1, x2, \[Ellipsis]}, espec, dfun] plots the distribution \
function dfun. SmoothHistogram[{data1, data2, \[Ellipsis]}, \[Ellipsis]] \
plots smooth kernel histograms for multiple datasets datai."}, 
 {"SmoothHistogram3D", "SmoothHistogram3D[{{x1, y1}, {x2, y2}, \[Ellipsis]}] \
plots a 3D smooth kernel histogram of the values {xi, yi}. \
SmoothHistogram3D[{{x1, y1}, {x2, y2}, \[Ellipsis]}, espec] plots a 3D smooth \
kernel histogram with estimator specification espec. SmoothHistogram3D[{{x1, \
y1}, {x2, y2}, \[Ellipsis]}, espec, dfun] plots the distribution function \
dfun. SmoothHistogram3D[{data1, data2, \[Ellipsis]}, \[Ellipsis]] plots \
smooth kernel histograms for multiple datasets datai."}, 
 {"SmoothKernelDistribution", "SmoothKernelDistribution[{x1, x2, \
\[Ellipsis]}] represents a smooth kernel distribution based on the data \
values xi. SmoothKernelDistribution[{{x1, y1, \[Ellipsis]}, {x2, y2, \
\[Ellipsis]}, \[Ellipsis]}] represents a multivariate smooth kernel \
distribution based on the data values {xi, yi, \[Ellipsis]}. \
SmoothKernelDistribution[\[Ellipsis], bw] represents a smooth kernel \
distribution with bandwidth bw. SmoothKernelDistribution[\[Ellipsis], bw, \
ker] represents a smooth kernel distribution with bandwidth bw and smoothing \
kernel ker."}, {"SmoothPointDensity", "SmoothPointDensity[pdata] estimates \
the point density function \[Mu](x) for point data pdata. \
SmoothPointDensity[pdata, bw] estimates the density for point data pdata with \
bandwidth bw. SmoothPointDensity[pdata, bw, ker] estimates the density for \
point data pdata with bandwidth bw and smoothing kernel ker. \
SmoothPointDensity[bdata, \[Ellipsis]] estimates the point density function \
\[Mu](x) for binned data bdata. SmoothPointDensity[pproc, \[Ellipsis]] \
computes the density function \[Mu](x) for point process pproc."}, 
 {"SnDispersion", "SnDispersion[list] gives the Sn statistic of the elements \
in list. SnDispersion[list, c] gives the Sn statistic with scaling factor c."}\
, {"Snippet", "Snippet[doc] gives a snippet of text from a document or other \
content object. Snippet[doc, n] gives about n lines from the beginning. \
Snippet[doc, - n] gives about n lines from the end. Snippet[doc, n1;;n2] \
gives a span from lines n1 to n2 Snippet[doc, n1;;n2;;n3] gives a span from \
lines n1 to n2 in steps of n3. Snippet[ContentObject[\[Ellipsis]], \
SearchResultObject[\[Ellipsis]]] gives contextual snippets from a content \
object based on search results."}, {"SnubPolyhedron", "SnubPolyhedron[poly] \
gives the snub polyhedron of poly by truncating some corners."}, 
 {"SocketConnect", "SocketConnect[address] makes a socket connection to the \
TCP host at the specified address and returns a SocketObject representing the \
connection. SocketConnect[address, \"\\!\\(\\*protocol\"] makes a connection \
to the host at address with the specified protocol. SocketConnect[socket] \
makes a connection to a local socket opened in the current session."}, 
 {"SocketListen", "SocketListen[socket, fun] starts listening on the \
specified socket, asynchronously applying fun whenever data is received on \
the socket. SocketListen[port, fun] starts listening for active connections \
on the specified port of 127.0.0.1. SocketListen[address, fun] starts \
listening for active connections on the specified address address on the \
local machine. SocketListen[spec, opts] starts listening for active \
connections defined by spec using the options opts. SocketListen[spec] starts \
listening for active connections defined by spec, but does not set up handler \
functions, etc."}, {"SocketListener", "SocketListener[\[Ellipsis]] represents \
a socket listener created by SocketListen."}, 
 {"SocketObject", 
  "SocketObject[\[Ellipsis]] represents a network socket connection."}, 
 {"SocketOpen", "SocketOpen[port] opens a socket that accepts TCP connections \
to localhost:port and returns a SocketObject representing the socket. \
SocketOpen[address] opens a socket that accepts TCP connections to the \
specified local address. SocketOpen[address, \"\\!\\(\\*protocol\"] opens a \
socket that accepts connections with the specified protocol. \
SocketOpen[address, {\"\\!\\(\\*protocol\", \"\\!\\(\\*type\"}] opens a \
socket that accepts connections of the specified protocol and type."}, 
 {"SocketReadMessage", "SocketReadMessage[socket] reads the next available \
message on the specified socket, returning it as a byte array."}, 
 {"SocketReadyQ", "SocketReadyQ[socket] tests if there is any data \
immediately available to read from the specified socket. SocketReadyQ[socket, \
t] waits for up to t seconds to see if data becomes available to read."}, 
 {"SocketWaitAll", "SocketWaitAll[{socket1, socket2, \[Ellipsis]}] waits \
until there is data ready to read on all of the socketi."}, 
 {"SocketWaitNext", "SocketWaitNext[{socket1, socket2, \[Ellipsis]}] waits \
until there is data ready to read on any of the socketi, then returns that \
socket."}, {"Sockets", "Sockets[] returns all active socket connections \
initiated by your current Wolfram Language session. Sockets[All] returns all \
sockets connected to your current session, including remote sockets \
originating outside your current session. Sockets[spec] returns only sockets \
specified by spec."}, {"SoftmaxLayer", "SoftmaxLayer[] represents a softmax \
net layer. SoftmaxLayer[n] represents a softmax net layer that uses level n \
as the normalization dimension."}, {"SokalSneathDissimilarity", "SokalSneathD\
issimilarity[u, v] gives the Sokal-Sneath dissimilarity between Boolean \
vectors u and v."}, {"SolarEclipse", "SolarEclipse[] gives the time of the \
next solar eclipse. SolarEclipse[datespec] gives the time for the next solar \
eclipse after the specified date. SolarEclipse[propertyspec] gives the \
specified property value for the next solar eclipse. SolarEclipse[datespec, \
propertyspec] gives the specified property value for the next solar eclipse \
after the specified date."}, {"SolarSystemFeatureData", "SolarSystemFeatureDa\
ta[entity, property] gives the value of the specified property for the solar \
system feature entity. SolarSystemFeatureData[{entity1, entity2, \
\[Ellipsis]}, property] gives a list of property values for the specified \
feature entities. SolarSystemFeatureData[entity, property, annotation] gives \
the specified annotation associated with the given property."}, 
 {"SolarTime", "SolarTime[] gives the angle on the celestial equator between \
the Sun and the local antimeridian for the current location and date. \
SolarTime[loc] gives the solar time angle for the specified location and \
current date. SolarTime[date] gives the solar time angle for the specified \
date and current location. SolarTime[loc, date] gives the solar time for the \
specified location and date. SolarTime[\"MeanTime\", loc, date] gives the \
mean solar time for the specified location and date."}, 
 {"SolidAngle", "SolidAngle[p, {u1, \[Ellipsis], ud}] gives the solid angle \
at the point p and spanned by the vectors u1, \[Ellipsis], ud. SolidAngle[p, \
reg] gives the solid angle subtended by the region reg."}, 
 {"SolidData", "SolidData[entity, property] gives the value of the specified \
property for the solid entity. SolidData[{entity1, entity2, \[Ellipsis]}, \
property] gives a list of property values for the specified solid entities. \
SolidData[entity, property, annotation] gives the specified annotation \
associated with the given property."}, {"SolidRegionQ", "SolidRegionQ[reg] \
gives True if the 3D region reg is a solid region and False otherwise."}, 
 {"Solve", "Solve[expr, vars] attempts to solve the system expr of equations \
or inequalities for the variables vars. Solve[expr, vars, dom] solves over \
the domain dom. Common choices of dom are Reals, Integers, and Complexes."}, 
 {"SolveAlways", "SolveAlways[eqns, vars] gives the values of parameters that \
make the equations eqns valid for all values of the variables vars."}, 
 {"SolveValues", "SolveValues[expr, vars] gives the values of vars determined \
by the solutions of the system expr. SolveValues[expr, vars, dom] uses \
solutions over the domain dom. Common choices of dom are Reals, Integers and \
Complexes."}, {"Sort", "Sort[list] sorts the elements of list into canonical \
order. Sort[list, p] sorts using the ordering function p."}, 
 {"SortBy", "SortBy[list, f] sorts the elements of list in the order defined \
by applying f to each of them. SortBy[list, {f1, f2, \[Ellipsis]}] breaks \
ties by successively using the values obtained from the fi. SortBy[list, f, \
p] sorts the elements of list using the function p to compare the results of \
applying f to each element. SortBy[f] represents an operator form of SortBy \
that can be applied to an expression."}, {"SortedBy", "SortedBy is an option \
that specifies a function by which to sort the results of a computation."}, 
 {"SortedEntityClass", "SortedEntityClass[class, prop] represents an entity \
class derived from class by sorting according to the values of the property \
prop. SortedEntityClass[class, prop->\"\\!\\(\\*order\"] sorts according to \
prop in the order specified. SortedEntityClass[class, {prop1, prop2, \
\[Ellipsis]}] breaks ties by successively using the values of the property \
specifications propi. SortedEntityClass[class, sortspec, n] represents the \
first n entities of class when sorted by sortspec. SortedEntityClass[class, \
sortspec, {m, n}] represents the entities m through n of class when sorted by \
sortspec."}, {"Sound", "Sound[primitives] represents a sound. \
Sound[primitives, t] specifies that the sound should have duration t. \
Sound[primitives, {tmin, tmax}] specifies that the sound should extend from \
time tmin to time tmax."}, {"SoundNote", "SoundNote[pitch] represents a \
music-like sound note with the specified pitch. SoundNote[pitch, t] takes the \
note to have duration t. SoundNote[pitch, {tmin, tmax}] takes the note to \
occupy the time interval tmin to tmax. SoundNote[pitch, tspec, \
\"\\!\\(\\*style\"] takes the note to be in the specified style. \
SoundNote[pitch, tspec, \"\\!\\(\\*style\", opts] uses the specified \
rendering options for the note."}, {"SoundVolume", "SoundVolume is an option \
to Sound and SoundNote and related functions that specifies the relative \
volume of the sound produced."}, {"SourceLink", "SourceLink is an option for \
CloudObject and related cloud functions that specifies the source of the \
content given."}, {"SourcePDETerm", "SourcePDETerm[vars, f] represents a \
source term f with source coefficient f and model variables vars. \
SourcePDETerm[vars, f, pars] uses model parameters pars."}, 
 {"Sow", "Sow[e] specifies that e should be collected by the nearest \
enclosing Reap. Sow[e, tag] specifies that e should be collected by the \
nearest enclosing Reap whose pattern matches tag. Sow[e, {tag1, tag2, \
\[Ellipsis]}] specifies that e should be collected once for each pattern that \
matches a tagi."}, {"SpaceCurveData", "SpaceCurveData[entity, property] gives \
the value of the specified property for the space curve entity. \
SpaceCurveData[{entity1, entity2, \[Ellipsis]}, property] gives a list of \
property values for the specified space curve entities. \
SpaceCurveData[entity, property, annotation] gives the specified annotation \
associated with the given property."}, {"Spacer", "Spacer[w] displays as a \
spacer w printer's points wide. Spacer[{w, h}] displays as a spacer w points \
wide and a total of h points high. Spacer[{w, h, dh}] makes the spacer extend \
dh points below the baseline."}, {"Spacings", "Spacings is an option to Grid \
and related constructs that specifies the spacings to leave between \
successive objects."}, {"Span", "i;;j represents a span of elements i through \
j. i;; represents a span from i to the end. ;;j represents a span from the \
beginning to j. ;; represents a span that includes all elements. i;;j;;k \
represents a span from i through j in steps of k. i;;;;k represents a span \
from i to the end in steps of k. ;;j;;k represents a span from the beginning \
to j in steps of k. ;;;;k represents a span from the beginning to the end in \
steps of k."}, {"SpanFromAbove", "SpanFromAbove is a symbol that can appear \
at a particular position in a Grid or related construct to indicate that the \
corresponding position is occupied by a spanning element that appears above \
it."}, {"SpanFromBoth", "SpanFromBoth is a symbol that can appear at a \
particular position in a Grid or related construct to indicate that the \
corresponding position is occupied by a spanning element that appears above \
and to its left."}, {"SpanFromLeft", "SpanFromLeft is a symbol that can \
appear at a particular position in a Grid or related construct to indicate \
that the corresponding position is occupied by a spanning element that \
appears to its left."}, {"SparseArray", "SparseArray[{pos1->val1, pos2->val2, \
\[Ellipsis]}] yields a sparse array in which values vali appear at positions \
posi. SparseArray[{pos1, pos2, \[Ellipsis]}->{val1, val2, \[Ellipsis]}] \
yields the same sparse array. SparseArray[list] yields a sparse array version \
of list. SparseArray[data, {d1, d2, \[Ellipsis]}] yields a sparse array \
representing a d1\[Times]d2\[Times]\[Ellipsis] array. SparseArray[data, dims, \
val] yields a sparse array in which unspecified elements are taken to have \
value val."}, {"SpatialBinnedPointData", "SpatialBinnedPointData[{reg1->val1, \
reg2->val2, \[Ellipsis]}] represents values vali associated with disjoint \
regions regi. SpatialBinnedPointData[{reg1, reg2, \[Ellipsis]}->{val1, val2, \
\[Ellipsis]}] gives the same result. SpatialBinnedPointData[\[Ellipsis], reg] \
gives the overall observation region reg."}, {"SpatialBoundaryCorrection", "S\
patialBoundaryCorrection is an option to various spatial statistics functions \
that control how to correct for boundary effects of observation regions."}, 
 {"SpatialGraphDistribution", "SpatialGraphDistribution[n, r] represents a \
spatial distribution for graphs with n vertices uniformly distributed over \
the unit square and edges between vertices that are at distance at most r. \
SpatialGraphDistribution[n, r, d] represents a spatial distribution for \
graphs with vertices uniformly distributed over the d -dimensional unit \
square. SpatialGraphDistribution[n, r, dist] represents a spatial \
distribution for graphs with vertices distributed according to the \
probability distribution dist."}, {"SpatialJ", "SpatialJ[pdata, r] estimates \
the J function J (r) for point data pdata at radius r. SpatialJ[pproc, r] \
computes J (r) for the point process pproc. SpatialJ[bdata, r] computes J (r) \
for binned data bdata. SpatialJ[pspec] generates the function J that can be \
applied repeatedly to different radii r."}, {"SpatialMedian", "SpatialMedian[\
{x1, x2, \[Ellipsis]}] gives the spatial median of the elements xi. \
SpatialMedian[data] gives the spatial median for several different forms of \
data."}, {"SpatialObservationRegionQ", "SpatialObservationRegionQ[reg] tests \
whether the geometric or geographic region reg can be an observation in \
spatial statistics."}, {"SpatialPointData", "SpatialPointData[points] \
represents a collection of spatial locations points. SpatialPointData[points, \
reg] represents a collection of points within the region reg. \
SpatialPointData[points->vals, \[Ellipsis]] associates the values vals with \
the location points. SpatialPointData[points-><|key1->vals1, \[Ellipsis]|>, \
\[Ellipsis]] associates the key-value annotations keyi->valsi. \
SpatialPointData[{p1->data1, p2->data2, \[Ellipsis]}, \[Ellipsis]] represents \
the spatial point collection {p1, p2, \[Ellipsis]} with associated values \
{data1, data2, \[Ellipsis]}. SpatialPointData[{points1, points2, \
\[Ellipsis]}, \[Ellipsis]] represents multiple collections of spatial points. \
SpatialPointData[{points1->anns1, points2->anns2, \[Ellipsis]}, \[Ellipsis]] \
represents multiple collections of spatial points with annotations."}, 
 {"SpatialPointSelect", "SpatialPointSelect[spdata, crit] selects a subset of \
the SpatialPointData spdata according to crit."}, 
 {"SpatialRandomnessTest", "SpatialRandomnessTest[pdata] tests whether the \
point collection pdata are distributed uniformly over the observation region. \
SpatialRandomnessTest[pdata, \"\\!\\(\\*property\"] returns the value of \
\"\\!\\(\\*property\"."}, {"SpatialTransformationLayer", "SpatialTransformati\
onLayer[{h, w}] represents a net layer that applies an affine transformation \
to an input of size c\[Times]h0\[Times]w0 and returns an output of size \
c\[Times]h\[Times]w."}, 
 {"Speak", 
  "Speak[expr] speaks a spoken representation of the expression expr."}, 
 {"SpeakerMatchQ", "SpeakerMatchQ[audio, ref] gives True if speaker features \
in audio match the one from reference ref and returns False otherwise. \
SpeakerMatchQ[{audio1, audio2, \[Ellipsis]}, ref] gives a list of results for \
each of audioi. SpeakerMatchQ[ref] represents an operator form of \
SpeakerMatchQ that can be applied to an audio object."}, 
 {"SpearmanRankTest", "SpearmanRankTest[v1, v2] tests whether the vectors v1 \
and v2 are independent. SpearmanRankTest[m1, m2] tests whether the matrices \
m1 and m2 are independent. SpearmanRankTest[\[Ellipsis], \
\"\\!\\(\\*property\"] returns the value of \"\\!\\(\\*property\"."}, 
 {"SpearmanRho", "SpearmanRho[v1, v2] gives Spearman's rank correlation \
coefficient \[Rho] for the vectors v1 and v2. SpearmanRho[m] gives Spearman's \
rank correlation coefficient \[Rho] for the matrix m. SpearmanRho[m1, m2] \
gives Spearman's rank correlation coefficient \[Rho] for the matrices m1 and \
m2. SpearmanRho[dist] gives Spearman's rank correlation matrix for the \
multivariate symbolic distribution dist. SpearmanRho[dist, i, j] gives the \
(i, j)^th Spearman rank correlation for the multivariate symbolic \
distribution dist."}, {"SpeciesData", "SpeciesData[name, property] gives the \
value of the specified property for the species entity. SpeciesData[{entity1, \
entity2, \[Ellipsis]}, property] gives a list of property values for the \
specified species entities. SpeciesData[entity, property, annotation] gives \
the specified annotation associated with the given property."}, 
 {"SpecificityGoal", "SpecificityGoal is an option for ImageIdentify and \
related functions that defines what specificity of object to seek to \
identify."}, {"SpectralLineData", "SpectralLineData[entity] gives the values \
of all known properties for an atomic state or state transition. \
SpectralLineData[entity, property] gives the value of the specified property \
for the given entity. SpectralLineData[quantity] returns the state transition \
with the closest wavelength or frequency specified. SpectralLineData[class, \
quantity] returns the entity in the specified entity class with the closest \
wavelength or energy to the specified quantity. SpectralLineData[spec, \
{quantity1, quantity2}] returns the entities in spec that fall within the \
range specified between quantity1 and quantity2."}, 
 {"Spectrogram", "Spectrogram[list] plots the spectrogram of list. \
Spectrogram[list, n] uses partitions of length n. Spectrogram[list, n, d] \
uses partitions with offset d. Spectrogram[list, n, d, wfun] applies a \
smoothing window wfun to each partition. Spectrogram[list, n, d, wfun, m] \
pads partitions with zeros to length m prior to the computation of the \
transform. Spectrogram[audio, \[Ellipsis]] plots the spectrogram of audio."}, 
 {"SpectrogramArray", "SpectrogramArray[list] returns the spectrogram data of \
list. SpectrogramArray[list, n] uses partitions of length n. \
SpectrogramArray[list, n, d] uses partitions with offset d. \
SpectrogramArray[list, n, d, wfun] applies a smoothing window wfun to each \
partition. SpectrogramArray[list, n, d, wfun, m] pads partitions with zeros \
to length m prior to the computation of the transform. \
SpectrogramArray[audio, \[Ellipsis]] returns spectrogram data of audio."}, 
 {"Specularity", "Specularity[s] is a graphics directive which specifies that \
surfaces of 3D graphics objects which follow are to be taken to have \
specularity s. Specularity[s, n] uses specular exponent n."}, 
 {"SpeechCases", "SpeechCases[audio, form] gives a list of cases of text \
identified as being of type form that appear in the transcription of audio. \
SpeechCases[audio, {form1, form2, \[Ellipsis]}] gives an association of \
results for all the types formi. SpeechCases[audio, formspec->prop] gives the \
specified property for each result found. SpeechCases[audio, \
formspec->{prop1, prop2, \[Ellipsis]}] gives a list of properties for each \
result found. SpeechCases[audio, spec, n] gives the first n cases found."}, 
 {"SpeechInterpreter", "SpeechInterpreter[form] represents an interpreter \
object that can be applied to a speech input to try to interpret it as an \
object of the specified form. SpeechInterpreter[form, test] returns the \
interpreted object only if applying test to it yields True ; otherwise, it \
returns a Failure object. SpeechInterpreter[form, test, fail] returns the \
result of applying the function fail if the test fails."}, 
 {"SpeechRecognize", "SpeechRecognize[audio] recognizes speech in audio and \
returns it as a string."}, {"SpeechSynthesize", "SpeechSynthesize[expr] \
synthesizes the contents of expr as an Audio object. SpeechSynthesize[expr, \
voice] uses the specified voice to synthesize the speech signal."}, 
 {"SpellingCorrection", "SpellingCorrection is an option for StringMatchQ, \
Names, and related functions that specifies whether strings should be \
considered to match even when a small fraction of the characters in them are \
different."}, {"SpellingCorrectionList", "SpellingCorrectionList[\"\\!\\(\\*w\
ord\"] gives a list of possible spelling corrections for \"\\!\\(\\*word\"."}\
, {"SpellingOptions", "SpellingOptions is an option for notebooks that \
specifies settings for spell checking."}, {"Sphere", "Sphere[p] represents a \
unit sphere centered at the point p. Sphere[p, r] represents a sphere of \
radius r centered at the point p. Sphere[{p1, p2, \[Ellipsis]}, r] represents \
a collection of spheres of radius r."}, {"SpherePoints", "SpherePoints[n] \
gives the positions of n uniformly distributed points on the surface of a \
unit sphere."}, {"SphericalBesselJ", "SphericalBesselJ[n, z] gives the \
spherical Bessel function of the first kind jn(z)."}, 
 {"SphericalBesselY", "SphericalBesselY[n, z] gives the spherical Bessel \
function of the second kind yn(z)."}, {"SphericalHankelH1", "SphericalHankelH\
1[n, z] gives the spherical Hankel function of the first kind hn(1)(z)."}, 
 {"SphericalHankelH2", "SphericalHankelH2[n, z] gives the spherical Hankel \
function of the second kind hn(2)(z)."}, {"SphericalHarmonicY", "SphericalHar\
monicY[l, m, \[Theta], \[Phi]] gives the spherical harmonic Ylm(\[Theta], \
\[Phi])."}, {"SphericalPlot3D", "SphericalPlot3D[r, \[Theta], \[Phi]] \
generates a 3D plot with a spherical radius r as a function of spherical \
coordinates \[Theta] and \[Phi]. SphericalPlot3D[r, {\[Theta], \[Theta]min, \
\[Theta]max}, {\[Phi], \[Phi]min, \[Phi]max}] generates a 3D spherical plot \
over the specified ranges of spherical coordinates. SphericalPlot3D[{r1, r2, \
\[Ellipsis]}, {\[Theta], \[Theta]min, \[Theta]max}, {\[Phi], \[Phi]min, \
\[Phi]max}] generates a 3D spherical plot with multiple surfaces."}, 
 {"SphericalRegion", "SphericalRegion is an option for three-dimensional \
graphics functions that specifies whether the final image should be scaled so \
that a sphere drawn around the three-dimensional bounding box would fit in \
the display area specified."}, {"SphericalShell", "SphericalShell[c, {rinner, \
router}] represents a filled spherical shell centered at c with inner radius \
rinner and outer radius router."}, {"SpheroidalEigenvalue", "SpheroidalEigenv\
alue[n, m, \[Gamma]] gives the spheroidal eigenvalue with degree n and order \
m."}, {"SpheroidalJoiningFactor", "SpheroidalJoiningFactor[n, m, \[Gamma]] \
gives the spheroidal joining factor with degree n and order m."}, 
 {"SpheroidalPS", "SpheroidalPS[n, m, \[Gamma], z] gives the angular \
spheroidal function PSn, m(\[Gamma], z) of the first kind."}, 
 {"SpheroidalPSPrime", "SpheroidalPSPrime[n, m, \[Gamma], z] gives the \
derivative with respect to z of the angular spheroidal function PSn, \
m(\[Gamma], z) of the first kind."}, {"SpheroidalQS", "SpheroidalQS[n, m, \
\[Gamma], z] gives the angular spheroidal function QSn, m(\[Gamma], z) of the \
second kind."}, {"SpheroidalQSPrime", "SpheroidalQSPrime[n, m, \[Gamma], z] \
gives the derivative with respect to z of the angular spheroidal function \
QSn, m(\[Gamma], z) of the second kind."}, {"SpheroidalRadialFactor", "Sphero\
idalRadialFactor[n, m, c] gives the spheroidal radial factor with degree n \
and order m."}, {"SpheroidalS1", "SpheroidalS1[n, m, \[Gamma], z] gives the \
radial spheroidal function Sn, m(1)(\[Gamma], z) of the first kind."}, 
 {"SpheroidalS1Prime", "SpheroidalS1Prime[n, m, \[Gamma], z] gives the \
derivative with respect to z of the radial spheroidal function Sn, \
m(1)(\[Gamma], z) of the first kind."}, {"SpheroidalS2", "SpheroidalS2[n, m, \
\[Gamma], z] gives the radial spheroidal function Sn, m(2)(\[Gamma], z) of \
the second kind."}, {"SpheroidalS2Prime", "SpheroidalS2Prime[n, m, \[Gamma], \
z] gives the derivative with respect to z of the radial spheroidal function \
Sn, m(2)(\[Gamma], z) of the second kind."}, {"Splice", "Splice[{e1, e2, \
\[Ellipsis]}] represents an expression that will automatically be spliced \
into any list in which it appears as the sequence of elements ei."}, 
 {"SplicedDistribution", "SplicedDistribution[{w1, w2, \[Ellipsis], wn}, {c0, \
c1, \[Ellipsis], cn}, {dist1, dist2, \[Ellipsis], distn}] represents the \
distribution obtained by splicing the distributions dist1, dist2, \[Ellipsis] \
truncated on the intervals {c0, c1}, {c1, c2}, \[Ellipsis] with weights w1, \
w2, \[Ellipsis]."}, {"SplineClosed", "SplineClosed is an option for B-spline \
functions and graphics primitives that specifies whether spline curves or \
surfaces should be closed."}, {"SplineDegree", "SplineDegree is an option for \
spline functions and graphics primitives that specifies the degree of \
polynomial basis to use."}, {"SplineKnots", "SplineKnots is an option for \
B-spline functions and graphics primitives that specifies the positions of \
knots."}, {"SplineWeights", "SplineWeights is an option for B-spline \
functions and graphics primitives that specifies weights of control points."}\
, {"Split", "Split[list] splits list into sublists consisting of runs of \
identical elements. Split[list, test] treats pairs of adjacent elements as \
identical whenever applying the function test to them yields True."}, 
 {"SplitBy", "SplitBy[list, f] splits list into sublists consisting of runs \
of successive elements that give the same value when f is applied. \
SplitBy[list, {f1, f2, \[Ellipsis]}] recursively splits list into sublists by \
testing elements successively with each of the fi."}, 
 {"SpokenString", "SpokenString[expr] gives a string of text corresponding to \
a spoken representation of the expression expr."}, 
 {"Sqrt", "Sqrt[z] or \[Sqrt]z gives the square root of z."}, 
 {"SqrtBox", "SqrtBox[x] is a low-level box construct that represents the \
displayed object \[Sqrt]x in notebook expressions."}, 
 {"SqrtBoxOptions", 
  "SqrtBoxOptions is an option that specifies settings for SqrtBox objects."}\
, {"Square", "Square[x] displays as \[Square]x."}, 
 {"SquareFreeQ", "SquareFreeQ[expr] gives True if expr is a square-free \
polynomial or number, and False otherwise. SquareFreeQ[expr, vars] gives True \
if expr is square-free with respect to the variables vars."}, 
 {"SquareIntersection", "SquareIntersection[x, y, \[Ellipsis]] displays as \
x\[SquareIntersection]y\[SquareIntersection]\[Ellipsis]."}, 
 {"SquareMatrixQ", 
  "SquareMatrixQ[m] gives True if m is a square matrix, and False otherwise."}\
, {"SquareRepeatingElement", "SquareRepeatingElement[spec] represents a \
square array of elements of type spec in an interpreter, API or form \
specification. SquareRepeatingElement[spec, max] represents a square array of \
elements of maximum size max\[Times]max. SquareRepeatingElement[spec, {min, \
max}] represents a square array of elements of size between min and max."}, 
 {"SquareSubset", "SquareSubset[x, y, \[Ellipsis]] displays as \
x\[SquareSubset]y\[SquareSubset]\[Ellipsis]."}, 
 {"SquareSubsetEqual", "SquareSubsetEqual[x, y, \[Ellipsis]] displays as \
x\[SquareSubsetEqual]y\[SquareSubsetEqual]\[Ellipsis]."}, 
 {"SquareSuperset", "SquareSuperset[x, y, \[Ellipsis]] displays as \
x\[SquareSuperset]y\[SquareSuperset]\[Ellipsis]."}, 
 {"SquareSupersetEqual", "SquareSupersetEqual[x, y, \[Ellipsis]] displays as \
x\[SquareSupersetEqual]y\[SquareSupersetEqual]\[Ellipsis]."}, 
 {"SquareUnion", "SquareUnion[x, y, \[Ellipsis]] displays as \
x\[SquareUnion]y\[SquareUnion]\[Ellipsis]."}, {"SquareWave", "SquareWave[x] \
gives a square wave that alternates between + 1 and - 1 with unit period. \
SquareWave[{y1, y2}, x] gives a square wave that alternates between y1 and y2 \
with unit period."}, {"SquaredEuclideanDistance", "SquaredEuclideanDistance[u\
, v] gives the squared Euclidean distance between vectors u and v."}, 
 {"SquaresR", "SquaresR[d, n] gives the number of ways rd(n) to represent the \
integer n as a sum of d squares."}, {"StabilityMargins", "StabilityMargins is \
an option to frequency response plots such as BodePlot, NyquistPlot, and \
NicholsPlot that specifies the gain and phase margins to be shown on the \
plot."}, {"StabilityMarginsStyle", "StabilityMarginsStyle is an option to \
frequency response plots such as BodePlot, NyquistPlot, and NicholsPlot that \
specifies the styles in which the gain and phase margins are to be drawn."}, 
 {"StableDistribution", "StableDistribution[type, \[Alpha], \[Beta], \[Mu], \
\[Sigma]] represents the stable distribution Stype with index of stability \
\[Alpha], skewness parameter \[Beta], location parameter \[Mu], and scale \
parameter \[Sigma]."}, {"Stack", "Stack[] shows the current evaluation stack, \
giving a list of the tags associated with evaluations that are currently \
being done. Stack[pattern] gives a list of expressions currently being \
evaluated which match the pattern."}, 
 {"StackBegin", 
  "StackBegin[expr] evaluates expr, starting a fresh evaluation stack."}, 
 {"StackComplete", "StackComplete[expr] evaluates expr with intermediate \
expressions in evaluation chains included on the stack."}, 
 {"StackInhibit", 
  "StackInhibit[expr] evaluates expr without modifying the evaluation stack."}\
, {"StackedDateListPlot", "StackedDateListPlot[{{date1, v1}, {date2, v2}, \
\[Ellipsis]}] plots points with values vi at a sequence of dates. \
StackedDateListPlot[{v1, v2, \[Ellipsis]}, datespec] plots points with dates \
at equal intervals specified by datespec. StackedDateListPlot[tseries] plots \
the time series tseries. StackedDateListPlot[{data1, data2, \[Ellipsis]}] \
plots data from all the datai. StackedDateListPlot[{\[Ellipsis], w[datai], \
\[Ellipsis]}] plots datai with features defined by the symbolic wrapper w."}, 
 {"StackedListPlot", "StackedListPlot[{data1, data2, \[Ellipsis]}] plots \
lines for each of the datai, with the i^th curve being the accumulation of \
values in data1 through datai. StackedListPlot[{\[Ellipsis], w[datai], \
\[Ellipsis]}] plots datai with features defined by the symbolic wrapper w."}, 
 {"StadiumShape", "StadiumShape[{{x1, y1}, {x2, y2}}, r] represents a stadium \
of radius r between the points {x1, y1} and {x2, y2}."}, 
 {"StandardAtmosphereData", "StandardAtmosphereData[altitude, property] \
returns the value of the property at the specified geometrical altitude for \
the chosen model of the standard Earth atmosphere. \
StandardAtmosphereData[layer, property] returns a piecewise symbolic \
approximation with the range of an atmospheric layer for the property. \
StandardAtmosphereData[\"SymbolicApproximation\", property] returns the full \
piecewise symbolic approximation for the property."}, 
 {"StandardDeviation", "StandardDeviation[list] gives the sample standard \
deviation of the elements in list. StandardDeviation[dist] gives the standard \
deviation of the distribution dist."}, {"StandardDeviationFilter", "StandardD\
eviationFilter[data, r] filters data by replacing every value by the standard \
deviations of the values in its range-r neighborhood. \
StandardDeviationFilter[data, {r1, r2, \[Ellipsis]}] uses ri for filtering \
the i^th dimension in data."}, {"StandardForm", "StandardForm[expr] prints as \
the standard Wolfram Language two-dimensional representation of expr."}, 
 {"StandardOceanData", "StandardOceanData[spec] returns the thermodynamic \
properties of seawater for the specified parameters. StandardOceanData[spec, \
property] returns the specified property for the given parameters."}, 
 {"Standardize", "Standardize[list] shifts and rescales the elements of list \
to have zero mean and unit sample variance. Standardize[list, f1] shifts the \
elements in list by f1[list] and rescales them to have unit sample variance. \
Standardize[list, f1, f2] shifts by f1[list] and scales by f2[list]."}, 
 {"Standardized", 
  "Standardized is an option that determines whether to standardize the \
data."}, {"StandbyDistribution", "StandbyDistribution[dist1, {dist2, \
\[Ellipsis], distn}] represents a standby distribution with component \
lifetime distributions disti. When component i fails, component i + 1 will \
become active. StandbyDistribution[dist1, {dist2, \[Ellipsis], distn}, p] \
represents a standby distribution where switching from component i to \
component i + 1 succeeds with probability p. StandbyDistribution[dist1, \
{dist2, \[Ellipsis], distn}, sdist] represents a standby distribution where \
the switch component has lifetime distribution sdist. \
StandbyDistribution[dist1, {\[Ellipsis], {disti, inactive, disti, active}, \
\[Ellipsis]}, \[Ellipsis]] represents a standby distribution where the i^th \
component lifetime distribution follows disti, inactive in inactive mode and \
disti, active in active mode."}, 
 {"Star", 
  "Star[x, y, \[Ellipsis]] displays as x\[Star]y\[Star]\[Ellipsis]."}, 
 {"StarClusterData", "StarClusterData[entity, property] gives the value of \
the specified property for the star cluster entity. StarClusterData[{entity1, \
entity2, \[Ellipsis]}, property] gives a list of property values for the \
specified star cluster entities. StarClusterData[entity, property, \
annotation] gives the specified annotation associated with the given \
property."}, {"StarData", "StarData[entity, property] gives the value of the \
specified property for the star entity. StarData[{entity1, entity2, \
\[Ellipsis]}, property] gives a list of property values for the specified \
star entities. StarData[entity, property, annotation] gives the specified \
annotation associated with the property."}, 
 {"StarGraph", "StarGraph[n] gives the star graph with n vertices Sn."}, 
 {"StartExternalSession", "StartExternalSession[\"\\!\\(\\*sys\"] starts an \
external session using the external evaluator sys, returning an external \
session object. StartExternalSession[{\"\\!\\(\\*sys\", opts}] uses the \
options opts for the external evaluator. \
StartExternalSession[DatabaseReference[ref]] uses the database specified by \
ref to start a database session. StartExternalSession[assoc] starts the \
external evaluator specified by assoc. StartExternalSession[sys->type] \
specifies that output from the external evaluator should be converted to the \
specified type."}, {"StartOfLine", "StartOfLine represents the start of a \
line in a string for purposes of matching in StringExpression."}, 
 {"StartOfString", "StartOfString represents the start of a string for \
purposes of matching in StringExpression."}, {"StartProcess", "StartProcess[\
\"\\!\\(\\*executable\"] executes an external program, yielding a \
ProcessObject to represent the resulting subprocess. \
StartProcess[{\"\\!\\(\\*executable\", arg1, arg2, \[Ellipsis]}] executes an \
external program, passing it the specified arguments argi."}, 
 {"StartWebSession", "StartWebSession[] starts a web session and returns a \
web session object. StartWebSession[\"\\!\\(\\*browser\"] starts a web \
session using the specified browser."}, {"StartingStepSize", "StartingStepSiz\
e is an option to NDSolve and related functions that specifies the initial \
step size to use in trying to generate results."}, 
 {"StateFeedbackGains", "StateFeedbackGains[sspec, {p1, \[Ellipsis], pn}] \
gives the state feedback gains for the system specification sspec to place \
its closed-loop poles at pi. StateFeedbackGains[\[Ellipsis], \
\"\\!\\(\\*prop\"] gives the value of the property \"\\!\\(\\*prop\"."}, 
 {"StateOutputEstimator", "StateOutputEstimator[ssm, l] constructs an \
estimator for the StateSpaceModel ssm, with estimator gain matrix l. \
StateOutputEstimator[{ssm, sensors}, l] uses only sensors as the measurements \
of ssm. StateOutputEstimator[{ssm, sensors, dinputs}, l] specifies dinputs as \
the deterministic inputs of ssm."}, {"StateResponse", "StateResponse[sys, u, \
{t, tmin, tmax}] gives the numeric state response of the state-space model \
sys to input u for tmin<=t<=tmax. StateResponse[sys, {u[0], u[1], \
\[Ellipsis]}] gives the response of the discrete-time state-space model sys \
to the input sequence u[i]. StateResponse[sys, u, t] gives the symbolic state \
response as a function of time t. StateResponse[sys, {u1, \[Ellipsis], um}, \
\[Ellipsis]] gives the state response for multiple inputs ui. \
StateResponse[{sys, {x10, x20, \[Ellipsis], xn0}}, \[Ellipsis], \[Ellipsis]] \
gives the response with initial states xi0."}, 
 {"StateSpaceModel", "StateSpaceModel[{a, b, c, d}] represents the standard \
state-space model with state matrix a, input matrix b, output matrix c, and \
transmission matrix d. StateSpaceModel[{a, b, c, d,e}] represents a \
descriptor state-space model with descriptor matrix e. StateSpaceModel[sys] \
gives a state-space model corresponding to the systems model sys. \
StateSpaceModel[eqns, {{x1, x10}, \[Ellipsis]}, {{u1, u10}, \[Ellipsis]}, \
{g1, \[Ellipsis]}, \[Tau]] gives the state-space model obtained by Taylor \
linearization about the point (xi0, ui0) of the differential or difference \
equations eqns with outputs gi and independent variable \[Tau]."}, 
 {"StateSpaceRealization", "StateSpaceRealization is an option to \
StateSpaceModel that specifies its canonical representation."}, 
 {"StateSpaceTransform", "StateSpaceTransform[sys, {p, q}] transforms the \
state-space model sys using the matrices p and q. StateSpaceTransform[sys, \
{{x1->p1[z], \[Ellipsis]}, {z1->q1[x], \[Ellipsis]}}] transforms using the \
variable transformations {x1->p1[z], \[Ellipsis]} and {z1->q1[x], \
\[Ellipsis]}."}, {"StateTransformationLinearize", "StateTransformationLineari\
ze[asys] linearizes the AffineStateSpaceModel asys by state transformation. \
StateTransformationLinearize[asys, {z, lform}] specifies the new states z and \
form of linearization lform. StateTransformationLinearize[asys, \[Ellipsis], \
\"\\!\\(\\*prop\"] computes the property \"\\!\\(\\*prop\"."}, 
 {"StationaryDistribution", "StationaryDistribution[proc] represents the \
stationary distribution of the process proc, when it exists."}, 
 {"StationaryWaveletPacketTransform", "StationaryWaveletPacketTransform[data] \
gives the stationary wavelet packet transform (SWPT) of an array of data. \
StationaryWaveletPacketTransform[data, wave] gives the stationary wavelet \
packet transform using the wavelet wave. \
StationaryWaveletPacketTransform[data, wave, r] gives the stationary wavelet \
packet transform using r levels of refinement."}, 
 {"StationaryWaveletTransform", "StationaryWaveletTransform[data] gives the \
stationary wavelet transform (SWT) of an array of data. \
StationaryWaveletTransform[data, wave] gives the stationary wavelet transform \
using the wavelet wave. StationaryWaveletTransform[data, wave,r] gives the \
stationary wavelet transform using r levels of refinement."}, 
 {"StatusArea", "StatusArea[expr, string] displays string in the status area \
of the current notebook when the mouse pointer is in the region where expr \
appears."}, {"StatusCentrality", "StatusCentrality[g] gives a list of status \
centralities for the vertices in the graph g. StatusCentrality[{v->w, \
\[Ellipsis]}] uses rules v->w to specify the graph g."}, 
 {"StepMonitor", "StepMonitor is an option for iterative numerical \
computation functions that gives an expression to evaluate whenever a step is \
taken by the numerical method used."}, {"StereochemistryElements", "Stereoche\
mistryElements is an option for Molecule that specifies the local \
stereochemical arrangement of atoms in a molecule."}, 
 {"StieltjesGamma", "StieltjesGamma[n] gives the Stieltjes constant \
\[Gamma]n. StieltjesGamma[n, a] gives the generalized Stieltjes constant \
\[Gamma]n(a)."}, {"StippleShading", "StippleShading[] is a three-dimensional \
graphics directive specifying that objects that follow are to be drawn using \
small dots. StippleShading[d] uses the density d of shading. \
StippleShading[col] uses dots with the specified color col. StippleShading[d, \
col] uses dots of color col with the density d of shading."}, 
 {"StirlingS1", 
  "StirlingS1[n, m] gives the Stirling number of the first kind Sn(m)."}, 
 {"StirlingS2", "StirlingS2[n, m] gives the Stirling number of the second \
kind \[ScriptCapitalS]n(m)."}, {"StoppingPowerData", "StoppingPowerData[entit\
y, {\"Particle\"->particle, \"Energy\"->quantity}, property] gives the value \
of the specific property for the substance for the specified particle and the \
energy of that particle."}, {"StrataVariables", "StrataVariables is an option \
for fitting functions such as CoxModelFit that specify the variables on which \
the model should be stratified."}, {"StratonovichProcess", "StratonovichProce\
ss[{a, b}, x, t] represents a Stratonovich process x(t), where dx(t)==a(t, \
x(t))dt + b(t, x(t))\[EmptySmallCircle] dw(t). StratonovichProcess[{a, b, c}, \
x, t] represents a Stratonovich process y(t)==c(t, x(t)), where dx(t)==a(t, \
x(t))dt + b(t, x(t))\[EmptySmallCircle] dw(t). \
StratonovichProcess[\[Ellipsis], \[Ellipsis], {x, x0}, {t, t0}] represents a \
Stratonovich process with initial condition x(t0)==x0. \
StratonovichProcess[\[Ellipsis], \[Ellipsis], \[Ellipsis], \[CapitalSigma]] \
uses a Wiener process w(t), with covariance \[CapitalSigma]. \
StratonovichProcess[proc] converts proc to a standard Stratonovich process \
whenever possible. StratonovichProcess[sdeqns, expr, x, t, \
w\[Distributed]dproc] represents a Stratonovich process specified by a \
stochastic differential equation sdeqns, output expression expr, with state x \
and time t, driven by w following the process dproc."}, 
 {"StraussHardcorePointProcess", "StraussHardcorePointProcess[\[Mu], \
\[Gamma], rh, rs, d] represents a Strauss hardcore point process with \
constant intensity \[Mu], interaction parameter \[Gamma], hard-core \
interaction radius rh and Strauss interaction radius rs in \
\[DoubleStruckCapitalR]^d."}, {"StraussPointProcess", "StraussPointProcess[\
\[Mu], \[Gamma], rs,d] represents a Strauss point process with constant \
intensity \[Mu], interaction parameter \[Gamma] and interaction radius rs in \
\[DoubleStruckCapitalR]^d."}, {"StreamColorFunction", "StreamColorFunction is \
an option for StreamPlot and related functions that specifies a function to \
apply to determine colors along streamlines."}, 
 {"StreamColorFunctionScaling", "StreamColorFunctionScaling is an option for \
graphics functions that specifies whether arguments supplied to a stream \
color function should be scaled to lie between 0 and 1."}, 
 {"StreamDensityPlot", "StreamDensityPlot[{{vx, vy}, s}, {x, xmin, xmax}, {y, \
ymin, ymax}] generates a stream plot of the vector field {vx, vy} as a \
function of x and y, superimposed on a background density plot of the scalar \
field s. StreamDensityPlot[{vx, vy}, {x, xmin, xmax}, {y, ymin, ymax}] takes \
the scalar field to be the norm of the vector field. StreamDensityPlot[{{vx, \
vy}, {wx, wy}, \[Ellipsis], s}, {x, xmin, xmax}, {y, ymin, ymax}] generates \
plots of several vector fields. StreamDensityPlot[\[Ellipsis], {x, \
y}\[Element]reg] takes the variables {x, y} to be in the geometric region \
reg."}, {"StreamMarkers", "StreamMarkers is an option for StreamPlot, \
ListStreamPlot and related functions that specifies what markers to draw at \
the field points plotted."}, {"StreamPlot", "StreamPlot[{vx, vy}, {x, xmin, \
xmax}, {y, ymin, ymax}] generates a stream plot of the vector field {vx, vy} \
as a function of x and y. StreamPlot[{{vx, vy}, {wx, wy}, \[Ellipsis]}, {x, \
xmin, xmax}, {y, ymin, ymax}] generates plots of several vector fields. \
StreamPlot[\[Ellipsis], {x, y}\[Element]reg] takes the variables {x, y} to be \
in the geometric region reg."}, {"StreamPlot3D", "StreamPlot3D[{vx, vy, \
vz},{x, xmin, xmax}, {y, ymin, ymax}, {z, zmin, zmax}] plots streamlines for \
the vector field {vx, vy, vz} as functions of x, y and z. StreamPlot3D[{vx, \
vy, vz}, {x, y, z}\[Element]reg] takes the variables {x, y, z} to be in the \
geometric region reg."}, {"StreamPoints", "StreamPoints is an option to \
StreamPlot, ListStreamPlot, and related functions that determines how many \
streamlines to draw."}, {"StreamPosition", "StreamPosition[stream] returns an \
integer that specifies the position of the current point in an open stream."}\
, {"StreamScale", "StreamScale is an option to StreamPlot, ListStreamPlot, \
and related functions that determines the length and arrowhead size of \
streamlines that are drawn."}, {"StreamStyle", "StreamStyle is an option to \
StreamPlot, StreamDensityPlot, and related functions that determines the \
style to use for drawing streamlines."}, {"Streams", "Streams[] gives a list \
of all streams that are currently open. Streams[\"\\!\\(\\*name\"] lists only \
streams with the specified name."}, {"StrictInequalities", "StrictInequalitie\
s is an option to FunctionSign and FunctionMonotonicity etc that determines \
whether strict inequalities should be used in definitions."}, 
 {"String", "String is the head of a character string \"\\!\\(\\*text\"."}, 
 {"StringCases", "StringCases[\"\\!\\(\\*string\", patt] gives a list of the \
substrings in \"\\!\\(\\*string\" that match the string expression patt. \
StringCases[\"\\!\\(\\*string\", lhs->rhs] gives a list of the values of rhs \
corresponding to the substrings that match the string expression lhs. \
StringCases[\"\\!\\(\\*string\", p, n] includes only the first n substrings \
that match. StringCases[\"\\!\\(\\*string\", {p1, p2, \[Ellipsis]}] gives \
substrings that match any of the pi. StringCases[{s1, s2, \[Ellipsis]}, p] \
gives the list of results for each of the si. StringCases[patt] represents an \
operator form of StringCases that can be applied to an expression."}, 
 {"StringContainsQ", "StringContainsQ[\"\\!\\(\\*string\", patt] yields True \
if any part of string matches the string pattern patt, and yields False \
otherwise. StringContainsQ[{\"\\!\\(\\*string_1\", \"\\!\\(\\*string_2\", \
\[Ellipsis]}, patt] gives a list of the results for each of the stringi. \
StringContainsQ[patt] represents an operator form of StringContainsQ that can \
be applied to an expression."}, {"StringCount", "StringCount[\"\\!\\(\\*strin\
g\", \"\\!\\(\\*sub\"] gives a count of the number of times \"\\!\\(\\*sub\" \
appears as a substring of \"\\!\\(\\*string\". \
StringCount[\"\\!\\(\\*string\", patt] gives the number of substrings in \
\"\\!\\(\\*string\" that match the general string expression patt. \
StringCount[\"\\!\\(\\*string\", {patt1, patt2, \[Ellipsis]}] counts the \
number of occurrences of any of the patti. StringCount[{s1, s2, \[Ellipsis]}, \
p] gives the list of results for each of the si."}, 
 {"StringDelete", "StringDelete[\"\\!\\(\\*string\", patt] yields the string \
obtained by deleting from string all occurrences of anything matching the \
string pattern patt. StringDelete[patt] represents an operator form of \
StringDelete that can be applied to an expression."}, 
 {"StringDrop", "StringDrop[\"\\!\\(\\*string\", n] gives \"\\!\\(\\*string\" \
with its first n characters dropped. StringDrop[\"\\!\\(\\*string\", - n] \
gives \"\\!\\(\\*string\" with its last n characters dropped. \
StringDrop[\"\\!\\(\\*string\", {n}] gives \"\\!\\(\\*string\" with its n^th \
character dropped. StringDrop[\"\\!\\(\\*string\", {m, n}] gives \
\"\\!\\(\\*string\" with characters m through n dropped. StringDrop[{s1, s2, \
\[Ellipsis]}, spec] gives the list of results for each of the si."}, 
 {"StringEndsQ", "StringEndsQ[\"\\!\\(\\*string\", patt] yields True if the \
end of string matches the string pattern patt, and yields False otherwise. \
StringEndsQ[{\"\\!\\(\\*string_1\", \"\\!\\(\\*string_2\", \[Ellipsis]}, \
patt] gives a list of the results for each of the stringi. StringEndsQ[patt] \
represents an operator form of StringEndsQ that can be applied to an \
expression."}, {"StringExpression", "s1~~s2~~\[Ellipsis] or \
StringExpression[s1, s2, \[Ellipsis]] represents a sequence of strings and \
symbolic string objects si."}, {"StringExtract", "StringExtract[\"\\!\\(\\*st\
ring\", n] extracts the n^th block of characters in string, where blocks of \
characters are defined as delimited by whitespace. \
StringExtract[\"\\!\\(\\*string\", {pos1, pos2, \[Ellipsis]}] extracts blocks \
at several positions in string. StringExtract[\"\\!\\(\\*string\", sep->pos] \
takes blocks to be delimited by separators that match sep. \
StringExtract[\"\\!\\(\\*string\", pos1, pos2, \[Ellipsis]] extracts blocks \
at positions posi, delimiting with whitespace for the lowest level, newlines \
for the next level, and a successively increasing number of newlines \
thereafter. StringExtract[\"\\!\\(\\*string\", sep1->pos1, sep2->pos2, \
\[Ellipsis]] gives a nested list of blocks, with the sepi used as separators \
for successive levels."}, {"StringForm", "StringForm[\"\\!\\(\\*controlstring\
\", expr1, \[Ellipsis]] prints as the text of the controlstring, with the \
printed forms of the expri embedded."}, {"StringFormat", "StringFormat[\"\\!\
\\(\\*string\"] attempts to determine what ImportString format could be used \
to import the string \"\\!\\(\\*string\"."}, {"StringFormatQ", "StringFormatQ\
[\"string\", \"\\!\\(\\*fmt\"] gives True if the string \"\\!\\(\\*string\" \
might be imported as format \"\\!\\(\\*fmt\" and gives False otherwise. \
StringFormatQ[\"string\", {\"\\!\\(\\*fmt_1\", \"\\!\\(\\*fmt_2\", \
\[Ellipsis]}] gives True if \"string\" might be imported as one of \
\"\\!\\(\\*fmt_i\"."}, {"StringFreeQ", "StringFreeQ[\"\\!\\(\\*string\", \
patt] yields True if no substring in \"\\!\\(\\*string\" matches the string \
expression patt, and yields False otherwise. StringFreeQ[\"\\!\\(\\*string\", \
{patt1, patt2, \[Ellipsis]}] yields True if no substring matches any of the \
patti. StringFreeQ[{s1, s2, \[Ellipsis]}, p] gives the list of results for \
each of the si. StringFreeQ[patt] represents an operator form of StringFreeQ \
that can be applied to an expression."}, {"StringInsert", "StringInsert[\"\\!\
\\(\\*string\", \"\\!\\(\\*snew\", n] yields a string with \"\\!\\(\\*snew\" \
inserted starting at position n in \"\\!\\(\\*string\". \
StringInsert[\"\\!\\(\\*string\", \"\\!\\(\\*snew\", - n] inserts at position \
n from the end of \"\\!\\(\\*string\". StringInsert[\"\\!\\(\\*string\", \
\"\\!\\(\\*snew\", {n1, n2, \[Ellipsis]}] inserts a copy of \"\\!\\(\\*snew\" \
at each of the positions ni. StringInsert[{s1, s2, \[Ellipsis]}, \
\"\\!\\(\\*snew\", n] gives the list of results for each of the si."}, 
 {"StringJoin", "\\!\\(\\*s_1\"<>\"\\!\\(\\*s_2\"<>\[Ellipsis], \
StringJoin[\"\\!\\(\\*s_1\", \"\\!\\(\\*s_2\", \[Ellipsis]], or \
StringJoin[{\"\\!\\(\\*s_1\", \"\\!\\(\\*s_2\", \[Ellipsis]}] yields a string \
consisting of a concatenation of the si."}, {"StringLength", "StringLength[\"\
\\!\\(\\*string\"] gives the number of characters in a string."}, 
 {"StringMatchQ", "StringMatchQ[\"\\!\\(\\*string\", patt] tests whether \
\"\\!\\(\\*string\" matches the string pattern patt. \
StringMatchQ[\"\\!\\(\\*string\", RegularExpression[\"\\!\\(\\*regex\"]] \
tests whether \"\\!\\(\\*string\" matches the specified regular expression. \
StringMatchQ[{s1, s2, \[Ellipsis]}, p] gives the list of results for each of \
the si. StringMatchQ[patt] represents an operator form of StringMatchQ that \
can be applied to an expression."}, {"StringPadLeft", "StringPadLeft[\"\\!\\(\
\\*string\", n] makes string be of length n, padding it on the left with \
spaces or truncating it if necessary. StringPadLeft[\"\\!\\(\\*string\", n, \
\"\\!\\(\\*padding\"] pads by repeating copies of the string padding. \
StringPadLeft[{\"\\!\\(\\*s_1\", \"\\!\\(\\*s_2\", \[Ellipsis]}] pads strings \
with spaces on the left to make them all the same length. \
StringPadLeft[{\"\\!\\(\\*s_1\", \"\\!\\(\\*s_2\", \[Ellipsis]}, n, \
\[Ellipsis]] pads or truncates to make all strings of length n."}, 
 {"StringPadRight", "StringPadRight[\"\\!\\(\\*string\", n] makes string be \
of length n, padding it on the right with spaces or truncating it if \
necessary. StringPadRight[\"\\!\\(\\*string\", n, \"\\!\\(\\*padding\"] pads \
by repeating copies of the string padding. StringPadRight[{\"\\!\\(\\*s_1\", \
\"\\!\\(\\*s_2\", \[Ellipsis]}] pads strings with spaces on the right to make \
them all the same length. StringPadRight[{\"\\!\\(\\*s_1\", \"\\!\\(\\*s_2\", \
\[Ellipsis]}, n, \[Ellipsis]] pads or truncates to make all strings of length \
n."}, {"StringPart", "StringPart[\"\\!\\(\\*string\", n] gives the n^th \
character in \"\\!\\(\\*string\". StringPart[\"\\!\\(\\*string\", {n1, n2, \
\[Ellipsis]}] gives a list of the ni^th characters in \"\\!\\(\\*string\". \
StringPart[\"\\!\\(\\*string\", m;;n;;s] gives a list of the characters in \
\"\\!\\(\\*string\" from the m^th through the n^th in steps of s. \
StringPart[{s1, s2, \[Ellipsis]}, spec] gives the list of results for each of \
the si."}, {"StringPartition", "StringPartition[\"\\!\\(\\*string\", n] \
partitions string into nonoverlapping substrings of length n. \
StringPartition[\"\\!\\(\\*string\", n, d] generates substrings with offset \
d."}, {"StringPosition", "StringPosition[\"\\!\\(\\*string\", \
\"\\!\\(\\*sub\"] gives a list of the starting and ending character positions \
at which \"\\!\\(\\*sub\" appears as a substring of \"\\!\\(\\*string\". \
StringPosition[\"\\!\\(\\*string\", patt] gives all positions at which \
substrings matching the general string expression patt appear in \
\"\\!\\(\\*string\". StringPosition[\"\\!\\(\\*string\", patt, n] includes \
only the first n occurrences of patt. StringPosition[\"\\!\\(\\*string\", \
{patt1, patt2, \[Ellipsis]}] gives positions of all the patti. \
StringPosition[{s1, s2, \[Ellipsis]}, p] gives the list of results for each \
of the si. StringPosition[patt] represents an operator form of StringPosition \
that can be applied to an expression."}, 
 {"StringQ", 
  "StringQ[expr] gives True if expr is a string, and False otherwise."}, 
 {"StringRepeat", "StringRepeat[\"\\!\\(\\*str\", n] creates a string \
consisting of \"\\!\\(\\*str\" repeated n times. \
StringRepeat[\"\\!\\(\\*str\", n, max] creates a string consisting of up to n \
copies of \"\\!\\(\\*str\", truncated to be of maximum total length at most \
max."}, {"StringReplace", "StringReplace[\"\\!\\(\\*string\", s->sp] replaces \
the string expression s by sp wherever it appears in \"\\!\\(\\*string\". \
StringReplace[\"\\!\\(\\*string\", {s1->sp1, s2->sp2, \[Ellipsis]}] replaces \
the string expressions si by spi whenever they appear as substrings of \
\"\\!\\(\\*string\". StringReplace[\"\\!\\(\\*string\", srules, n] does only \
the first n replacements. StringReplace[{s1, s2, \[Ellipsis]}, srules] gives \
the list of results for each of the si. StringReplace[srules] represents an \
operator form of StringReplace that can be applied to an expression."}, 
 {"StringReplaceList", "StringReplaceList[\"\\!\\(\\*string\", s->sp] or \
StringReplaceList[\"\\!\\(\\*string\", {s1->sp1, s2->sp2, \[Ellipsis]}] gives \
a list of the strings obtained by replacing each individual occurrence of \
substrings in \"\\!\\(\\*string\" matching the string expressions si. \
StringReplaceList[\"\\!\\(\\*string\", srules, n] gives a list of the first n \
results obtained. StringReplaceList[{s1, s2, \[Ellipsis]}, srules] gives the \
list of results for each of the si."}, {"StringReplacePart", "StringReplacePa\
rt[\"\\!\\(\\*string\", \"\\!\\(\\*snew\", {m, n}] replaces the characters at \
positions m through n in \"\\!\\(\\*string\" by \"\\!\\(\\*snew\". \
StringReplacePart[\"\\!\\(\\*string\", \"\\!\\(\\*snew\", {{m1, n1}, {m2, \
n2}, \[Ellipsis]}] inserts copies of \"\\!\\(\\*snew\" at several positions. \
StringReplacePart[\"\\!\\(\\*string\", {\"\\!\\(\\*snew_1\", \
\"\\!\\(\\*snew_2\", \[Ellipsis]}, {{m1, n1}, {m2, n2}, \[Ellipsis]}] \
replaces characters at positions mi through ni in \"\\!\\(\\*string\" by \
\"\\!\\(\\*snew_i\". StringReplacePart[\"\\!\\(\\*snew\", {m, n}] represents \
an operator form of StringReplacePart that can be applied to an expression."}\
, {"StringReverse", "StringReverse[\"\\!\\(\\*string\"] reverses the order of \
the characters in \"\\!\\(\\*string\"."}, {"StringRiffle", "StringRiffle[{s1, \
s2, s3, \[Ellipsis]}] creates a string by concatenating all the si, with \
spaces inserted between them. StringRiffle[{{s11, s12, \[Ellipsis]}, {s21, \
s22, \[Ellipsis]}, \[Ellipsis]}] creates a string by concatenating the sij, \
and inserting spaces at the lowest level and newlines at the higher level. \
StringRiffle[list, sep] inserts the separator sep between all elements in \
list. StringRiffle[list, {\"\\!\\(\\*left\", \"\\!\\(\\*sep\", \
\"\\!\\(\\*right\"}] use left and right as delimiters after concatenation. \
StringRiffle[list, sep1, sep2, \[Ellipsis]] inserts separator sepi between \
elements of list at level i."}, {"StringRotateLeft", "StringRotateLeft[string\
, n] cycles the characters in string n positions to the left. \
StringRotateLeft[string] cycles one position to the left."}, 
 {"StringRotateRight", "StringRotateRight[string, n] cycles the characters in \
string n positions to the right. StringRotateRight[string] cycles one \
position to the right."}, {"StringSkeleton", "StringSkeleton[n] represents a \
sequence of n omitted characters in a string printed with Short. The standard \
print form for StringSkeleton is an ellipsis."}, 
 {"StringSplit", "StringSplit[\"\\!\\(\\*string\"] splits \"\\!\\(\\*string\" \
into a list of substrings separated by whitespace. \
StringSplit[\"\\!\\(\\*string\", patt] splits into substrings separated by \
delimiters matching the string expression patt. \
StringSplit[\"\\!\\(\\*string\", {p1, p2, \[Ellipsis]}] splits at any of the \
pi. StringSplit[\"\\!\\(\\*string\", patt->val] inserts val at the position \
of each delimiter. StringSplit[\"\\!\\(\\*string\", {p1->v1, \[Ellipsis]}] \
inserts vi at the position of each delimiter pi. \
StringSplit[\"\\!\\(\\*string\", patt, n] splits into at most n substrings. \
StringSplit[{s1, s2, \[Ellipsis]}, p] gives the list of results for each of \
the si."}, {"StringStartsQ", "StringStartsQ[\"\\!\\(\\*string\", patt] yields \
True if the beginning of string matches the string pattern patt, and yields \
False otherwise. StringStartsQ[{\"\\!\\(\\*string_1\", \"\\!\\(\\*string_2\", \
\[Ellipsis]}, patt] gives a list of the results for each of the stringi. \
StringStartsQ[patt] represents an operator form of StringStartsQ that can be \
applied to an expression."}, {"StringTake", "StringTake[\"\\!\\(\\*string\", \
n] gives a string containing the first n characters in \"\\!\\(\\*string\". \
StringTake[\"\\!\\(\\*string\", - n] gives the last n characters in \
\"\\!\\(\\*string\". StringTake[\"\\!\\(\\*string\", {n}] gives the n^th \
character in \"\\!\\(\\*string\". StringTake[\"\\!\\(\\*string\", {m, n}] \
gives characters m through n in \"\\!\\(\\*string\". \
StringTake[\"\\!\\(\\*string\", {spec1, spec2, \[Ellipsis]}] gives a list of \
the substrings specified by the speci. StringTake[{s1, s2, \[Ellipsis]}, \
spec] gives the list of results for each of the si."}, 
 {"StringTakeDrop", "StringTakeDrop[\"\\!\\(\\*string\", n] gives a pair of \
strings containing the first n characters in \"\\!\\(\\*string\" and the \
remaining characters. StringTakeDrop[\"\\!\\(\\*string\", seq] gives the pair \
{StringTake[\"\\!\\(\\*string\", seq], StringDrop[\"\\!\\(\\*string\", \
seq]}."}, {"StringTemplate", "StringTemplate[\"\\!\\(\\*string\"] yields a \
TemplateObject expression that represents a string template to be applied to \
arguments. StringTemplate[src] uses File[\[Ellipsis]], URL[\[Ellipsis]] or \
CloudObject[\[Ellipsis]] as the source for the string template. \
StringTemplate[form, args] yields a TemplateObject with arguments, suitable \
for cloud deployment or other evaluation."}, {"StringToByteArray", "StringToB\
yteArray[\"\\!\\(\\*string\"] returns a byte array corresponding to the UTF-8 \
encoding of the specified string. StringToByteArray[\"\\!\\(\\*string\", \
\"\\!\\(\\*encoding\"] uses the specified character encoding."}, 
 {"StringToStream", "StringToStream[\"\\!\\(\\*string\"] opens an input \
stream for reading from a string."}, {"StringTrim", "StringTrim[\"\\!\\(\\*st\
ring\"] trims whitespace from the beginning and end of \"\\!\\(\\*string\". \
StringTrim[\"\\!\\(\\*string\", patt] trims substrings matching patt from the \
beginning and end."}, {"StripBoxes", "StripBoxes[expr] will strip out \
unnecessary boxes, spaces, and styles from a format expression."}, 
 {"StripOnInput", "StripOnInput is an option for certain boxes that \
determines whether the box should be stripped on evaluation."}, 
 {"StripWrapperBoxes", "StripWrapperBoxes is an option to TagBox that \
controls how boxes are stripped upon evaluation."}, 
 {"StructuralImportance", "StructuralImportance[rdist] gives the structural \
importances for all components in the ReliabilityDistribution rdist. \
StructuralImportance[fdist] gives the structural importances for all \
components in the FailureDistribution fdist. StructuralImportance[bexpr,{x1, \
x2, \[Ellipsis]}] gives the structural importance for the components x1, x2, \
\[Ellipsis] in the Boolean expression bexpr."}, 
 {"StructuredSelection", "StructuredSelection is an option for Cell that \
specifies whether to allow only complete subexpressions in the cell to be \
selected interactively using the front end."}, 
 {"StruveH", "StruveH[n, z] gives the Struve function Hn(z)."}, 
 {"StruveL", "StruveL[n, z] gives the modified Struve function Ln(z)."}, 
 {"Stub", "Stub is an attribute which specifies that if a symbol is ever \
used, Needs should automatically be called on the context of the symbol."}, 
 {"StudentTDistribution", "StudentTDistribution[\[Nu]] represents a Student t \
distribution with \[Nu] degrees of freedom. StudentTDistribution[\[Mu], \
\[Sigma], \[Nu]] represents a Student t distribution with location parameter \
\[Mu], scale parameter \[Sigma], and \[Nu] degrees of freedom."}, 
 {"Style", "Style[expr, options] displays with expr formatted using the \
specified option settings. Style[expr, \"\\!\\(\\*style\"] uses the option \
settings for the specified style in the current notebook. Style[expr, color] \
displays using the specified color. Style[expr, Bold] displays with fonts \
made bold. Style[expr, Italic] displays with fonts made italic. Style[expr, \
Underlined] displays with fonts underlined. Style[expr, Larger] displays with \
fonts made larger. Style[expr, Smaller] displays with fonts made smaller. \
Style[expr, n] displays with font size n. Style[expr, Tiny], Style[expr, \
Small], etc. display with fonts that are tiny, small, etc."}, 
 {"StyleBox", "StyleBox[boxes, options] is a low-level representation of \
boxes to be shown with the specified option settings. StyleBox[boxes, \
\"\\!\\(\\*style\"] uses the option setting for the specified style in the \
current notebook."}, {"StyleData", "StyleData[\"\\!\\(\\*style\"] is a \
low-level representation of the contents of a style definition cell. \
StyleData[\"\\!\\(\\*style\", \"\\!\\(\\*environment\"] represents the \
contents of a style definition cell in the style environment \
\"\\!\\(\\*environment\"."}, {"StyleDefinitions", "StyleDefinitions is an \
option for notebooks that gives definitions for the styles that can be used \
in a notebook."}, {"SubMinus", "SubMinus[expr] displays as expr-."}, 
 {"SubPlus", "SubPlus[expr] displays as expr+."}, 
 {"SubStar", "SubStar[expr] displays as expr*."}, 
 {"Subdivide", "Subdivide[n] generates the list {0, 1 / n, 2 / n, \
\[Ellipsis], 1}. Subdivide[xmax, n] generates the list of values obtained by \
subdividing the interval 0 to xmax into n equal parts. Subdivide[xmin, xmax, \
n] generates the list of values from subdividing the interval xmin to xmax."}\
, {"Subfactorial", "Subfactorial[n] gives the number of permutations of n \
objects that leave no object fixed."}, {"Subgraph", "Subgraph[g, {v1, v2, \
\[Ellipsis]}] gives the subgraph of the graph g generated by the vertices vi. \
Subgraph[g, {e1, e2, \[Ellipsis]}] gives the subgraph generated by the edges \
ej. Subgraph[g, patt] gives the subgraph generated by the vertices and edges \
that match the pattern patt. Subgraph[{v->w, \[Ellipsis]}, \[Ellipsis]] uses \
rules v->w to specify the graph g."}, {"SubresultantPolynomialRemainders", "S\
ubresultantPolynomialRemainders[poly1, poly2, var] gives the subresultant \
polynomial remainder sequence of the polynomials poly1 and poly2 with respect \
to the variable var. SubresultantPolynomialRemainders[poly1, poly2, var, \
Modulus->p] computes the subresultant polynomial remainder sequence modulo \
the prime p."}, {"SubresultantPolynomials", "SubresultantPolynomials[poly1, \
poly2, var] generates a list of subresultant polynomials of the polynomials \
poly1 and poly2 with respect to the variable var. \
SubresultantPolynomials[poly1, poly2, var, Modulus->p] computes the \
subresultant polynomials modulo the prime p."}, 
 {"Subresultants", "Subresultants[poly1, poly2, var] generates a list of the \
principal subresultant coefficients of the polynomials poly1 and poly2 with \
respect to the variable var. Subresultants[poly1, poly2, var, Modulus->p] \
computes the principal subresultant coefficients modulo the prime p."}, 
 {"Subscript", "Subscript[x, y] is an object that formats as xy. Subscript[x, \
y1, y2, \[Ellipsis]] formats as xy1, y2, \[Ellipsis]."}, 
 {"SubscriptBox", 
  "x_y is the low-level box representation for xy in notebook expressions."}, 
 {"SubscriptBoxOptions", "SubscriptBoxOptions is an option for selections \
that specifies settings for SubscriptBox objects."}, 
 {"Subsequences", "Subsequences[list] gives the list of all possible \
subsequences of list. Subsequences[list, n] gives all subsequences containing \
at most n elements. Subsequences[list, {n}] gives all subsequences containing \
exactly n elements. Subsequences[list, {nmin, nmax}] gives all subsequences \
containing between nmin and nmax elements. Subsequences[list, nspec, s] \
limits the result to the first s subsequences. Subsequences[list, nspec, {s}] \
gives if possible the s^th subsequence."}, 
 {"Subset", 
  "Subset[x, y, \[Ellipsis]] displays as x\[Subset]y\[Subset]\[Ellipsis]."}, 
 {"SubsetCases", "SubsetCases[list, patt] gives a list of the sublists in \
list that match the pattern patt in any order. SubsetCases[list, patt->rhs] \
gives a list of the values of rhs corresponding to matching sublists. \
SubsetCases[list, patt, n] includes only the first n matches."}, 
 {"SubsetCount", "SubsetCount[list, sub] gives a count of the number of times \
sub appears in any order as a sublist of list. SubsetCount[list, patt] gives \
the number of sublists in list that match the general pattern patt in any \
order."}, {"SubsetEqual", "SubsetEqual[x, y, \[Ellipsis]] displays as \
x\[SubsetEqual]y\[SubsetEqual]\[Ellipsis]."}, {"SubsetMap", "SubsetMap[f, \
{e1, e2, \[Ellipsis]}, {i, j, \[Ellipsis]}] yields an expression in which the \
elements ei, ej, \[Ellipsis] in the list {e1, e2, \[Ellipsis]} are replaced \
with the corresponding elements of the list obtained by evaluating f[{ei, ej, \
\[Ellipsis]}]. SubsetMap[f, expr, {pos1, pos2, \[Ellipsis]}] replaces \
elements of expr at positions pos1, pos2, \[Ellipsis]. SubsetMap[f, {pos1, \
pos2, \[Ellipsis]}] represents an operator form of SubsetMap that can be \
applied to an expression."}, {"SubsetPosition", "SubsetPosition[list, \
sublist] gives a list of positions at which sublist appears in list in any \
order. SubsetPosition[list, patt] gives all positions at which sublists \
matching patt in any order appear in list. SubsetPosition[list, patt, n] \
includes only the first n positions."}, {"SubsetQ", "SubsetQ[list1, list2] \
yields True if list2 is a subset of list1, and False otherwise."}, 
 {"SubsetReplace", "SubsetReplace[list, rules] replaces sublists in list \
according to the specified rule or list of rules. SubsetReplace[list, rules, \
n] does only the first n replacements. SubsetReplace[rules] represents an \
operator form of SubsetReplace that can be applied to an expression."}, 
 {"Subsets", "Subsets[list] gives a list of all possible subsets of list. \
Subsets[list, n] gives all subsets containing at most n elements. \
Subsets[list, {n}] gives all subsets containing exactly n elements. \
Subsets[list, {nmin, nmax}] gives all subsets containing between nmin and \
nmax elements. Subsets[list, nspec, s] limits the result to the first s \
subsets. Subsets[list, nspec, {s}] gives if possible the s^th subset."}, 
 {"SubstitutionSystem", "SubstitutionSystem[rule, init, t] generates a list \
representing the evolution of the substitution system with the specified rule \
from initial condition init for t steps. SubstitutionSystem[rule, init] gives \
the result of evolving init for one step. SubstitutionSystem[rule] is an \
operator form of SubstitutionSystem that corresponds to one step of \
evolution."}, {"Subsuperscript", 
  "Subsuperscript[x, y, z] is an object that formats as xyz."}, 
 {"SubsuperscriptBox", "SubsuperscriptBox[x, y, z] is the low-level box \
representation for xyz in notebook expressions."}, 
 {"SubsuperscriptBoxOptions", "SubsuperscriptBoxOptions is an option for \
selections that specifies settings for SubsuperscriptBox objects."}, 
 {"SubtitleEncoding", "SubtitleEncoding is an option for Export and other \
functions that specifies the subtitle encoding to use when creating a video \
file."}, {"SubtitleTrackSelection", "SubtitleTrackSelection is an option that \
specifies the subtitle tracks of interest."}, 
 {"Subtract", "x - y is equivalent to x + ( - 1 * y)."}, 
 {"SubtractFrom", 
  "x-=dx subtracts dx from x and returns the new value of x."}, 
 {"SubtractSides", "SubtractSides[rel, x] subtracts x from each side of the \
equation or inequality rel. SubtractSides[rel1, rel2] subtracts the \
corresponding sides of two equations or inequalities. SubtractSides[rel] \
subtracts the right-hand side of rel from each side, producing a zero \
right-hand side."}, {"Succeeds", "Succeeds[x, y, \[Ellipsis]] displays as \
x\[Succeeds]y\[Succeeds]\[Ellipsis]."}, {"SucceedsEqual", "SucceedsEqual[x, \
y, \[Ellipsis]] displays as x\[SucceedsEqual]y\[SucceedsEqual]\[Ellipsis]."}, 
 {"SucceedsSlantEqual", "SucceedsSlantEqual[x, y, \[Ellipsis]] displays as \
x\[SucceedsSlantEqual]y\[SucceedsSlantEqual]\[Ellipsis]."}, 
 {"SucceedsTilde", "SucceedsTilde[x, y, \[Ellipsis]] displays as \
x\[SucceedsTilde]y\[SucceedsTilde]\[Ellipsis]."}, 
 {"Success", "Success[\"\\!\\(\\*tag\", assoc] represents a success of a type \
indicated by tag, with details given by the association assoc."}, 
 {"SuchThat", "SuchThat[x, y] displays as x\[SuchThat]y."}, 
 {"Sum", "Sum[f, {i, imax}] evaluates the sum \[Sum]i = \
1imaxLimitsPositioningTruef. Sum[f, {i, imin, imax}] starts with i = imin. \
Sum[f, {i, imin, imax, di}] uses steps di. Sum[f, {i, {i1, i2, \[Ellipsis]}}] \
uses successive values i1, i2, \[Ellipsis]. Sum[f, {i, imin, imax}, {j, jmin, \
jmax}, \[Ellipsis]] evaluates the multiple sum \[Sum]i = \
iminimaxLimitsPositioningTrue\[Sum]j = \
jminjmaxLimitsPositioningTrue\[Ellipsis]f. Sum[f, i] gives the indefinite sum \
\[Sum]if."}, {"SumConvergence", "SumConvergence[f, n] gives conditions for \
the sum \[Sum]n\[Infinity]f to be convergent. SumConvergence[f, {n1, n2, \
\[Ellipsis]}] gives conditions for the multiple sum \
\[Sum]n1\[Infinity]\[Sum]n2\[Infinity]\[Ellipsis] f to be convergent."}, 
 {"SummationLayer", "SummationLayer[] represents a net layer that sums all of \
its input elements."}, {"SunPosition", "SunPosition[] gives the position of \
the Sun for the current date and location. SunPosition[datespec] gives the \
position of the Sun for the specified date. SunPosition[locationspec] gives \
the positions of the Sun for the specified location. \
SunPosition[locationspec, datespec] gives the position of the Sun for the \
specified date and location. SunPosition[{{location1, date1}, {location2, \
date2}, \[Ellipsis]}] gives the positions of the Sun for all specified \
locations on the specified dates. SunPosition[locationspec, datespec, func] \
uses func to determine what to return for extended locations."}, 
 {"Sunday", "Sunday is a day of the week."}, {"Sunrise", "Sunrise[] gives the \
time of the next sunrise for the current date and location. Sunrise[datespec] \
gives the times of the next sunrise for the specified dates. \
Sunrise[locationspec] gives the times of the next sunrise for the specified \
locations. Sunrise[locationspec, datespec] gives the time of the next sunrise \
for the specified date and location. Sunrise[{{location1, date1}, {location2, \
date2}, \[Ellipsis]}] gives the times of the next sunrise for all specified \
locations on the specified dates. Sunrise[locationspec, datespec, func] uses \
func to determine what to return for extended locations."}, 
 {"Sunset", "Sunset[] gives the time of the next sunset for the current date \
and location. Sunset[datespec] gives the time of the next sunset for the \
specified dates. Sunset[locationspec] gives the times of the next sunset for \
the specified locations. Sunset[locationspec, datespec] gives the time of the \
next sunset for the specified date and location. Sunset[{{location1, date1}, \
{location2, date2}, \[Ellipsis]}] gives the times of the next sunset for all \
specified locations on the specified dates. Sunset[locationspec, datespec, \
func] uses func to determine what to return for extended locations."}, 
 {"SuperDagger", "SuperDagger[expr] displays as expr^\[Dagger]."}, 
 {"SuperMinus", "SuperMinus[expr] displays as expr^-."}, 
 {"SuperPlus", "SuperPlus[expr] displays as expr^+."}, 
 {"SuperStar", "SuperStar[expr] displays as expr^*."}, 
 {"SupernovaData", "SupernovaData[entity, property] gives the value of the \
specified property for the supernova entity. SupernovaData[{entity1, entity2, \
\[Ellipsis]}, property] gives a list of property values for the specified \
supernova entities. SupernovaData[entity, property, annotation] gives the \
specified annotation associated with the given property."}, 
 {"Superscript", "Superscript[x, y] is an object that formats as x^y."}, 
 {"SuperscriptBox", 
  "x^y is the low-level box representation for x^y in notebook expressions."}\
, {"SuperscriptBoxOptions", "SuperscriptBoxOptions is an option for \
selections that specifies settings for SuperscriptBox objects."}, 
 {"Superset", "Superset[x, y, \[Ellipsis]] displays as \
x\[Superset]y\[Superset]\[Ellipsis]."}, {"SupersetEqual", "SupersetEqual[x, \
y, \[Ellipsis]] displays as x\[SupersetEqual]y\[SupersetEqual]\[Ellipsis]."}, 
 {"Surd", "Surd[x, n] gives the real-valued n^th root of x."}, 
 {"SurdForm", "SurdForm is an option to RadicalBox and SqrtBox that indicates \
whether the radical represents a Surd expression."}, 
 {"SurfaceArea", "SurfaceArea[reg] gives the surface area of the \
three-dimensional region reg. SurfaceArea[{x1, \[Ellipsis], xn}, {s, smin, \
ssmax}, {t, tmin, tmax}, {u, umin, umax}] gives the surface area of the \
parametrized region whose Cartesian coordinates xi are functions of s, t, u. \
SurfaceArea[{x1, \[Ellipsis], xn}, {s, smin, ssmax}, {t, tmin, tmax}, {u, \
umin, umax}, chart] interprets the xi as coordinates in the specified \
coordinate chart."}, {"SurfaceData", "SurfaceData[entity, property] gives the \
value of the specified property for the surface entity. SurfaceData[{entity1, \
entity2, \[Ellipsis]}, property] gives a list of property values for the \
specified surface entities. SurfaceData[entity, property, annotation] gives \
the specified annotation associated with the given property."}, 
 {"SurvivalDistribution", "SurvivalDistribution[{e1, e2, \[Ellipsis]}] \
represents a survival distribution with event times ei. \
SurvivalDistribution[{cw1, cw2, \[Ellipsis]}->{e1, e2, \[Ellipsis]}] \
represents a survival distribution where events ei occur with censor weights \
cwi."}, {"SurvivalFunction", "SurvivalFunction[dist, x] gives the survival \
function for the distribution dist evaluated at x. SurvivalFunction[dist, \
{x1, x2, \[Ellipsis]}] gives the multivariate survival function for the \
distribution dist evaluated at {x1, x2, \[Ellipsis]}. SurvivalFunction[dist] \
gives the survival function as a pure function."}, 
 {"SurvivalModel", "SurvivalModel[\[Ellipsis]] represents the symbolic \
survival model obtained from functions like SurvivalModelFit."}, 
 {"SurvivalModelFit", "SurvivalModelFit[{e1, e2, \[Ellipsis]}] creates a \
survival model for event times ei."}, {"SuzukiDistribution", "SuzukiDistribut\
ion[\[Mu], \[Nu]] represents the Suzuki distribution with shape parameters \
\[Mu] and \[Nu]."}, {"SuzukiGroupSuz", 
  "SuzukiGroupSuz[] represents the sporadic simple Suzuki group Suz."}, 
 {"SwatchLegend", "SwatchLegend[{col1, \[Ellipsis]}, {lbl1, \[Ellipsis]}] \
generates a legend that associates swatches of colors coli with labels lbli. \
SwatchLegend[{col1, \[Ellipsis]}, Automatic] generates a legend with \
placeholder labels for the colors coli. SwatchLegend[{lbl1, \[Ellipsis]}] \
represents a legend with inherited colors within visualization functions."}, 
 {"Switch", "Switch[expr, form1, value1, form2, value2, \[Ellipsis]] \
evaluates expr, then compares it with each of the formi in turn, evaluating \
and returning the valuei corresponding to the first match found."}, 
 {"Symbol", 
  "Symbol[\"\\!\\(\\*name\"] refers to a symbol with the specified name."}, 
 {"SymbolName", 
  "SymbolName[symbol] gives the name of the specified symbol."}, 
 {"SymletWavelet", "SymletWavelet[] represents the Symlet wavelet of order 4. \
SymletWavelet[n] represents the Symlet wavelet of order n."}, 
 {"Symmetric", "Symmetric[{s1, \[Ellipsis], sn}] represents the symmetry of a \
tensor that is symmetric in the slots si."}, 
 {"SymmetricGroup", 
  "SymmetricGroup[n] represents the symmetric group of degree n."}, 
 {"SymmetricKey", "SymmetricKey[assoc] represents all the information needed \
for encryption, decryption, and other operations in a symmetric cryptographic \
system."}, {"SymmetricMatrixQ", "SymmetricMatrixQ[m] gives True if m is \
explicitly symmetric, and False otherwise."}, {"SymmetricPolynomial", "Symmet\
ricPolynomial[k, {x1, \[Ellipsis], xn}] gives the k^th elementary symmetric \
polynomial in the variables x1, \[Ellipsis], xn."}, 
 {"SymmetricReduction", "SymmetricReduction[f, {x1, \[Ellipsis], xn}] gives a \
pair of polynomials {p, q} in x1, \[Ellipsis], xn such that f == p + q, where \
p is the symmetric part and q is the remainder. SymmetricReduction[f, {x1, \
\[Ellipsis], xn}, {s1, \[Ellipsis], sn}] gives the pair {p, q} with the \
elementary symmetric polynomials in p replaced by s1, \[Ellipsis], sn."}, 
 {"Symmetrize", "Symmetrize[tensor, sym] returns the symmetrization of tensor \
under the symmetry sym."}, {"SymmetrizedArray", "SymmetrizedArray[{pos1->val1\
, pos2->val2, \[Ellipsis]}, dims, sym] yields an array of dimensions dims \
whose entries are given by those in the rules posi->vali or through the \
symmetry sym. SymmetrizedArray[list] yields a symmetrized array version of \
list."}, {"SymmetrizedArrayRules", "SymmetrizedArrayRules[sa] returns a list \
of rules posi->vali of the symmetrized array sa. SymmetrizedArrayRules[a, \
sym] returns a list of rules posi->vali of the array a after being \
symmetrized with symmetry sym."}, {"SymmetrizedDependentComponents", "Symmetr\
izedDependentComponents[comp, sym] gives the list of components that are \
equivalent to the component comp by the symmetry sym."}, 
 {"SymmetrizedIndependentComponents", "SymmetrizedIndependentComponents[dims, \
sym] gives the list of independent components of an array of dimensions dims \
with the symmetry sym."}, {"SymmetrizedReplacePart", "SymmetrizedReplacePart[\
sa, {pos1->val1, pos2->val2, \[Ellipsis]}] replaces independent values of the \
symmetrized array sa as given by the rules posi->vali."}, 
 {"SynchronousInitialization", "SynchronousInitialization is an option for \
Manipulate, DynamicModule, and related functions that specifies whether or \
not to evaluate the expression given as the setting for Initialization \
synchronously."}, {"SynchronousUpdating", "SynchronousUpdating is an option \
for Manipulate, Dynamic, and related functions that specifies whether or not \
to evaluate their contents synchronously."}, {"Synonyms", "Synonyms[\"\\!\\(\
\\*word\"] returns the synonyms associated with the specified word."}, 
 {"SyntaxForm", "SyntaxForm is an option for operator-like box objects that \
specifies the precedence level to use when the box is used as an operator."}, 
 {"SyntaxInformation", "SyntaxInformation[f] gives information used to \
generate syntax coloring and other advisories when f[\[Ellipsis]] is entered \
as input."}, {"SyntaxLength", "SyntaxLength[\"\\!\\(\\*string\"] finds the \
number of characters starting at the beginning of a string that correspond to \
syntactically correct input for a single Wolfram Language expression."}, 
 {"SyntaxPacket", "SyntaxPacket[integer] is a WSTP packet where integer \
indicates the position at which a syntax error was detected in the input \
line."}, {"SyntaxQ", "SyntaxQ[\"\\!\\(\\*string\"] returns True if the string \
corresponds to syntactically correct input for a single Wolfram Language \
expression, and returns False otherwise. SyntaxQ[\"\\!\\(\\*string\", form] \
uses interpretation rules corresponding to the specified form."}, 
 {"SynthesizeMissingValues", "SynthesizeMissingValues[{example1, example2, \
\[Ellipsis]}] replaces missing values in each example by generated values. \
SynthesizeMissingValues[dist, data] uses the distribution dist to generate \
values."}, {"SystemCredential", "SystemCredential[\"\\!\\(\\*keyname\"] gives \
the expression stored under \"\\!\\(\\*keyname\" in secure storage."}, 
 {"SystemCredentialData", "SystemCredentialData[assoc, \"\\!\\(\\*pwfield\"] \
represents data intended for secure credential storage."}, 
 {"SystemCredentialKey", "SystemCredentialKey is an option of \
AuthenticationDialog that specifies the name for secure storage of the \
requested credentials."}, {"SystemCredentialKeys", "SystemCredentialKeys[\"\\\
!\\(\\*patt\"] gives the list of keys in secure storage that match patt."}, 
 {"SystemCredentialStoreObject", 
  "SystemCredentialStoreObject[assoc] represents a credential store."}, 
 {"SystemDialogInput", "SystemDialogInput[\"\\!\\(\\*type\"] brings up an \
interactive system dialog and returns the value chosen in the dialog. \
SystemDialogInput[\"\\!\\(\\*type\", init] uses init as the initial setting \
in the dialog."}, {"SystemInformation", "SystemInformation[] gives detailed \
information about the Wolfram System being run. \
SystemInformation[\"\\!\\(\\*comp\"] gives a list of rules with information \
about the component \"\\!\\(\\*comp\". SystemInformation[\"\\!\\(\\*comp\", \
\"\\!\\(\\*prop\"] gives the value of property \"\\!\\(\\*prop\" for \
component \"\\!\\(\\*comp\"."}, {"SystemInstall", "SystemInstall[pack] \
downloads and installs the software package pack on your machine."}, 
 {"SystemModel", "SystemModel[\"\\!\\(\\*model\"] gives a representation of \
the model \"\\!\\(\\*model\", usable as input to other functions. \
SystemModel[\"\\!\\(\\*model\"][\"\\!\\(\\*property\"] gives the specified \
\"\\!\\(\\*property\" for the model \"\\!\\(\\*model\"."}, 
 {"SystemModelExamples", "SystemModelExamples[] shows an interactive browser \
of system modeling example models. SystemModelExamples[\"Models\"] lists all \
example models. SystemModelExamples[\"Models\", patt] lists models with names \
matching string pattern patt."}, {"SystemModelLinearize", "SystemModelLineari\
ze[model] gives a linearized StateSpaceModel for model at an equilibrium. \
SystemModelLinearize[model, op] linearizes at the operating point op."}, 
 {"SystemModelParametricSimulate", "SystemModelParametricSimulate[model, v, \
{p1, p2, \[Ellipsis]}] simulates model for the variable v with parameters pi. \
SystemModelParametricSimulate[model, {v1, v2, \[Ellipsis]}, {p1, p2, \
\[Ellipsis]}] simulates model for multiple variables vi. \
SystemModelParametricSimulate[model, vars, tmax, \[Ellipsis]] simulates from \
0 to tmax. SystemModelParametricSimulate[model, vars, {tmin, tmax}, \
\[Ellipsis]] simulates from tmin to tmax."}, {"SystemModelPlot", "SystemModel\
Plot[sim] shows default plots from the SystemModelSimulationData object sim. \
SystemModelPlot[sim, \"id\"] shows model plot with identifier or name \
\"\\!\\(\\*id\". SystemModelPlot[sim, {\"\\!\\(\\*v_1\", \"\\!\\(\\*v_2\", \
\[Ellipsis]}] generates a plot of the variables vi in sim. \
SystemModelPlot[{sim1, sim2, \[Ellipsis]}, \[Ellipsis]] plots variables from \
several simulations. SystemModelPlot[model, \[Ellipsis]] plots from a new \
simulation of \"\\!\\(\\*model\"."}, {"SystemModelProgressReporting", "System\
ModelProgressReporting is an option for SystemModelSimulate and related \
functions that specifies how to report progress."}, 
 {"SystemModelReliability", "SystemModelReliability[model] retrieves the \
lifetime distribution for model. SystemModelReliability[model, \
\"Components\"] gives a list of components in ReliabilityDistribution or \
FailureDistribution. SystemModelReliability[model, \"ComponentRules\"] gives \
a list of translation rules for components."}, 
 {"SystemModelSimulate", "SystemModelSimulate[model] simulates model \
according to experiment settings. SystemModelSimulate[model, tmax] simulates \
from 0 to tmax. SystemModelSimulate[model, {tmin, tmax}] simulates from tmin \
to tmax. SystemModelSimulate[model, vars, {tmin, tmax}] stores only \
simulation data for the variables vars."}, {"SystemModelSimulateSensitivity", 
  "SystemModelSimulateSensitivity[model, {p1, p2, \[Ellipsis]}] simulates \
model and sensitivities to parameters pi following experiment settings. \
SystemModelSimulateSensitivity[model, tmax, {p1, p2, \[Ellipsis]}] simulates \
from 0 to tmax. SystemModelSimulateSensitivity[model, {tmin, tmax}, {p1, p2, \
\[Ellipsis]}] simulates from tmin to tmax. \
SystemModelSimulateSensitivity[model, vars, {tmin, tmax}, {p1, p2, \
\[Ellipsis]}] stores only simulation data for the variables vars."}, 
 {"SystemModelSimulationData", "SystemModelSimulationData[\[Ellipsis]] \
represents simulation data from functions such as SystemModelSimulate etc."}, 
 {"SystemModeler", "SystemModeler[] starts SystemModeler. \
SystemModeler[model] starts SystemModeler and opens the SystemModel model. \
SystemModeler[simulation] starts SystemModeler with SystemModelSimulationData \
simulation. SystemModeler[\[Ellipsis], \"\\!\\(\\*action\"] starts \
SystemModeler and completes \"\\!\\(\\*action\"."}, 
 {"SystemModels", "SystemModels[] returns a list of loaded system models. \
SystemModels[patt] returns the models matching the string pattern patt. \
SystemModels[patt, \"\\!\\(\\*spec\"] only returns specialized models of the \
kind \"\\!\\(\\*spec\"."}, {"SystemOpen", "SystemOpen[\"\\!\\(\\*target\"] \
opens the specified file, URL, or other target with the associated program on \
your computer system."}, {"SystemOptions", "SystemOptions[\"\\!\\(\\*name\"] \
gives the current setting for the internal system option with the specified \
name. SystemOptions[] gives the current settings for all settable internal \
system options."}, {"SystemProcessData", "SystemProcessData[] gives a dataset \
of information about processes that you are running on your computer system. \
SystemProcessData[All] gives information about all processes running on your \
computer system. SystemProcessData[patt] gives information about processes \
whose names or paths contain the string pattern patt. \
SystemProcessData[prop->val] gives information about processes for which \
property prop has value val. SystemProcessData[{prop1->val1, \[Ellipsis]}] \
gives information about processes for which property propi has value vali."}, 
 {"SystemProcesses", "SystemProcesses[] gives a list of processes that you \
are running on your computer system. SystemProcesses[All] gives a list of all \
processes that are running on your computer system. SystemProcesses[patt] \
gives a list of all processes whose names match the string pattern patt. \
SystemProcesses[prop->val] gives a list of all processes for which property \
prop has value val. SystemProcesses[{prop1->val1, \[Ellipsis]}] gives a list \
of all processes for which property propi has value vali."}, 
 {"SystemsConnectionsModel", "SystemsConnectionsModel[{sys1, sys2, \
\[Ellipsis]}, conxs, ins, outs] gives a model with inputs ins and outputs \
outs obtained by connecting the systems models sysi using connections conxs."}\
, {"SystemsModelControllerData", "SystemsModelControllerData[\[Ellipsis]] \
represents controller data generated by functions LQGRegulator, PIDTune, \
etc."}, {"SystemsModelDelay", "SystemsModelDelay[\[Delta]] represents a time \
delay of \[Delta] in a StateSpaceModel or TransferFunctionModel."}, 
 {"SystemsModelDelayApproximate", "SystemsModelDelayApproximate[sys, ord] \
gives a delay-free system by using approximations of order ord of the time \
delays in system sys."}, {"SystemsModelDelete", "SystemsModelDelete[sys, \
{in1, \[Ellipsis]}] deletes the subsystem of the systems model sys associated \
with inputs at position ini. SystemsModelDelete[sys, {in1, \[Ellipsis]}, \
{out1, \[Ellipsis]}] also deletes the subsystem associated with outputs at \
positions outi. SystemsModelDelete[sys, {in1, \[Ellipsis]}, {out1, \
\[Ellipsis]}, {s1, s2, \[Ellipsis]}] deletes the subsystem of the state-space \
model sys associated with inputs, outputs, and states at ini, outi, and si, \
respectively."}, {"SystemsModelDimensions", "SystemsModelDimensions[sys] \
gives the number of inputs and outputs of the systems model sys."}, 
 {"SystemsModelExtract", "SystemsModelExtract[sys, {in1, \[Ellipsis]}] \
extracts the subsystem of the systems model sys associated with inputs at \
position ini. SystemsModelExtract[sys, {in1, \[Ellipsis]}, {out1, \
\[Ellipsis]}] extracts the subsystem associated with inputs and outputs at \
positions ini and outi, respectively. SystemsModelExtract[sys, {in1, \
\[Ellipsis]}, {out1, \[Ellipsis]}, {s1, \[Ellipsis]}] extracts the subsystem \
of the state-space model sys associated with inputs, outputs, and states at \
ini, outi, and si, respectively."}, {"SystemsModelFeedbackConnect", "SystemsM\
odelFeedbackConnect[sys] connects the outputs from sys to the inputs with \
negative feedback. SystemsModelFeedbackConnect[sys, {con1, \[Ellipsis]}] only \
feedback connect the outputs and inputs in coni. \
SystemsModelFeedbackConnect[sys1, sys2] connects the outputs of sys1 to sys2 \
and the outputs of sys2 to the inputs of sys1 in feedback. \
SystemsModelFeedbackConnect[sys1, sys2, {out1, \[Ellipsis]}, {{in1, ftype1}, \
\[Ellipsis]}] connects output outi of sys1 to the i^th input of sys2 and the \
j^th output of sys2 to input inj of sys1 with feedback type ftypej."}, 
 {"SystemsModelLabels", "SystemsModelLabels is an option to StateSpaceModel \
etc. that specifies labels of variables."}, {"SystemsModelLinearity", "System\
sModelLinearity[sys] gives the linearity of the systems model sys. \
SystemsModelLinearity[{sys, {in1, \[Ellipsis]}, {out1, \[Ellipsis]}, {s1, \
\[Ellipsis]}] only considers the subsystem associated with inputs ini, \
outputs outj, and states sk."}, {"SystemsModelMerge", "SystemsModelMerge[{sys\
1, sys2, \[Ellipsis]}] merges the systems models sysj."}, 
 {"SystemsModelOrder", 
  "SystemsModelOrder[sys] gives the order of the state-space model sys."}, 
 {"SystemsModelParallelConnect", "SystemsModelParallelConnect[sys1, sys2] \
connects the systems models sys1 and sys2 in parallel. \
SystemsModelParallelConnect[sys1, sys2, {{in11, in21}, \[Ellipsis]}, {{out11, \
out21}, \[Ellipsis]}] connects the inputs in1i to inputs in2i and sums the \
outputs out1k and outputs out2k."}, {"SystemsModelSeriesConnect", "SystemsMod\
elSeriesConnect[sys1, sys2] connects systems models sys1 and sys2 in series. \
SystemsModelSeriesConnect[sys1, sys2, {{out11, in21}, \[Ellipsis]}] connects \
outputs out1i of sys1 to inputs in2i of sys2."}, 
 {"SystemsModelStateFeedbackConnect", "SystemsModelStateFeedbackConnect[sys, \
con] connects the states of the systems model sys to the controller con and \
the outputs of con to the inputs of sys in feedback. \
SystemsModelStateFeedbackConnect[sys, con, {s1, \[Ellipsis]}, {{in1, ftype1}, \
\[Ellipsis]}] connects state si of sys to the i^th input of con and the j^th \
output of con to input inj of sys with feedback type ftypej "}, 
 {"SystemsModelVectorRelativeOrders", "SystemsModelVectorRelativeOrders[sys] \
gives the vector-relative orders of the systems model sys."}, 
 {"TTest", "TTest[data] tests whether the mean of data is zero. TTest[{data1, \
data2}] tests whether the means of data1 and data2 are equal. TTest[dspec, \
\[Mu]0] tests the mean against \[Mu]0. TTest[dspec, \[Mu]0, \
\"\\!\\(\\*property\"] returns the value of \"\\!\\(\\*property\"."}, 
 {"TabView", "TabView[{lbl1->expr1, lbl2->expr2, \[Ellipsis]}] represents an \
object in which clicking the tab with label lbli displays expri. \
TabView[{lbl1->expr1, lbl2->expr2, \[Ellipsis]}, i] makes the i^th tab be the \
one currently selected. TabView[{{v1, lbl1->expr1}, {v2, lbl2->expr2}, \
\[Ellipsis]}, v] associates values vi with successive tabs, and makes the tab \
with value v be the one currently selected. TabView[{expr1, expr2, \
\[Ellipsis]}] takes the tab labels to be successive integers."}, 
 {"Table", "Table[expr, n] generates a list of n copies of expr. Table[expr, \
{i, imax}] generates a list of the values of expr when i runs from 1 to imax. \
Table[expr, {i, imin, imax}] starts with i = imin. Table[expr, {i, imin, \
imax, di}] uses steps di. Table[expr, {i, {i1, i2, \[Ellipsis]}}] uses the \
successive values i1, i2, \[Ellipsis]. Table[expr, {i, imin, imax}, {j, jmin, \
jmax}, \[Ellipsis]] gives a nested list. The list associated with i is \
outermost.25318 "}, {"TableAlignments", "TableAlignments is an option for \
TableForm and MatrixForm which specifies how entries in each dimension should \
be aligned."}, {"TableDepth", "TableDepth is an option for TableForm and \
MatrixForm that specifies the maximum number of levels to be printed in \
tabular or matrix format."}, {"TableDirections", "TableDirections is an \
option for TableForm and MatrixForm which specifies whether successive \
dimensions should be arranged as rows or columns."}, 
 {"TableForm", "TableForm[list] prints with the elements of list arranged in \
an array of rectangular cells."}, {"TableHeadings", "TableHeadings is an \
option for TableForm and MatrixForm that gives the labels to be printed for \
entries in each dimension of a table or matrix."}, 
 {"TableSpacing", "TableSpacing is an option for TableForm and MatrixForm \
that specifies how many spaces should be left between each successive row or \
column."}, {"TableView", "TableView[{{expr11, expr12, \[Ellipsis]}, {expr21, \
expr22, \[Ellipsis]}, \[Ellipsis]}] displays as a spreadsheet-like table view \
for editing and viewing exprij. TableView[Dynamic[x]] takes the contents of \
the table view to be the dynamically updated current value of x, with the \
value of x being reset as the table view is interactively edited. \
TableView[table, type] uses the specified type by default to represent newly \
edited or created entries in the table view. TableView[] displays an empty \
table view."}, {"TagBox", "TagBox[boxes, tag] is a low-level box construct \
that displays as boxes but maintains tag to guide the interpretation of boxes \
on input."}, {"TagBoxOptions", 
  "TagBoxOptions is an option that specifies settings for TagBox objects."}, 
 {"TagSet", "f/:lhs = rhs assigns rhs to be the value of lhs, and associates \
the assignment with the symbol f."}, {"TagSetDelayed", "f/:lhs:=rhs assigns \
rhs to be the delayed value of lhs, and associates the assignment with the \
symbol f."}, {"TagUnset", 
  "f/:lhs=. removes any rules defined for lhs, associated with the symbol f."}\
, {"TaggingRules", "TaggingRules is an option for selections that specifies a \
list of strings to be associated with a selection."}, 
 {"Take", "Take[list, n] gives the first n elements of list. Take[list, - n] \
gives the last n elements of list. Take[list, {m, n}] gives elements m \
through n of list. Take[list, seq1, seq2, \[Ellipsis]] gives a nested list in \
which elements specified by seqi are taken at level i in list."}, 
 {"TakeDrop", "TakeDrop[list, n] gives the pair {list1, list2}, where list1 \
contains the first n elements of list and list2 contains the rest. \
TakeDrop[list, seq] gives the pair {Take[list, seq], Drop[list, seq]}."}, 
 {"TakeLargest", "TakeLargest[list, n] gives the n numerically largest \
elements in list, sorted in descending order. TakeLargest[list->prop, n] \
gives the property prop for the n largest elements in list. TakeLargest[n] \
represents an operator form of TakeLargest that can be applied to an \
expression."}, {"TakeLargestBy", "TakeLargestBy[list, f, n] gives the n \
elements ei in list for which f[ei] is largest, sorted in descending order. \
TakeLargestBy[list->prop, f, n] gives the property prop for the n elements in \
list for which f[ei] is largest. TakeLargestBy[f, n] represents an operator \
form of TakeLargestBy that can be applied to an expression."}, 
 {"TakeList", "TakeList[list, {n1, n2, \[Ellipsis]}] gives the list of \
results obtained by successively taking ni elements from list. TakeList[list, \
{seq1, seq2, \[Ellipsis]}] successively uses the sequence specifications \
seqi. TakeList[list, seqs1, seqs2, \[Ellipsis]] gives a nested list in which \
elements specified by the lists seqsi are taken at level i in list."}, 
 {"TakeSmallest", "TakeSmallest[list, n] gives the n numerically smallest \
elements in list, sorted in ascending order. TakeSmallest[list->prop, n] \
gives the property prop for the n smallest elements in list. TakeSmallest[n] \
represents an operator form of TakeSmallest that can be applied to an \
expression."}, {"TakeSmallestBy", "TakeSmallestBy[list, f, n] gives the n \
elements ei in list for which f[ei] is smallest, sorted in ascending order. \
TakeSmallestBy[list->prop, f, n] gives the property prop for the n elements \
in list for which f[ei] is smallest. TakeSmallestBy[f, n] represents an \
operator form of TakeSmallestBy that can be applied to an expression."}, 
 {"TakeWhile", "TakeWhile[list, crit] gives elements ei from the beginning of \
list, continuing so long as crit[ei] is True."}, 
 {"Tally", "Tally[list] tallies the elements in list, listing all distinct \
elements together with their multiplicities. Tally[list, test] uses test to \
determine whether pairs of elements should be considered equivalent, and \
gives a list of the first representatives of each equivalence class, together \
with their multiplicities."}, {"Tan", "Tan[z] gives the tangent of z."}, 
 {"Tanh", "Tanh[z] gives the hyperbolic tangent of z."}, 
 {"TargetDevice", "TargetDevice is an option for certain functions that \
specifies whether CPU or GPU computation should be attempted."}, 
 {"TargetFunctions", "TargetFunctions is an option for functions such as \
ComplexExpand and FindDistribution that specifies what functions to attempt \
to generate in the output."}, {"TargetSystem", "TargetSystem is an option for \
FunctionCompile and related functions that specifies machine architectures to \
be targeted."}, {"TargetUnits", "TargetUnits is an option used to specify the \
desired output units for visualization functions operating on Quantity \
expressions."}, {"TaskAbort", "TaskAbort[task] generates an interrupt to \
abort the current execution of a task."}, {"TaskExecute", "TaskExecute[task] \
immediately executes an instance of the specified task, independently of any \
schedule given."}, {"TaskObject", 
  "TaskObject[spec] is an object that represents a background task."}, 
 {"TaskRemove", 
  "TaskRemove[task] terminates and removes the specified task."}, 
 {"TaskResume", "TaskResume[task] resumes execution of the specified task."}, 
 {"TaskSuspend", 
  "TaskSuspend[task] suspends the execution of the specified task."}, 
 {"TaskWait", 
  "TaskWait[task] waits for the specified task to be completely finished."}, 
 {"Tasks", "Tasks[type] gives a list of TaskObject expressions representing \
currently submitted tasks of given type."}, {"TautologyQ", "TautologyQ[bf] \
gives True if all combinations of values of variables make the Boolean \
function bf yield True. TautologyQ[expr, {a1, a2, \[Ellipsis]}] gives True if \
all combinations of values of the ai make the Boolean expression expr yield \
True."}, {"TeXForm", "TeXForm[expr] prints as a TeX version of expr."}, 
 {"TelegraphProcess", 
  "TelegraphProcess[\[Mu]] represents a telegraph process with rate \[Mu]."}, 
 {"TemplateApply", "TemplateApply[template] applies a template, evaluating \
all template elements it contains. TemplateApply[template, args] applies a \
template, using args to fill slots in the template."}, 
 {"TemplateBox", "TemplateBox[{box1, box2, \[Ellipsis]}, tag] is a low-level \
box structure that parameterizes the display and evaluation of the boxes \
boxi. TemplateBox[\[LeftAssociation]\"\\!\\(\\*key_1\"->expr1, \
\"\\!\\(\\*key_2\"->expr2, \[Ellipsis]\[RightAssociation], tag] allows the \
use of arbitrary expressions that may or may not be boxes."}, 
 {"TemplateBoxOptions", "TemplateBoxOptions is an option that specifies \
settings for TemplateBox objects."}, {"TemplateExpression", "TemplateExpressi\
on[expr] represents an expression held until a template is applied, and then \
evaluated."}, {"TemplateIf", "TemplateIf[condition, tclause] represents an \
element of a template object that inserts tclause if the condition evaluates \
to True. TemplateIf[condition, tclause, fclause] inserts fclause if the \
condition does not evaluate to True."}, {"TemplateObject", "TemplateObject[ex\
pr] represents a template object to be applied using functions like \
TemplateApply. TemplateObject[form, args] yields a TemplateObject with \
arguments, suitable for cloud deployment or other evaluation."}, 
 {"TemplateSequence", "TemplateSequence[body, list] represents an element of \
a template object that yields a sequence consisting of body applied to each \
element in list."}, {"TemplateSlot", "TemplateSlot[n] represents a template \
slot to be filled from the n^th argument when the template is applied. \
TemplateSlot[name] represents a template slot to be filled from an element \
with key name in an association appearing in the first argument."}, 
 {"TemplateWith", "TemplateWith[\"\\!\\(\\*name\"->value, expr] represents an \
element of a template object that evaluates expr after replacing \
TemplateSlot[\"\\!\\(\\*name\"] with value. \
TemplateWith[{\"\\!\\(\\*name_1\"->value1, \"\\!\\(\\*name_2\"->value2, \
\[Ellipsis]}, expr] evaluates expr with a list of key-value pairs."}, 
 {"TemporalData", "TemporalData[{v1, v2, \[Ellipsis]}, tspec] represents \
temporal data with values vi at times specified by tspec. TemporalData[{{v11, \
v12, \[Ellipsis]}, {v21, v22, \[Ellipsis]}, \[Ellipsis]}, tspec] represents a \
temporal data collection with values vij at times specified by tspec. \
TemporalData[{{t1, v1}, {t2, v2}\[Ellipsis]}] represents temporal data \
specified by time-value pairs {ti, vi}. TemporalData[{{{t11, v11}, {t12, \
v12}\[Ellipsis]}, {{t21, v21}, {t22, v22}, \[Ellipsis]}, \[Ellipsis]}] \
represents a temporal data collection given as lists of time-value pairs \
{tij, vij}."}, {"TemporalRegularity", "TemporalRegularity is an option for \
TemporalData, TimeSeries, and EventSeries that controls whether the paths are \
assumed to be uniformly spaced in time."}, {"Temporary", "Temporary is an \
attribute assigned to symbols which are created as local variables by \
Module."}, {"TensorContract", "TensorContract[tensor, {{s11, s12}, {s21, \
s22}, \[Ellipsis]}] yields the contraction of tensor in the pairs {si1, si2} \
of slots."}, {"TensorDimensions", 
  "TensorDimensions[tensor] gives the list of dimensions of tensor."}, 
 {"TensorExpand", "TensorExpand[texpr] expands out tensor-related products in \
the symbolic tensor expression texpr."}, {"TensorProduct", "TensorProduct[ten\
sor1, tensor2, \[Ellipsis]] represents the tensor product of the tensori."}, 
 {"TensorRank", "TensorRank[tensor] gives the rank of tensor."}, 
 {"TensorReduce", "TensorReduce[texpr] attempts to return a canonical form \
for the symbolic tensor expression texpr."}, {"TensorSymmetry", "TensorSymmet\
ry[tensor] gives the symmetry of tensor under permutations of its slots. \
TensorSymmetry[tensor, slots] gives the symmetry under permutation of the \
specified list of slots."}, {"TensorTranspose", "TensorTranspose[tensor, \
perm] represents the tensor obtained by transposing the slots of tensor as \
given by the permutation perm."}, {"TensorWedge", "TensorWedge[tensor1, \
tensor2, \[Ellipsis]] represents the antisymmetrized tensor product of the \
tensori."}, {"TestID", "TestID is an option to VerificationTest that \
specifies a string used as an identifier for the test."}, 
 {"TestReport", "TestReport[{test1, test2, \[Ellipsis]}] gives a report of \
the results of the verification tests testi. TestReport[\"\\!\\(\\*file\"] \
runs tests from a file, returning an analysis of the completed test run."}, 
 {"TestReportObject", "TestReportObject[\[Ellipsis]] gives an object that \
represents the results of TestReport."}, {"TestResultObject", "TestResultObje\
ct[\[Ellipsis]] gives an object that represents the results of a \
VerificationTest."}, {"Tetrahedron", "Tetrahedron[] represents a regular \
tetrahedron centered at the origin with unit edge length. Tetrahedron[l] \
represents a tetrahedron with edge length l. Tetrahedron[{\[Theta], \[Phi]}, \
\[Ellipsis]] represents a tetrahedron rotated by an angle \[Theta] with \
respect to the z axis and angle \[Phi] with respect to the y axis. \
Tetrahedron[{x, y, z}, \[Ellipsis]] represents a tetrahedron centered at {x, \
y, z}. Tetrahedron[{p1, p2, p3, p4}] represents a general filled tetrahedron \
with corners p1, p2, p3 and p4. Tetrahedron[{{p1, 1, p1, 2, p1, 3, p1, 4}, \
{p2, 1, \[Ellipsis]}, \[Ellipsis]}] represents a collection of tetrahedra."}, 
 {"Text", "Text[expr] displays with expr in plain text format. Text[expr, \
coords] is a graphics primitive that displays the textual form of expr \
centered at the point specified by coords."}, {"TextAlignment", "TextAlignmen\
t is an option for Cell, Style and related constructs which specifies how \
successive lines of text should be aligned."}, 
 {"TextCases", "TextCases[text, form] gives a list of all cases of text \
identified as being of type form that appear in text. TextCases[text, {form1, \
form2, \[Ellipsis]}] gives an association of results for all the types formi. \
TextCases[text, formspec->prop] gives the specified property for each result \
found. TextCases[text, formspec->{prop1, prop2, \[Ellipsis]}] gives a list of \
properties for each result found. TextCases[text, spec, n] gives the first n \
cases found."}, {"TextCell", "TextCell[\"\\!\\(\\*string\"] gives a text cell \
that can appear in a Wolfram System notebook. TextCell[\"\\!\\(\\*string\", \
\"\\!\\(\\*style\"] gives a text cell with the specified style. \
TextCell[\"\\!\\(\\*string\", \"\\!\\(\\*style_1\", \"\\!\\(\\*style_2\", \
\[Ellipsis]] gives a text cell with multiple styles applied to it."}, 
 {"TextClipboardType", "TextClipboardType is an option for cells that \
specifies how Edit \[FilledRightTriangle] Copy treats a cell when converting \
it for the system's textual clipboard."}, {"TextContents", "TextContents[text\
] gives a dataset of information about entities, dates, quantities and other \
content-related elements found in text. TextContents[text, form] searches for \
cases of the type form. TextContents[text, {form1, form2, \[Ellipsis]}] \
searches for cases of types form1, form2, \[Ellipsis] TextContents[text, \
forms, props] includes the property props for each object in the dataset \
produced."}, {"TextData", "TextData[exprs] is a low-level representation of \
the contents of a textual cell."}, {"TextElement", "TextElement[text, props] \
represents an element of text with the specified properties. \
TextElement[{elem1, elem2, \[Ellipsis]}, props] represents text formed from a \
sequence of elements. TextElement[elems] represents text where no properties \
are specified."}, {"TextGrid", "TextGrid[{{expr11, expr12, \[Ellipsis]}, \
{expr21, expr22, \[Ellipsis]}, \[Ellipsis]}] is an object that formats exprij \
textually and arranged in a two-dimensional grid."}, 
 {"TextJustification", "TextJustification is an option for Cell and Inset \
which specifies how much lines of text can be stretched in order to make them \
be the same length."}, {"TextPacket", "TextPacket[string] is a WSTP packet \
containing string, the text output from the Wolfram System as produced by \
functions such as Print."}, {"TextPosition", "TextPosition[text, form] gives \
a list of the starting and ending positions at which instances of form occur \
in text. TextPosition[text, {form1, form2, \[Ellipsis]}] gives an association \
of results for all the types formi. TextPosition[text, formspec, n] gives the \
positions of the first n cases found."}, {"TextRecognize", "TextRecognize[ima\
ge] recognizes text in image and returns it as a string. TextRecognize[image, \
level] returns a list of strings at the specified structural level. \
TextRecognize[image, level, prop] returns prop for text at the given level."}\
, {"TextSearch", "TextSearch[source, form] searches for files referenced by \
source that contain text matching form. TextSearch[source, form, \
\"\\!\\(\\*prop\"] returns the property prop for each result."}, 
 {"TextSearchReport", "TextSearchReport[source, form] gives a structured \
report of files referenced by source that contain text matching form."}, 
 {"TextSentences", "TextSentences[\"\\!\\(\\*string\"] gives a list of the \
runs of characters identified as sentences in string. \
TextSentences[\"\\!\\(\\*string\", n] gives the first n sentences in string."}\
, {"TextString", 
  "TextString[expr] gives a human-readable string representation of expr."}, 
 {"TextStructure", "TextStructure[\"\\!\\(\\*text\"] generates a nested \
collection of TextElement objects representing the grammatical structure of \
natural language text. TextStructure[\"\\!\\(\\*text\", form] generates a \
representation of the type specified by form of the grammatical structure of \
text."}, {"TextTranslation", "TextTranslation[\"\\!\\(\\*text\"] translates \
text into the current default language. TextTranslation[\"\\!\\(\\*text\", \
lang] translates text into the language specified by lang. \
TextTranslation[\"\\!\\(\\*text\", lang1->lang2] translates text from \
language lang1 to lang2."}, {"TextWords", "TextWords[\"\\!\\(\\*string\"] \
gives a list of the runs of characters identified as words in string. \
TextWords[\"\\!\\(\\*string\", n] gives the first n words in string."}, 
 {"Texture", "Texture[obj] is a graphics directive that specifies that obj \
should be used as a texture on faces of polygons and other filled graphics \
objects."}, {"TextureCoordinateFunction", "TextureCoordinateFunction is an \
option to Plot3D and similar functions that specifies a function that \
computes texture coordinates."}, {"TextureCoordinateScaling", "TextureCoordin\
ateScaling is an option to Plot3D and similar functions that specifies \
whether arguments supplied to a texture coordinate function should be scaled \
to lie between 0 and 1."}, {"Therefore", 
  "Therefore[x, y] displays as x\[Therefore]y."}, 
 {"ThermodynamicData", "ThermodynamicData[\"\\!\\(\\*name\", \
\"\\!\\(\\*property\"] gives the value of the specific property for the \
substance \"\\!\\(\\*name\". ThermodynamicData[\"\\!\\(\\*name\", \
\"\\!\\(\\*property\", {parameter1->quantity1, parameter2->quantity}] gives \
the value of the specific property for the substance \"\\!\\(\\*name\" at the \
specified parameters."}, {"ThermometerGauge", "ThermometerGauge[value] draws \
a thermometer showing value in a range of 0 to 1. ThermometerGauge[value, \
{min, max}] draws a thermometer showing value in a range of min to max. \
ThermometerGauge[Dynamic[value], \[Ellipsis]] allows value to be set \
interactively using the thermometer."}, {"Thick", "Thick is a graphics \
directive that specifies that lines which follow should be drawn thick."}, 
 {"Thickness", "Thickness[r] is a graphics directive which specifies that \
lines which follow are to be drawn with thickness r. The thickness r is given \
as a fraction of the horizontal plot range."}, 
 {"Thin", "Thin is a graphics directive that specifies that lines which \
follow should be drawn thin."}, {"Thinning", "Thinning[image] finds the \
skeletons of foreground regions in image by applying morphological thinning \
until convergence. Thinning[image, n] performs n iterations of morphological \
thinning. Thinning[image, n, t] treats values above t as foreground."}, 
 {"ThomasPointProcess", "ThomasPointProcess[\[Mu], \[Lambda], \[Sigma], d] \
represents a Thomas cluster point process with density \[Mu], cluster mean \
\[Lambda] and scale parameter \[Sigma] in \[DoubleStruckCapitalR]^d."}, 
 {"ThompsonGroupTh", 
  "ThompsonGroupTh[] represents the sporadic simple Thompson group Th."}, 
 {"Thread", "Thread[f[args]] \"threads\" f over any lists that appear in \
args. Thread[f[args], h] threads f over any objects with head h that appear \
in args. Thread[f[args], h, n] threads f over objects with head h that appear \
in the first n args."}, {"ThreadingLayer", "ThreadingLayer[f] represents a \
net layer that takes several input arrays and applies a function f to \
corresponding array elements. ThreadingLayer[f, bspec] allows array shapes to \
be conformed according to broadcasting specification bspec."}, 
 {"ThreeJSymbol", "ThreeJSymbol[{j1, m1}, {j2, m2}, {j3, m3}] gives the \
values of the Wigner 3-j symbol."}, {"Threshold", "Threshold[data] thresholds \
data by replacing values close to zero by zero. Threshold[data, tspec] \
thresholds data using threshold specification tspec. Threshold[image, \
\[Ellipsis]] thresholds an image. Threshold[sound, \[Ellipsis]] thresholds a \
sound object."}, {"Through", "Through[p[f1, f2][x]] gives p[f1[x], f2[x]]. \
Through[expr, h] performs the transformation wherever h occurs in the head of \
expr."}, {"Throw", "Throw[value] stops evaluation and returns value as the \
value of the nearest enclosing Catch. Throw[value, tag] is caught only by \
Catch[expr, form], where tag matches form. Throw[value, tag, f] returns \
f[value, tag] as the top-level value if no appropriate Catch is found."}, 
 {"ThueMorse", 
  "ThueMorse[n] gives the n^th term in the Thue-Morse sequence."}, 
 {"Thumbnail", "Thumbnail[image] gives a thumbnail version of an image. \
Thumbnail[file] gives a thumbnail of an image stored in a file. \
Thumbnail[url] gives a thumbnail of an image stored at a URL. Thumbnail[spec, \
size] gives a thumbnail with the specified maximum pixel size."}, 
 {"Thursday", "Thursday is a day of the week."}, 
 {"TickDirection", "TickDirection is an option for AxisObject that specifies \
where the ticks are drawn relative to the axis."}, 
 {"TickLabelOrientation", "TickLabelOrientation is an option for AxisObject \
that specifies how the tick labels should be oriented relative to the axis."}\
, {"TickLabelPositioning", "TickLabelPositioning is an option for AxisObject \
that specifies how the tick labels should be positioned relative to the \
ticks."}, {"TickLabels", "TickLabels is an option for AxisObject that \
specifies how the tick marks should be labeled."}, 
 {"TickLengths", "TickLengths is an option for AxisObject that specifies the \
lengths of the tick marks."}, {"TickPositions", "TickPositions is an option \
for AxisObject that specifies where the tick marks should be positioned."}, 
 {"Ticks", "Ticks is an option for graphics functions that specifies tick \
marks for axes."}, {"TicksStyle", "TicksStyle is an option for graphics \
functions which specifies how ticks should be rendered."}, 
 {"TideData", "TideData[spec] returns the tidal properties for a location or \
a set of tidal parameters. TideData[spec, prop] returns the specified \
property for the location or tidal parameters indicated. TideData[spec, prop, \
datespec] returns the value of a specified property for a date or set of \
dates."}, {"Tilde", 
  "Tilde[x, y, \[Ellipsis]] displays as x\[Tilde]y\[Tilde]\[Ellipsis]."}, 
 {"TildeEqual", "TildeEqual[x, y, \[Ellipsis]] displays as \
x\[TildeEqual]y\[TildeEqual]\[Ellipsis]."}, {"TildeFullEqual", "TildeFullEqua\
l[x, y, \[Ellipsis]] displays as \
x\[TildeFullEqual]y\[TildeFullEqual]\[Ellipsis]."}, 
 {"TildeTilde", "TildeTilde[x, y, \[Ellipsis]] displays as \
x\[TildeTilde]y\[TildeTilde]\[Ellipsis]."}, {"TimeConstrained", "TimeConstrai\
ned[expr, t] evaluates expr, stopping after t seconds. TimeConstrained[expr, \
t, failexpr] returns failexpr if the time constraint is not met."}, 
 {"TimeConstraint", "TimeConstraint is an option for various functions that \
specifies the maximum time to spend doing a particular operation."}, 
 {"TimeDirection", "TimeDirection is an option for Sunrise, Sunset, and \
related functions that specifies whether the next or last event should be \
returned."}, {"TimeFormat", "TimeFormat is an option that determines the time \
formatting that is used when formatting a TimeObject using TextString."}, 
 {"TimeGoal", "TimeGoal is an option for various functions that specifies how \
long to spend doing a particular operation."}, 
 {"TimeObject", "TimeObject[] represents the current time. TimeObject[{h, m, \
s}] represents a time object of standard normalized form. TimeObject[date] \
gives the time component of the specified date representation. \
TimeObject[rtime, gran] gives the time object of granularity gran that \
includes the reference time rtime."}, {"TimeObjectQ", "TimeObjectQ[expr] \
gives True if expr is a TimeObject with valid arguments, and False \
otherwise."}, {"TimeRemaining", "TimeRemaining[] gives the number of seconds \
remaining until the earliest enclosing TimeConstrained will request the \
current computation to stop."}, {"TimeSeries", "TimeSeries[{{t1, v1}, {t2, \
v2}\[Ellipsis]}] represents a time series specified by time-value pairs {ti, \
vi}. TimeSeries[{v1, v2, \[Ellipsis]}, tspec] represents a time series with \
values vi at times specified by tspec."}, {"TimeSeriesAggregate", "TimeSeries\
Aggregate[tseries, dt] computes the mean value of tseries over \
non-overlapping windows of width dt. TimeSeriesAggregate[tseries, dt, f] \
applies the function f to the values of tseries in non-overlapping windows of \
width dt."}, {"TimeSeriesForecast", "TimeSeriesForecast[tproc, data, k] gives \
the k -step-ahead forecast beyond data according to the time series process \
tproc. TimeSeriesForecast[tsmod, k] gives the k -step-ahead forecast for \
TimeSeriesModel tsmod."}, {"TimeSeriesInsert", "TimeSeriesInsert[tseries, {t, \
v}] inserts a value v at time t in the time series tseries. \
TimeSeriesInsert[tseries1, tseries2] inserts the time-value pairs from \
tseries2 into tseries1."}, {"TimeSeriesInvertibility", "TimeSeriesInvertibili\
ty[tproc] gives conditions for the time series process tproc to be \
invertible."}, {"TimeSeriesMap", 
  "TimeSeriesMap[f, tseries] applies f to the values in tseries."}, 
 {"TimeSeriesMapThread", "TimeSeriesMapThread[f, tseries] gives {{t1, f[t1, \
x1]}, {t2, f[t2, x2]}, \[Ellipsis]} for the time series tseries. \
TimeSeriesMapThread[f, tseries, {{a1, a2, \[Ellipsis]}, {b1, b2, \
\[Ellipsis]}, \[Ellipsis]}] gives {{t1, f[t1, x1, a1, b1, \[Ellipsis]]}, {t2, \
f[t2, x2, a2, b2, \[Ellipsis]]}, \[Ellipsis]} for the time series tseries."}, 
 {"TimeSeriesModel", "TimeSeriesModel[\[Ellipsis]] represents the symbolic \
time series model obtained from TimeSeriesModelFit."}, 
 {"TimeSeriesModelFit", "TimeSeriesModelFit[data] constructs a time series \
model for data from an automatically selected model family. \
TimeSeriesModelFit[data, mspec] constructs a time series model for data from \
a model family specified by mspec."}, {"TimeSeriesResample", "TimeSeriesResam\
ple[tseries] uniformly resamples tseries according to its minimum time \
increment. TimeSeriesResample[tseries, rspec] resamples tseries according to \
rspec."}, {"TimeSeriesRescale", "TimeSeriesRescale[tseries, {tmin, tmax}] \
rescales the times in time series tseries to run from tmin to tmax. \
TimeSeriesRescale[tseries, {tmin, tmax, tu}] rescales times in units of tu \
including \"Month\", \"Quarter\", or \"Year\"."}, 
 {"TimeSeriesShift", "TimeSeriesShift[tseries, shift] shifts the time series \
tseries to the left or right according to shift."}, 
 {"TimeSeriesThread", "TimeSeriesThread[f, {tseries1, tseries2, \[Ellipsis]}] \
combines the tseriesi using the function f."}, 
 {"TimeSeriesWindow", "TimeSeriesWindow[tseries, {tmin, tmax}] gives the \
elements of the time series tseries that fall between tmin and tmax. \
TimeSeriesWindow[tseries, windowspec] gives the elements of the time series \
tseries that satisfy the window specification windowspec."}, 
 {"TimeUsed", "TimeUsed[] gives the total number of seconds of CPU time used \
so far in the current Wolfram System session."}, 
 {"TimeValue", "TimeValue[s, i, t] calculates the time value of a security s \
at time t for an interest specified by i."}, {"TimeZone", "TimeZone is an \
option for DateObject, DateString, and related functions that specifies the \
time zone to use for dates and times."}, {"TimeZoneConvert", "TimeZoneConvert\
[time, timezone] converts the date or time object time to the specified time \
zone timezone. TimeZoneConvert[time] converts to the current $TimeZone value. \
TimeZoneConvert[{time1, \[Ellipsis], timen}, timezone] converts time1 through \
timen to the specified timezone."}, {"TimeZoneOffset", "TimeZoneOffset[tz] \
gives the numeric offset between the time zone tz and GMT on the current \
date. TimeZoneOffset[loc] gives the numeric offset between the time zone for \
the location loc and GMT. TimeZoneOffset[tz, base] gives the numeric offset \
between tz and the specified base time zone. TimeZoneOffset[tz, date] gets a \
list of possible time zone offsets for tz at the given date list. \
TimeZoneOffset[tz, base, date] gives the numeric offset between tz and base \
on the specified date."}, {"TimelinePlot", "TimelinePlot[{date1, date2, \
\[Ellipsis]}] makes a timeline plot with dates date1, date2, \[Ellipsis]. \
TimelinePlot[{event1, event2, \[Ellipsis]}] makes a timeline plot with events \
event1, event2, \[Ellipsis]. TimelinePlot[{data1, data2, \[Ellipsis]}] makes \
a timeline plot from multiple event datasets datai."}, 
 {"Times", 
  "x * y * z, x\[Times]y\[Times]z, or x y z represents a product of terms."}, 
 {"TimesBy", "x*=c multiplies x by c and returns the new value of x."}, 
 {"Timing", "Timing[expr] evaluates expr, and returns a list of the time in \
seconds used, together with the result obtained."}, 
 {"Tiny", "Tiny is a style or option setting that specifies that objects \
should be tiny."}, {"TitsGroupT", 
  "TitsGroupT[] represents the simple Tits group T."}, 
 {"ToBoxes", "ToBoxes[expr] generates boxes corresponding to the printed form \
of expr in StandardForm. ToBoxes[expr, form] gives the boxes corresponding to \
output in the specified form."}, {"ToCharacterCode", "ToCharacterCode[\"\\!\\\
(\\*string\"] gives a list of the integer codes corresponding to the \
characters in a string. ToCharacterCode[\"\\!\\(\\*string\", \
\"\\!\\(\\*encoding\"] gives integer codes according to the specified \
encoding."}, {"ToContinuousTimeModel", "ToContinuousTimeModel[lsys] gives the \
continuous-time approximation of the discrete-time systems models lsys. \
ToContinuousTimeModel[tfm, s] specifies the transform variable s."}, 
 {"ToDiscreteTimeModel", "ToDiscreteTimeModel[lsys, \[Tau]] gives the \
discrete-time approximation, with sampling period \[Tau], of the \
continuous-time systems models lsys. ToDiscreteTimeModel[tfm, \[Tau], z] \
specifies the transform variable z."}, {"ToEntity", "ToEntity[expr] returns \
an entity object corresponding to the given expression. ToEntity[expr, type] \
returns an entity object of the specified type corresponding to expr."}, 
 {"ToExpression", "ToExpression[input] gives the expression obtained by \
interpreting strings or boxes as Wolfram Language input. ToExpression[input, \
form] uses interpretation rules corresponding to the specified form. \
ToExpression[input, form, h] wraps the head h around the expression produced \
before evaluating it."}, {"ToInvertibleTimeSeries", "ToInvertibleTimeSeries[t\
proc] returns an invertible version of a time series process tproc."}, 
 {"ToLowerCase", "ToLowerCase[string] yields a string in which all letters \
have been converted to lowercase."}, {"ToNumberField", "ToNumberField[a, \
\[Theta]] expresses the algebraic number a in the number field generated by \
\[Theta]. ToNumberField[{a1, a2, \[Ellipsis]}, \[Theta]] expresses the ai in \
the field generated by \[Theta]. ToNumberField[{a1, a2, \[Ellipsis]}] \
expresses the ai in a common extension field generated by a single algebraic \
number."}, {"ToPolarCoordinates", "ToPolarCoordinates[{x, y}] gives the {r, \
\[Theta]} polar coordinates corresponding to the Cartesian coordinates {x, \
y}. ToPolarCoordinates[{x1, x2, \[Ellipsis], xn}] gives the hyperspherical \
coordinates corresponding to the Cartesian coordinates {x1, x2, \[Ellipsis], \
xn}."}, {"ToRadicals", "ToRadicals[expr] attempts to express all Root objects \
in expr in terms of radicals."}, {"ToRules", "ToRules[eqns] takes logical \
combinations of equations, in the form generated by Roots and Reduce, and \
converts them to lists of rules, of the form produced by Solve."}, 
 {"ToSphericalCoordinates", "ToSphericalCoordinates[{x, y, z}] gives the {r, \
\[Theta], \[Phi]} spherical coordinates corresponding to the Cartesian \
coordinates {x, y, z}."}, {"ToString", "ToString[expr] gives a string \
corresponding to the printed form of expr in OutputForm. ToString[expr, form] \
gives the string corresponding to output in the specified form."}, 
 {"ToUpperCase", "ToUpperCase[string] yields a string in which all letters \
have been converted to uppercase."}, 
 {"Today", "Today gives a DateObject representing the current day."}, 
 {"ToeplitzMatrix", "ToeplitzMatrix[n] gives the n \[Times]n Toeplitz matrix \
with first row and first column being successive integers. \
ToeplitzMatrix[{c1, c2, \[Ellipsis], cn}] gives the Toeplitz matrix whose \
first column consists of elements c1, c2, \[Ellipsis]. ToeplitzMatrix[{c1, \
c2, \[Ellipsis], cm}, {r1, r2, \[Ellipsis], rn}] gives the Toeplitz matrix \
with elements ci down the first column, and ri across the first row."}, 
 {"Together", "Together[expr] puts terms in a sum over a common denominator, \
and cancels factors in the result."}, {"Toggler", "Toggler[x] represents a \
toggler button with setting x, that toggles between True and False. \
Toggler[Dynamic[x]] takes the setting to be the dynamically updated current \
value of x, with the value of x being toggled if the button is clicked. \
Toggler[x, {val1, val2, \[Ellipsis]}] represents a toggler button that cycles \
through any sequence of values vali. Toggler[x, {val1->pict1, val2->pict2, \
\[Ellipsis]}] cycles through values vali displaying them as picti. Toggler[x, \
vlist, dpict] displays as dpict if x is none of the vali."}, 
 {"TogglerBar", "TogglerBar[x, {val1, val2, \[Ellipsis]}] represents a \
toggler bar with setting x and with toggler buttons for values vali to \
include in the list x. TogglerBar[Dynamic[x], {val1, val2, \[Ellipsis]}] \
takes the setting to be the dynamically updated current value of x, with the \
values in the list x being reset every time a toggler button is clicked. \
TogglerBar[x, {val1->lbl1, val2->lbl2, \[Ellipsis]}] represents a toggler bar \
in which the toggler button associated with value vali has label lbli."}, 
 {"TokenWords", "TokenWords is an option for Read and related functions which \
gives a list of token words to be used to delimit words."}, 
 {"Tolerance", "Tolerance is an option for various numerical options which \
specifies the tolerance that should be allowed in computing results."}, 
 {"Tomorrow", "Tomorrow gives a DateObject representing the following day."}, 
 {"Tooltip", "Tooltip[expr, label] displays label as a tooltip while the \
mouse pointer is in the area where expr is displayed."}, 
 {"TooltipDelay", "TooltipDelay is an option for objects such as Tooltip that \
specifies how long to delay after the mouse is over the object before \
displaying the tooltip."}, {"TooltipStyle", "TooltipStyle is an option for \
tooltips that specifies the style to use in displaying their elements."}, 
 {"ToonShading", "ToonShading[] is a three-dimensional graphics directive \
specifying that surfaces that follow are to be drawn to emulate \
two-dimensional flat objects. ToonShading[col] uses the color col as base \
color. ToonShading[{dcol, bcol, hcol}] uses the dark color dcol, the base \
color bcol and highlight color hcol. ToonShading[{w1, w2, w3}->{dcol, bcol, \
hcol}] uses the colors dcol, bcol and hcol weighted by the wi. \
ToonShading[\"\\!\\(\\*scheme\"] uses the specified discrete color scheme in \
ColorData."}, {"Top", "Top is a symbol that represents the top for purposes \
of alignment and positioning."}, {"TopHatTransform", "TopHatTransform[image, \
ker] gives the morphological top-hat transform of image with respect to \
structuring element ker. TopHatTransform[image, r] gives the top-hat \
transform with respect to a range-r square. TopHatTransform[data, \
\[Ellipsis]] applies top-hat transform to an array of data."}, 
 {"TopologicalSort", "TopologicalSort[g] gives a list of vertices of g in \
topologically sorted order for a directed acyclic graph g. \
TopologicalSort[{v->w, \[Ellipsis]}] uses rules v->w to specify the graph g."}\
, {"Total", "Total[list] gives the total of the elements in list. Total[list, \
n] totals all elements down to level n. Total[list, {n}] totals elements at \
level n. Total[list, {n1, n2}] totals elements at levels n1 through n2."}, 
 {"TotalLayer", "TotalLayer[] represents a net layer taking a list of input \
arrays and performing elementwise addition on them."}, 
 {"TotalVariationFilter", "TotalVariationFilter[data] iteratively reduces \
noise while preserving rapid transitions in data. TotalVariationFilter[data, \
param] assumes a regularization parameter value param."}, 
 {"TotalWidth", "TotalWidth is an option that can be set for output streams \
to specify the maximum total number of characters of text that should be \
printed for each output expression. Short forms of expressions are given if \
the number of characters needed to print the whole expression is too large."}\
, {"TouchPosition", "TouchPosition[] gives the list of current positions \
being touched in the notebook front end. TouchPosition[\"\\!\\(\\*coords\"] \
gives the touch positions with respect to the specified coordinate system. \
TouchPosition[\"\\!\\(\\*coords\", n] gives the position of the n^th position \
being touched in an object in the specified coordinate system. \
TouchPosition[\"\\!\\(\\*coords\", n, def] returns def if there are not n \
positions being touched."}, {"TouchscreenAutoZoom", "TouchscreenAutoZoom is \
an option for Manipulate and Graphics3D that determines whether the interface \
zooms to full-screen when it is activated by touching it on supported touch \
screen platforms."}, {"TouchscreenControlPlacement", "TouchscreenControlPlace\
ment is an option for Manipulate that determines the placement of the \
slide-out control panel on supported touchscreen platforms."}, 
 {"Tr", "Tr[list] finds the trace of the matrix or tensor list. Tr[list, f] \
finds a generalized trace, combining terms with f instead of Plus. Tr[list, \
f, n] goes down to level n in list."}, {"Trace", "Trace[expr] generates a \
list of all expressions used in the evaluation of expr. Trace[expr, form] \
includes only those expressions that match form. Trace[expr, s] includes all \
evaluations that use transformation rules associated with the symbol s."}, 
 {"TraceAbove", "TraceAbove is an option for Trace and related functions \
which specifies whether to include evaluation chains which contain the \
evaluation chain containing the pattern form sought."}, 
 {"TraceBackward", "TraceBackward is an option for Trace and related \
functions that specifies whether to include preceding expressions on the \
evaluation chain that contains the pattern form sought."}, 
 {"TraceDepth", "TraceDepth is an option for Trace and related functions \
which specifies the maximum nesting of evaluation chains that are to be \
included."}, {"TraceDialog", "TraceDialog[expr] initiates a dialog for every \
expression used in the evaluation of expr. TraceDialog[expr, form] initiates \
a dialog only for expressions which match form. TraceDialog[expr, s] \
initiates dialogs only for expressions whose evaluations use transformation \
rules associated with the symbol s."}, {"TraceForward", "TraceForward is an \
option for Trace and related functions which specifies whether to include \
later expressions on the evaluation chain that contains the pattern form \
sought."}, {"TraceOff", "TraceOff is an option for Trace and related \
functions which specifies forms inside which tracing should be switched off."}\
, {"TraceOn", "TraceOn is an option for Trace and related functions which \
specifies when tracing should be switched on."}, 
 {"TraceOriginal", "TraceOriginal is an option for Trace and related \
functions which specifies whether to test the form of each expression before \
its head and arguments are evaluated."}, {"TracePrint", "TracePrint[expr] \
prints all expressions used in the evaluation of expr. TracePrint[expr, form] \
includes only those expressions which match form. TracePrint[expr, s] \
includes all evaluations which use transformation rules associated with the \
symbol s."}, {"TraceScan", "TraceScan[f, expr] applies f to all expressions \
used in the evaluation of expr. TraceScan[f, expr, form] includes only those \
expressions which match form. TraceScan[f, expr, s] includes all evaluations \
which use transformation rules associated with the symbol s. TraceScan[f, \
expr, form, fp] applies f before evaluation and fp after evaluation to \
expressions used in the evaluation of expr."}, 
 {"TrackedSymbols", "TrackedSymbols is an option to Refresh, Manipulate, and \
related functions that specifies which symbols should trigger updates when \
their values are changed."}, {"TrackingFunction", "TrackingFunction is an \
option for Manipulate controls that specifies functions to use during \
interactive changing or editing."}, {"TracyWidomDistribution", "TracyWidomDis\
tribution[\[Beta]] represents a Tracy-Widom distribution with Dyson index \
\[Beta]."}, {"TradingChart", "TradingChart[{{date1, {open1, high1, low1, \
close1, volume1}}, \[Ellipsis]}] makes a chart showing prices and volume for \
each date. TradingChart[{\"\\!\\(\\*name\", daterange}] makes a financial \
chart for the financial entity \"\\!\\(\\*name\" over the daterange. \
TradingChart[{\[Ellipsis]}, {ind1, ind2, \[Ellipsis]}] makes a financial \
chart with indicators ind1, ind2, \[Ellipsis]."}, 
 {"TraditionalForm", "TraditionalForm[expr] prints as an approximation to the \
traditional mathematical notation for expr."}, 
 {"TrainingProgressCheckpointing", "TrainingProgressCheckpointing is an \
option for NetTrain that specifies how to save copies of the net during \
training."}, {"TrainingProgressFunction", "TrainingProgressFunction is an \
option for NetTrain that specifies a function to run periodically during \
training."}, {"TrainingProgressMeasurements", "TrainingProgressMeasurements \
is an option for NetTrain that specifies measurements to make while training \
is in progress."}, {"TrainingProgressReporting", "TrainingProgressReporting \
is an option for NetTrain and related functions that specifies how to report \
the progress of training."}, {"TrainingStoppingCriterion", "TrainingStoppingC\
riterion is an option for NetTrain that specifies a criterion for stopping \
training early in order to prevent overfitting."}, 
 {"TrainingUpdateSchedule", "TrainingUpdateSchedule is an option for NetTrain \
that specifies which arrays of the network can be updated at each step of the \
optimization process."}, {"TransferFunctionCancel", "TransferFunctionCancel[t\
fm] cancels common poles and zeros in the TransferFunctionModel tfm. \
TransferFunctionCancel[tfm, crit] cancels only common pole-zero pairs ei for \
which crit[ei] is True."}, {"TransferFunctionExpand", "TransferFunctionExpand\
[tfm] expands polynomial terms in the numerators and denominators of the \
TransferFunctionModel tfm."}, {"TransferFunctionFactor", "TransferFunctionFac\
tor[tfm] factors the polynomial terms in the numerators and denominators of \
the TransferFunctionModel tfm."}, {"TransferFunctionModel", "TransferFunction\
Model[m, s] represents the model of the transfer-function matrix m with \
complex variable s. TransferFunctionModel[{num, den}, s] specifies the \
numerator num and denominator den of a transfer-function model. \
TransferFunctionModel[{z, p, g}, s] specifies the zeros z, poles p, and gain \
g of a transfer-function model. TransferFunctionModel[sys] gives the \
transfer-function model of the systems model sys."}, 
 {"TransferFunctionPoles", "TransferFunctionPoles[tfm] gives a matrix of \
roots of the denominators in the TransferFunctionModel tfm. \
TransferFunctionPoles[tfm, reg] only gives the roots inside the region reg on \
the complex plane."}, {"TransferFunctionTransform", "TransferFunctionTransfor\
m[f, tf] transforms the TransferFunctionModel object tf using the \
transformation function f."}, {"TransferFunctionZeros", "TransferFunctionZero\
s[tfm] gives a matrix of roots of the numerators in the TransferFunctionModel \
tfm. TransferFunctionZeros[tfm, reg] only gives the roots inside the region \
reg on the complex plane."}, {"TransformationClass", "TransformationClass is \
an option that specifies the class of geometric transformations to be used."}\
, {"TransformationFunction", "TransformationFunction[data] represents a \
transformation function that applies geometric and other transformations."}, 
 {"TransformationFunctions", "TransformationFunctions is an option for \
Simplify and FullSimplify which gives the list of functions to apply to try \
to transform parts of an expression."}, {"TransformationMatrix", "Transformat\
ionMatrix[tfun] gives the homogeneous matrix associated with a \
TransformationFunction object."}, {"TransformedDistribution", "TransformedDis\
tribution[expr, x\[Distributed]dist] represents the transformed distribution \
of expr where the random variable x follows the distribution dist. \
TransformedDistribution[expr, {x1, x2, \[Ellipsis]}\[Distributed]dist] \
represents the transformed distribution of expr where {x1, x2, \[Ellipsis]} \
follows the multivariate distribution dist. TransformedDistribution[expr, \
x\[Distributed]proc] represents the transformed distribution where expr \
contains expressions of the form x[t], referring the value at time t from the \
random process proc. TransformedDistribution[expr, {x1\[Distributed]dist1, \
x2\[Distributed]dist2, \[Ellipsis]}] represents a transformed distribution \
where x1, x2, \[Ellipsis] are independent and follow the distributions dist1, \
dist2, \[Ellipsis]."}, {"TransformedField", "TransformedField[t, f, {x1, x2, \
\[Ellipsis], xn}->{y1, y2, \[Ellipsis], yn}] uses the coordinate \
transformation t to transform the scalar, vector, or tensor field f from \
coordinates xi to yi."}, {"TransformedProcess", "TransformedProcess[expr, \
x\[Distributed]proc, t] represents the transformed process of expr where the \
variable x follows the random process proc and t denotes the time. \
TransformedProcess[expr, {x1\[Distributed]proc1, x2\[Distributed]proc2, \
\[Ellipsis]}, t] represents a transformed process where x1, x2, \[Ellipsis] \
are independent and follow the processes proc1, proc2, \[Ellipsis]."}, 
 {"TransformedRegion", "TransformedRegion[reg, f] represents the transformed \
region {f(p)|p\[Element]reg}, where reg is a region and f is a function."}, 
 {"TransitionDirection", "TransitionDirection is an option for PaneSelector \
that specifies the direction in which a transition moves."}, 
 {"TransitionDuration", "TransitionDuration is an option for PaneSelector \
that specifies the duration in seconds that a transition effect should last."}\
, {"TransitionEffect", "TransitionEffect is an option for PaneSelector that \
specifies the visual effect used when transitioning between states."}, 
 {"TransitiveClosureGraph", "TransitiveClosureGraph[g] gives the transitive \
closure of the graph g. TransitiveClosureGraph[{v->w, \[Ellipsis]}] uses \
rules v->w to specify the graph g."}, {"TransitiveReductionGraph", "Transitiv\
eReductionGraph[g] gives a transitive reduction of the graph g. \
TransitiveReductionGraph[{v->w, \[Ellipsis]}] uses rules v->w to specify the \
graph g."}, {"Translate", "Translate[g, {x, y, \[Ellipsis]}] represents \
graphics primitives g translated by the vector {x, y, \[Ellipsis]}. \
Translate[g, {{x1, y1, \[Ellipsis]}, {x2, y2, \[Ellipsis]}, \[Ellipsis]}] \
represents multiple copies of g translated by a collection of vectors."}, 
 {"TranslationOptions", "TranslationOptions->{opt1->val1, opt2->val2, \
\[Ellipsis]} is an option for Style and Cell that controls how code \
translations are displayed."}, {"TranslationTransform", "TranslationTransform\
[v] gives a TransformationFunction that represents translation of points by a \
vector v."}, {"Transliterate", "Transliterate[\"\\!\\(\\*string\"] attempts \
to transliterate string into plain ASCII. Transliterate[\"\\!\\(\\*string\", \
script] attempts to transliterate string into the specified writing script \
script. Transliterate[\"\\!\\(\\*string\", script1->script2] attempts to \
transliterate string from script1 to script2."}, 
 {"Transparent", "Transparent represents perfect transparency in graphics or \
style specifications."}, {"Transpose", "Transpose[list] transposes the first \
two levels in list. Transpose[list, {n1, n2, \[Ellipsis]}] transposes list so \
that the k^th level in list is the nk^th level in the result. Transpose[list, \
m\[Backslash][TwoWayRule]n] transposes levels m and n in list, leaving all \
other levels unchanged."}, {"TransposeLayer", "TransposeLayer[] represents a \
net layer that transposes the first two levels of its input. \
TransposeLayer[m\[Backslash][TwoWayRule]n] represents a net layer that \
transposes levels m and n of its input. \
TransposeLayer[{m1\[Backslash][TwoWayRule]n1,m2\[Backslash][TwoWayRule]n2, \
\[Ellipsis]}] represents a net layer that sequentially transposes levels mi \
and ni of its input."}, {"TravelDirections", "TravelDirections[{loc1, loc2, \
\[Ellipsis]}] generates directions for travel from loc1 to loc2, \[Ellipsis]. \
TravelDirections[{loc1, loc2, \[Ellipsis]}, \"\\!\\(\\*prop\"] gives the \
property prop of travel directions."}, {"TravelDirectionsData", "TravelDirect\
ionsData[\[Ellipsis]] represents travel directions generated by \
TravelDirections."}, {"TravelDistance", "TravelDistance[{loc1, loc2, \
\[Ellipsis]}] gives the estimated distance for travel from loc1 to loc2, \
\[Ellipsis]."}, {"TravelDistanceList", "TravelDistanceList[{loc1, loc2, \
\[Ellipsis], locn}] returns the list {TravelDistance[loc1, loc2], \
\[Ellipsis], TravelDistance[locn - 1, locn]}."}, 
 {"TravelMethod", "TravelMethod is an option for TravelDirections and related \
functions that specifies the mode of transportation to assume."}, 
 {"TravelTime", "TravelTime[{loc1, loc2, \[Ellipsis]}] gives the estimated \
time to travel from loc1 to loc2, \[Ellipsis]."}, 
 {"Tree", "Tree[{subtree1, subtree2, \[Ellipsis]}] represents a tree with a \
list of child subtrees subtreei. Tree[data, subtrees] represents a tree \
containing data in its root, with children given by subtrees."}, 
 {"TreeCases", "TreeCases[tree, pattern] gives a list of subtrees of tree \
with data matching pattern. TreeCases[tree, pattern, levelspec] gives a list \
of all subtrees of tree on levels specified by levelspec with data that \
matches the pattern. TreeCases[tree, pattern, levelspec, n] gives the first n \
subtrees in tree with data that matches the pattern. TreeCases[pattern] \
represents an operator form of TreeCases that can be applied to a tree."}, 
 {"TreeChildren", "TreeChildren[tree] extracts the children of the root of \
the Tree object tree. TreeChildren[tree, pos] extracts the children of \
subtrees at positions specified by pos."}, {"TreeCount", "TreeCount[tree, \
pattern] gives the number of subtrees of tree whose data matches pattern. \
TreeCount[tree, pattern, levelspec] gives the total number of subtrees with \
data matching pattern that appear at the levels in tree specified by \
levelspec. TreeCount[pattern] represents an operator form of TreeCount that \
can be applied to a tree."}, {"TreeData", "TreeData[tree] extracts the data \
in the root of tree. TreeData[tree, pos] extracts the data of subtrees at \
positions specified by pos."}, {"TreeDelete", "TreeDelete[tree, pos] deletes \
the subtrees of tree at positions specified by pos."}, 
 {"TreeDepth", "TreeDepth[tree] gives the maximum level of tree. \
TreeDepth[tree, pattern] gives the maximal level of the subtree with data \
matching pattern."}, {"TreeExpression", "TreeExpression[tree] gives the \
expression corresponding to the tree tree. TreeExpression[tree, struct] \
interprets the data of the descendants according to struct."}, 
 {"TreeExtract", "TreeExtract[tree, pos] extracts the subtree of tree at the \
position specified by pos. TreeExtract[tree, {pos1, pos2, \[Ellipsis]}] \
extracts a list of subtrees of tree. TreeExtract[tree, pos, h] extracts \
subtrees of tree, applying h to each subtree. TreeExtract[pos] represents an \
operator form of TreeExtract that can be applied to a tree."}, 
 {"TreeFold", "TreeFold[f, tree] gives f[data, {res1, res2, \[Ellipsis]}], \
where data is the data in tree and resi is the result of TreeFold[f, childi] \
for the i^th child of tree. TreeFold[{f, g}, tree] gives g[data] if tree is a \
leaf and f[data, {res1, res2, \[Ellipsis]}] otherwise. TreeFold[f, tree, h] \
gives f[h[tree], {res1, res2, \[Ellipsis]}], where resi is the result of \
TreeFold[f, childi, h] for the i^th child of tree. TreeFold[f] represents an \
operator form of TreeFold that can be applied to a tree."}, 
 {"TreeForm", "TreeForm[expr] displays expr as a tree with different levels \
at different depths. TreeForm[expr, n] displays expr as a tree only down to \
level n."}, {"TreeGraph", "TreeGraph[{v1, v2, \[Ellipsis]}, {u1, u2, \
\[Ellipsis]}] yields a tree where ui is the predecessor of vi. TreeGraph[{e1, \
e2, \[Ellipsis]}] yields a tree with edges ej. TreeGraph[{v1, v2, \
\[Ellipsis]}, {e1, e2, \[Ellipsis]}] yields a tree with vertices vi and edges \
ej. TreeGraph[{\[Ellipsis], wi[vi, \[Ellipsis]], \[Ellipsis]}, {\[Ellipsis], \
wj[ej, \[Ellipsis]], \[Ellipsis]}] yields a tree with vertex and edge \
properties defined by the symbolic wrappers wk. TreeGraph[{vi->vj, \
\[Ellipsis]}] uses rules vi->vj to specify a tree."}, 
 {"TreeGraphQ", 
  "TreeGraphQ[g] yields True if the graph g is a tree and False otherwise."}, 
 {"TreeInsert", 
  "TreeInsert[tree, child, pos] inserts child at position pos in tree."}, 
 {"TreeLeafQ", "TreeLeafQ[tree] gives True if tree is a tree with no \
children, and gives False otherwise."}, 
 {"TreeLeaves", 
  "TreeLeaves[tree] returns the list of leaves of the tree tree."}, 
 {"TreeLevel", "TreeLevel[tree, levelspec] gives a list of all subtrees of \
tree on levels specified by levelspec. TreeLevel[levelspec] represents an \
operator form of TreeLevel that can be applied to a tree."}, 
 {"TreeMap", "TreeMap[f, tree] applies f to the data in each subtree of tree. \
TreeMap[f, tree, levelspec] applies f to the data on levels of tree specified \
by levelspec. TreeMap[f, tree, levelspec->elem] applies f to the element elem \
of subtrees on levels specified by levelspec. TreeMap[f] represents an \
operator form of TreeMap that can be applied to a tree."}, 
 {"TreeOutline", "TreeOutline[tree] gives an outline of the data in tree as a \
nested OpenerView."}, {"TreePlot", "TreePlot[g] generates a tree plot of the \
graph g. TreePlot[{e1, e2, \[Ellipsis]}] generates a tree plot of the graph \
with edges ej. TreePlot[{\[Ellipsis], w[ei], \[Ellipsis]}] plots ei with \
features defined by the symbolic wrapper w. TreePlot[{vi1->vj1, \[Ellipsis]}] \
uses rules vi1->vj1 to specify the graph g. TreePlot[m] generates a tree plot \
of the graph represented by the adjacency matrix m. TreePlot[\[Ellipsis], \
v->pos] places the root v in the plot at position pos."}, 
 {"TreePosition", "TreePosition[tree, pattern] gives a list of the positions \
of subtrees of tree whose data matches pattern. TreePosition[tree, pattern, \
levelspec] finds only matches that appear on levels of tree specified by \
levelspec. TreePosition[tree, pattern, levelspec, n] gives the positions of \
the first n matches found. TreePosition[pattern] represents an operator form \
of TreePosition that can be applied to a tree."}, 
 {"TreeQ", "TreeQ[tree] yields True if tree is a valid Tree object and False \
otherwise."}, {"TreeReplacePart", "TreeReplacePart[tree, pos->new] gives a \
tree in which the subtrees of tree at positions specified by pos are replaced \
by new."}, {"TreeRules", 
  "TreeRules[tree] returns the rules associated with the Tree object tree."}, 
 {"TreeSelect", "TreeSelect[tree, crit] picks out all subtrees treei of tree \
for which crit[treei] is True. TreeSelect[tree, crit, n] picks out the first \
n subtrees for which crit[treei] is True. TreeSelect[crit] represents an \
operator form of TreeSelect that can be applied to a tree."}, 
 {"TreeSize", 
  "TreeSize[tree] gives the number of subtrees of the Tree object tree."}, 
 {"TrendStyle", "TrendStyle is an option to CandlestickChart, RenkoChart, and \
other financial charting functions that specifies how to style price trends."}\
, {"Triangle", "Triangle[{p1, p2, p3}] represents a filled triangle with \
corner points p1, p2, and p3. Triangle[{{p11, p12, p13}, \[Ellipsis]}] \
represents a collection of triangles."}, {"TriangleCenter", "TriangleCenter[t\
ri, type] gives the specified type of center for the triangle tri. \
TriangleCenter[tri] gives the centroid of the triangle."}, 
 {"TriangleConstruct", "TriangleConstruct[tri, type] gives the specified type \
of construct for the triangle tri."}, {"TriangleMeasurement", "TriangleMeasur\
ement[tri, type] gives the specified type of measurement for the triangle \
tri."}, {"TriangleWave", "TriangleWave[x] gives a triangle wave that varies \
between - 1 and + 1 with unit period. TriangleWave[{min, max}, x] gives a \
triangle wave that varies between min and max with unit period."}, 
 {"TriangularDistribution", "TriangularDistribution[{min, max}] represents a \
symmetric triangular statistical distribution giving values between min and \
max. TriangularDistribution[] represents a symmetric triangular statistical \
distribution giving values between 0 and 1. TriangularDistribution[{min, \
max}, c] represents a triangular distribution with mode at c."}, 
 {"TriangulateMesh", 
  "TriangulateMesh[mr] generates a triangulation of the mesh region mr."}, 
 {"Trig", "Trig is an option for various polynomial manipulation functions \
that specifies whether trigonometric functions should be treated like \
polynomial elements."}, {"TrigExpand", 
  "TrigExpand[expr] expands out trigonometric functions in expr."}, 
 {"TrigFactor", "TrigFactor[expr] factors trigonometric functions in expr."}, 
 {"TrigFactorList", "TrigFactorList[expr] factors trigonometric functions in \
expr, yielding a list of lists containing trigonometric monomials and \
exponents."}, {"TrigReduce", "TrigReduce[expr] rewrites products and powers \
of trigonometric functions in expr in terms of trigonometric functions with \
combined arguments."}, {"TrigToExp", 
  "TrigToExp[expr] converts trigonometric functions in expr to exponentials."}\
, {"Trigger", "Trigger[Dynamic[u]] represents a trigger that can be pressed \
to make the dynamically updated value of u be continually increased with time \
from 0 to 1. Trigger[Dynamic[u], {umin, umax}] makes u vary from umin to umax \
when triggered. Trigger[Dynamic[u], {umin, umax, du}] makes u vary in steps \
du when triggered. Trigger[Dynamic[u], {umin, umax}, ups] makes the value of \
u increase at a rate of ups units per second when triggered."}, 
 {"TrimmedMean", "TrimmedMean[list, f] gives the mean of the elements in list \
after dropping a fraction f of the smallest and largest elements. \
TrimmedMean[list, {f1, f2}] gives the mean when a fraction f1 of the smallest \
elements and a fraction f2 of the largest elements are removed. \
TrimmedMean[list] gives the 5% trimmed mean TrimmedMean[list, 0.05]. \
TrimmedMean[dist, \[Ellipsis]] gives the trimmed mean of a univariate \
distribution dist."}, {"TrimmedVariance", "TrimmedVariance[list, f] gives the \
variance of the elements in list after dropping a fraction f of the smallest \
and largest elements. TrimmedVariance[list, {f1, f2}] gives the variance when \
a fraction f1 of the smallest elements and a fraction f2 of the largest \
elements are removed. TrimmedVariance[list] gives the 5% trimmed variance \
TrimmedVariance[list, 0.05]. TrimmedVariance[dist, \[Ellipsis]] gives the \
trimmed variance of a univariate distribution dist."}, 
 {"TropicalStormData", "TropicalStormData[entity, property] gives the value \
of the specified property for the tropical storm entity. \
TropicalStormData[{entity1, entity2, \[Ellipsis]}, property] gives a list of \
property values for the specified tropical storm entities. \
TropicalStormData[entity, property, annotation] gives the specified \
annotation associated with the given property."}, 
 {"True", "True is the symbol for the Boolean value true."}, 
 {"TrueQ", 
  "TrueQ[expr] yields True if expr is True, and yields False otherwise."}, 
 {"TruncatedDistribution", "TruncatedDistribution[{xmin, xmax}, dist] \
represents the distribution obtained by truncating the values of dist to lie \
between xmin and xmax. TruncatedDistribution[{{xmin, xmax}, {ymin, ymax}, \
\[Ellipsis]}, dist] represents the distribution obtained by truncating the \
values of the multivariate distribution dist to lie between xmin and xmax, \
ymin and ymax, etc."}, {"TruncatedPolyhedron", "TruncatedPolyhedron[poly] \
gives the truncated polyhedron of poly by truncating all vertices. \
TruncatedPolyhedron[poly, l] truncates the polyhedron poly by a length ratio \
l at its vertices."}, {"TsallisQExponentialDistribution", "TsallisQExponentia\
lDistribution[\[Lambda], q] represents a Tsallis q -exponential distribution \
with scale inversely proportional to parameter \[Lambda]."}, 
 {"TsallisQGaussianDistribution", "TsallisQGaussianDistribution[\[Mu], \
\[Beta], q] represents a Tsallis q -Gaussian distribution with mean \[Mu], \
scale parameter \[Beta], and deformation parameter q. \
TsallisQGaussianDistribution[q] represents a Tsallis q -Gaussian distribution \
with mean 0 and scale parameter 1."}, {"Tube", "Tube[{{x1, y1, z1}, {x2, y2, \
z2}, \[Ellipsis]}] represents a 3D tube around the line joining a sequence of \
points. Tube[{pt1, pt2, \[Ellipsis]}, r] represents a tube of radius r. \
Tube[{{pt11, pt12, \[Ellipsis]}, {pt21, \[Ellipsis]}, \[Ellipsis]}, \
\[Ellipsis]] represents a collection of tubes. Tube[curve, \[Ellipsis]] \
represents a tube around the specified 3D curve."}, 
 {"Tuesday", "Tuesday is a day of the week."}, 
 {"TukeyLambdaDistribution", "TukeyLambdaDistribution[\[Lambda]] represents \
Tukey's lambda distribution with shape parameter \[Lambda]. \
TukeyLambdaDistribution[\[Lambda], \[Mu], \[Sigma]] represents Tukey's lambda \
distribution with location parameter \[Mu] and scale parameter \[Sigma]. \
TukeyLambdaDistribution[{\[Lambda]1, \[Lambda]2}, \[Mu], {\[Sigma]1, \
\[Sigma]2}] represents the generalized Tukey's lambda distribution with \
location parameter \[Mu], scale parameters \[Sigma]1 and \[Sigma]2, and shape \
parameters \[Lambda]1 and \[Lambda]2."}, {"TukeyWindow", "TukeyWindow[x] \
represents a Tukey window function of x. TukeyWindow[x, \[Alpha]] uses the \
parameter \[Alpha]."}, {"TunnelData", "TunnelData[entity, property] gives the \
value of the specified property for the tunnel entity. TunnelData[{entity1, \
entity2, \[Ellipsis]}, property] gives a list of property values for the \
specified tunnel entities. TunnelData[entity, property, annotation] gives the \
specified annotation associated with the given property."}, 
 {"Tuples", "Tuples[list, n] generates a list of all possible n -tuples of \
elements from list. Tuples[{list1, list2, \[Ellipsis]}] generates a list of \
all possible tuples whose i^th element is from listi."}, 
 {"TuranGraph", "TuranGraph[n, k] gives the k -partite Tur\[AAcute]n graph \
with n vertices Tn, k."}, {"TuringMachine", "TuringMachine[rule, init, t] \
generates a list representing the evolution of the Turing machine with the \
specified rule from initial condition init for t steps. TuringMachine[rule, \
init] gives the result of evolving init for one step. TuringMachine[rule] is \
an operator form of TuringMachine that corresponds to one step of evolution."}\
, {"TuttePolynomial", "TuttePolynomial[g, {x, y}] gives the Tutte polynomial \
of the graph g. TuttePolynomial[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules \
v->w to specify the graph g."}, {"TwoWayRule", "x<->y or \
x\[Backslash][TwoWayRule]y represents a two-way rule expressing exchange or \
correspondence of x and y."}, {"TypeSpecifier", "TypeSpecifier[cons] \
represents a type specifier that can be applied to other types to create a \
compound type using the type constructor cons."}, 
 {"Typed", "Typed[expr, type] represents an expression that should be assumed \
to be of a specified type for compilation and other purposes."}, 
 {"URL", "URL[\"\\!\\(\\*url\"] is a symbolic representation of a URL."}, 
 {"URLBuild", "URLBuild[\"\\!\\(\\*path\", {\"\\!\\(\\*param_1\"->val1, \
\"\\!\\(\\*param_2\"->val2, \[Ellipsis]}] builds a URL with the specified \
path and query parameters and values parami and vali. \
URLBuild[{\"\\!\\(\\*path_1\", \"\\!\\(\\*path_2\", \[Ellipsis]}] builds a \
URL from the path components pathi. URLBuild[path, params] builds a URL from \
a specification of a path and query parameters. URLBuild[assoc] builds a URL \
from an association of components. URLBuild[assoc, params] builds a URL from \
an association of components, plus query parameters and values."}, 
 {"URLDecode", 
  "URLDecode[\"\\!\\(\\*string\"] decodes a URL-style percent-encoded \
string."}, {"URLDispatcher", "URLDispatcher[{patt1:>content1, \
patt2:>content2, \[Ellipsis]}] represents a dispatcher for deployed URLs that \
specifies that URLs with relative paths matching the string patterns patti \
should give content represented by contenti."}, 
 {"URLDownload", "URLDownload[url] downloads the content of the specified URL \
to a local temporary file. URLDownload[{url1, url2, \[Ellipsis]}] downloads \
the contents of the specified URLs to files in a local temporary directory. \
URLDownload[url, file] downloads to a specified file. URLDownload[{url1, \
url2, \[Ellipsis]}, dir] downloads to a specified directory. \
URLDownload[HTTPRequest[\[Ellipsis]], \[Ellipsis]] downloads the result of \
the specified HTTP request. URLDownload[{req1, req2, \[Ellipsis]}, \
\[Ellipsis]] downloads the results of the list of HTTP requests. \
URLDownload[req, loc, \"\\!\\(\\*elem\"] returns only the element elem from \
the response. URLDownload[req, loc, \"\\!\\(\\*elem\"] returns only the \
element elem from the response. URLDownload[req, loc, {\"\\!\\(\\*elem_1\", \
\"\\!\\(\\*elem_2\", \[Ellipsis]}] returns an association of the values of \
the elements elemi."}, {"URLDownloadSubmit", "URLDownloadSubmit[url, file] \
submits the specified URL to be downloaded asynchronously to the file given. \
URLDownloadSubmit[url, file, {\"\\!\\(\\*param_1\"->val1, \
\"\\!\\(\\*param_2\"->val2, \[Ellipsis]}] submits the specified URL, adding \
elements with names parami and values vali. URLDownloadSubmit[obj, \
\[Ellipsis]] submits the cloud object obj. \
URLDownloadSubmit[HTTPRequest[\[Ellipsis]], \[Ellipsis]] submits the \
specified HTTP request."}, {"URLEncode", "URLEncode[\"\\!\\(\\*string\"] \
converts \"\\!\\(\\*string\" into a URL-style, percent-encoded ASCII string."}\
, {"URLExecute", "URLExecute[url] executes the specified URL, importing \
whatever result is generated. URLExecute[url, {\"\\!\\(\\*param_1\"->val1, \
\"\\!\\(\\*param_2\"->val2, \[Ellipsis]}] executes the specified URL, adding \
elements with names parami and values vali. URLExecute[url, params, format] \
imports the result using the specified format. \
URLExecute[CloudObject[\[Ellipsis]], \[Ellipsis]] executes a cloud object \
with current authentication settings. URLExecute[HTTPRequest[\[Ellipsis]], \
\[Ellipsis]] executes the specified HTTP request."}, 
 {"URLExpand", 
  "URLExpand[\"\\!\\(\\*url\"] expands a shortened \"\\!\\(\\*url\"."}, 
 {"URLParse", "URLParse[\"\\!\\(\\*url\"] takes a well-formed URL and gives \
an association whose values correspond to the components of the URL. \
URLParse[\"\\!\\(\\*url\", \"\\!\\(\\*component\"] returns only the specified \
component. URLParse[\"\\!\\(\\*url\", {component1, component2, \[Ellipsis]}] \
returns only the specified component list."}, {"URLQueryDecode", "URLQueryDec\
ode[\"\\!\\(\\*string\"] decodes a URL-style query string into a list of \
key-value rules."}, {"URLQueryEncode", "URLQueryEncode[\[LeftAssociation]key1\
->val1, key2->val2, \[Ellipsis]\[RightAssociation]] creates a URL-style query \
string from an association of keys and values. URLQueryEncode[{param1->val1, \
param2->val1, \[Ellipsis]}] creates a query string from a list of rules."}, 
 {"URLRead", "URLRead[url] sends a request to a URL and reads back the \
response, returning it as a response object. URLRead[assoc] sends a request \
to a URL built from an association of components and metadata elements. \
URLRead[HTTPRequest[\[Ellipsis]]] sends a request specified by a symbolic \
HTTPRequest object. URLRead[req, \"\\!\\(\\*elem\"] returns only the element \
elem from the response. URLRead[req, {\"\\!\\(\\*elem_1\", \
\"\\!\\(\\*elem_2\", \[Ellipsis]}] returns an association of the values of \
the elements elemi. URLRead[{req1, req2, \[Ellipsis]}, \[Ellipsis]] sends the \
requests reqi in parallel, giving a list of the results obtained."}, 
 {"URLResponseTime", "URLResponseTime[url] gives the total number of seconds \
to request one byte from the specified URL. URLResponseTime[url, prop] gives \
the specified timing."}, {"URLShorten", "URLShorten[\"\\!\\(\\*url\"] creates \
a shortened URL that redirects to \"\\!\\(\\*url\". \
URLShorten[CloudObject[\[Ellipsis]]] creates a shortened URL that redirects \
to the URL for the specified cloud object."}, {"URLSubmit", "URLSubmit[url] \
submits the specified URL to be executed asynchronously. URLSubmit[url, \
{\"\\!\\(\\*param_1\"->val1, \"\\!\\(\\*param_2\"->val2, \[Ellipsis]}] \
submits the specified URL, adding elements with names parami and values vali. \
URLSubmit[obj, \[Ellipsis]] submits the cloud object obj. \
URLSubmit[HTTPRequest[\[Ellipsis]], \[Ellipsis]] submits the specified HTTP \
request."}, {"UnateQ", "UnateQ[bexpr, {x1, x2, \[Ellipsis]}] tests whether \
the Boolean expression bexpr is positive unate in the variables x1, x2, \
\[Ellipsis]. UnateQ[bexpr, {\[Not]x1, \[Not]x2, \[Ellipsis]}] tests whether \
the Boolean expression bexpr is negative unate in the variables x1, x2, \
\[Ellipsis]."}, {"Uncompress", "Uncompress[\"\\!\\(\\*string\"] recovers an \
expression from a compressed string representation generated by Compress. \
Uncompress[\"\\!\\(\\*string\", h] wraps the head h around the expression \
produced before evaluating it."}, {"UnconstrainedParameters", "UnconstrainedP\
arameters is an option to functions like GeometricScene that specifies what \
parameters should be treated as unconstrained, so that they can take on any \
possible value."}, {"Undefined", 
  "Undefined is a symbol that represents a quantity with no defined value."}, 
 {"UnderBar", "UnderBar[expr] displays with a bar under expr."}, 
 {"Underflow", "Underflow[] represents a number too small to represent \
explicitly on your computer system."}, 
 {"Underlined", "Underlined represents an underlined font."}, 
 {"Underoverscript", 
  "Underoverscript[x, y, z] is an object that formats as xyz."}, 
 {"UnderoverscriptBox", "UnderoverscriptBox[x, y, z] is the low-level box \
representation for xyz in notebook expressions."}, 
 {"UnderoverscriptBoxOptions", "UnderoverscriptBoxOptions is an option for \
selections that specifies settings for UnderoverscriptBox objects."}, 
 {"Underscript", "Underscript[x, y] is an object that formats as xy."}, 
 {"UnderscriptBox", "UnderscriptBox[x, y] is the low-level box representation \
for xy in notebook expressions."}, {"UnderscriptBoxOptions", "UnderscriptBoxO\
ptions is an option for selections that specifies settings for UnderscriptBox \
objects."}, {"UnderseaFeatureData", "UnderseaFeatureData[entity, property] \
gives the value of the specified property for the undersea feature entity. \
UnderseaFeatureData[{entity1, entity2, \[Ellipsis]}, property] gives a list \
of property values for the specified undersea feature entities. \
UnderseaFeatureData[entity, property, annotation] gives the specified \
annotation associated with the given property."}, 
 {"UndirectedEdge", "UndirectedEdge[u, v] or u\[UndirectedEdge]v represents \
an undirected edge between u and v. UndirectedEdge[u, v, t] or \
u\[UndirectedEdge]tv represents an undirected edge between u and v with tag \
t."}, {"UndirectedGraph", "UndirectedGraph[g] gives an undirected graph from \
the directed graph g. UndirectedGraph[{v->w, \[Ellipsis]}] uses rules v->w to \
specify the graph g."}, {"UndirectedGraphQ", "UndirectedGraphQ[g] yields True \
if the graph g is an undirected graph and False otherwise."}, 
 {"UndoOptions", "UndoOptions is an option for Style that specifies settings \
for controlling the behavior of the front end's interactive undo/redo \
system."}, {"UndoTrackedVariables", "UndoTrackedVariables is an option for \
Manipulate, DynamicModule, and related functions that sets variables that \
should be tracked by the front end's undo mechanism."}, 
 {"Unequal", 
  "lhs != rhs or lhs!=rhs returns False if lhs and rhs are identical."}, 
 {"UnequalTo", "UnequalTo[y] is an operator form that yields x!=y when \
applied to an expression x."}, {"Unevaluated", "Unevaluated[expr] represents \
the unevaluated form of expr when it appears as the argument to a function."}\
, {"UniformDistribution", "UniformDistribution[{min, max}] represents a \
continuous uniform statistical distribution giving values between min and \
max. UniformDistribution[] represents a uniform distribution giving values \
between 0 and 1. UniformDistribution[{{xmin, xmax}, {ymin, ymax}, \
\[Ellipsis]}] represents a multivariate uniform distribution over the region \
{{xmin, xmax}, {ymin, ymax}, \[Ellipsis]}. UniformDistribution[n] represents \
a multivariate uniform distribution over the standard n dimensional unit \
hypercube."}, {"UniformGraphDistribution", "UniformGraphDistribution[n, m] \
represents a uniform graph distribution on n -vertex, m -edge graphs."}, 
 {"UniformPolyhedron", "UniformPolyhedron[\"\\!\\(\\*name\"] gives the \
uniform polyhedron with the given name. UniformPolyhedron[{n, m}] gives the \
uniform polyhedron with n sides of each face and m faces meeting at each \
vertex point. UniformPolyhedron[{r, \[Theta], \[Phi]}, \[Ellipsis]] rescales \
the uniform polyhedron by a factor r and rotates by an angle \[Theta] with \
respect to the z axis and angle \[Phi] with respect to the y axis. \
UniformPolyhedron[{x, y, z}, {r, \[Theta], \[Phi]}, \[Ellipsis]] centers the \
uniform polyhedron at {x, y, z}."}, {"UniformSumDistribution", "UniformSumDis\
tribution[n] represents the distribution of a sum of n random variables \
uniformly distributed from 0 to 1. UniformSumDistribution[n, {min, max}] \
represents the distribution of a sum of n random variables uniformly \
distributed from min to max."}, {"Uninstall", "Uninstall[link] terminates an \
external program started by Install, and removes Wolfram Language definitions \
set up by it."}, {"Union", "Union[list1, list2, \[Ellipsis]] gives a sorted \
list of all the distinct elements that appear in any of the listi. \
Union[list] gives a sorted version of a list, in which all duplicated \
elements have been dropped."}, {"UnionPlus", "UnionPlus[x, y, \[Ellipsis]] \
displays as x\[UnionPlus]y\[UnionPlus]\[Ellipsis]."}, 
 {"UnionedEntityClass", "UnionedEntityClass[class1, \[Ellipsis]] represents \
an entity class containing all the distinct entities in all the classi."}, 
 {"Unique", "Unique[] generates a new symbol, whose name is of the form $nnn. \
Unique[x] generates a new symbol, with a name of the form x$nnn. Unique[{x, \
y, \[Ellipsis]}] generates a list of new symbols. Unique[\"\\!\\(\\*xxx\"] \
generates a new symbol, with a name of the form xxxnnn."}, 
 {"UnitBox", "UnitBox[x] represents the unit box function, equal to 1 for \
\[LeftBracketingBar]x\[RightBracketingBar]<=1/2 and 0 otherwise. UnitBox[x1, \
x2, \[Ellipsis]] represents the multidimensional unit box function, equal to \
1 if \[LeftBracketingBar]xi\[RightBracketingBar]<=1/2 and 0 otherwise."}, 
 {"UnitConvert", "UnitConvert[quantity, targetunit] attempts to convert the \
specified quantity to the specified targetunit. UnitConvert[quantity] \
converts the specified quantity to SI base units."}, 
 {"UnitDimensions", "UnitDimensions[unit] returns a list of base dimensions \
associated with the specified unit. UnitDimensions[quantity] returns a list \
of base dimensions associated with the unit of the specified quantity."}, 
 {"UnitRootTest", "UnitRootTest[data] tests whether data came from an \
autoregressive time series process with unit root. UnitRootTest[data, model, \
\"\\!\\(\\*property\"] returns the value of \"\\!\\(\\*property\\!\\(\\*\\\" \
for a given model."}, {"UnitSimplify", "UnitSimplify[quantity] attempts to \
simplify the units of the specified quantity."}, 
 {"UnitStep", "UnitStep[x] represents the unit step function, equal to 0 for \
x<0 and 1 for x>=0. UnitStep[x1, x2, \[Ellipsis]] represents the \
multidimensional unit step function which is 1 only if none of the xi are \
negative."}, {"UnitSystem", "UnitSystem is an option for functions like \
AirTemperatureData that determines the units of the result."}, 
 {"UnitTriangle", "UnitTriangle[x] represents the unit triangle function on \
the interval \[LeftBracketingBar]x\[RightBracketingBar]<=1. UnitTriangle[x1, \
x2, \[Ellipsis]] represents the multidimensional unit triangle function on \
the interval \[LeftBracketingBar]xi\[RightBracketingBar]<=1."}, 
 {"UnitVector", "UnitVector[k] gives the two-dimensional unit vector in the \
k^th direction. UnitVector[n, k] gives the n -dimensional unit vector in the \
k^th direction."}, {"UnitVectorLayer", "UnitVectorLayer[n] represents a net \
layer that transforms integers between 1 and n into n -dimensional unit \
vectors. UnitVectorLayer[] leaves the n to be inferred from context."}, 
 {"UnitaryMatrixQ", "UnitaryMatrixQ[m] gives True if m is a unitary matrix, \
and False otherwise."}, {"Unitize", "Unitize[x] gives 0 when x is zero, and 1 \
when x has any other numerical value."}, {"UnityDimensions", "UnityDimensions \
is an option for UnitSimplify that specifies which UnitDimensions should be \
factored out."}, {"UniverseModelData", "UniverseModelData[spec] returns \
properties of the universe based on the default model at specification \
defined by the time after the Big Bang, the distance to the comoving object, \
or the redshift of such an object. UniverseModelData[spec, model] returns \
properties of universe model at spec. UniverseModelData[spec, property] \
returns the specified property at the time or distance spec. \
UniverseModelData[spec, property, model] returns the specified property at \
the time or distance spec for the universe model."}, 
 {"UniversityData", "UniversityData[entity, property] gives the value of the \
specified property for the university entity. UniversityData[{entity1, \
entity2, \[Ellipsis]}, property] gives a list of property values for the \
specified university entities. UniversityData[entity, property, annotation] \
gives the specified annotation associated with the given property."}, 
 {"UnixTime", "UnixTime[] gives the total number of seconds since the \
beginning of January 1, 1970, in the GMT time zone. UnixTime[{y, m, d, h, m, \
s}] gives the Unix time specification corresponding to a date list. \
UnixTime[date] gives the Unix time specification corresponding to a \
DateObject. UnixTime[\"\\!\\(\\*string\"] gives the Unix time specification \
corresponding to a date string. UnixTime[{\"\\!\\(\\*string\", \
{\"\\!\\(\\*e_1\", \"\\!\\(\\*e_2\", \[Ellipsis]}}] takes the date string to \
contain the elements \"\\!\\(\\*e_i\"."}, {"Unprotect", "Unprotect[s1, s2, \
\[Ellipsis]] removes the attribute Protected for the symbols si. \
Unprotect[\"\\!\\(\\*form_1\", \"\\!\\(\\*form_2\", \[Ellipsis]] unprotects \
all symbols whose names textually match any of the formi."}, 
 {"UnregisterExternalEvaluator", "UnregisterExternalEvaluator[sys, target] \
unregisters the external evaluator referenced by target for system sys so \
that it is not used by ExternalEvaluate and related functions. \
UnregisterExternalEvaluator[uuid] unregisters the external evaluator with the \
specified registration UUID."}, {"UnsameQ", "lhs =!= rhs yields True if the \
expression lhs is not identical to rhs, and yields False otherwise."}, 
 {"UnsavedVariables", "UnsavedVariables is an option for Manipulate, \
DynamicModule, and related functions that specifies local symbols that should \
not be saved when the notebook containing them is saved."}, 
 {"Unset", "lhs=. removes any rules defined for lhs."}, 
 {"UnsetShared", "UnsetShared[s1, s2, \[Ellipsis]] stops the sharing of the \
variables or functions si among parallel kernels. UnsetShared[patt] stops the \
sharing of all variables and functions whose names match the string pattern \
patt."}, {"UpArrow", 
  "UpArrow[x, y, \[Ellipsis]] displays as x\[UpArrow]y\[UpArrow]\[Ellipsis]."}\
, {"UpArrowBar", "UpArrowBar[x, y, \[Ellipsis]] displays as \
x\[UpArrowBar]y\[UpArrowBar]\[Ellipsis]."}, {"UpArrowDownArrow", "UpArrowDown\
Arrow[x, y, \[Ellipsis]] displays as \
x\[UpArrowDownArrow]y\[UpArrowDownArrow]\[Ellipsis]."}, 
 {"UpDownArrow", "UpDownArrow[x, y, \[Ellipsis]] displays as \
x\[UpDownArrow]y\[UpDownArrow]\[Ellipsis]."}, {"UpEquilibrium", "UpEquilibriu\
m[x, y, \[Ellipsis]] displays as \
x\[UpEquilibrium]y\[UpEquilibrium]\[Ellipsis]."}, 
 {"UpSet", "lhs^=rhs assigns rhs to be the value of lhs, and associates the \
assignment with symbols that occur at level one in lhs."}, 
 {"UpSetDelayed", "lhs^:=rhs assigns rhs to be the delayed value of lhs, and \
associates the assignment with symbols that occur at level one in lhs."}, 
 {"UpTee", "UpTee[x, y] displays as x\[UpTee]y."}, 
 {"UpTeeArrow", "UpTeeArrow[x, y, \[Ellipsis]] displays as \
x\[UpTeeArrow]y\[UpTeeArrow]\[Ellipsis]."}, {"UpTo", "UpTo[n] is a symbolic \
specification that represents up to n objects or positions. If n objects or \
positions are available, all are used. If fewer are available, only those \
available are used."}, {"UpValues", "UpValues[f] gives a list of \
transformation rules corresponding to all upvalues defined for the symbol f."}\
, {"Update", "Update[symbol] tells the Wolfram Language that hidden changes \
have been made that could affect values associated with a symbol. Update[] \
specifies that the value of any symbol could be affected."}, 
 {"UpdateInterval", "UpdateInterval is an option to Refresh and Dynamic that \
specifies at what time interval to do updates."}, 
 {"UpdatePacletSites", "UpdatePacletSites is an option to PacletInstall and \
PacletInstallSubmit that specifies whether to first update the local cache of \
information about available paclets."}, {"UpdateSearchIndex", "UpdateSearchIn\
dex[obj] updates the given search index object. UpdateSearchIndex[\"name\"] \
updates the search index with the specified name in the SearchIndices[] \
list."}, {"UpperCaseQ", "UpperCaseQ[string] yields True if all the characters \
in the string are uppercase letters, and yields False otherwise."}, 
 {"UpperLeftArrow", "UpperLeftArrow[x, y, \[Ellipsis]] displays as \
x\[UpperLeftArrow]y\[UpperLeftArrow]\[Ellipsis]."}, 
 {"UpperRightArrow", "UpperRightArrow[x, y, \[Ellipsis]] displays as \
x\[UpperRightArrow]y\[UpperRightArrow]\[Ellipsis]."}, 
 {"UpperTriangularMatrixQ", "UpperTriangularMatrixQ[m] gives True if m is \
upper triangular, and False otherwise. UpperTriangularMatrixQ[m, k] gives \
True if m is upper triangular starting up from the k^th diagonal, and False \
otherwise."}, {"UpperTriangularize", "UpperTriangularize[m] gives a matrix in \
which all but the upper triangular elements of m are replaced with zeros. \
UpperTriangularize[m, k] replaces with zeros only the elements below the k^th \
subdiagonal of m."}, {"Upsample", "Upsample[array, n] returns an upsampled \
version of the array by inserting n - 1 zeros between array elements. \
Upsample[array, n, offset] shifts array so that its first element moves to \
the position offset in the resulting array. Upsample[array, n, offset, val] \
inserts n - 1 elements of value val between array elements. Upsample[image, \
\[Ellipsis]] upsamples an image."}, {"UseEmbeddedLibrary", "UseEmbeddedLibrar\
y is an option of FunctionCompile that embeds a shared library in a \
CompiledCodeFunction."}, {"UsingFrontEnd", 
  "UsingFrontEnd[expr] evaluates expr, making use of a front end if \
necessary."}, {"UtilityFunction", "UtilityFunction is an option for Predict, \
Classify, and related functions that specifies the utility value to assign to \
each possible pairing of actual and predicted values."}, 
 {"ValenceErrorHandling", "ValenceErrorHandling is an option for \
MoleculeModify that specifies whether molecule valences should be \
automatically adjusted after modification."}, {"ValenceFilling", "ValenceFill\
ing is an option for Molecule that specifies whether to fill open valences \
with hydrogen atoms."}, {"ValidationLength", "ValidationLength is an option \
to FindSequenceFunction and related functions that specifies the number of \
elements in the input sequence that should be used to validate a potential \
representation found."}, {"ValidationSet", "ValidationSet is an option for \
Predict, Classify, NetTrain, and related functions that specifies the \
validation set to be used during the training phase."}, 
 {"ValueDimensions", "ValueDimensions is an option to TemporalData, \
TimeSeries, and EventSeries that specifies the dimension of the value space."}\
, {"ValuePreprocessingFunction", "ValuePreprocessingFunction is an option for \
functions such as PersistentSymbol and InitializationValue that specifies a \
function to apply to a new value that is being assigned."}, 
 {"ValueQ", "ValueQ[expr] gives True if a value has been defined for expr, \
and gives False otherwise."}, {"Values", "Values[\[LeftAssociation]key1->val1\
, key2->val2, \[Ellipsis]\[RightAssociation]] gives a list of the values vali \
in an association. Values[{key1->val1, key2->val2, \[Ellipsis]}] gives a list \
of the vali in a list of rules. Values[expr, h] gives a list of values in \
expr, wrapping each of them with head h before evaluation."}, 
 {"Variables", 
  "Variables[poly] gives a list of all independent variables in a \
polynomial."}, {"Variance", "Variance[list] gives the sample variance of the \
elements in list. Variance[dist] gives the variance of the distribution \
dist."}, {"VarianceEquivalenceTest", "VarianceEquivalenceTest[{data1, data2, \
\[Ellipsis]}] tests whether the variances of the datai are equal. \
VarianceEquivalenceTest[{data1, \[Ellipsis]},\"\\!\\(\\*property\"] returns \
the value of \"\\!\\(\\*property\"."}, {"VarianceEstimatorFunction", "Varianc\
eEstimatorFunction is an option for LinearModelFit and NonlinearModelFit \
which specifies the variance estimator to use."}, 
 {"VarianceGammaDistribution", "VarianceGammaDistribution[\[Lambda], \
\[Alpha], \[Beta], \[Mu]] represents a variance-gamma distribution with \
location parameter \[Mu], skewness parameter \[Beta], and shape parameters \
\[Lambda] and \[Alpha]."}, {"VarianceGammaPointProcess", "VarianceGammaPointP\
rocess[\[Mu], \[Lambda], \[Alpha], \[Beta], d] represents a variance gamma \
cluster point process with density \[Mu], cluster mean \[Lambda] and shape \
parameters \[Alpha] and \[Beta] in \[DoubleStruckCapitalR]^d."}, 
 {"VarianceTest", "VarianceTest[data] tests whether the variance of the data \
is one. VarianceTest[{data1, data2}] tests whether the variances of data1 and \
data2 are equal. VarianceTest[dspec, \[Sigma]0^2] tests a dispersion measure \
against \[Sigma]0^2. VarianceTest[dspec, \[Sigma]0^2, \"\\!\\(\\*property\"] \
returns the value of \"\\!\\(\\*property\"."}, 
 {"VectorAngle", 
  "VectorAngle[u, v] gives the angle between the vectors u and v."}, 
 {"VectorAround", "VectorAround[{x1, x2, \[Ellipsis]}, {\[Delta]1, \[Delta]2, \
\[Ellipsis]}] represents a vector of uncorrelated approximate numbers or \
quantities with values xi and uncertainties \[Delta]i. VectorAround[{x1, x2, \
\[Ellipsis]}, {{\[CapitalDelta]11, \[CapitalDelta]12, \[Ellipsis]}, \
{\[CapitalDelta]12, \[CapitalDelta]22, \[Ellipsis]}, \[Ellipsis]}] represents \
a vector of approximate numbers or quantities with values xi and covariance \
matrix \[CapitalDelta]. VectorAround[{x1, x2}, {{\[Delta]1, \[Delta]2}, \
\[Rho]}] represents a pair of approximate numbers or quantities with \
uncertainties \[Delta]1, \[Delta]2 and correlation factor \[Rho]. \
VectorAround[{x1, x2, \[Ellipsis]}, {{\[Delta]1, \[Delta]2, \[Ellipsis]}, \
{{1, R12, \[Ellipsis]}, {R12, 1, \[Ellipsis]}, \[Ellipsis]}}] represents a \
vector of approximate numbers or quantities with uncertainties \[Delta]i and \
correlation matrix R."}, {"VectorAspectRatio", "VectorAspectRatio is an \
option setting for VectorPlot and related functions that determines the \
relative width and length of the arrow markers in the plot."}, 
 {"VectorColorFunction", "VectorColorFunction is an option for VectorPlot and \
related functions that specifies a function to apply to determine colors of \
field vectors drawn."}, {"VectorColorFunctionScaling", "VectorColorFunctionSc\
aling is an option for graphics functions which specifies whether arguments \
supplied to a vector color function should be scaled to lie between 0 and 1."}\
, {"VectorDensityPlot", "VectorDensityPlot[{{vx, vy}, s}, {x, xmin, xmax}, \
{y, ymin, ymax}] generates a vector plot of the vector field {vx, vy} as a \
function of x and y, superimposed on a density plot of the scalar field s. \
VectorDensityPlot[{vx, vy}, {x, xmin, xmax}, {y, ymin, ymax}] takes the \
scalar field to be the norm of the vector field. VectorDensityPlot[{{vx, vy}, \
{wx, wy}, \[Ellipsis], s}, {x, xmin, xmax}, {y, ymin, ymax}] plots several \
vector fields. VectorDensityPlot[\[Ellipsis], {x, y}\[Element]reg] takes the \
variables {x, y} to be in the geometric region reg."}, 
 {"VectorGreater", "x\[Backslash][VectorGreater]y or VectorGreater[{x, y}] \
yields True for vectors of length n if xi>yi for all components 1<=i<=n. \
x\[Backslash][VectorGreater]\[Kappa]y or VectorGreater[{x, y}, \[Kappa]] \
yields True for x and y if x - y\[Element]interior(\[Kappa]), where \[Kappa] \
is a proper convex cone."}, {"VectorGreaterEqual", "x\[Backslash][VectorGreat\
erEqual]y or VectorGreaterEqual[{x, y}] yields True for vectors of length n \
if xi>=yi for all components 1<=i<=n. \
x\[Backslash][VectorGreaterEqual]\[Kappa]y or VectorGreaterEqual[{x, y}, \
\[Kappa]] yields True for x and y if x - y\[Element]\[Kappa], where \[Kappa] \
is a proper convex cone."}, {"VectorLess", "x\[Backslash][VectorLess]y or \
VectorLess[{x, y}] yields True for vectors of length n if xi<yi for all \
components 1<=i<=n. x\[Backslash][VectorLess]\[Kappa]y or VectorLess[{x, y}, \
\[Kappa]] yields True for x and y if y - x\[Element]interior(\[Kappa]), where \
\[Kappa] is a proper convex cone."}, {"VectorLessEqual", "x\[Backslash][Vecto\
rLessEqual]y or VectorLessEqual[{x, y}] yields True for vectors of length n \
if xi<=yi for all components 1<=i<=n. x\[Backslash][VectorLessEqual]\[Kappa]y \
or VectorLessEqual[{x, y}, \[Kappa]] yields True for x and y if y - \
x\[Element]\[Kappa], where \[Kappa] is a proper convex cone."}, 
 {"VectorMarkers", "VectorMarkers is an option for graphics functions like \
VectorPlot, ListVectorPlot and related functions that specifies what markers \
to draw at the field points plotted."}, {"VectorPlot", "VectorPlot[{vx, vy}, \
{x, xmin, xmax}, {y, ymin, ymax}] generates a vector plot of the vector field \
{vx, vy} as a function of x and y. VectorPlot[{{vx, vy}, {wx, wy}, \
\[Ellipsis]}, {x, xmin, xmax}, {y, ymin, ymax}] plots several vector fields. \
VectorPlot[\[Ellipsis], {x, y}\[Element]reg] takes the variables {x, y} to be \
in the geometric region reg."}, {"VectorPlot3D", "VectorPlot3D[{vx, vy, vz}, \
{x, xmin, xmax}, {y, ymin, ymax}, {z, zmin, zmax}] generates a 3D vector plot \
of the vector field {vx, vy, vz} as a function of x, y, and z. \
VectorPlot3D[{field1, field2, \[Ellipsis]}, {x, xmin, xmax}, {y, ymin, ymax}, \
{z, zmin, zmax}] plots several vector fields. VectorPlot3D[\[Ellipsis], {x, \
y, z}\[Element]reg] takes the variables {x, y, z} to be in the geometric \
region reg."}, {"VectorPoints", "VectorPoints is an option to VectorPlot, \
ListVectorPlot, and related functions that determines where to draw arrows."}\
, {"VectorQ", "VectorQ[expr] gives True if expr is a list or a \
one-dimensional SparseArray object, none of whose elements are themselves \
lists, and gives False otherwise. VectorQ[expr, test] gives True only if test \
yields True when applied to each of the elements in expr."}, 
 {"VectorRange", "VectorRange is an option for VectorPlot and related \
functions that specifies the range of vector magnitudes to include in a \
plot."}, {"VectorScaling", "VectorScaling is an option for VectorPlot and \
related functions that determines how the magnitudes of vectors are scaled \
for visualization."}, {"VectorSizes", "VectorSizes is an option for \
VectorPlot and related functions that specifies the range of sizes used for \
arrows."}, {"VectorStyle", "VectorStyle is an option to VectorPlot, \
ListVectorPlot, and related functions that determines the style to use for \
drawing field vectors."}, {"Vectors", "Vectors[d] represents the domain of \
vectors of dimension d. Vectors[d, dom] represents the domain of vectors of \
dimension d, with components in the domain dom."}, 
 {"Vee", "Vee[x, y, \[Ellipsis]] displays as x\[Vee]y\[Vee]\[Ellipsis]."}, 
 {"Verbatim", "Verbatim[expr] represents expr in pattern matching, requiring \
that expr be matched exactly as it appears, with no substitutions for blanks \
or other transformations."}, {"VerificationTest", "VerificationTest[input] \
runs a verification test to determine whether input evaluates to True, \
without issuing messages. VerificationTest[input, expected] tests whether \
input evaluates to expected, without issuing messages. \
VerificationTest[input, expected, messages] tests whether input evaluates to \
expected, generating the list of message names messages."}, 
 {"VerifyConvergence", "VerifyConvergence is an option to Sum, NSum, and \
similar functions that specifies whether convergence checking should be \
done."}, {"VerifyDerivedKey", "VerifyDerivedKey[key, password] verifies that \
password matches the password used to generate the derived key."}, 
 {"VerifyDigitalSignature", "VerifyDigitalSignature[{expr, sig}, key] \
verifies the digital signature sig for expr using the specified public key. \
VerifyDigitalSignature[{{expr1, sig1}, {expr2, sig2}, \[Ellipsis]}, key] \
verifies the digital signatures sigi for each of the expri, all using the \
specified public key. VerifyDigitalSignature[key] is an operator form of \
VerifyDigitalSignature, suitable for application to {expr, sig} or a list of \
such pairs."}, {"VerifyFileSignature", "VerifyFileSignature[{\"\\!\\(\\*file\
\", sig}, key] verifies the digital signature sig for file using the \
specified public key. VerifyFileSignature[{\"\\!\\(\\*file\", range, sig}, \
key] verifies the digital signature sig for the specified range of bytes in \
the file. VerifyFileSignature[{{\"\\!\\(\\*file_1\", range1, sig1}, \
{\"\\!\\(\\*file_2\", range2, sig2}, \[Ellipsis]}, key] verifies the digital \
signatures sigi for each of rangei of bytes in the filei, all using the \
specified public key. VerifyFileSignature[key] represents an operator form of \
VerifyFileSignature that can be applied to files."}, 
 {"VerifyInterpretation", "VerifyInterpretation is an option for TextCases, \
TextPosition and TextContents that verifies that results can be interpreted \
using Interpreter and related functions and drops those that cannot."}, 
 {"VerifySecurityCertificates", "VerifySecurityCertificates is an option for \
URLRead and related functions that specifies whether to verify security \
certificates when making an HTTPS connection."}, 
 {"VerifySolutions", "VerifySolutions is an option to Solve and related \
functions that controls whether to verify solutions."}, 
 {"VerifyTestAssumptions", "VerifyTestAssumptions is an option to \
LocationTest and similar functions that controls which assumptions to verify \
through diagnostic tests."}, {"VersionedPreferences", "VersionedPreferences \
is a global front end option that specifies whether settings on $FrontEnd \
should be sandboxed to specific versions of the Wolfram System."}, 
 {"VertexAdd", "VertexAdd[g, v] makes a graph by adding the vertex v to the \
graph g. VertexAdd[g, {v1, v2, \[Ellipsis]}] adds a collection of vertices to \
g. VertexAdd[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify the \
graph g."}, {"VertexCapacity", "VertexCapacity is an option and annotation \
for Graph and related functions that specifies a vertex capacity."}, 
 {"VertexColors", "VertexColors is an option for graphics primitives which \
specifies the colors to assign to vertices."}, 
 {"VertexComponent", "VertexComponent[g, {v1, v2, \[Ellipsis]}] gives the \
vertices in the graph g that have a path to at least one of v1, v2, \
\[Ellipsis]. VertexComponent[g, {v1, v2, \[Ellipsis]}, k] gives the vertices \
with a path to at least one of v1, v2, \[Ellipsis] of at most length k. \
VertexComponent[g, {v1, v2, \[Ellipsis]}, {k}] gives the vertices at length \
exactly k. VertexComponent[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w \
to specify the graph g."}, {"VertexConnectivity", "VertexConnectivity[g] \
gives the vertex connectivity of the graph g. VertexConnectivity[g, s, t] \
gives the s -t vertex connectivity of the graph g. VertexConnectivity[{v->w, \
\[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify the graph g."}, 
 {"VertexContract", "VertexContract[g, {v1, v2, \[Ellipsis]}] contracts a \
collection of vertices v1, v2, \[Ellipsis] into a single vertex of the graph \
g. VertexContract[g, {{v1, v2, \[Ellipsis]}, \[Ellipsis]}] contracts several \
collections of vertices. VertexContract[{v->w, \[Ellipsis]}, \[Ellipsis]] \
uses rules v->w to specify the graph g."}, {"VertexCoordinates", "VertexCoord\
inates is an option to Graph and related functions that specifies the \
coordinates to use to place the center of vertices."}, 
 {"VertexCorrelationSimilarity", "VertexCorrelationSimilarity[g, u, v] gives \
the correlation similarity between vertices u and v of the graph g. \
VertexCorrelationSimilarity[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w \
to specify the graph g."}, {"VertexCosineSimilarity", "VertexCosineSimilarity\
[g, u, v] gives the cosine similarity between vertices u and v of the graph \
g. VertexCosineSimilarity[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w \
to specify the graph g."}, {"VertexCount", "VertexCount[g] gives a count of \
the number of vertices in the graph g. VertexCount[g, patt] gives a count of \
the number of vertices that match the pattern patt. VertexCount[{v->w, \
\[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify the graph g."}, 
 {"VertexCoverQ", "VertexCoverQ[g, vlist] yields True if the vertex list \
vlist is a vertex cover of the graph g, and False otherwise."}, 
 {"VertexDataCoordinates", "VertexDataCoordinates is an option to Raster3D \
that determines how to map data to the displayed range."}, 
 {"VertexDegree", "VertexDegree[g] gives the list of vertex degrees for all \
vertices in the graph g. VertexDegree[g, v] gives the vertex degree for the \
vertex v. VertexDegree[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to \
specify the graph g."}, {"VertexDelete", "VertexDelete[g, v] makes a graph by \
deleting the vertex \[Nu] and all edges connected to v from the graph g. \
VertexDelete[g, {v1, v2, \[Ellipsis]}] deletes a collection of vertices from \
g. VertexDelete[g, patt] deletes all vertices that match the pattern patt. \
VertexDelete[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify the \
graph g."}, {"VertexDiceSimilarity", "VertexDiceSimilarity[g, u, v] gives the \
Dice similarity between vertices u and v of the graph g. \
VertexDiceSimilarity[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to \
specify the graph g."}, {"VertexEccentricity", "VertexEccentricity[g, s] \
gives the length of the longest shortest path from the source s to every \
other vertex in the graph g. VertexEccentricity[{v->w, \[Ellipsis]}, \
\[Ellipsis]] uses rules v->w to specify the graph g."}, 
 {"VertexInComponent", "VertexInComponent[g, {v1, v2, \[Ellipsis]}] gives the \
vertices in the graph g that have a directed path to at least one of v1, v2, \
\[Ellipsis]. VertexInComponent[g, {v1, v2, \[Ellipsis]}, k] gives the \
vertices with a directed path to at least one of v1, v2, \[Ellipsis] of at \
most length k. VertexInComponent[g, {v1, v2, \[Ellipsis]}, {k}] gives the \
vertices at length exactly k. VertexInComponent[{v->w, \[Ellipsis]}, \
\[Ellipsis]] uses rules v->w to specify the graph g."}, 
 {"VertexInComponentGraph", "VertexInComponentGraph[g, {v1, v2, \[Ellipsis]}] \
gives the subgraph of the graph g generated by the vertices that have a \
directed path to at least one of v1, v2, \[Ellipsis]. \
VertexInComponentGraph[g, {v1, v2, \[Ellipsis]}, k] gives the subgraph of g \
generated by vertices with a directed path of at most length k to at least \
one of v1, v2, \[Ellipsis]. VertexInComponentGraph[g, {v1, v2, \[Ellipsis]}, \
{k}] gives the subgraph of g generated by vertices of length exactly k. \
VertexInComponentGraph[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to \
specify the graph g."}, {"VertexInDegree", "VertexInDegree[g] gives the list \
of vertex in-degrees for all vertices in the graph g. VertexInDegree[g, v] \
gives the vertex in-degree for the vertex v. VertexInDegree[{v->w, \
\[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify the graph g."}, 
 {"VertexIndex", "VertexIndex[g, v] gives the integer index for the vertex v \
in the graph g. VertexIndex[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w \
to specify the graph g."}, {"VertexJaccardSimilarity", "VertexJaccardSimilari\
ty[g, u, v] gives the Jaccard similarity between vertices u and v of the \
graph g. VertexJaccardSimilarity[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules \
v->w to specify the graph g."}, {"VertexLabelStyle", "VertexLabelStyle is an \
option and property for Graph and related functions that specifies the style \
to use for vertex labels."}, {"VertexLabels", "VertexLabels is an option and \
annotation for Graph and related functions that specifies what labels and \
label positions should be used for vertices."}, 
 {"VertexList", "VertexList[g] gives the list of vertices for the graph g. \
VertexList[g, patt] gives a list of vertices that match the pattern patt. \
VertexList[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify the \
graph g."}, {"VertexNormals", "VertexNormals is an option for graphics \
primitives which specifies the normal directions to assign to 3D vertices."}, 
 {"VertexOutComponent", "VertexOutComponent[g, {v1, v2, \[Ellipsis]}] gives \
the vertices in the graph g that have a directed path from at least one of \
v1, v2, \[Ellipsis]. VertexOutComponent[g, {v1, v2, \[Ellipsis]}, k] gives \
the vertices with a directed path from at least one of v1, v2, \[Ellipsis] of \
at most length k. VertexOutComponent[g, {v1, v2, \[Ellipsis]}, {k}] gives the \
vertices at length exactly k. VertexOutComponent[{v->w, \[Ellipsis]}, \
\[Ellipsis]] uses rules v->w to specify the graph g."}, 
 {"VertexOutComponentGraph", "VertexOutComponentGraph[g, {v1, v2, \
\[Ellipsis]}] gives the subgraph of the graph g generated by the vertices \
that have a directed path from at least one of v1, v2, \[Ellipsis]. \
VertexOutComponentGraph[g, {v1, v2, \[Ellipsis]}, k] gives the subgraph of g \
generated by vertices with a directed path of at most length k from at least \
one of v1, v2, \[Ellipsis]. VertexOutComponentGraph[g, {v1, v2, \[Ellipsis]}, \
{k}] gives the subgraph of g generated by vertices of length exactly k. \
VertexOutComponentGraph[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to \
specify the graph g."}, {"VertexOutDegree", "VertexOutDegree[g] gives the \
list of vertex out-degrees for all vertices in the graph g. \
VertexOutDegree[g, v] gives the vertex out-degree for the vertex v. \
VertexOutDegree[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify \
the graph g."}, {"VertexQ", "VertexQ[g, v] yields True if v is a vertex in \
the graph g and False otherwise."}, {"VertexReplace", "VertexReplace[g, \
{v1->w1, v2->w2, \[Ellipsis]}] replaces each vertex vi in the graph g by wi. \
VertexReplace[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w to specify \
the graph g."}, {"VertexShape", "VertexShape is an option and property for \
Graph and related functions that specifies the graphics used for vertices."}, 
 {"VertexShapeFunction", "VertexShapeFunction is an option and annotation for \
Graph and related functions that specifies a function to use to generate \
primitives for rendering each vertex."}, {"VertexSize", "VertexSize is an \
option and property for Graph and related functions that specifies the size \
used for vertices."}, {"VertexStyle", "VertexStyle is an option and \
annotation for Graph and related functions that specifies what style to use \
for vertices."}, {"VertexTextureCoordinates", "VertexTextureCoordinates is an \
option for graphics primitives that specifies the texture coordinates to \
assign to vertices."}, {"VertexTransitiveGraphQ", "VertexTransitiveGraphQ[g] \
yields True if the graph g is a vertex-transitive graph and False otherwise."}\
, {"VertexWeight", "VertexWeight is an option and annotation for Graph and \
related functions that specifies a vertex weight."}, 
 {"VertexWeightedGraphQ", "VertexWeightedGraphQ[g] yields True if the graph g \
is a vertex-weighted graph, and False otherwise."}, 
 {"VerticalBar", "VerticalBar[x, y, \[Ellipsis]] displays as \
x\[VerticalBar]y\[VerticalBar]\[Ellipsis]."}, {"VerticalGauge", "VerticalGaug\
e[value] draws a linear gauge showing value in a range of 0 to 1. \
VerticalGauge[value, {min, max}] draws a linear gauge showing value in a \
range of min to max. VerticalGauge[Dynamic[value], \[Ellipsis]] allows value \
to be set interactively using the gauge. VerticalGauge[{value1, value2, \
\[Ellipsis]}, \[Ellipsis]] draws a gauge showing multiple values."}, 
 {"VerticalSeparator", 
  "VerticalSeparator[x, y, \[Ellipsis]] displays as x|y|\[Ellipsis]."}, 
 {"VerticalSlider", "VerticalSlider[y] represents a vertical slider at \
position y with range 0 to 1. VerticalSlider[Dynamic[y]] takes the position \
to be the dynamically updated current value of y, with the value of y being \
reset if the slider is moved. VerticalSlider[y, {ymin, ymax}] represents a \
vertical slider with range ymin to ymax. VerticalSlider[y, {ymin, ymax, dy}] \
represents a vertical slider that jumps in steps dy. VerticalSlider[y, {{e1, \
e2, \[Ellipsis]}}] represents a slider in which equally spaced intervals \
correspond to successive settings ei. VerticalSlider[y, {{{e1, h1}, {e2, h2}, \
\[Ellipsis]}}] uses intervals of relative heights hi for the ei."}, 
 {"VerticalTilde", "VerticalTilde[x, y, \[Ellipsis]] displays as \
x\[VerticalTilde]y\[VerticalTilde]\[Ellipsis]."}, 
 {"Video", "Video[file] represents video stored in the given file. Video[url] \
represents video stored in the given URL."}, {"VideoCombine", "VideoCombine[{\
obj1, obj2, \[Ellipsis]}] creates a multi-track video by combining all tracks \
of Video or Audio objects obji."}, {"VideoDelete", "VideoDelete[video, t] \
deletes the first t seconds of video. VideoDelete[video, - t] deletes the \
last t seconds of video. VideoDelete[video, {t1, t2}] deletes from time t1 to \
time t2, returning the remaining video as a single Video object. \
VideoDelete[video, {{t11, t12}, \[Ellipsis]}] deletes multiple time \
intervals."}, {"VideoEncoding", "VideoEncoding is an option for Export and \
other functions that specifies the video encoding to use when creating a \
video file."}, {"VideoExtractFrames", "VideoExtractFrames[video, t] extracts \
a frame at time t from video. VideoExtractFrames[video, tspec] extracts video \
frames at time specification tspec."}, {"VideoFrameList", 
  "VideoFrameList[video, n] gives a list of n images extracted from video."}, 
 {"VideoFrameMap", "VideoFrameMap[f, video] applies f to each frame of the \
Video object video, returning a new Video object. VideoFrameMap[f, video, n] \
applies f to overlapping partitions of n video frames. VideoFrameMap[f, \
video, n, d] applies f to partitions with offset d. VideoFrameMap[f, {video1, \
video2, \[Ellipsis]}, \[Ellipsis]] applies f to a list of inputs extracted \
from each videoi."}, {"VideoGenerator", "VideoGenerator[model] generates one \
second of video of a given model. VideoGenerator[model, dur] generates a \
video of duration dur."}, {"VideoInsert", "VideoInsert[video, t->new] inserts \
the video new at time t. VideoInsert[video, {t1, t2, \[Ellipsis]}->new] \
inserts the same video at multiple positions. VideoInsert[video, {t1->new1, \
\[Ellipsis]}] inserts multiple videos at different positions."}, 
 {"VideoIntervals", "VideoIntervals[video, crit] returns time intervals of \
video for which the criterion crit is satisfied. VideoIntervals[video, crit, \
n] evaluates criterion crit on partitions of n video frames. \
VideoIntervals[video, crit, n, d] evaluates crit on partitions with offset d. \
VideoIntervals[{video1, video2, \[Ellipsis]}, crit, \[Ellipsis]] applies crit \
to a list of inputs extracted from each videoi."}, 
 {"VideoJoin", "VideoJoin[video1, video2, \[Ellipsis]] concatenates all \
videoi and returns a video object."}, {"VideoMap", "VideoMap[f, video] \
applies f to partial video and audio data corresponding to one frame of \
video, returning a new video. VideoMap[f, video, n] applies f to data \
corresponding to overlapping partitions of n video frames. VideoMap[f, video, \
n, d] applies f to partitions with offset d. VideoMap[f, {video1, video2, \
\[Ellipsis]}, \[Ellipsis]] applies f to a list of inputs extracted from each \
videoi."}, {"VideoMapList", "VideoMapList[f, video] applies f to a chunk of \
data corresponding to one frame from the Video object video, returning a list \
of results. VideoMapList[f, video, n] applies f to overlapping partitions \
corresponding to n video frames. VideoMapList[f, video, n, d] applies f to \
partitions with offset d. VideoMapList[f, {video1, video2, \[Ellipsis]}, \
\[Ellipsis]] applies f to a list of inputs extracted from each videoi."}, 
 {"VideoMapTimeSeries", "VideoMapTimeSeries[f, video] applies f to each frame \
of the Video object video, returning a time series. VideoMapTimeSeries[f, \
video, n] applies f to overlapping partitions of n video frames. \
VideoMapTimeSeries[f, video, n, d] applies f to partitions with offset d. \
VideoMapTimeSeries[f, {video1, video2, \[Ellipsis]}, \[Ellipsis]] applies f \
to a list of inputs extracted from each videoi."}, 
 {"VideoPause", "VideoPause[] pauses the playback of all VideoStream objects. \
VideoPause[vstream] pauses the playback of the VideoStream object vstream."}, 
 {"VideoPlay", "VideoPlay[video] returns a new VideoStream object from video \
and starts the playback. VideoPlay[vstream] starts playing a VideoStream \
object vstream."}, {"VideoQ", "VideoQ[video] yields True if video has the \
form of a valid Video object, and False otherwise."}, 
 {"VideoRecord", "VideoRecord[source] creates a VideoStream object and \
records from source. VideoRecord[vstream] starts recording a VideoStream \
object vstream that is connected to an imaging device, a screen or a \
notebook."}, {"VideoReplace", "VideoReplace[video, {t1, t2}->new] replaces \
the video between t1 and t2 with the new video new. VideoReplace[video, \
{{t11, t12}, \[Ellipsis]}->new] replaces multiple intervals with the same \
video new. VideoReplace[video, {{t11, t12}->new1, \[Ellipsis]}] replaces \
multiple intervals. VideoReplace[video, \[Ellipsis], durfitting] uses the \
specified durfitting method to replace an interval of a different duration."}\
, {"VideoSplit", "VideoSplit[video, t] splits video at time t. \
VideoSplit[video, {t1, t2, \[Ellipsis]}] splits video at times ti."}, 
 {"VideoStop", "VideoStop[] stops the playback of all VideoStream objects. \
VideoStop[vstream] stops the playback of the VideoStream object vstream."}, 
 {"VideoStream", "VideoStream[source] creates a new VideoStream object from \
source. VideoStream[id] is an object that represents a unique video stream."}\
, {"VideoStreams", "VideoStreams[] returns all existing video streams."}, 
 {"VideoTimeStretch", "VideoTimeStretch[video, spec] applies time stretching \
to video using the specified spec."}, {"VideoTrackSelection", "VideoTrackSele\
ction is an option that specifies the video tracks of interest."}, 
 {"VideoTranscode", "VideoTranscode[video, \"\\!\\(\\*format\"] converts \
video to the specified format. VideoTranscode[video, service] converts video \
to the specification recommended by the specified service."}, 
 {"VideoTrim", "VideoTrim[video, t] returns the first t seconds of video. \
VideoTrim[video, - t] returns the last t seconds of video. VideoTrim[video, \
{t1, t2}] returns video starting at time t1 and ending at time t2 of video. \
VideoTrim[video, {{t11, t12}, \[Ellipsis]}] returns a list of video objects \
for all given intervals {ti1, ti2}."}, {"ViewAngle", "ViewAngle is an option \
for Graphics3D and related functions that gives the opening angle for a \
simulated camera used to view the three-dimensional scene."}, 
 {"ViewCenter", "ViewCenter is an option for Graphics3D and related functions \
which gives the scaled coordinates of the point which should appear at the \
center of the final image."}, {"ViewMatrix", "ViewMatrix is an option for \
Graphics3D and related functions that can be used to specify a pair of \
explicit homogeneous transformation and projection matrices for 3D \
coordinates."}, {"ViewPoint", "ViewPoint is an option for Graphics3D and \
related functions which gives the point in space from which three-dimensional \
objects are to be viewed."}, {"ViewProjection", "ViewProjection is an option \
for three-dimensional graphics that specifies the projection to use for the \
graphic."}, {"ViewRange", "ViewRange is an option for Graphics3D and related \
functions which specifies the range of distances from the view point to be \
included in displaying a three-dimensional scene."}, 
 {"ViewVector", "ViewVector is an option for Graphics3D and related functions \
which specifies the position and direction of a simulated camera used to view \
three-dimensional objects."}, {"ViewVertical", "ViewVertical is an option for \
Graphics3D and related functions which specifies what direction in scaled \
coordinates should be vertical in the final image."}, 
 {"Visible", "Visible is a notebook option which specifies whether the \
notebook should be explicitly displayed on the screen."}, 
 {"VoiceStyleData", "VoiceStyleData[] gives the list of available voices for \
speech synthesis. VoiceStyleData[voice] returns all properties for the \
specified voice. VoiceStyleData[voice, prop] returns the specified property \
prop for voice."}, {"VoigtDistribution", "VoigtDistribution[\[Delta], \
\[Sigma]] represents Voigt distribution with parameters \[Delta] and \
\[Sigma]."}, {"VolcanoData", "VolcanoData[entity, property] gives the value \
of the specified property for the volcano entity. VolcanoData[{entity1, \
entity2, \[Ellipsis]}, property] gives a list of property values for the \
specified volcano entities. VolcanoData[entity, property, annotation] gives \
the specified annotation associated with the given property."}, 
 {"Volume", "Volume[reg] gives the volume of the three-dimensional region \
reg. Volume[{x1, \[Ellipsis], xn}, {s, smin, smax}, {t, tmin, tmax}, {u, \
umin, umax}] gives the volume of the parametrized region whose Cartesian \
coordinates xi are functions of s, t, u. Volume[{x1, \[Ellipsis], xn}, {s, \
smin, smax}, {t, tmin, tmax}, {u, umin, umax}, chart] interprets the xi as \
coordinates in the specified coordinate chart."}, 
 {"VonMisesDistribution", "VonMisesDistribution[\[Mu], \[Kappa]] represents a \
von Mises distribution with mean \[Mu] and concentration \[Kappa]."}, 
 {"VoronoiMesh", "VoronoiMesh[{p1, \[Ellipsis], pn}] gives a MeshRegion \
representing the Voronoi mesh from the points p1, p2, \[Ellipsis]. \
VoronoiMesh[{p1, \[Ellipsis], pn}, {{xmin, xmax}, \[Ellipsis]}] clips the \
mesh to the bounds [xmin, xmax]\[Times]\[CenterEllipsis]."}, 
 {"WaitAll", "WaitAll[expr] waits for all concurrent evaluations represented \
by EvaluationObject expressions in expr to finish, then returns the resulting \
expression obtained."}, {"WaitNext", "WaitNext[{eid1, eid2, \[Ellipsis]}] \
waits until the first evaluation represented by any of the eidi finishes, \
then returns its result, the corresponding eidi, and the list of remaining \
eidk. WaitNext[{eid1, eid2, \[Ellipsis]}, h] wraps the head h around the \
result before returning it."}, {"WakebyDistribution", "WakebyDistribution[\
\[Alpha], \[Beta], \[Gamma], \[Delta], \[Mu]] represents Wakeby distribution \
with shape parameters \[Beta] and \[Delta], scale parameters \[Alpha] and \
\[Gamma], and location parameter \[Mu]."}, 
 {"WalleniusHypergeometricDistribution", "WalleniusHypergeometricDistribution\
[n, nsucc, ntot, w] represents a Wallenius noncentral hypergeometric \
distribution."}, {"WaringYuleDistribution", "WaringYuleDistribution[\[Alpha]] \
represents the Yule distribution with shape parameter \[Alpha]. \
WaringYuleDistribution[\[Alpha], \[Beta]] represents the Waring distribution \
with shape parameters \[Alpha] and \[Beta]."}, 
 {"WarpingCorrespondence", "WarpingCorrespondence[s1, s2] gives the time \
warping (DTW) similarity path between sequences s1 and s2. \
WarpingCorrespondence[s1, s2, win] uses a window specified by win for local \
search."}, {"WarpingDistance", "WarpingDistance[s1, s2] gives the dynamic \
time warping (DTW) distance between sequences s1 and s2. WarpingDistance[s1, \
s2, win] uses a window specified by win for local search."}, 
 {"WatershedComponents", "WatershedComponents[image] computes the watershed \
transform of image, returning the result as an array in which positive \
integers label the catchment basins. WatershedComponents[image, marker] uses \
a binary image marker to indicate regions where basins may be created."}, 
 {"WatsonUSquareTest", "WatsonUSquareTest[data] tests whether data is \
normally distributed using the Watson U^2 test. WatsonUSquareTest[data, dist] \
tests whether data is distributed according to dist using the Watson U^2 \
test. WatsonUSquareTest[data, dist, \"\\!\\(\\*property\"] returns the value \
of \"\\!\\(\\*property\"."}, {"WattsStrogatzGraphDistribution", "WattsStrogat\
zGraphDistribution[n, p] represents the Watts-Strogatz graph distribution for \
n -vertex graphs with rewiring probability p. \
WattsStrogatzGraphDistribution[n, p, k] represents the Watts-Strogatz graph \
distribution for n -vertex graphs with rewiring probability p starting from a \
2k -regular graph."}, {"WavePDEComponent", "WavePDEComponent[vars, pars] \
yields a wave equation PDE term \[PartialD]u^2/\[PartialD]t^2 - \
c^2\[Del]^2{x1, \[Ellipsis], xn}u with model variables vars and model \
parameters pars."}, {"WaveletBestBasis", "WaveletBestBasis[dwd] computes a \
best basis representation in the DiscreteWaveletData object dwd. \
WaveletBestBasis[dwd, cspec] computes a best basis representation using the \
cost specification cspec."}, {"WaveletFilterCoefficients", "WaveletFilterCoef\
ficients[wave, filt] gives the filter coefficients for the symbolic wavelet \
wave of type filt."}, {"WaveletImagePlot", "WaveletImagePlot[dwd] plots the \
basis tree of wavelet image coefficients in the DiscreteWaveletData dwd. \
WaveletImagePlot[dwd, r] plots coefficients up to refinement level r. \
WaveletImagePlot[dwd, r, ifunc] applies the image function ifunc to \
coefficients and wavelet indexes before plotting."}, 
 {"WaveletListPlot", "WaveletListPlot[dwd] plots wavelet transform \
coefficients in the DiscreteWaveletData dwd. WaveletListPlot[dwd, wind] plots \
wavelet transform coefficients corresponding to the wavelet index \
specification wind. WaveletListPlot[dwd, wind, func] applies func to \
coefficients before plotting. WaveletListPlot[{dwd1, dwd2, \[Ellipsis]}, \
\[Ellipsis]] plots wavelet transform coefficients from several \
DiscreteWaveletData objects dwd1, dwd2, \[Ellipsis]."}, 
 {"WaveletMapIndexed", "WaveletMapIndexed[f, wd] applies the function f to \
the arrays of coefficients and indices of a ContinuousWaveletData or \
DiscreteWaveletData object. WaveletMapIndexed[f, dwd, wind] applies f to the \
DiscreteWaveletData coefficients specified by wind. WaveletMapIndexed[f, cwd, \
octvoc] applies f to the ContinuousWaveletData coefficients specified by \
octvoc."}, {"WaveletMatrixPlot", "WaveletMatrixPlot[dwd] plots the basis tree \
of wavelet matrix coefficients in the DiscreteWaveletData dwd. \
WaveletMatrixPlot[dwd, r] plots coefficients up to refinement level r. \
WaveletMatrixPlot[dwd, r, func] applies func to coefficients before \
plotting."}, {"WaveletPhi", "WaveletPhi[wave, x] gives the scaling function \
\[Phi](x) for the symbolic wavelet wave evaluated at x. WaveletPhi[wave] \
gives the scaling function as a pure function."}, 
 {"WaveletPsi", "WaveletPsi[wave, x] gives the wavelet function \[Psi](x) for \
the symbolic wavelet wave evaluated at x. WaveletPsi[wave] gives the wavelet \
function as a pure function."}, {"WaveletScale", "WaveletScale is an option \
for ContinuousWaveletTransform and related constructs used to specify the \
smallest resolvable scale."}, {"WaveletScalogram", "WaveletScalogram[wd] \
plots wavelet vector coefficients in a DiscreteWaveletData or \
ContinuousWaveletData object wd. WaveletScalogram[wd, wind] plots wavelet \
coefficients corresponding to the wavelet index specification wind. \
WaveletScalogram[wd, wind, func] applies func to coefficients before \
plotting."}, {"WaveletThreshold", "WaveletThreshold[dwd] thresholds the \
detail wavelet coefficients in the DiscreteWaveletData object dwd. \
WaveletThreshold[dwd, tspec] thresholds the coefficients using the \
thresholding specification tspec. WaveletThreshold[dwd, tspec, wind] \
thresholds the wavelet coefficients given by the wavelet indices wind."}, 
 {"WeakStationarity", "WeakStationarity[proc] gives conditions for the \
process proc to be weakly stationary."}, {"WeaklyConnectedComponents", "Weakl\
yConnectedComponents[g] gives the weakly connected components of the graph g. \
WeaklyConnectedComponents[g, {v1, v2, \[Ellipsis]}] gives the weakly \
connected components that include at least one of the vertices v1, v2, \
\[Ellipsis]. WeaklyConnectedComponents[g, patt] gives the connected \
components that include a vertex that matches the pattern patt. \
WeaklyConnectedComponents[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules v->w \
to specify the graph g."}, {"WeaklyConnectedGraphComponents", "WeaklyConnecte\
dGraphComponents[g] gives the weakly connected components of the graph g. \
WeaklyConnectedGraphComponents[g, {v1, v2, \[Ellipsis]}] gives the weakly \
connected components that include at least one of the vertices v1, v2, \
\[Ellipsis]. WeaklyConnectedGraphComponents[g, patt] gives the connected \
components that include a vertex that matches the pattern patt. \
WeaklyConnectedGraphComponents[{v->w, \[Ellipsis]}, \[Ellipsis]] uses rules \
v->w to specify the graph g."}, {"WeaklyConnectedGraphQ", "WeaklyConnectedGra\
phQ[g] yields True if the graph g is weakly connected, and False otherwise."}\
, {"WeatherData", "WeatherData[loc, \"\\!\\(\\*property\"] gives the most \
recent measurement for the specified weather property at the location \
corresponding to loc. WeatherData[loc, \"\\!\\(\\*property\", date] gives all \
measurements during the specified date. WeatherData[loc, \
\"\\!\\(\\*property\", {start, end}] gives a list of dates and measurements \
for the time interval start to end. WeatherData[loc, \"\\!\\(\\*property\", \
{start, end, step}] gives measurements aggregated over the time period \
represented by step."}, {"WeatherForecastData", "WeatherForecastData[loc] \
gives the most recent forecast for all weather forecast properties for the \
specified location. WeatherForecastData[prop] gives the forecast for the \
specified property for the current location. WeatherForecastData[date] gives \
the forecast at the time or times specified by date for all properties at the \
current location. WeatherForecastData[loc, prop] gives the forecast for the \
property at the specified location. WeatherForecastData[loc, prop, datespec] \
gives the forecast at the time or times specified by datespec for the \
property at the location."}, {"WebAudioSearch", "WebAudioSearch[\"\\!\\(\\*st\
ring\"] gives a dataset of the top web audio search results for the specified \
literal string. WebAudioSearch[query] performs a web audio search using the \
specified query. WebAudioSearch[query, format] gives the elements of the web \
audio search specified by format. WebAudioSearch[query, format, crit] returns \
only audio results that satisfy crit."}, {"WebElementObject", "WebElementObje\
ct[\[Ellipsis]] represents an element of an open webpage operated on by \
WebExecute."}, {"WebExecute", "WebExecute[cmd] executes the command cmd in a \
web browser. WebExecute[{cmd1, cmd2, \[Ellipsis]}] executes a list of \
commands in sequence. WebExecute[session, cmds] executes cmds in the \
specified web session."}, {"WebImage", "WebImage[url] gives an image of the \
webpage specified by url. WebImage[list] gives images specified by URLs in \
list."}, {"WebImageSearch", "WebImageSearch[\"string\"] gives a list of \
thumbnails of the top web image search results for the specified literal \
string. WebImageSearch[form] gives the top results obtained by doing the web \
image search specified by form. WebImageSearch[form, n] picks out the first n \
top results obtained by doing the web image search specified by form. \
WebImageSearch[form, elems] gives the elements of the web image search \
specified by elems. WebImageSearch[form, elems, n] picks out the first n \
elements of the web image search specified by elems."}, 
 {"WebSearch", "WebSearch[\"\\!\\(\\*string\"] gives a dataset of the top web \
search results for the specified literal string. WebSearch[form] gives the \
top results obtained by doing the web search specified by form. \
WebSearch[form, elems] gives the elements of the web search specified by \
elems."}, {"WebSessionObject", "WebSessionObject[\[Ellipsis]] represents a \
web browser session started by StartWebSession for use with WebExecute."}, 
 {"WebSessions", "WebSessions[] gives the list of all active web sessions."}, 
 {"WebWindowObject", "WebWindowObject[\[Ellipsis]] represents an open window \
or tab in a web browser."}, {"WeberE", "WeberE[\[Nu], z] gives the Weber \
function E\[Nu](z). WeberE[\[Nu], \[Mu], z] gives the associated Weber \
function E\[Nu]\[Mu](z)."}, 
 {"Wedge", 
  "Wedge[x, y, \[Ellipsis]] displays as x\[Wedge]y\[Wedge]\[Ellipsis]."}, 
 {"Wednesday", "Wednesday is a day of the week."}, 
 {"WeibullDistribution", "WeibullDistribution[\[Alpha], \[Beta]] represents a \
Weibull distribution with shape parameter \[Alpha] and scale parameter \
\[Beta]. WeibullDistribution[\[Alpha], \[Beta], \[Mu]] represents a Weibull \
distribution with shape parameter \[Alpha], scale parameter \[Beta], and \
location parameter \[Mu]."}, {"WeierstrassE1", "WeierstrassE1[{g2, g3}] gives \
the value e1 of the Weierstrass elliptic function \[WeierstrassP] at the \
half-period g2g3."}, {"WeierstrassE2", "WeierstrassE2[{g2, g3}] gives the \
value e2 of the Weierstrass elliptic function \[WeierstrassP] at the \
half-period g2g3."}, {"WeierstrassE3", "WeierstrassE3[{g2, g3}] gives the \
value e3 of the Weierstrass elliptic function \[WeierstrassP] at the \
half-period g2g3."}, {"WeierstrassEta1", "WeierstrassEta1[{g2, g3}] gives the \
value \[Eta]1 of the Weierstrass zeta function \[Zeta] at the half-period \
g2g3."}, {"WeierstrassEta2", "WeierstrassEta2[{g2, g3}] gives the value \
\[Eta]2 of the Weierstrass zeta function \[Zeta] at the half-period g2g3."}, 
 {"WeierstrassEta3", "WeierstrassEta3[{g2, g3}] gives the value \[Eta]3 of \
the Weierstrass zeta function \[Zeta] at the half-period g2g3."}, 
 {"WeierstrassHalfPeriodW1", "WeierstrassHalfPeriodW1[{g2, g3}] gives the \
half-period \[Omega]1 for Weierstrass elliptic functions corresponding to the \
invariants {g2, g3}."}, {"WeierstrassHalfPeriodW2", "WeierstrassHalfPeriodW2[\
{g2, g3}] gives the half-period \[Omega]2 for the Weierstrass elliptic \
functions corresponding to the invariants {g2, g3}."}, 
 {"WeierstrassHalfPeriodW3", "WeierstrassHalfPeriodW3[{g2, g3}] gives the \
half-period \[Omega]3 for the Weierstrass elliptic functions corresponding to \
the invariants {g2, g3}."}, {"WeierstrassHalfPeriods", "WeierstrassHalfPeriod\
s[{g2, g3}] gives the half-periods {\[Omega]1, \[Omega]3} for Weierstrass \
elliptic functions corresponding to the invariants {g2, g3}."}, 
 {"WeierstrassInvariantG2", "WeierstrassInvariantG2[{\[Omega], \
\[Omega]^\[Prime]}] gives the invariant g2 for the Weierstrass elliptic \
functions corresponding to the half-periods {\[Omega], \[Omega]^\[Prime]}."}, 
 {"WeierstrassInvariantG3", "WeierstrassInvariantG3[{\[Omega], \
\[Omega]^\[Prime]}] gives the invariant g3 for the Weierstrass elliptic \
functions corresponding to the half-periods {\[Omega], \[Omega]^\[Prime]}."}, 
 {"WeierstrassInvariants", "WeierstrassInvariants[{\[Omega]1, \[Omega]3}] \
gives the invariants {g2, g3} for Weierstrass elliptic functions \
corresponding to the half-periods {\[Omega]1, \[Omega]3}."}, 
 {"WeierstrassP", "WeierstrassP[u, {g2, g3}] gives the Weierstrass elliptic \
function \[WeierstrassP](u;g2, g3)."}, {"WeierstrassPPrime", "WeierstrassPPri\
me[u, {g2, g3}] gives the derivative of the Weierstrass elliptic function \
\[WeierstrassP](u;g2, g3)."}, {"WeierstrassSigma", "WeierstrassSigma[u, {g2, \
g3}] gives the Weierstrass sigma function \[Sigma](u;g2, g3)."}, 
 {"WeierstrassZeta", "WeierstrassZeta[u, {g2, g3}] gives the Weierstrass zeta \
function \[Zeta](u;g2, g3)."}, {"WeightedAdjacencyGraph", "WeightedAdjacencyG\
raph[wmat] gives the graph with weighted adjacency matrix wmat. \
WeightedAdjacencyGraph[{v1, v2, \[Ellipsis]}, wmat] gives the graph with \
vertices vi and weighted adjacency matrix wmat."}, 
 {"WeightedAdjacencyMatrix", "WeightedAdjacencyMatrix[g] gives the adjacency \
matrix of edge weights of the graph g. WeightedAdjacencyMatrix[{v->w, \
\[Ellipsis]}] uses rules v->w to specify the graph g."}, 
 {"WeightedData", "WeightedData[{x1, x2, \[Ellipsis]}, {w1, w2, \[Ellipsis]}] \
represents observations xi with weights wi. WeightedData[{x1, x2, \
\[Ellipsis]}, fn] represents observations xi with weighting function fn."}, 
 {"WeightedGraphQ", "WeightedGraphQ[g] yields True if the graph g is a \
weighted graph and False otherwise."}, {"Weights", "Weights is an option for \
various fitting and other functions which specifies weights to associate with \
data elements."}, {"WelchWindow", "WelchWindow[x] represents a Welch window \
function of x. WelchWindow[x, \[Alpha]] uses the parameter \[Alpha]."}, 
 {"WheelGraph", "WheelGraph[n] gives the wheel graph with n vertices Wn."}, 
 {"WhenEvent", "WhenEvent[event, action] specifies an action that occurs when \
the event triggers it for equations in NDSolve and related functions."}, 
 {"Which", "Which[test1, value1, test2, value2, \[Ellipsis]] evaluates each \
of the testi in turn, returning the value of the valuei corresponding to the \
first one that yields True."}, {"While", "While[test, body] evaluates test, \
then body, repetitively, until test first fails to give True."}, 
 {"White", 
  "White represents the color white in graphics or style specifications."}, 
 {"WhiteNoiseProcess", "WhiteNoiseProcess[] represents a Gaussian white noise \
process with mean 0 and standard deviation 1. WhiteNoiseProcess[\[Sigma]] \
represents a Gaussian white noise process with mean 0 and standard deviation \
\[Sigma]. WhiteNoiseProcess[dist] represents a white noise process based on \
the distribution dist."}, {"WhitePoint", "WhitePoint is an option for \
ChromaticityPlot and other functions to specify what white point to show."}, 
 {"Whitespace", "Whitespace represents a sequence of whitespace characters in \
StringExpression."}, {"WhitespaceCharacter", "WhitespaceCharacter represents \
a single whitespace character in StringExpression."}, 
 {"WhittakerM", 
  "WhittakerM[k, m, z] gives the Whittaker function Mk, m(z)."}, 
 {"WhittakerW", 
  "WhittakerW[k, m, z] gives the Whittaker function Wk, m(z)."}, 
 {"WienerFilter", "WienerFilter[data, r] removes noise from data by applying \
a range-r Wiener filter. WienerFilter[data, r, ns] assumes an additive noise \
power value ns. WienerFilter[data, {r1, r2, \[Ellipsis]}, \[Ellipsis]] uses \
radius ri at level i in data."}, {"WienerProcess", "WienerProcess[\[Mu], \
\[Sigma]] represents a Wiener process with a drift \[Mu] and volatility \
\[Sigma]. WienerProcess[] represents a standard Wiener process with drift 0 \
and volatility 1."}, {"WignerD", "WignerD[{j, m1, m2}, \[Psi], \[Theta], \
\[Phi]] gives the Wigner D-function Dm1, m2j(\[Psi], \[Theta], \[Phi]). \
WignerD[{j, m1, m2}, \[Theta], \[Phi]] gives the Wigner D-function Dm1, \
m2j(0, \[Theta], \[Phi]). WignerD[{j, m1, m2}, \[Theta]] gives the Wigner \
D-function Dm1, m2j(0, \[Theta], 0)."}, {"WignerSemicircleDistribution", "Wig\
nerSemicircleDistribution[r] represents a Wigner semicircle distribution with \
radius r centered at the origin. WignerSemicircleDistribution[a, r] \
represents a Wigner semicircle distribution with radius r centered at a."}, 
 {"WikidataData", "WikidataData[item, property] gives the values of the \
specified property for the given item. WikidataData[{item1, item2, \
\[Ellipsis]}, property] gives values for each of the itemi. \
WikidataData[item, {property1, property2, \[Ellipsis]}] gives values for each \
of the propertyi. WikidataData[items, properties] gives values for each of \
the properties for each of the items."}, {"WikidataSearch", "WikidataSearch[\
\"\\!\\(\\*keywords\"] returns a list of Wikidata items whose labels include \
the given keywords. WikidataSearch[\"\\!\\(\\*type\"->\"\\!\\(\\*keywords\"] \
returns a list of Wikidata identifiers of the specified type."}, 
 {"WikipediaData", "WikipediaData[article] gives the plain text of the \
specified Wikipedia article. WikipediaData[article, property, options] gives \
the value of the specified property, modified by optional parameters, for the \
given Wikipedia article. WikipediaData[\"Category\"->category, property, \
options] gives the value of the specified property, modified by optional \
parameters, for the given Wikipedia category. \
WikipediaData[\"PageID\"->pageid, property, options] gives the value of the \
specified property, modified by optional parameters, for the article \
corresponding to the given numerical Wikipedia page ID."}, 
 {"WikipediaSearch", "WikipediaSearch[keywords] returns a list of Wikipedia \
articles whose titles include the given keywords. \
WikipediaSearch[\"Title\"->keywords, options] returns a list of Wikipedia \
articles whose titles include the given keywords. \
WikipediaSearch[\"Category\"->keywords, options] returns a list of Wikipedia \
categories whose titles include the given keywords. \
WikipediaSearch[\"Content\"->keywords] returns a list of Wikipedia articles \
whose content includes the given keywords. WikipediaSearch[loc] returns a \
list of Wikipedia articles whose associated coordinates are near the given \
location."}, {"WilksW", 
  "WilksW[m1, m2] gives Wilks's \[ScriptCapitalW] for the matrices m1 and \
m2."}, {"WilksWTest", "WilksWTest[m1, m2] tests whether the matrices m1 and \
m2 are independent. WilksWTest[\[Ellipsis], \"\\!\\(\\*property\"] returns \
the value of \"\\!\\(\\*property\"."}, {"WindDirectionData", "WindDirectionDa\
ta[] gives the most recent measurement for wind direction near the current \
location. WindDirectionData[datespec] gives the wind direction value for the \
specified time near the current location. WindDirectionData[locationspec] \
gives the most recent measurement for wind direction near the specified \
location. WindDirectionData[locationspec, datespec] gives the value or values \
for the specified date and location. WindDirectionData[{{location1, date1}, \
{location2, date2}, \[Ellipsis]}] gives values for all specified locations on \
the specified dates."}, {"WindSpeedData", "WindSpeedData[] gives the most \
recent measurement for wind speed near the current location. \
WindSpeedData[datespec] gives the wind speed value for the specified time \
near the current location. WindSpeedData[locationspec] gives the most recent \
measurement for wind speed near the specified location. \
WindSpeedData[locationspec, datespec] gives the value or values for the \
specified date and location. WindSpeedData[{{location1, date1}, {location2, \
date2}, \[Ellipsis]}] gives values for all specified locations on the \
specified dates."}, {"WindVectorData", "WindVectorData[] gives the most \
recent weather station measurement for wind vector near the current location. \
WindVectorData[datespec] gives the wind vector value for the specified time \
near the current location. WindVectorData[locationspec] gives the most recent \
measurement for wind vector near the specified location. \
WindVectorData[locationspec, datespec] gives the value or values for the \
specified date and location. WindVectorData[{{location1, date1}, {location2, \
date2}, \[Ellipsis]}] gives values for all specified locations on the \
specified dates."}, {"WindingCount", "WindingCount[contour, p] gives the \
count of the number of times a closed curve winds around a point p."}, 
 {"WindingPolygon", "WindingPolygon[{p1, p2, \[Ellipsis], pn}] gives a \
polygon representing all points for which the closed contour p1, p2, \
\[Ellipsis], pn, p1 winds around at least once. WindingPolygon[{{p11, p12, \
\[Ellipsis]}, {p21, p22, \[Ellipsis]}, \[Ellipsis]}] gives a polygon from the \
closed contours p11, p12, \[Ellipsis] and p21, p22, \[Ellipsis]. \
WindingPolygon[\[Ellipsis], \"\\!\\(\\*wrule\"] uses the specified winding \
rule \"\\!\\(\\*wrule\" to define the polygon."}, 
 {"WindowClickSelect", "WindowClickSelect is a notebook option that specifies \
whether the window for the notebook should become selected if you click it."}\
, {"WindowElements", "WindowElements is a notebook option that specifies the \
elements to include in the window used to display the notebook on the \
screen."}, {"WindowFloating", "WindowFloating is a notebook option that \
specifies whether the window for the notebook should float on top of other \
windows when it is displayed on the screen."}, 
 {"WindowFrame", "WindowFrame is a notebook option that specifies the type of \
frame to draw around the window in which the notebook is displayed on the \
screen."}, {"WindowFrameElements", "WindowFrameElements is an option for \
notebooks that specifies the elements to include in the frame of the window \
used to display the notebook on the screen."}, 
 {"WindowMargins", "WindowMargins is a notebook option that specifies what \
margins to leave around the window that is used to display the notebook on \
the screen."}, {"WindowOpacity", "WindowOpacity is a notebook option that \
determines the overall opacity of a displayed window."}, 
 {"WindowSize", "WindowSize is a notebook option that specifies the size of \
window that should be used to display a notebook on the screen."}, 
 {"WindowStatusArea", "WindowStatusArea is a notebook option that specifies \
what should appear in the status area in the frame of the window used to \
display the notebook."}, {"WindowTitle", 
  "WindowTitle is an option that specifies the title to give for a window."}, 
 {"WindowToolbars", "WindowToolbars is a notebook option that specifies the \
toolbars to include at the top of the window used to display the notebook on \
the screen."}, {"WinsorizedMean", "WinsorizedMean[list, f] gives the mean of \
the elements in list after replacing the fraction f of the smallest and \
largest elements by the remaining extreme values. WinsorizedMean[list, {f1, \
f2}] gives the mean when the fraction f1 of the smallest elements and the \
fraction f2 of the largest elements are replaced by the remaining extreme \
values. WinsorizedMean[list] gives the 5% winsorized mean \
WinsorizedMean[list, 0.05]. WinsorizedMean[dist, \[Ellipsis]] gives the \
winsorized mean of a univariate distribution dist."}, 
 {"WinsorizedVariance", "WinsorizedVariance[list, f] gives the variance of \
the elements in list after replacing the fraction f of the smallest and \
largest elements by the remaining extreme values. WinsorizedVariance[list, \
{f1, f2}] gives the variance when the fraction f1 of the smallest elements \
and the fraction f2 of the largest elements are replaced by the remaining \
extreme values. WinsorizedVariance[list] gives the 5% winsorized variance \
WinsorizedVariance[list, 0.05]. WinsorizedVariance[dist, \[Ellipsis]] gives \
the winsorized variance of a univariate distribution dist."}, 
 {"WishartMatrixDistribution", "WishartMatrixDistribution[\[Nu], \
\[CapitalSigma]] represents a Wishart matrix distribution with \[Nu] degrees \
of freedom and covariance matrix \[CapitalSigma]."}, 
 {"With", "With[{x = x0, y = y0, \[Ellipsis]}, expr] specifies that all \
occurrences of the symbols x, y, \[Ellipsis] in expr should be replaced by \
x0, y0, \[Ellipsis]."}, {"WithCleanup", "WithCleanup[expr, cleanup] evaluates \
expr, running cleanup before returning the result, even if an abort, throw, \
etc. was generated during the evaluation of expr. WithCleanup[init, expr, \
cleanup] evaluates init before evaluating expr, blocking aborts, throws, etc. \
in both init and cleanup."}, {"WithLock", "WithLock[File[\"\\!\\(\\*path\\!\\\
(\\*\\\"], expr] locks the file path, evaluates expr, then releases the file. \
WithLock[LocalSymbol[\"\\!\\(\\*name\"], expr] locks the local symbol name, \
evaluates expr, then releases the local symbol. WithLock[var, expr] locks the \
shared variable var, evaluates expr, then releases the shared variable."}, 
 {"WolframAlpha", "WolframAlpha[\"\\!\\(\\*query\"] sends query to \
Wolfram|Alpha and imports the output. WolframAlpha[\"\\!\\(\\*query\", \
format] imports the output according to the specified format."}, 
 {"WolframLanguageData", "WolframLanguageData[entity, property] gives the \
value of the specified property for the Wolfram Language symbol entity. \
WolframLanguageData[{entity1, entity2, \[Ellipsis]}, property] gives a list \
of property values for the specified Wolfram Language symbol entities. \
WolframLanguageData[entity, property, annotation] gives the specified \
annotation associated with the given property."}, 
 {"Word", "Word represents a word in Read, Find, and related functions."}, 
 {"WordBoundary", "WordBoundary represents a boundary between words for \
purposes of matching in StringExpression."}, 
 {"WordCharacter", 
  "WordCharacter represents a letter or digit character in StringExpression."}\
, {"WordCloud", "WordCloud[{s1, s2, \[Ellipsis]}] generates a word cloud \
graphic in which the si are sized according to their multiplicity in the \
list. WordCloud[{w1->s1, \[Ellipsis]}] generates a word cloud in which the si \
are sized according to the weights wi. WordCloud[\[LeftAssociation]s1->w1, \
\[Ellipsis]\[RightAssociation]] also generates a word cloud in which the si \
are sized according to the weights wi. WordCloud[{w1, w2, \[Ellipsis]}->{s1, \
s2, \[Ellipsis]}] also generates a word cloud in which the si are sized \
according to the weights wi. WordCloud[{{s1, w1}, {s2, w2}, \[Ellipsis]}] \
also generates a word cloud in which the si are sized according to the \
weights wi. WordCloud[data, shape] fits the word cloud into the region \
defined by shape."}, {"WordCount", 
  "WordCount[\"\\!\\(\\*string\"] gives the total number of words in string."}\
, {"WordCounts", "WordCounts[\"\\!\\(\\*string\"] gives an association whose \
keys are the distinct words identified in string, and whose values give the \
number of times those words appear in string. WordCounts[\"\\!\\(\\*string\", \
n] gives counts of the distinct n -grams consisting of runs of n words in \
string."}, {"WordData", "WordData[\"\\!\\(\\*word\", \"\\!\\(\\*property\"] \
gives the specified property for the English word \"\\!\\(\\*word\". \
WordData[\"\\!\\(\\*word\"] gives a list of full word specifications \
representing possible uses and senses of \"\\!\\(\\*word\". \
WordData[wordspec, \"\\!\\(\\*property\"] gives a property for a particular \
word specification."}, {"WordDefinition", "WordDefinition[\"\\!\\(\\*word\"] \
gives the dictionary definitions available for \"\\!\\(\\*word\"."}, 
 {"WordFrequency", "WordFrequency[text, word] gives the frequency of word in \
text. WordFrequency[text, {word1, word2, \[Ellipsis]}] gives an association \
of the frequencies of each of the wordi."}, {"WordFrequencyData", "WordFreque\
ncyData[word] gives the frequency of word in typical published English text. \
WordFrequencyData[{word1, word2, \[Ellipsis]}] gives an association of \
frequencies of the wordi. WordFrequencyData[word, \"TimeSeries\"] gives a \
time series for the frequency of word in typical published English text. \
WordFrequencyData[word, \"TimeSeries\", datespec] gives a time series for \
dates specified by datespec. WordFrequencyData[word, \"\\!\\(\\*prop\"] gives \
property prop of the word frequency."}, {"WordList", "WordList[] gives a list \
of common words. WordList[type] gives a list of words of the specified type."}\
, {"WordOrientation", "WordOrientation is an option for WordCloud that \
specifies the orientations in which words appear."}, 
 {"WordSearch", "WordSearch is an option for Find and FindList that specifies \
whether the text searched for must appear as a word."}, 
 {"WordSelectionFunction", "WordSelectionFunction is an option for WordCloud \
and other functions that specifies which words to use."}, 
 {"WordSeparators", "WordSeparators is an option for Read, Find, and related \
functions that specifies the list of strings to be taken as delimiters for \
words."}, {"WordSpacings", "WordSpacings is an option for WordCloud that \
specifies the empty space to be added around each word."}, 
 {"WordStem", "WordStem[\"\\!\\(\\*word\"] gives a stemmed form of word, \
removing plurals, inflections, etc."}, {"WordTranslation", "WordTranslation[\
\"\\!\\(\\*word\", lang] gives translations for word into the language lang. \
WordTranslation[\"\\!\\(\\*word\", lang1->lang2] gives translations for word \
from lang1 to lang2."}, {"WorkingPrecision", "WorkingPrecision is an option \
for various numerical operations that specifies how many digits of precision \
should be maintained in internal computations."}, 
 {"WrapAround", "WrapAround is an option for NotebookFind that specifies \
whether the find operation should continue past the bottom or top of a \
document."}, {"Write", "Write[channel, expr1, expr2, \[Ellipsis]] writes the \
expressions expri in sequence, followed by a newline, to the specified output \
channel."}, {"WriteLine", "WriteLine[\"\\!\\(\\*file\", \"\\!\\(\\*string\"] \
writes \"\\!\\(\\*string\" to a file, followed by a newline. \
WriteLine[stream, \"\\!\\(\\*string\"] writes \"\\!\\(\\*string\", followed \
by a newline, to the specified output stream. WriteLine[proc, \
\"\\!\\(\\*string\"] writes \"\\!\\(\\*string\" to an external process proc."}\
, {"WriteString", "WriteString[\"\\!\\(\\*file\", \"\\!\\(\\*string\"] writes \
\"\\!\\(\\*string\" to a file. WriteString[channel, \"\\!\\(\\*string\"] \
writes \"\\!\\(\\*string\" to a stream or process. WriteString[channel, \
expr1, expr2, \[Ellipsis]] converts the expri to strings, and then writes \
them in sequence to the specified output channel."}, 
 {"Wronskian", "Wronskian[{y1, y2, \[Ellipsis]}, x] gives the Wronskian \
determinant for the functions y1, y2, \[Ellipsis] depending on x. \
Wronskian[eqn, y, x] gives the Wronskian determinant for the basis of the \
solutions of the linear differential equation eqn with dependent variable y \
and independent variable x. Wronskian[eqns, {y1, y2, \[Ellipsis]}, x] gives \
the Wronskian determinant for the system of linear differential equations \
eqns."}, {"XMLElement", "XMLElement[tag, {attr1->val1, \[Ellipsis]}, {data1, \
\[Ellipsis]}] represents an element in symbolic XML."}, 
 {"XMLObject", "XMLObject[\"\\!\\(\\*type\"] represents the head of an XML \
object in symbolic XML."}, {"XMLTemplate", "XMLTemplate[\"\\!\\(\\*string\"] \
yields a TemplateObject that represents an XML template to be applied using \
functions like TemplateApply. XMLTemplate[src] uses File[\[Ellipsis]], \
URL[\[Ellipsis]], or CloudObject[\[Ellipsis]] as the source for the string \
template. XMLTemplate[form, args] yields a TemplateObject with arguments, \
suitable for cloud deployment or other evaluation."}, 
 {"XYZColor", "XYZColor[x, y, z] represents a color in the XYZ color space \
with tristimulus values x, y and z. XYZColor[x, y, z, a] specifies opacity a. \
XYZColor[\"\\!\\(\\*string\"] returns a color from an HTML color name etc. \
XYZColor[color] returns the XYZ representation of color."}, 
 {"Xnor", "Xnor[e1, e2, \[Ellipsis]] is the logical XNOR (not XOR) function. \
It gives True if an even number of the ei are True, and the rest are False. \
It gives False if an odd number of the ei are True, and the rest are False."}\
, {"Xor", "Xor[e1, e2, \[Ellipsis]] is the logical XOR (exclusive OR) \
function. It gives True if an odd number of the ei are True, and the rest are \
False. It gives False if an even number of the ei are True, and the rest are \
False."}, {"Yellow", 
  "Yellow represents the color yellow in graphics or style specifications."}, 
 {"Yesterday", 
  "Yesterday gives a DateObject representing the previous day."}, 
 {"YuleDissimilarity", "YuleDissimilarity[u, v] gives the Yule dissimilarity \
between Boolean vectors u and v."}, {"ZIPCodeData", "ZIPCodeData[entity, \
property] gives the value of the specified property for the ZIP code entity. \
ZIPCodeData[{entity1, entity2, \[Ellipsis]}, property] gives a list of \
property values for the specified ZIP code entities. ZIPCodeData[entity, \
property, annotation] gives the specified annotation associated with the \
given property."}, {"ZTest", "ZTest[data] tests whether the mean of the data \
is zero. ZTest[{data1, data2}] tests whether the means of data1 and data2 are \
equal. ZTest[dspec, \[Sigma]^2] tests for zero or equal means assuming a \
population variance \[Sigma]^2. ZTest[dspec, \[Sigma]^2, \[Mu]0] tests the \
mean against \[Mu]0. ZTest[dspec, \[Sigma]^2, \[Mu]0, \"\\!\\(\\*property\"] \
returns the value of \"\\!\\(\\*property\"."}, 
 {"ZTransform", "ZTransform[expr, n, z] gives the Z transform of expr. \
ZTransform[expr, {n1, n2, \[Ellipsis]}, {z1, z2, \[Ellipsis]}] gives the \
multidimensional Z transform of expr."}, 
 {"ZernikeR", 
  "ZernikeR[n, m, r] gives the radial Zernike polynomial Rnm(r)."}, 
 {"ZeroSymmetric", "ZeroSymmetric[{s1, \[Ellipsis], sn}] represents the \
symmetry of a zero tensor in the slots si."}, {"ZeroTest", "ZeroTest is an \
option to various linear algebra functions that gives a function to use in \
testing whether symbolic expressions should be treated as zero."}, 
 {"Zeta", "Zeta[s] gives the Riemann zeta function \[Zeta](s). Zeta[s, a] \
gives the generalized Riemann zeta function \[Zeta](s, a)."}, 
 {"ZetaZero", "ZetaZero[k] represents the k^th zero of the Riemann zeta \
function on the critical line. ZetaZero[k, t] represents the k^th zero with \
imaginary part greater than t."}, {"ZipfDistribution", "ZipfDistribution[\
\[Rho]] represents a zeta distribution with parameter \[Rho]. \
ZipfDistribution[n, \[Rho]] represents a Zipf distribution with range n."}, 
 {"ZoomCenter", "ZoomCenter is an option for DynamicImage that specifies the \
position of a zoom window within an image."}, {"ZoomFactor", "ZoomFactor is \
an option for DynamicImage that specifies the magnification factor of a \
zoom."}}
